nl,code,syntax_nl,syntax_code
"Generate origin code: Use $conn$ to query all columns in the flights table with destination as $destination$ and get all data,use for loop iterate through the query results and print all the results.","public void main ( JdbcTemplate conn , String destination ) { List information = conn . query ( "" select * from flights where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : information ) { System . out . println ( flight ) ; } }","Generate syntax code: Use $conn$ to query all columns in the flights table with destination as $destination$ and get all data,use for loop iterate through the query results and print all the results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> information = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : information ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( flight ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $db$ to connect to the database,query all columns in the trainers where result is $result$, and get all the data,return the query result in jsonify form. If an Exception occurs,the Exception information in the form of a string is returned by jsonify.","public JSONObject trainers ( DataSource db , String result ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; JSONObject json = null ; try { List result_data = conn . query ( "" select * from trainers where result= ? "" , new Object [ ] { result } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! result_data . isEmpty ( ) ) { json = new JSONObject ( new HashMap ( ) { { put ( "" result_data "" , result_data . get ( 0 ) ) ; } } ) ; } } catch ( Exception e ) { json = new JSONObject ( new HashMap ( ) { { put ( "" exception "" , e ) ; } } ) ; } return json ; }","Generate syntax code: Try to use $db$ to connect to the database,query all columns in the trainers where result is $result$, and get all the data,return the query result in jsonify form. If an Exception occurs,the Exception information in the form of a string is returned by jsonify.","<met> <mod> public </mod> type_identifier trainers <for> ( <for> type_identifier db </for> , <for> type_identifier result </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { result } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> result_data . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> result_data . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , e ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </cat> </try> <ret> return json ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the metadata table based on $id$ ) and get the first piece of data. Print the query results and return.,"public Object setupClass ( JdbcTemplate conn , String id ) { List foo = conn . query ( "" select * from metadata where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( foo . get ( 0 ) ) ; return foo . get ( 0 ) ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the metadata table based on $id$ ) and get the first piece of data. Print the query results and return.,"<met> <mod> public </mod> type_identifier setupClass <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> foo = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> foo . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> foo . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $sess$to execute a java expression ( query all the columns in the $urls$ where url is $url$ ) and get the first data.Returns the ""id"" item of the query result if there is one, otherwise return None.","public String selectUrls ( EntityManager sess , Root < Object > urls , String url ) { CriteriaBuilder cb = sess . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( urls ) . where ( cb . equal ( urls . get ( "" url "" ) , url ) ) ; List < Object > ex_url = sess . createQuery ( cq ) . getResultList ( ) ; if ( ex_url . isEmpty ( ) ) { return null ; } else { JSONObject jsonObject = JSONObject . parseObject ( ex_url . get ( 0 ) . toString ( ) ) ; return jsonObject . getString ( "" id "" ) ; } }","Generate syntax code: Use $sess$to execute a java expression ( query all the columns in the $urls$ where url is $url$ ) and get the first data.Returns the ""id"" item of the query result if there is one, otherwise return None.","<met> <mod> public </mod> type_identifier selectUrls <for> ( <for> type_identifier sess </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> urls </for> , <for> type_identifier url </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sess . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( urls ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> urls . get <arg> ( string_literal ) </arg> </met> , url ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ex_url = <met> <met> sess . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> ex_url . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> <met> ex_url . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <ret> return <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Get the database engine via $url$.Query all the columns in the person table based on $id$ and get all the data. For loop iterates through the query results and prints.,"public void getAll ( DataSource url , String id ) { JdbcTemplate con = new JdbcTemplate ( url ) ; List res = con . query ( "" select * from person where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : res ) { System . out . println ( i ) ; } }",Generate syntax code: Get the database engine via $url$.Query all the columns in the person table based on $id$ and get all the data. For loop iterates through the query results and prints.,"<met> <mod> public </mod> void_type getAll <for> ( <for> type_identifier url </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $cookies1$.Use the java expression to set the SQL statement ( query all the data in the $cookies$ table ) ,execute SQL, get all the data and return.","public List getSource ( EntityManager cookies1 , List < Object > cookies ) { CriteriaBuilder cb = cookies1 . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cookies = cookies1 . createQuery ( cq ) . getResultList ( ) ; return cookies ; }","Generate syntax code: Get the database engine and establish a connection through $cookies1$.Use the java expression to set the SQL statement ( query all the data in the $cookies$ table ) ,execute SQL, get all the data and return.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier cookies1 </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cookies </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> cookies1 . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cookies = <met> <met> cookies1 . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </ass> ; </exp> <ret> return cookies ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( get 'column' column in the 'table' table based on $type$ ) and get all the data. Then use information method to process the query results and finally return the query results.,"public List selectCols ( JdbcTemplate con , String type ) { List results = con . query ( "" select column from table where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; return results ; }",Generate syntax code: Use $conn$ to execute SQL ( get 'column' column in the 'table' table based on $type$ ) and get all the data. Then use information method to process the query results and finally return the query results.,"<met> <mod> public </mod> type_identifier selectCols <for> ( <for> type_identifier con </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Using $conn$ to execute SQL in ORM mode:Query the first piece of data information in the $passengers$ table based on $flight_id$.If the result of the query is None, return the rendered ""error.html"" page andpass ""No such flights"" to the message parameter. Otherwise, return to the rendered ""fligh.thtml"" page and pass the query result to the passengers parameter.","public String selectUrls ( EntityManager conn , Root < Object > passengers , String flight_id , Model model ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( passengers ) . where ( cb . equal ( passengers . get ( "" flight_id "" ) , flight_id ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; if ( values . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such flights "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" passengers "" , values ) ; return "" flight.html "" ; } }","Generate syntax code: Using $conn$ to execute SQL in ORM mode:Query the first piece of data information in the $passengers$ table based on $flight_id$.If the result of the query is None, return the rendered ""error.html"" page andpass ""No such flights"" to the message parameter. Otherwise, return to the rendered ""fligh.thtml"" page and pass the query result to the passengers parameter.","<met> <mod> public </mod> type_identifier selectUrls <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> passengers </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( passengers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> passengers . get <arg> ( string_literal ) </arg> </met> , flight_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> values . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , values ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $db_file$, set the parameter echo to True, and establish a connection. Execute the SQL statement ( query all the columns in the Directions table according to $directionID$ ) , get all the data, close the connection, take the query result as the value of the parameter steps and return in json format.","public JSONArray getDirectionsForDestination ( DataSource db_file , String directionID ) { JdbcTemplate connection = new JdbcTemplate ( db_file ) ; List steps = connection . query ( "" select * from Directions where directionID= ? "" , new Object [ ] { directionID } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( steps . toString ( ) ) ; }","Generate syntax code: Get the database engine through $db_file$, set the parameter echo to True, and establish a connection. Execute the SQL statement ( query all the columns in the Directions table according to $directionID$ ) , get all the data, close the connection, take the query result as the value of the parameter steps and return in json format.","<met> <mod> public </mod> type_identifier getDirectionsForDestination <for> ( <for> type_identifier db_file </for> , <for> type_identifier directionID </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_file ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> steps = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { directionID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> steps . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Query all 'year' with 'title': $title$ in the movies table via $conn$, print the query result and return.","public List yearCall ( JdbcTemplate conn , String title ) { List resultData = conn . query ( "" select year from movies where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( resultData ) ; return resultData ; }","Generate syntax code: Query all 'year' with 'title': $title$ in the movies table via $conn$, print the query result and return.","<met> <mod> public </mod> type_identifier yearCall <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> resultData = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( resultData ) </arg> </met> ; </exp> <ret> return resultData ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$: Query isbn in the books table where low_title is $title$ and low_author is $author$.If the number of query results rows is 0, render the ""error.html"" page and input ""Sorry"" in the message field.If the number of rows is not 0, input the query message, render the""books.html"" page, and pass the query result to the books parameter.""","public List user ( JdbcTemplate conn , String title , String author ) { List books = conn . query ( "" select isbn from books where low_title=? and low_author=? "" , new Object [ ] { title , author } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return null ; } else { return books ; } }","Generate syntax code: Execute SQL with $conn$: Query isbn in the books table where low_title is $title$ and low_author is $author$.If the number of query results rows is 0, render the ""error.html"" page and input ""Sorry"" in the message field.If the number of rows is not 0, input the query message, render the""books.html"" page, and pass the query result to the books parameter.""","<met> <mod> public </mod> type_identifier user <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return books ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use ORM and $session$ to execute SQL ( query all information in $cls$ table based on $id$ ) , get all the queried data and return.","public List selectRes ( EntityManager session , Root < Object > cls , String id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cls ) . where ( cb . equal ( cls . get ( "" id "" ) , id ) ) ; List < Object > values = session . createQuery ( cq ) . getResultList ( ) ; return values ; }","Generate syntax code: Use ORM and $session$ to execute SQL ( query all information in $cls$ table based on $id$ ) , get all the queried data and return.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cls </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( cls ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cls . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: If $type$ is not None, use $conn$ to execute SQL ( query the name in the master_table table based on $type$ ) and return the execution result. Otherwise, retutn None.","public List getTableNames ( JdbcTemplate conn , String type ) { if ( type != "" "" && type != null ) { List names = conn . query ( "" select name from master_table where type= ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; } else { return null ; } }","Generate syntax code: If $type$ is not None, use $conn$ to execute SQL ( query the name in the master_table table based on $type$ ) and return the execution result. Otherwise, retutn None.","<met> <mod> public </mod> type_identifier getTableNames <for> ( <for> type_identifier conn </for> , <for> type_identifier type </for> ) </for> <blo> { <if_> if <par> ( <bin> <bin> type != string_literal </bin> && <bin> type != null_literal </bin> </bin> ) </par> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return names ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set sql ( query the user_id column in the ic_user_session table according to $session_hash$ ) and use $conn$ to execute SQL. If there is no query result, return None,and finally return the obtained 0th element of the first query result.","public Object getUserIdFromSession ( JdbcTemplate conn , String session_hash ) { List res = conn . query ( "" select user_id from ic_user_session where session_hash =? "" , new Object [ ] { session_hash } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res . get ( 0 ) ; } }","Generate syntax code: Set sql ( query the user_id column in the ic_user_session table according to $session_hash$ ) and use $conn$ to execute SQL. If there is no query result, return None,and finally return the obtained 0th element of the first query result.","<met> <mod> public </mod> type_identifier getUserIdFromSession <for> ( <for> type_identifier conn </for> , <for> type_identifier session_hash </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { session_hash } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up sql ( query all the information in the db_table table based on $wildcards$ ) ,execute SQL with $conn$, get all the query results, print and return the execution results.","public List mysqlSelect ( JdbcTemplate conn , String wildcards ) { List rslt = conn . query ( "" select * from db_table where wildcards= ? "" , new Object [ ] { wildcards } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rslt ) ; return rslt ; }","Generate syntax code: Set up sql ( query all the information in the db_table table based on $wildcards$ ) ,execute SQL with $conn$, get all the query results, print and return the execution results.","<met> <mod> public </mod> type_identifier mysqlSelect <for> ( <for> type_identifier conn </for> , <for> type_identifier wildcards </for> ) </for> <blo> { <loc> type_identifier <var> rslt = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { wildcards } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( rslt ) </arg> </met> ; </exp> <ret> return rslt ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $db$.Execute SQL ( query the user_id column in the users table with the condition that $user_id$ and age is less than $age$ ) , get all the query results,use for loop to print each query result and each query result converted to dict.","public void textSql ( DataSource db , String user_id , String age ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List s = conn . query ( "" select user_id from users where user_id= ? and age < ? "" , new Object [ ] { user_id , age } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object x : s ) { System . out . println ( x ) ; } }","Generate syntax code: connect the database according to $db$.Execute SQL ( query the user_id column in the users table with the condition that $user_id$ and age is less than $age$ ) , get all the query results,use for loop to print each query result and each query result converted to dict.","<met> <mod> public </mod> void_type textSql <for> ( <for> type_identifier db </for> , <for> type_identifier user_id </for> , <for> type_identifier age </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> s = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , age } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier x : s ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( x ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If $schema_name$ is reversed, return False; otherwise use $conn$ to execute SQL ( get table_name column in all_tables table with table_name as $name$ and owner as $schema_name$ ) , get all the data and return query result.","public List selectValue ( JdbcTemplate conn , String schema_name , String name ) { if ( schema_name != "" "" && schema_name != null ) { List rs = conn . query ( "" select table_name from all_tables where table_name = ? and owner = ? "" , new Object [ ] { name , schema_name } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } else { return null ; } }","Generate syntax code: If $schema_name$ is reversed, return False; otherwise use $conn$ to execute SQL ( get table_name column in all_tables table with table_name as $name$ and owner as $schema_name$ ) , get all the data and return query result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier schema_name </for> , <for> type_identifier name </for> ) </for> <blo> { <if_> if <par> ( <bin> <bin> schema_name != string_literal </bin> && <bin> schema_name != null_literal </bin> </bin> ) </par> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , schema_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module uses post to send a request, execute SQL via $conn$: Query all columns in the reviews table based on $author_id$ and $book_isbn$, and get the first piece of data.If the query result is empty, render and return error.html; otherwise render and return review.html, where the reviews parameter is the query result.","public Object review ( JdbcTemplate conn , String author_id , String book_isbn , Model model ) { List reviews = conn . query ( "" select * from reviews where author_id= ? and book_isbn= ? "" , new Object [ ] { author_id , book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( reviews . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" reviews "" , reviews . get ( 0 ) ) ; return "" review.html "" ; } }","Generate syntax code: If the request module uses post to send a request, execute SQL via $conn$: Query all columns in the reviews table based on $author_id$ and $book_isbn$, and get the first piece of data.If the query result is empty, render and return error.html; otherwise render and return review.html, where the reviews parameter is the query result.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier conn </for> , <for> type_identifier author_id </for> , <for> type_identifier book_isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author_id , book_isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> reviews . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> reviews . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute the SQL statement ( get all the columns in the pg_stat_activity table ) through $conn$,get all the data and return the query results. Print exception information when Exception appears.","public List test ( JdbcTemplate conn ) { List records = null ; try { records = conn . query ( "" select * from pg_stat_activity "" , new BeanPropertyRowMapper ( List . class ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return records ; }","Generate syntax code: Try to execute the SQL statement ( get all the columns in the pg_stat_activity table ) through $conn$,get all the data and return the query results. Print exception information when Exception appears.","<met> <mod> public </mod> type_identifier test <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> records = null_literal </var> ; </loc> <try> try <blo> { <exp> <ass> records = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </ass> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return records ; </ret> } </blo> </met>"
Generate origin code: Set the SQL statement: Query the data in the $taglist$ table based on $code_no$ and execute SQL through $conn$ to get all the data.For loop iterates through the execution result and prints.,"public String selectUrls ( EntityManager conn , Root < Object > passengers , String flight_id , Model model ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( passengers ) . where ( cb . equal ( passengers . get ( "" flight_id "" ) , flight_id ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; if ( values . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such flights "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" passengers "" , values ) ; return "" flight.html "" ; } }",Generate syntax code: Set the SQL statement: Query the data in the $taglist$ table based on $code_no$ and execute SQL through $conn$ to get all the data.For loop iterates through the execution result and prints.,"<met> <mod> public </mod> type_identifier selectUrls <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> passengers </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( passengers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> passengers . get <arg> ( string_literal ) </arg> </met> , flight_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> values . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , values ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: In ORM mode, use $session$ to execute SQL ( query the information in the $User$ table when email is $login_email$ ) and get the first piece of data. Return True, if the query result exists. Otherwise, return False.","public Boolean getUser ( EntityManager session , Root < Object > User , String login_email ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" email "" ) , login_email ) ) ; List < Object > user = session . createQuery ( cq ) . getResultList ( ) ; if ( user . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: In ORM mode, use $session$ to execute SQL ( query the information in the $User$ table when email is $login_email$ ) and get the first piece of data. Return True, if the query result exists. Otherwise, return False.","<met> <mod> public </mod> type_identifier getUser <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier login_email </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , login_email ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", then use $db$ to execute SQL ( get the number of all columns in the reviews table with book_id as $id$ ) and get the 0th element of all the data. Finally return the three columns processed by jsonify: title, author and review_count.","public JSONObject api ( JdbcTemplate db , String id , String isbn ) { List book = db . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! book . isEmpty ( ) ) { return null ; } else { List review_count = db . query ( "" select count(*) from reviews where book_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = JSONObject . parseObject ( book . get ( 0 ) . toString ( ) ) ; JSONObject json = new JSONObject ( ) ; json . put ( "" title "" , jsonObject . getString ( "" title "" ) ) ; json . put ( "" author "" , jsonObject . getString ( "" author "" ) ) ; json . put ( "" review_count "" , JSONObject . parseObject ( review_count . get ( 0 ) . toString ( ) ) . getString ( "" count "" ) ) ; return json ; } }","Generate syntax code: Use $db$ to execute SQL ( get all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", then use $db$ to execute SQL ( get the number of all columns in the reviews table with book_id as $id$ ) and get the 0th element of all the data. Finally return the three columns processed by jsonify: title, author and review_count.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> book . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> review_count = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> <met> book . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> review_count . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return json ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( Format the output string with the format ( ) function, query the otu_id in the samples where the id of input is $input_id$）,execute the SQL statement with the $conn$ connection to get all the data and use jsonify to return the retrieved data.","public JSONArray queryPage ( JdbcTemplate conn , String input_id ) { List infor = conn . query ( "" select otu_id from samples where input_id= ? "" , new Object [ ] { input_id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( infor . toString ( ) ) ; }","Generate syntax code: Set the SQL statement ( Format the output string with the format ( ) function, query the otu_id in the samples where the id of input is $input_id$）,execute the SQL statement with the $conn$ connection to get all the data and use jsonify to return the retrieved data.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier input_id </for> ) </for> <blo> { <loc> type_identifier <var> infor = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { input_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> infor . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute SQL through $conn$ ( get all columns in the books table based on $isbn$ ) and get the first piece of data. Then convert the query results into list and return the contents of the list.,"public List getBookByIsbn ( JdbcTemplate conn , String isbn ) { List book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return book ; }",Generate syntax code: Execute SQL through $conn$ ( get all columns in the books table based on $isbn$ ) and get the first piece of data. Then convert the query results into list and return the contents of the list.,"<met> <mod> public </mod> type_identifier getBookByIsbn <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return book ; </ret> } </blo> </met>"
"Generate origin code: If the content of $database_name$ is ""sqlite"", then use $conn$ to execute SQL ( query the paper information in database based on $database_uri$ ) ,get all the data, and return the query result. Return False if $database_name$ is something else.","public List createEngine ( JdbcTemplate conn , String database_uri , String database_name ) { if ( "" sqlite "" . equals ( database_name ) ) { List papers = conn . query ( "" select paper from database_name where database_uri= ? "" , new Object [ ] { database_uri } , new BeanPropertyRowMapper ( List . class ) ) ; return papers ; } else { return null ; } }","Generate syntax code: If the content of $database_name$ is ""sqlite"", then use $conn$ to execute SQL ( query the paper information in database based on $database_uri$ ) ,get all the data, and return the query result. Return False if $database_name$ is something else.","<met> <mod> public </mod> type_identifier createEngine <for> ( <for> type_identifier conn </for> , <for> type_identifier database_uri </for> , <for> type_identifier database_name </for> ) </for> <blo> { <if_> if <par> ( <met> string_literal . equals <arg> ( database_name ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> papers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { database_uri } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return papers ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Creating a database engine with $db_string$. Try to set up SQL ( query all columns in tb_user where senha is $senha$ ) ,execute SQL to get all the data and return it. If an Exception error occurs, the specific Exception information is printed and the query result is assigned to False. Finally, the query results are returned.","public List selectValue ( DataSource db_string , String senha ) { JdbcTemplate conn = new JdbcTemplate ( db_string ) ; try { List res = conn . query ( "" select * from tb_user where senha = ? "" , new Object [ ] { senha } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Creating a database engine with $db_string$. Try to set up SQL ( query all columns in tb_user where senha is $senha$ ) ,execute SQL to get all the data and return it. If an Exception error occurs, the specific Exception information is printed and the query result is assigned to False. Finally, the query results are returned.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db_string </for> , <for> type_identifier senha </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { senha } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use an java expression to set SQL ( query the values in the $testtable$ table based on $id$ ) .Use $conn$ to execute the SQL and get all the data. Set the assertion to determine that the query data length is greater than 0.,"public List testInserted ( EntityManager conn , Root < Object > testtable , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( testtable ) . where ( cb . equal ( testtable . get ( "" id "" ) , id ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; assert result . size ( ) > 0 ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }",Generate syntax code: Use an java expression to set SQL ( query the values in the $testtable$ table based on $id$ ) .Use $conn$ to execute the SQL and get all the data. Set the assertion to determine that the query data length is greater than 0.,"<met> <mod> public </mod> type_identifier testInserted <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testtable </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( testtable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> testtable . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $e$ to connect to the database and execute the SQL ( get all the columns in the ontime_data table processed by the counting method based on $Origin$ ) and get all the data. Finally return the query results.,"public List selectCount ( DataSource e , String Origin ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List result = conn . query ( "" select count(*) from ontime_data where Origin = ? "" , new Object [ ] { Origin } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }",Generate syntax code: Use $e$ to connect to the database and execute the SQL ( get all the columns in the ontime_data table processed by the counting method based on $Origin$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier selectCount <for> ( <for> type_identifier e </for> , <for> type_identifier Origin </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Origin } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the name column in the tb1 table based on $value$ ) and get all the data. Then set the assertion that the length of the query result is greater than 0. Finally return the 0th element of the query result.,"public List testAsyncCursorServerSide ( JdbcTemplate conn , String value ) { List names = conn . query ( "" select name from tb1 where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; assert names . size ( ) > 0 ; if ( names . isEmpty ( ) ) { return null ; } else { return names ; } }",Generate syntax code: Use $conn$ to execute the SQL ( get the name column in the tb1 table based on $value$ ) and get all the data. Then set the assertion that the length of the query result is greater than 0. Finally return the 0th element of the query result.,"<met> <mod> public </mod> type_identifier testAsyncCursorServerSide <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> names . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <if_> if <par> ( <met> names . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return names ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL ( query all columns in the reviews table based on $isbn$ ) and get all the data. If the query result is empty, use jsonify to return ""Erro, reviews not found""; otherwise, use jsonify to return all the results of the query.","public JSONArray isbnApi ( JdbcTemplate conn , String isbn ) { List values = conn . query ( "" select * from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( values . isEmpty ( ) ) { JSONArray jsonArray = new JSONArray ( ) ; Object put = new JSONObject ( ) . put ( "" Erro "" , "" reviews not found "" ) ; jsonArray . add ( put ) ; return jsonArray ; } else { return JSONObject . parseArray ( values . toString ( ) ) ; } }","Generate syntax code: Use the $conn$ connection to execute the SQL ( query all columns in the reviews table based on $isbn$ ) and get all the data. If the query result is empty, use jsonify to return ""Erro, reviews not found""; otherwise, use jsonify to return all the results of the query.","<met> <mod> public </mod> type_identifier isbnApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> values . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> jsonArray = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> put = <met> <obj> new type_identifier <arg> ( ) </arg> </obj> . put <arg> ( string_literal , string_literal ) </arg> </met> </var> ; </loc> <exp> <met> jsonArray . add <arg> ( put ) </arg> </met> ; </exp> <ret> return jsonArray ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseArray <arg> ( <met> values . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the user table according to $name$ ) ,get all the query results, use for loop to traverse all obtained query results, print the format string, that is the id and name fields of each piece of data, and separate them with '|'.","public void selectDb ( JdbcTemplate conn , String name ) { List users = conn . query ( "" select * from user where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object user : users ) { JSONObject jsonObject = JSONObject . parseObject ( user . toString ( ) ) ; System . out . println ( jsonObject . getString ( "" id "" ) + "" | "" + jsonObject . getString ( "" name "" ) ) ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the user table according to $name$ ) ,get all the query results, use for loop to traverse all obtained query results, print the format string, that is the id and name fields of each piece of data, and separate them with '|'.","<met> <mod> public </mod> void_type selectDb <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier user : users ) <blo> { <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> user . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> + string_literal </bin> + <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Step 1: Execute SQL through $db$: Query the 0th element of the first 'title' in the books table according to $isbn$; step 2: Executes SQL through $db$: Query the 0th element of the first 'author' in the books table according to $isbn$; s tep 3: Executes SQL through $db$: Query the 0th element of the first 'year' in the books table according to $isbn$. Render and return ""book.html"", where the name parameter is the query result of step1, the author parameter is the query result of step2, and the published parameter is the query result of step3.","public Map book ( JdbcTemplate conn , String isbn ) { List name = conn . query ( "" select title from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List author = conn . query ( "" select author from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List published = conn . query ( "" select year from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json1 = JSONObject . parseObject ( name . get ( 0 ) . toString ( ) ) ; JSONObject json2 = JSONObject . parseObject ( author . get ( 0 ) . toString ( ) ) ; JSONObject json3 = JSONObject . parseObject ( published . get ( 0 ) . toString ( ) ) ; Map map = new HashMap ( ) ; map . put ( "" name "" , json1 . getString ( "" name "" ) ) ; map . put ( "" author "" , json2 . getString ( "" author "" ) ) ; map . put ( "" published "" , json3 . getString ( "" published "" ) ) ; return map ; }","Generate syntax code: Step 1: Execute SQL through $db$: Query the 0th element of the first 'title' in the books table according to $isbn$; step 2: Executes SQL through $db$: Query the 0th element of the first 'author' in the books table according to $isbn$; s tep 3: Executes SQL through $db$: Query the 0th element of the first 'year' in the books table according to $isbn$. Render and return ""book.html"", where the name parameter is the query result of step1, the author parameter is the query result of step2, and the published parameter is the query result of step3.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> name = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> author = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> published = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json1 = <met> JSONObject . parseObject <arg> ( <met> <met> name . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json2 = <met> JSONObject . parseObject <arg> ( <met> <met> author . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json3 = <met> JSONObject . parseObject <arg> ( <met> <met> published . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> map = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> map . put <arg> ( string_literal , <met> json1 . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> map . put <arg> ( string_literal , <met> json2 . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> map . put <arg> ( string_literal , <met> json3 . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return map ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Execute SQL ( query the manufacturer column in the items table according to $name$ ) and get all the query results. If the query results are empty, return None; otherwise, convert the query results to dict and return.","public List findBeers ( JdbcTemplate engine , String name ) { List result = engine . query ( "" select manufacturer from items where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: connect the database according to $engine$. Execute SQL ( query the manufacturer column in the items table according to $name$ ) and get all the query results. If the query results are empty, return None; otherwise, convert the query results to dict and return.","<met> <mod> public </mod> type_identifier findBeers <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use java expressions to set up SQL: Query everything in the $users$ table based on $username$. Use $conn$ to execute SQL and get the first piece of data. Finally, return the query result.","public Object logout ( EntityManager conn , Root < Object > users , String username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" username "" ) , username ) ) ; List < Object > user = conn . createQuery ( cq ) . getResultList ( ) ; return user ; }","Generate syntax code: Use java expressions to set up SQL: Query everything in the $users$ table based on $username$. Use $conn$ to execute SQL and get the first piece of data. Finally, return the query result.","<met> <mod> public </mod> type_identifier logout <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return user ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $db$ ( get the name column in the contact_mode table according to $id$ ) , and use for loop to print every item f all data.","public void getModes ( JdbcTemplate conn , String id ) { List modes = conn . query ( "" select name from contact_mode where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object mode : modes ) { System . out . println ( mode ) ; } }","Generate syntax code: Execute SQL with $db$ ( get the name column in the contact_mode table according to $id$ ) , and use for loop to print every item f all data.","<met> <mod> public </mod> void_type getModes <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> modes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier mode : modes ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( mode ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set sql ( query all columns in the $User$ table according to $KartenID$ ) , use $engine$ to execute the java expression, get all the data and close the connection. If the query data length is not 0, output success and return True; otherwise, output fail and return False.","public boolean authenticateRfid ( EntityManager engine , Root < Object > User , String KartenID ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" url "" ) , KartenID ) ) ; List < Object > mou = engine . createQuery ( cq ) . getResultList ( ) ; if ( mou . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; return false ; } else { System . out . println ( "" success "" ) ; return true ; } }","Generate syntax code: Set sql ( query all columns in the $User$ table according to $KartenID$ ) , use $engine$ to execute the java expression, get all the data and close the connection. If the query data length is not 0, output success and return True; otherwise, output fail and return False.","<met> <mod> public </mod> boolean_type authenticateRfid <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier KartenID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , KartenID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> mou = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> mou . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in the assignments table where course_id is $classid$ and student_id is $studentid$ ) . Execute SQL with $conn$ and get all the data. Convert each item in the query results to the dic type and store the results as values for the records in the dictionary. Finally, return the serialized dictionary.","public JSONArray getRecords ( JdbcTemplate conn , String classid , String studentid ) { List data = conn . query ( "" select * from assignments where course_id=? and student_id = ? "" , new Object [ ] { classid , studentid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }","Generate syntax code: Set SQL ( query all columns in the assignments table where course_id is $classid$ and student_id is $studentid$ ) . Execute SQL with $conn$ and get all the data. Convert each item in the query results to the dic type and store the results as values for the records in the dictionary. Finally, return the serialized dictionary.","<met> <mod> public </mod> type_identifier getRecords <for> ( <for> type_identifier conn </for> , <for> type_identifier classid </for> , <for> type_identifier studentid </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { classid , studentid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""GET"",return the rendered 'index.html' page.If the request method is ""POST"",set the SQL ( query the isbn column in the booktable table based on $bookname$ ) , use $conn$ to execute the SQL and get all the query results. Return the rendered'index.html' page with the books parameter as the query result.","public String index ( HttpRequest request , JdbcTemplate conn , String bookname , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select isbn from booktable where bookname = ? "" , new Object [ ] { bookname } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" index.html "" ; } else { return "" index.html "" ; } }","Generate syntax code: If the request method is ""GET"",return the rendered 'index.html' page.If the request method is ""POST"",set the SQL ( query the isbn column in the booktable table based on $bookname$ ) , use $conn$ to execute the SQL and get all the query results. Return the rendered'index.html' page with the books parameter as the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier bookname </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bookname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) , get all the query results, use for loopto traverse all the query results obtained, print the name field of each piece of date. If the length of the query result is 0, print ""No passengers. and return 'empty'; otherwise, return the query result.","public List main ( JdbcTemplate conn , String flight_id ) { List passengers = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object passenger : passengers ) { System . out . println ( JSONObject . parseObject ( passenger . toString ( ) ) . getString ( "" name "" ) ) ; } if ( passengers . isEmpty ( ) ) { System . out . println ( "" No passengers. "" ) ; return null ; } else { return passengers ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) , get all the query results, use for loopto traverse all the query results obtained, print the name field of each piece of date. If the length of the query result is 0, print ""No passengers. and return 'empty'; otherwise, return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> passengers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier passenger : passengers ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> passenger . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <met> passengers . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return passengers ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in users based on $image_url$ ) , get all the data, and finally return the obtained result data.","public List insertImageUrl ( JdbcTemplate conn , String image_url ) { List result = conn . query ( "" select * from users where image_url = ? "" , new Object [ ] { image_url } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in users based on $image_url$ ) , get all the data, and finally return the obtained result data.","<met> <mod> public </mod> type_identifier insertImageUrl <for> ( <for> type_identifier conn </for> , <for> type_identifier image_url </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { image_url } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Execute SQL via $conn$: Query all schema data in 'table'. For loop iterates through all query results and prints and returns all query results,"public List getQuery ( JdbcTemplate conn ) { List rows = conn . query ( "" select schema from table "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { System . out . println ( row ) ; } return rows ; }",Generate syntax code: Execute SQL via $conn$: Query all schema data in 'table'. For loop iterates through all query results and prints and returns all query results,"<met> <mod> public </mod> type_identifier getQuery <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Open the books.csv file and read it.Iterate the contents of the file through the next ( ) method. Use for loop traverse the contents of the read file,query all the columns in the books table where isbn is $isbn$ through $conn$, and get all the data. Set the assertion to determine that the returned resultis not empty list, and return the query result.","public List main ( JdbcTemplate conn ) { List list = new ArrayList ( ) ; String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String isbn = sc . nextLine ( ) ; List values = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! values . isEmpty ( ) ) { System . out . println ( values ) ; for ( Object value : values ) { list . add ( value ) ; } } } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } return list ; }","Generate syntax code: Open the books.csv file and read it.Iterate the contents of the file through the next ( ) method. Use for loop traverse the contents of the read file,query all the columns in the books table where isbn is $isbn$ through $conn$, and get all the data. Set the assertion to determine that the returned resultis not empty list, and return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> isbn = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> values . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( values ) </arg> </met> ; </exp> <enh> for ( type_identifier value : values ) <blo> { <exp> <met> list . add <arg> ( value ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: If $isbn$ is empty, return False. Execute the SQL statement through $con$,which reads: Query the first 'author'in books table beased on the $isbn$,print the query result and return it.","public List bookApi ( JdbcTemplate con , String isbn ) { if ( "" "" . equals ( isbn ) || isbn == null ) { return null ; } else { List data = con . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( data ) ; return data ; } }","Generate syntax code: If $isbn$ is empty, return False. Execute the SQL statement through $con$,which reads: Query the first 'author'in books table beased on the $isbn$,print the query result and return it.","<met> <mod> public </mod> type_identifier bookApi <for> ( <for> type_identifier con </for> , <for> type_identifier isbn </for> ) </for> <blo> { <if_> if <par> ( <bin> <met> string_literal . equals <arg> ( isbn ) </arg> </met> || <bin> isbn == null_literal </bin> </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> data = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( data ) </arg> </met> ; </exp> <ret> return data ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Set the SQL statement: Query the is_admin in the users table through $username$. Use $conn$ to execute SQL to get all the data and return.,"public List getPlayerForUsername ( JdbcTemplate con , String username ) { List result = con . query ( "" select is_admin from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }",Generate syntax code: Set the SQL statement: Query the is_admin in the users table through $username$. Use $conn$ to execute SQL to get all the data and return.,"<met> <mod> public </mod> type_identifier getPlayerForUsername <for> ( <for> type_identifier con </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Set SQL: query destination information in the flights where origin is $origin$ and duration is $duration$. Use $conn$ to execute the SQL and get the first data. Return the rendered added.html page and passe the query result to the RES parameter.,"public String getFlight ( JdbcTemplate conn , String origin , String duration , Model model ) { List res = conn . query ( "" select destination from flights where origin= ? and duration= ? "" , new Object [ ] { origin , duration } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" addded.html "" ; }",Generate syntax code: Set SQL: query destination information in the flights where origin is $origin$ and duration is $duration$. Use $conn$ to execute the SQL and get the first data. Return the rendered added.html page and passe the query result to the RES parameter.,"<met> <mod> public </mod> type_identifier getFlight <for> ( <for> type_identifier conn </for> , <for> type_identifier origin </for> , <for> type_identifier duration </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin , duration } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine via $db_conn_uri_default$ and establish a connection. Execute the SQL statement ( get the first uri in the database based on $name$ ) , close the database connection, and return all the obtained data.","public List getdata ( DataSource db_conn_uri_default , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_conn_uri_default ) ; List rec = conn . query ( "" select uri from database where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return rec ; }","Generate syntax code: Get the database engine via $db_conn_uri_default$ and establish a connection. Execute the SQL statement ( get the first uri in the database based on $name$ ) , close the database connection, and return all the obtained data.","<met> <mod> public </mod> type_identifier getdata <for> ( <for> type_identifier db_conn_uri_default </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_conn_uri_default ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rec = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rec ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $call_center$, where the echo parameter is set to True, and a connection is established. Execute the SQL statement ( query all the columns in the companies table according to $name_company$ ) , get all the data, use for loop to traverse all obtained query results, insert the 0th element of each piece of data into a list, and return the 0th element of the list.","public List getCompanyIdByName ( DataSource db_conn_uri_default , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_conn_uri_default ) ; List result = conn . query ( "" select * from companies where name_company= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List ids = new ArrayList ( ) ; for ( Object i : result ) { ids . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return ids ; }","Generate syntax code: Get the database engine through $call_center$, where the echo parameter is set to True, and a connection is established. Execute the SQL statement ( query all the columns in the companies table according to $name_company$ ) , get all the data, use for loop to traverse all obtained query results, insert the 0th element of each piece of data into a list, and return the 0th element of the list.","<met> <mod> public </mod> type_identifier getCompanyIdByName <for> ( <for> type_identifier db_conn_uri_default </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_conn_uri_default ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ids = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : result ) <blo> { <exp> <met> ids . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ids ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the average_score in the books table through $isbn$, use $conn$ to execute SQL to get all the data, and use jsonify to return the obtained data.","public JSONArray isbnCheck ( JdbcTemplate conn , String isbn ) { List api_return = conn . query ( "" select average_score from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( api_return . toString ( ) ) ; }","Generate syntax code: Set the SQL statement: Query the average_score in the books table through $isbn$, use $conn$ to execute SQL to get all the data, and use jsonify to return the obtained data.","<met> <mod> public </mod> type_identifier isbnCheck <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> api_return = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> api_return . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the id column in the POLYNOME_CORRECTION table according to $name$ ) , get all the data, then use fr loop to convert the 0th element of each item of the qu ery result into list, and finally return the list content.","public List getIndetify ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select id from polynome_correction where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List instruments = new ArrayList ( ) ; for ( Object ele : result ) { instruments . add ( JSONObject . parseObject ( ele . toString ( ) ) . get ( 0 ) ) ; } return instruments ; }","Generate syntax code: Execute SQL with $conn$ ( get the id column in the POLYNOME_CORRECTION table according to $name$ ) , get all the data, then use fr loop to convert the 0th element of each item of the qu ery result into list, and finally return the list content.","<met> <mod> public </mod> type_identifier getIndetify <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> instruments = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier ele : result ) <blo> { <exp> <met> instruments . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> ele . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return instruments ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $stock_base$.Set the SQL statement to: Query all columns in the mistakes table based on $tick$, e xecute the SQL statement to get all the data and return all the queried information.","public List getMistakes ( DataSource stock_base , String tick ) { JdbcTemplate conn = new JdbcTemplate ( stock_base ) ; List item = conn . query ( "" select * from mistakes where tick = ? "" , new Object [ ] { tick } , new BeanPropertyRowMapper ( List . class ) ) ; return item ; }","Generate syntax code: Get the database engine through $stock_base$.Set the SQL statement to: Query all columns in the mistakes table based on $tick$, e xecute the SQL statement to get all the data and return all the queried information.","<met> <mod> public </mod> type_identifier getMistakes <for> ( <for> type_identifier stock_base </for> , <for> type_identifier tick </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( stock_base ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> item = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tick } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return item ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $QuestionAnswer$ table based on $answer$ ) . Execute SQL with $con$, get all the data, use for loop to traverse the 'question' field of each query result, store it as list, and return the list.","public List questionsTo ( EntityManager con , Root < Object > QuestionAnswer , String answer ) { CriteriaBuilder cb = con . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( QuestionAnswer ) . where ( cb . equal ( QuestionAnswer . get ( "" answer "" ) , answer ) ) ; List < Object > clause = con . createQuery ( cq ) . getResultList ( ) ; List res = new ArrayList ( ) ; for ( Object row : clause ) { res . add ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" question "" ) ) ; } return res ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $QuestionAnswer$ table based on $answer$ ) . Execute SQL with $con$, get all the data, use for loop to traverse the 'question' field of each query result, store it as list, and return the list.","<met> <mod> public </mod> type_identifier questionsTo <for> ( <for> type_identifier con </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> QuestionAnswer </for> , <for> type_identifier answer </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> con . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( QuestionAnswer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> QuestionAnswer . get <arg> ( string_literal ) </arg> </met> , answer ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> clause = <met> <met> con . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : clause ) <blo> { <exp> <met> res . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table based on $id$ ) ,get all the query results, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and output the list.","public List index ( JdbcTemplate conn , String id ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List st = new ArrayList ( ) ; for ( Object i : flights ) { st . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } System . out . println ( st ) ; return st ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table based on $id$ ) ,get all the query results, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and output the list.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> st = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : flights ) <blo> { <exp> <met> st . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> <fie> System . out </fie> . println <arg> ( st ) </arg> </met> ; </exp> <ret> return st ; </ret> } </blo> </met>"
"Generate origin code: If the request method is POST, execute the following code:set SQL ( query all columns in the users table where name is $name$ and password is $pws$ ) ;execute SQL with $db$ and get all the data; if the query data exists, redirect and url_for to ""search"". Otherwise, if the request method is GET, the rendered ""login.html"" is returned.","public String checkLogin ( HttpRequest request , JdbcTemplate db , String name , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List row = db . query ( "" select * from users where name = ? and password = ? "" , new Object [ ] { name , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! row . isEmpty ( ) ) { return "" search "" ; } else { return "" login.html "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request method is POST, execute the following code:set SQL ( query all columns in the users table where name is $name$ and password is $pws$ ) ;execute SQL with $db$ and get all the data; if the query data exists, redirect and url_for to ""search"". Otherwise, if the request method is GET, the rendered ""login.html"" is returned.","<met> <mod> public </mod> type_identifier checkLogin <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier name </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> row = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> row . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine using $email_settings$, execute the SQL ( get the INDEX column in the akamaiCache where number is $number$ ) ,get all the data, and return the query results.","public List dropDb ( DataSource email_settings , String number ) { JdbcTemplate engine = new JdbcTemplate ( email_settings ) ; List res = engine . query ( "" select INDEX from akamaiCache where number= ? "" , new Object [ ] { number } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine using $email_settings$, execute the SQL ( get the INDEX column in the akamaiCache where number is $number$ ) ,get all the data, and return the query results.","<met> <mod> public </mod> type_identifier dropDb <for> ( <for> type_identifier email_settings </for> , <for> type_identifier number </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( email_settings ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { number } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request method of request is ""POST"" , execute the following code: Use $conn$ to get the cursor; use the cursor to execute SQL ( query all columns in the book table based on $title$ ) and get all the data; close the cursor; if the list type of the query result is not None, return the rendered 'search_results.html',and pass the query result to the books parameter.","public String resultTitle ( HttpRequest request , JdbcTemplate conn , String title , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select * from book where title= ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! books . isEmpty ( ) ) { model . addAttribute ( "" books "" , books ) ; return "" search_results.html "" ; } else { return null ; } } else { return null ; } }","Generate syntax code: If the request method of request is ""POST"" , execute the following code: Use $conn$ to get the cursor; use the cursor to execute SQL ( query all columns in the book table based on $title$ ) and get all the data; close the cursor; if the list type of the query result is not None, return the rendered 'search_results.html',and pass the query result to the books parameter.","<met> <mod> public </mod> type_identifier resultTitle <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> books . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect to the database using $db$,execute the SQL statement ( query all columns in query_users ) ,and get all the data. Set the assertion that the length ofthe return result is not equal to 0. Close the databaseconnection and finally return all data.","public List getUser ( DataSource db ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List user_results = engine . query ( "" select * from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_results . isEmpty ( ) ) { return null ; } else { return user_results ; } }","Generate syntax code: Connect to the database using $db$,execute the SQL statement ( query all columns in query_users ) ,and get all the data. Set the assertion that the length ofthe return result is not equal to 0. Close the databaseconnection and finally return all data.","<met> <mod> public </mod> type_identifier getUser <for> ( <for> type_identifier db </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> user_results = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user_results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return user_results ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Try using $session$ to execute the java expression SQL ( query the name in the $E_product$ by where id_product is $id_product$ ) and get the first data. Close $session$ and return the query result.Return False if an exception occurs.,"public Object getProduct ( EntityManager session , Root < Object > E_product , String id_product ) { try { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( E_product ) . where ( cb . equal ( E_product . get ( "" id_product "" ) , id_product ) ) ; List < Object > product = session . createQuery ( cq ) . getResultList ( ) ; return product . get ( 0 ) ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try using $session$ to execute the java expression SQL ( query the name in the $E_product$ by where id_product is $id_product$ ) and get the first data. Close $session$ and return the query result.Return False if an exception occurs.,"<met> <mod> public </mod> type_identifier getProduct <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> E_product </for> , <for> type_identifier id_product </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( E_product ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> E_product . get <arg> ( string_literal ) </arg> </met> , id_product ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> product = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> product . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If label is not empty, use $conn$ to execute SQL ( query all columns in the 'data_table' table based on $label$ ) , get all the query results, print them and return.","public List getPage ( JdbcTemplate conn , String label ) { List comment = conn . query ( "" select * from data_table where label=? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( comment ) ; return comment ; }","Generate syntax code: If label is not empty, use $conn$ to execute SQL ( query all columns in the 'data_table' table based on $label$ ) , get all the query results, print them and return.","<met> <mod> public </mod> type_identifier getPage <for> ( <for> type_identifier conn </for> , <for> type_identifier label </for> ) </for> <blo> { <loc> type_identifier <var> comment = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { label } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( comment ) </arg> </met> ; </exp> <ret> return comment ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the password column in the manager table based on $username$ ) , execute SQL based on $conn$ and get all the query results. if the length of the query result is greater than 0,return the data. Otherwise print 'Username does not exists, please signup' and return '/signup'.","public Object loginC ( JdbcTemplate conn , String username ) { List passwords = conn . query ( "" select password from manager where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passwords . isEmpty ( ) ) { System . out . println ( "" Username does not exists, please sign up "" ) ; return "" /signup "" ; } else { return passwords ; } }","Generate syntax code: Set SQL ( query the password column in the manager table based on $username$ ) , execute SQL based on $conn$ and get all the query results. if the length of the query result is greater than 0,return the data. Otherwise print 'Username does not exists, please signup' and return '/signup'.","<met> <mod> public </mod> type_identifier loginC <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> passwords = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passwords . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return passwords ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $db$ to execute SQL ( query all columns in the usuarios table based on $usuario$ and $password$ ) , get the first row of data, close the connection, and return the query results.","public Object login ( HttpRequest request , JdbcTemplate db , String usuario , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List cuenta = db . query ( "" select * from usuarios where usuario=? and password=? "" , new Object [ ] { usuario , password } , new BeanPropertyRowMapper ( List . class ) ) ; return cuenta . get ( 0 ) ; } else { return null ; } }","Generate syntax code: If the request method is ""POST"", use $db$ to execute SQL ( query all columns in the usuarios table based on $usuario$ and $password$ ) , get the first row of data, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier usuario </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> cuenta = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { usuario , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> cuenta . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request in a GET method,return the rendered ""login.html"". If the request module sends the request in a POST method, use $conn$ to execute SQL ( query all columns in the users table through $username$ ) andget the first piece of data. If the execution result is empty, render and return ""error.html""; otherwise, use redirect to return ""/ search"".","public Object search ( HttpRequest request , JdbcTemplate conn , String username , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user . isEmpty ( ) ) { return "" /search "" ; } else { return "" error.html "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request module sends the request in a GET method,return the rendered ""login.html"". If the request module sends the request in a POST method, use $conn$ to execute SQL ( query all columns in the users table through $username$ ) andget the first piece of data. If the execution result is empty, render and return ""error.html""; otherwise, use redirect to return ""/ search"".","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the method of the string format to set SQL ( query all columns in the teams table when rownum is $limit$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the query result.","public Object getTeams ( JdbcTemplate conn , String limit ) { List result = conn . query ( "" select * from teams where rownum < ? "" , new Object [ ] { limit } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use the method of the string format to set SQL ( query all columns in the teams table when rownum is $limit$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier getTeams <for> ( <for> type_identifier conn </for> , <for> type_identifier limit </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { limit } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: If the requested method is ""GET"", then use $db$ to execute the SQL ( get the title column in the books table based on $isbn$ ) , get the first piece of data and return the rendered ""review.html"" "", where the isbn parameter is the $isbn$ column and the titile parameter is the title column of the query results; otherwise return False.","public Object review ( HttpRequest request , JdbcTemplate db , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List row = db . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" isbn "" , isbn ) ; model . addAttribute ( "" title "" , JSONObject . parseObject ( row . get ( 0 ) . toString ( ) ) . get ( "" title "" ) ) ; return "" review.html "" ; } else { return false ; } }","Generate syntax code: If the requested method is ""GET"", then use $db$ to execute the SQL ( get the title column in the books table based on $isbn$ ) , get the first piece of data and return the rendered ""review.html"" "", where the isbn parameter is the $isbn$ column and the titile parameter is the title column of the query results; otherwise return False.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> row = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , isbn ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> row . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL ( query the email_id in the sent_backfill where the id of template is $template_id$ and the address of email is $email_address$ ) with $conn$ and get all the data. Finally, the query results are returned.","public Object queryRecord ( JdbcTemplate conn , String template_id , String email_address ) { List record = conn . query ( "" select email_id from sent_backfill where template_id=? and email_address=? "" , new Object [ ] { template_id , email_address } , new BeanPropertyRowMapper ( List . class ) ) ; return record ; }","Generate syntax code: Execute SQL ( query the email_id in the sent_backfill where the id of template is $template_id$ and the address of email is $email_address$ ) with $conn$ and get all the data. Finally, the query results are returned.","<met> <mod> public </mod> type_identifier queryRecord <for> ( <for> type_identifier conn </for> , <for> type_identifier template_id </for> , <for> type_identifier email_address </for> ) </for> <blo> { <loc> type_identifier <var> record = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { template_id , email_address } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return record ; </ret> } </blo> </met>"
"Generate origin code: Create a database engine based on $uri$.Execute SQL ( query all columns in 'table' table based on $date$, $market$ and $schema$ ) ,get all the data, and finally return the query results.","public Object queryRecord ( DataSource uri , String date , String market , String schema ) { JdbcTemplate conn = new JdbcTemplate ( uri ) ; List result = conn . query ( "" select * from table where date = ? and market = ? and schema = ? "" , new Object [ ] { date , market , schema } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Create a database engine based on $uri$.Execute SQL ( query all columns in 'table' table based on $date$, $market$ and $schema$ ) ,get all the data, and finally return the query results.","<met> <mod> public </mod> type_identifier queryRecord <for> ( <for> type_identifier uri </for> , <for> type_identifier date </for> , <for> type_identifier market </for> , <for> type_identifier schema </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date , market , schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL through $conn$ ( get the isbn column in the 'books_table'table based on $title$ ) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"public List selectIsbn ( JdbcTemplate conn , String title ) { List results = conn . query ( "" select isbn from books_table where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; List isbns = new ArrayList ( ) ; for ( Object isbn : results ) { isbns . add ( isbn ) ; } return isbns ; }",Generate syntax code: Execute the SQL through $conn$ ( get the isbn column in the 'books_table'table based on $title$ ) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"<met> <mod> public </mod> type_identifier selectIsbn <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> isbns = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier isbn : results ) <blo> { <exp> <met> isbns . add <arg> ( isbn ) </arg> </met> ; </exp> } </blo> </enh> <ret> return isbns ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends a request by post,use the $conn$ connection to execute the SQL ( query the columns in users through $email$ and $psd$ and get the first piece of data. If the query result is empty,return False; otherwise return the query result.","public Object login ( HttpRequest request , JdbcTemplate conn , String email , String psd ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select * from users where email = ? and psd = ? "" , new Object [ ] { email , psd } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return false ; } else { return result . get ( 0 ) ; } } else { return false ; } }","Generate syntax code: If the request module sends a request by post,use the $conn$ connection to execute the SQL ( query the columns in users through $email$ and $psd$ and get the first piece of data. If the query result is empty,return False; otherwise return the query result.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> , <for> type_identifier psd </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email , psd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the baseDomain column in the $cookies$ table based on 'client_mac': $mac$ ) . Execute SQL with $conn$ and get all the data, and use for loop to iterate throughit and store the 0th element of each query result as list. Finally use for loop to print the list.","public void getSource ( EntityManager conn , Root < Object > cookies , String mac ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cookies ) . where ( cb . equal ( cookies . get ( "" client_mac "" ) , mac ) ) ; List < Object > domains = conn . createQuery ( cq ) . getResultList ( ) ; List results = new ArrayList ( ) ; for ( Object domain : domains ) { results . add ( JSONObject . parseObject ( domain . toString ( ) ) . get ( 0 ) ) ; } for ( Object cookie : results ) { System . out . println ( cookie ) ; } }","Generate syntax code: Set SQL based on the java expression ( query the baseDomain column in the $cookies$ table based on 'client_mac': $mac$ ) . Execute SQL with $conn$ and get all the data, and use for loop to iterate throughit and store the 0th element of each query result as list. Finally use for loop to print the list.","<met> <mod> public </mod> void_type getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cookies </for> , <for> type_identifier mac </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( cookies ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cookies . get <arg> ( string_literal ) </arg> </met> , mac ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> domains = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier domain : domains ) <blo> { <exp> <met> results . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> domain . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <enh> for ( type_identifier cookie : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( cookie ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get the word column with 'id': $pkid$ in $words$ table ) ,get the first row of data, and finally return the 0th element of the query result.","public Object getEmail ( EntityManager conn , Root < Object > words , String pkid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( words ) . where ( cb . equal ( words . get ( "" id "" ) , pkid ) ) ; List < Object > found_word = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( found_word . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get the word column with 'id': $pkid$ in $words$ table ) ,get the first row of data, and finally return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getEmail <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> words </for> , <for> type_identifier pkid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( words ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> words . get <arg> ( string_literal ) </arg> </met> , pkid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> found_word = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> found_word . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement: Get all the name in the $contract_table$ through $conId$, use the $conn$ to execute the SQL statement to get the data, convert each item of the query result to dict, store it as list, and return.","public List < Object > getInfo ( EntityManager conn , Root < Object > contract_table , String conId ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( contract_table ) . where ( cb . equal ( contract_table . get ( "" conId "" ) , conId ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Use the java expression to set the SQL statement: Get all the name in the $contract_table$ through $conId$, use the $conn$ to execute the SQL statement to get the data, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getInfo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> contract_table </for> , <for> type_identifier conId </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( contract_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> contract_table . get <arg> ( string_literal ) </arg> </met> , conId ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $TimeTable$. Execute the SQL statement ( query the first piece of data in the time column of the Comments table based on $summary$ ) and return the query results.,"public List dbConnect ( DataSource TimeTable , String summary ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List laten = engine . query ( "" select time from comments where summary = ? "" , new Object [ ] { summary } , new BeanPropertyRowMapper ( List . class ) ) ; return laten ; }",Generate syntax code: Get the database engine and establish a connection through $TimeTable$. Execute the SQL statement ( query the first piece of data in the time column of the Comments table based on $summary$ ) and return the query results.,"<met> <mod> public </mod> type_identifier dbConnect <for> ( <for> type_identifier TimeTable </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( TimeTable ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> laten = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { summary } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return laten ; </ret> } </blo> </met>"
"Generate origin code: If the requested method is ""GET"", return ""search.html"" after rendering, otherwise execute SQL with $conn$ ( to GET all the information in the books where isbn is $isbn$ ) and GET all the data, return ""search-results.html"" after rendering,where the results parameter is the result of the query.","public String index ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" search.html "" ; } else { List results = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" search-results.html "" ; } }","Generate syntax code: If the requested method is ""GET"", return ""search.html"" after rendering, otherwise execute SQL with $conn$ ( to GET all the information in the books where isbn is $isbn$ ) and GET all the data, return ""search-results.html"" after rendering,where the results parameter is the result of the query.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the format string matching method to set the sql ( query the table_name column in the 'tables' table based on $schema$ ) , use $conn$ to get a cursor and execute SQL, use for loop to traverse all the obtained query result, insert the 0th element of each piece of data into a list, and return the list.","public List getSchema ( JdbcTemplate conn , String schema ) { List cursor = conn . query ( "" select table_name from tables where schema= ? "" , new Object [ ] { schema } , new BeanPropertyRowMapper ( List . class ) ) ; List tables = new ArrayList ( ) ; for ( Object table : cursor ) { tables . add ( JSONObject . parseObject ( table . toString ( ) ) . get ( 0 ) ) ; } return tables ; }","Generate syntax code: Use the format string matching method to set the sql ( query the table_name column in the 'tables' table based on $schema$ ) , use $conn$ to get a cursor and execute SQL, use for loop to traverse all the obtained query result, insert the 0th element of each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getSchema <for> ( <for> type_identifier conn </for> , <for> type_identifier schema </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> tables = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier table : cursor ) <blo> { <exp> <met> tables . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> table . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return tables ; </ret> } </blo> </met>"
"Generate origin code: Print $conn_string$, and then use $conn_string$ to get the database engine, execute SQL ( get all the columns in the flowbot_requests table based on $id$ and $name$ ) and get all the data. If the query result is not empty, return the query result.","public List getTarget ( DataSource conn_string , String id , String name ) { System . out . println ( conn_string ) ; JdbcTemplate engine = new JdbcTemplate ( conn_string ) ; List target = engine . query ( "" select * from flowbot_requests where id=? and name=? "" , new Object [ ] { id , name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! target . isEmpty ( ) ) { return target ; } else { return null ; } }","Generate syntax code: Print $conn_string$, and then use $conn_string$ to get the database engine, execute SQL ( get all the columns in the flowbot_requests table based on $id$ and $name$ ) and get all the data. If the query result is not empty, return the query result.","<met> <mod> public </mod> type_identifier getTarget <for> ( <for> type_identifier conn_string </for> , <for> type_identifier id </for> , <for> type_identifier name </for> ) </for> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( conn_string ) </arg> </met> ; </exp> <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( conn_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> target = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> target . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return target ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: Query t he first piece of year data in the books table based on $title$, make sure that $conn$ is turned off and return the query results.","public List main ( JdbcTemplate conn , String title ) { List rs = conn . query ( "" select year from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: Use $conn$ to execute the SQL statement: Query t he first piece of year data in the books table based on $title$, make sure that $conn$ is turned off and return the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
Generate origin code: Connect to the database through $engine$ and execute the SQL ( get the fullname column in the users table based on $id$ ) and get all the data.,"public void selectFullname ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select fullname from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; }",Generate syntax code: Connect to the database through $engine$ and execute the SQL ( get the fullname column in the users table based on $id$ ) and get all the data.,"<met> <mod> public </mod> void_type selectFullname <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", set SQL ( query all columns in the stu_essay based on $teacher$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, and print each piece of data. Return the rendered ""evaluate.html"" page with the 'essays' parameter setting as the query result. Otherwise, return the rendered ""teacher.html"" page.","public String login ( HttpRequest request , JdbcTemplate conn , String teacher , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from stu_essay where teacher = ? "" , new Object [ ] { teacher } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { System . out . println ( row ) ; } model . addAttribute ( "" essays "" , rows ) ; return "" evaluate.html "" ; } else { return "" teacher.html "" ; } }","Generate syntax code: If the request method is ""POST"", set SQL ( query all columns in the stu_essay based on $teacher$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, and print each piece of data. Return the rendered ""evaluate.html"" page with the 'essays' parameter setting as the query result. Otherwise, return the rendered ""teacher.html"" page.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier teacher </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { teacher } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> model . addAttribute <arg> ( string_literal , rows ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request method of request is ""POST"", use $conn$ to execute SQL ( query all columns in the user_info table based on $email$ ) and get all the data. For each item in the query result, print the password and user_id properties. Finally, return the rendered ""login.html"" in addition to the judgment of the request method of request.","public String getLogin ( HttpRequest request , JdbcTemplate conn , String email , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List data = conn . query ( "" select * from user_info where email=? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object d : data ) { String password = JSONObject . parseObject ( d . toString ( ) ) . getString ( "" password "" ) ; String userid = JSONObject . parseObject ( d . toString ( ) ) . getString ( "" user_id "" ) ; System . out . println ( password + userid ) ; } } return "" login.html "" ; }","Generate syntax code: If the request method of request is ""POST"", use $conn$ to execute SQL ( query all columns in the user_info table based on $email$ ) and get all the data. For each item in the query result, print the password and user_id properties. Finally, return the rendered ""login.html"" in addition to the judgment of the request method of request.","<met> <mod> public </mod> type_identifier getLogin <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier d : data ) <blo> { <loc> type_identifier <var> password = <met> <met> JSONObject . parseObject <arg> ( <met> d . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> userid = <met> <met> JSONObject . parseObject <arg> ( <met> d . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> password + userid </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If $aid$ is None, then return None. Try to set up the SQL statement ( query all columns in the tattributes when id equals $aid$ ) .Execute the SQL statement with $conn$, get all the data and return.If an exception occurs, return None.","public Object selectValue ( JdbcTemplate conn , String aid ) { if ( aid == "" "" ) { return null ; } try { List results = conn . query ( "" select * from tattributes where id =? "" , new Object [ ] { aid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return null ; } }","Generate syntax code: If $aid$ is None, then return None. Try to set up the SQL statement ( query all columns in the tattributes when id equals $aid$ ) .Execute the SQL statement with $conn$, get all the data and return.If an exception occurs, return None.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier aid </for> ) </for> <blo> { <if_> if <par> ( <bin> aid == string_literal </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { aid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine through $host$, execute SQL ( get all the columns in the availability2 table when stationNUM is $num$ ) , get all the data, and finally print the query result.","public void getModels ( DataSource host , String num ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List models = engine . query ( "" select * from availability2 where stationNUM= ? "" , new Object [ ] { num } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( models ) ; }","Generate syntax code: Get the database engine through $host$, execute SQL ( get all the columns in the availability2 table when stationNUM is $num$ ) , get all the data, and finally print the query result.","<met> <mod> public </mod> void_type getModels <for> ( <for> type_identifier host </for> , <for> type_identifier num </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> models = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { num } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( models ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $mssql$ to create the database engine and get the connection. Set up SQL ( query all columns in the mytable table based on $PageNo$ and $PageSize$ ) and get all the data. Use the database connection to perform the SQL and get all the data. Finally, close the connection and return the query results.","public List getAbstract ( DataSource mssql , String PageNo , String PageSize ) { JdbcTemplate engine = new JdbcTemplate ( mssql ) ; List rows = engine . query ( "" select * from mytable where pageno =? and pagesize =? "" , new Object [ ] { PageNo , PageSize } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }","Generate syntax code: Use $mssql$ to create the database engine and get the connection. Set up SQL ( query all columns in the mytable table based on $PageNo$ and $PageSize$ ) and get all the data. Use the database connection to perform the SQL and get all the data. Finally, close the connection and return the query results.","<met> <mod> public </mod> type_identifier getAbstract <for> ( <for> type_identifier mssql </for> , <for> type_identifier PageNo </for> , <for> type_identifier PageSize </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( mssql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { PageNo , PageSize } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the average of rate in the reviews table based on $isbn$ ) and get the first piece of data. If the result of the query is None, return {""error"": ""Invalid ISBN""} information with jsonify. Otherwise, directly return the query result.","public JSONObject bookApi ( JdbcTemplate conn , String isbn ) { List results = conn . query ( "" select AVG(rate) from reviews where isbn=? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = new JSONObject ( ) ; if ( results . isEmpty ( ) ) { json . put ( "" error "" , "" Invalid ISBN "" ) ; } else { json = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) ; } return json ; }","Generate syntax code: Use $conn$ to execute SQL ( query the average of rate in the reviews table based on $isbn$ ) and get the first piece of data. If the result of the query is None, return {""error"": ""Invalid ISBN""} information with jsonify. Otherwise, directly return the query result.","<met> <mod> public </mod> type_identifier bookApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <exp> <ass> json = <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </ass> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine via $conn_string$ and set the echo parameter to False, get the connection, execute SQL ( query the goods column data in the shop table via $name$ ) , store the query result as t he data parameter of DataFrame, set 'columns' parameter as every element in 'keys' after excecuting SQL, capitalize the letters of each element, and finally return the data.","public List executInquery ( DataSource conn_string , String name ) { JdbcTemplate engine = new JdbcTemplate ( conn_string ) ; List res = engine . query ( "" select goods from shop where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine via $conn_string$ and set the echo parameter to False, get the connection, execute SQL ( query the goods column data in the shop table via $name$ ) , store the query result as t he data parameter of DataFrame, set 'columns' parameter as every element in 'keys' after excecuting SQL, capitalize the letters of each element, and finally return the data.","<met> <mod> public </mod> type_identifier executInquery <for> ( <for> type_identifier conn_string </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( conn_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Use $connection$ to execute SQL ( query the item information in the item_property table based on $property$ ) and get all the data.,"public void testRowOverload ( JdbcTemplate connection , String property ) { List res_item = connection . query ( "" select item from item_property where property= ? "" , new Object [ ] { property } , new BeanPropertyRowMapper ( List . class ) ) ; assert res_item . size ( ) > 0 ; for ( Object row : res_item ) { System . out . println ( row ) ; } }",Generate syntax code: Use $connection$ to execute SQL ( query the item information in the item_property table based on $property$ ) and get all the data.,"<met> <mod> public </mod> void_type testRowOverload <for> ( <for> type_identifier connection </for> , <for> type_identifier property </for> ) </for> <blo> { <loc> type_identifier <var> res_item = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { property } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res_item . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <enh> for ( type_identifier row : res_item ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the statecode in the cities table based on $city$ ) and get all the data.,"public JSONArray getStateCode ( JdbcTemplate conn , String city ) { List rows = conn . query ( "" select statecode from cities where city= ? "" , new Object [ ] { city } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object row : rows ) { results . add ( row ) ; } return JSONObject . parseArray ( results . toString ( ) ) ; }",Generate syntax code: Use $conn$ to execute SQL ( query the statecode in the cities table based on $city$ ) and get all the data.,"<met> <mod> public </mod> type_identifier getStateCode <for> ( <for> type_identifier conn </for> , <for> type_identifier city </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { city } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> results . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> results . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( get all columns in the student table with name as $x$ ) . If the number of rows of the query results is greater than 0, then get the first piece of data and return it; otherwise return None.","public Object getStudent ( JdbcTemplate conn , String x ) { List result = conn . query ( "" select * from student where name = ? "" , new Object [ ] { x } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! result . isEmpty ( ) ) { Object row = result . get ( 0 ) ; return row ; } else { return null ; } }","Generate syntax code: Execute SQL through $conn$ ( get all columns in the student table with name as $x$ ) . If the number of rows of the query results is greater than 0, then get the first piece of data and return it; otherwise return None.","<met> <mod> public </mod> type_identifier getStudent <for> ( <for> type_identifier conn </for> , <for> type_identifier x </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { x } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> result . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <loc> type_identifier <var> row = <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Create the database engine from $postgres$ and execute the SQL ( query the year information in the stock_data where date is $date$ ) from that engine and get all the data. Return the result of a serialized query.,"public JSONArray getYears ( DataSource postgres , String date ) { JdbcTemplate engine = new JdbcTemplate ( postgres ) ; List years = engine . query ( "" select year from stock_data where date= ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( years . toString ( ) ) ; }",Generate syntax code: Create the database engine from $postgres$ and execute the SQL ( query the year information in the stock_data where date is $date$ ) from that engine and get all the data. Return the result of a serialized query.,"<met> <mod> public </mod> type_identifier getYears <for> ( <for> type_identifier postgres </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( postgres ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> years = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> years . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to get the connection. Execute SQL ( query all the db_uri information in the DATABASE_NAME table based on $heat$ ) . Close the connection, separate the query results with list, store the 0th element of each item and return.","public List tearDown ( DataSource engine , String heat ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List heats = conn . query ( "" select db_uri from database_name where heat= ? "" , new Object [ ] { heat } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object o : heats ) { Object o1 = JSONObject . parseObject ( o . toString ( ) ) . get ( 0 ) ; list . add ( o1 ) ; } return list ; }","Generate syntax code: Use $engine$ to get the connection. Execute SQL ( query all the db_uri information in the DATABASE_NAME table based on $heat$ ) . Close the connection, separate the query results with list, store the 0th element of each item and return.","<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier engine </for> , <for> type_identifier heat </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> heats = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { heat } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier o : heats ) <blo> { <loc> type_identifier <var> o1 = <met> <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> list . add <arg> ( o1 ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL ( get all columns in the FRC_ORDERS where kwargs is $kwargs$ ) with $conn$ and get all the data, and return the query results if they are true.","public List getOrders ( JdbcTemplate conn , String kwargs ) { List result_orders = conn . query ( "" select * from frc_orders where kwargs= ? "" , new Object [ ] { kwargs } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result_orders . isEmpty ( ) ) { return null ; } else { return result_orders ; } }","Generate syntax code: Execute SQL ( get all columns in the FRC_ORDERS where kwargs is $kwargs$ ) with $conn$ and get all the data, and return the query results if they are true.","<met> <mod> public </mod> type_identifier getOrders <for> ( <for> type_identifier conn </for> , <for> type_identifier kwargs </for> ) </for> <blo> { <loc> type_identifier <var> result_orders = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { kwargs } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result_orders . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result_orders ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all information in the users table when id is $iduser$ ) and get all the data. Finally, use jsonify to return the query result.","public JSONArray bookGet ( JdbcTemplate conn , String iduser ) { List again_res = conn . query ( "" select * from users where id= ? "" , new Object [ ] { iduser } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( again_res . toString ( ) ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query all information in the users table when id is $iduser$ ) and get all the data. Finally, use jsonify to return the query result.","<met> <mod> public </mod> type_identifier bookGet <for> ( <for> type_identifier conn </for> , <for> type_identifier iduser </for> ) </for> <blo> { <loc> type_identifier <var> again_res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { iduser } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> again_res . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db_root_url$. Execute the SQL statement ( query all the columns in the SCHEMA table according to $sms$ ) , get all the data, close the connection, and return the query results.","public List teardownDb ( DataSource db_root_url , String sms ) { JdbcTemplate connection = new JdbcTemplate ( db_root_url ) ; List res = connection . query ( "" select * from SCHEMA where sms=? "" , new Object [ ] { sms } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine and establish a connection through $db_root_url$. Execute the SQL statement ( query all the columns in the SCHEMA table according to $sms$ ) , get all the data, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier teardownDb <for> ( <for> type_identifier db_root_url </for> , <for> type_identifier sms </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_root_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sms } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Use $URI$ to get the database engine and establish a connection. Use the java expression to set up the SQL statement ( query the userID information in the $user$ table where userName is $stringUserName$ ) . Execute SQL to get all the information and return.,"public List < Object > getUserIntoDatabase ( EntityManager URI , Root < Object > user , String stringUserName ) { CriteriaBuilder cb = URI . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( user ) . where ( cb . equal ( user . get ( "" userName "" ) , stringUserName ) ) ; List < Object > res = URI . createQuery ( cq ) . getResultList ( ) ; return res ; }",Generate syntax code: Use $URI$ to get the database engine and establish a connection. Use the java expression to set up the SQL statement ( query the userID information in the $user$ table where userName is $stringUserName$ ) . Execute SQL to get all the information and return.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getUserIntoDatabase <for> ( <for> type_identifier URI </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> user </for> , <for> type_identifier stringUserName </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> URI . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( user ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> user . get <arg> ( string_literal ) </arg> </met> , stringUserName ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> URI . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL statement: Query all columns in m_table table, execute SQL by $conn$ to get the first piece of data and return.","public List getPrice ( JdbcTemplate conn ) { List res = conn . query ( "" select * from m_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up SQL statement: Query all columns in m_table table, execute SQL by $conn$ to get the first piece of data and return.","<met> <mod> public </mod> type_identifier getPrice <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Query all f_id in the passengers table that the 'name' is $name$ through $conn$,make sure that $conn$ is turned off, render and return ""confirm.html"", where the res parameter is the query result.","public String confirm ( JdbcTemplate conn , String name , Model model ) { List res = conn . query ( "" select f_id from passengers where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" confirm.thtml "" ; }","Generate syntax code: Query all f_id in the passengers table that the 'name' is $name$ through $conn$,make sure that $conn$ is turned off, render and return ""confirm.html"", where the res parameter is the query result.","<met> <mod> public </mod> type_identifier confirm <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL statement ( use format ( ) function to format the output string, query all columns in the posts table by string $classid$ ) and use $conn$ connection to execute SQL statement to get all the data. Convert each item of query results into dict and store it as list. Use jsonify to return the contents of the list.","public JSONArray getPostsByid ( JdbcTemplate conn , String classid ) { List res = conn . query ( "" select * from posts where classid = ? "" , new Object [ ] { classid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( res . toString ( ) ) ; }","Generate syntax code: Set up SQL statement ( use format ( ) function to format the output string, query all columns in the posts table by string $classid$ ) and use $conn$ connection to execute SQL statement to get all the data. Convert each item of query results into dict and store it as list. Use jsonify to return the contents of the list.","<met> <mod> public </mod> type_identifier getPostsByid <for> ( <for> type_identifier conn </for> , <for> type_identifier classid </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { classid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> res . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query test in test_table ) and get all of data. Convert each item in the query result to dict and return.,"public List createDb ( JdbcTemplate conn ) { List texts = conn . query ( "" select test from test_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; }",Generate syntax code: Use $conn$ to execute SQL ( query test in test_table ) and get all of data. Convert each item in the query result to dict and return.,"<met> <mod> public </mod> type_identifier createDb <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return texts ; </ret> } </blo> </met>"
"Generate origin code: Try to set up SQL ( query all columns in the stockdata table based on $name$ ) , use $conn$ to execute sql, get all the data, and return the query data. If an exception occurs during execution, print ""fail"".","public List selectValue ( JdbcTemplate conn , String name ) { try { List results = conn . query ( "" select * from stockdata where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set up SQL ( query all columns in the stockdata table based on $name$ ) , use $conn$ to execute sql, get all the data, and return the query data. If an exception occurs during execution, print ""fail"".","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query mods column in $results$ table based on $fraction_id$ ) . Execute the SQL with $conn$ and get all the data. Use for loop to iterate through each query result and store the 0th element of each data as list, and finally return the list.","public List getUndefModMassesFromTopResults ( EntityManager conn , Root < Object > results , String fraction_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( results ) . where ( cb . equal ( results . get ( "" fraction_id "" ) , fraction_id ) ) ; List < Object > response = conn . createQuery ( cq ) . getResultList ( ) ; List undef_mods = new ArrayList ( ) ; for ( Object row : response ) { undef_mods . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return undef_mods ; }","Generate syntax code: Set SQL based on the java expression: ( query mods column in $results$ table based on $fraction_id$ ) . Execute the SQL with $conn$ and get all the data. Use for loop to iterate through each query result and store the 0th element of each data as list, and finally return the list.","<met> <mod> public </mod> type_identifier getUndefModMassesFromTopResults <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> results </for> , <for> type_identifier fraction_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( results ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> results . get <arg> ( string_literal ) </arg> </met> , fraction_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> response = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> undef_mods = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : response ) <blo> { <exp> <met> undef_mods . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return undef_mods ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get the duration column in the flights table where origin is $origin$ and destination is $dest$ ) , get the first piece of data, and finally return the query result.","public List getDuration ( JdbcTemplate db , String origin , String dest ) { List dur = db . query ( "" select duration from flights where origin=? and destination=? "" , new Object [ ] { origin , dest } , new BeanPropertyRowMapper ( List . class ) ) ; return dur ; }","Generate syntax code: Use $db$ to execute SQL ( get the duration column in the flights table where origin is $origin$ and destination is $dest$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier getDuration <for> ( <for> type_identifier db </for> , <for> type_identifier origin </for> , <for> type_identifier dest </for> ) </for> <blo> { <loc> type_identifier <var> dur = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin , dest } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return dur ; </ret> } </blo> </met>"
"Generate origin code: Use the f string matching method to set sql ( query the college column in the players table according to $id$ ) , use the begin method of $engine$ to execute SQL, get all the query results, use for loop to store the 0th element of each item of the query results as list and return.","public List getDuration ( JdbcTemplate engine , String id ) { List res = engine . query ( "" select college from players where id=? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object each : res ) { list . add ( JSONObject . parseObject ( each . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use the f string matching method to set sql ( query the college column in the players table according to $id$ ) , use the begin method of $engine$ to execute SQL, get all the query results, use for loop to store the 0th element of each item of the query results as list and return.","<met> <mod> public </mod> type_identifier getDuration <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier each : res ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> each . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: query the service in the spann where name is $name$ and duration is $duration$. Execute SQL with $conn$ and get barracuda data. Set assertion to determine that the length of the query result is greater than 0. Finally, each item in the query result is converted to dict and returned.","public List getService ( JdbcTemplate conn , String name , String duration ) { List services = conn . query ( "" select service from spann where name=? and duration=? "" , new Object [ ] { name , duration } , new BeanPropertyRowMapper ( List . class ) ) ; assert services . size ( ) > 0 ; return services ; }","Generate syntax code: Set SQL: query the service in the spann where name is $name$ and duration is $duration$. Execute SQL with $conn$ and get barracuda data. Set assertion to determine that the length of the query result is greater than 0. Finally, each item in the query result is converted to dict and returned.","<met> <mod> public </mod> type_identifier getService <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> , <for> type_identifier duration </for> ) </for> <blo> { <loc> type_identifier <var> services = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , duration } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> services . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return services ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Set up SQL ( query the DISH_DESCRIPTION information in the dish table when DISH_ID is $dishid$ ) ; use $conn$ to execute SQL and get the first piece of data; and finally return the query result. If an exception occurs, the 'failed' information is printed.","public List queryDish ( JdbcTemplate conn , String dishid ) { try { List description = conn . query ( "" select dish_description from dish where dish_id =? "" , new Object [ ] { dishid } , new BeanPropertyRowMapper ( List . class ) ) ; return description ; } catch ( Exception e ) { System . out . println ( "" failed "" ) ; return null ; } }","Generate syntax code: Try to execute the following code: Set up SQL ( query the DISH_DESCRIPTION information in the dish table when DISH_ID is $dishid$ ) ; use $conn$ to execute SQL and get the first piece of data; and finally return the query result. If an exception occurs, the 'failed' information is printed.","<met> <mod> public </mod> type_identifier queryDish <for> ( <for> type_identifier conn </for> , <for> type_identifier dishid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> description = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dishid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return description ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute SQL ( query all columns in the Category table through $username$ ) and get all the data. If the query result is not empty, render and return 'home.html', where the categories parameter is the query result.","public String showHome ( JdbcTemplate conn , String username , Model model ) { List categories = conn . query ( "" select * from category where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( categories . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" categories "" , categories ) ; return "" home.thtml "" ; } }","Generate syntax code: Use the $conn$ connection to execute SQL ( query all columns in the Category table through $username$ ) and get all the data. If the query result is not empty, render and return 'home.html', where the categories parameter is the query result.","<met> <mod> public </mod> type_identifier showHome <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> categories = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> categories . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , categories ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statement, which contains: Query the data in the $E_cuenta$ table where id_cuenta is $obj_cuenta$, execute the SQL statement through $session$ and get all the data, make sure that $session$ is closed and return all the query results.","public List actualizar ( EntityManager session , Root < Object > E_cuenta , String obj_cuenta ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( E_cuenta ) . where ( cb . equal ( E_cuenta . get ( "" id_cuenta "" ) , obj_cuenta ) ) ; List < Object > res = session . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the java expression to set up the SQL statement, which contains: Query the data in the $E_cuenta$ table where id_cuenta is $obj_cuenta$, execute the SQL statement through $session$ and get all the data, make sure that $session$ is closed and return all the query results.","<met> <mod> public </mod> type_identifier actualizar <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> E_cuenta </for> , <for> type_identifier obj_cuenta </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( E_cuenta ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> E_cuenta . get <arg> ( string_literal ) </arg> </met> , obj_cuenta ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query all the information in the $UsageMetric$ table based on $service_id$ ) , get all the data, and close the connection. Use for loop to store 0th element of each item in the query result into list and return.","public List aggregate ( EntityManager conn , Root < Object > UsageMetric , String service_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( UsageMetric ) . where ( cb . equal ( UsageMetric . get ( "" service_id "" ) , service_id ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; List service_list = new ArrayList ( ) ; for ( Object i : values ) { service_list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return service_list ; }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query all the information in the $UsageMetric$ table based on $service_id$ ) , get all the data, and close the connection. Use for loop to store 0th element of each item in the query result into list and return.","<met> <mod> public </mod> type_identifier aggregate <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> UsageMetric </for> , <for> type_identifier service_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( UsageMetric ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> UsageMetric . get <arg> ( string_literal ) </arg> </met> , service_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> service_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : values ) <blo> { <exp> <met> service_list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return service_list ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the name column in the sqlite_master table based on $type$ and $posts$ ) , get all the query results, use for loop to traverse all the obtained query results, print the 0th element of each piece of data and return the query results.","public List index ( JdbcTemplate conn , String type , String posts ) { List sql = conn . query ( "" select name from sqlite_master where type = ? and posts = ? "" , new Object [ ] { type , posts } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : sql ) { System . out . println ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return sql ; }","Generate syntax code: Execute SQL with $conn$ ( query the name column in the sqlite_master table based on $type$ and $posts$ ) , get all the query results, use for loop to traverse all the obtained query results, print the 0th element of each piece of data and return the query results.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier type </for> , <for> type_identifier posts </for> ) </for> <blo> { <loc> type_identifier <var> sql = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type , posts } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : sql ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return sql ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to connect the database and execute SQL ( get the id column in the test_users table where firstname is $fname$ and lastname is $lname$ ) , get all the data, and finally return the query result.","public List index ( JdbcTemplate engine , String fname , String lname ) { List regs = engine . query ( "" select id from test_users where firstname=? and lastname=? "" , new Object [ ] { fname , lname } , new BeanPropertyRowMapper ( List . class ) ) ; return regs ; }","Generate syntax code: Use $engine$ to connect the database and execute SQL ( get the id column in the test_users table where firstname is $fname$ and lastname is $lname$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier engine </for> , <for> type_identifier fname </for> , <for> type_identifier lname </for> ) </for> <blo> { <loc> type_identifier <var> regs = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { fname , lname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return regs ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL statement via $con$: Query all columns of books table and get all the data. If no data is obtained, return None; otherwise return all the obtained data.","public List main ( JdbcTemplate con ) { List books = con . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return null ; } else { return books ; } }","Generate syntax code: Execute SQL statement via $con$: Query all columns of books table and get all the data. If no data is obtained, return None; otherwise return all the obtained data.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier con </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return books ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Create cursor by $connection$, set SQL ( query all information in call_list table based on $callid$ ) , execute SQL, get all the query results and close the connection. Uf execution statement is greater than 0, return rendered 'calllists.html' and the 'articles' parameter is the query result. Otherwise return the rendered 'calllists.html' and the msg parameter is 'No Call lists Found'.","public String selectValue ( JdbcTemplate conn , String callid , Model model ) { List call_lists = conn . query ( "" select * from call_list where callid = ? "" , new Object [ ] { callid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( call_lists . isEmpty ( ) ) { model . addAttribute ( "" msg "" , "" No Call lists Found "" ) ; return "" calllists.html "" ; } else { model . addAttribute ( "" articles "" , call_lists ) ; return "" calllists.thtml "" ; } }","Generate syntax code: Create cursor by $connection$, set SQL ( query all information in call_list table based on $callid$ ) , execute SQL, get all the query results and close the connection. Uf execution statement is greater than 0, return rendered 'calllists.html' and the 'articles' parameter is the query result. Otherwise return the rendered 'calllists.html' and the msg parameter is 'No Call lists Found'.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier callid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> call_lists = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { callid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> call_lists . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , call_lists ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the three columns of origin, destination, and duration in the flights ) and get all the data, print ""Error"" and return directly if the query result is None, and then use the for loop to print each item in the query result. The origin column, formatted as the result of the query, continues for minutes in the duration column to the destination column""","public void selectValue ( JdbcTemplate conn ) { List flights = conn . query ( "" select origin, destination, duration from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { System . out . println ( "" Erroe "" ) ; return ; } else { for ( Object flight : flights ) { System . out . println ( JSONObject . parseObject ( flight . toString ( ) ) . getString ( "" origin "" ) + "" to "" + JSONObject . parseObject ( flight . toString ( ) ) . getString ( "" destination "" ) + "" lasting "" + JSONObject . parseObject ( flight . toString ( ) ) . getString ( "" duration "" ) + "" mintues "" ) ; } } }","Generate syntax code: Use $conn$ to execute SQL ( get the three columns of origin, destination, and duration in the flights ) and get all the data, print ""Error"" and return directly if the query result is None, and then use the for loop to print each item in the query result. The origin column, formatted as the result of the query, continues for minutes in the duration column to the destination column""","<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return ; </ret> } </blo> else <blo> { <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> <bin> <bin> <bin> <met> <met> JSONObject . parseObject <arg> ( <met> flight . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> + string_literal </bin> + <met> <met> JSONObject . parseObject <arg> ( <met> flight . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </bin> + string_literal </bin> + <met> <met> JSONObject . parseObject <arg> ( <met> flight . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </bin> + string_literal </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute the following code: use $conn$ to execute SQL ( query all the information in $table$ based on $my_all$ ) under java expressions, get the first piece of data and return the query results. If an exception occurs, print the specific information and return it directly.","public List < Object > selectPprint ( EntityManager conn , Root < Object > table , String my_all ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" url "" ) , my_all ) ) ; List < Object > table_result = conn . createQuery ( cq ) . getResultList ( ) ; return table_result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to execute the following code: use $conn$ to execute SQL ( query all the information in $table$ based on $my_all$ ) under java expressions, get the first piece of data and return the query results. If an exception occurs, print the specific information and return it directly.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectPprint <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier my_all </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , my_all ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> table_result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return table_result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the lace_texts table based on $textsid$ ) , use for loop to traverse all obtained query results, and output them.","public void selectValue ( JdbcTemplate conn , String textsid ) { List c = conn . query ( "" select * from lace_texts where textsid= ? "" , new Object [ ] { textsid } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : c ) { System . out . println ( i ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the lace_texts table based on $textsid$ ) , use for loop to traverse all obtained query results, and output them.","<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier textsid </for> ) </for> <blo> { <loc> type_identifier <var> c = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { textsid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : c ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set SQL ( query the maximum value of the orderid column in the orders table ) , use $conn$ to execute the SQL and get all the query results, and return the 0th element of the query results which is converted to list format.","public Object search ( JdbcTemplate conn ) { List db_result = conn . query ( "" select max(orderid) from orders "" , new BeanPropertyRowMapper ( List . class ) ) ; return db_result . get ( 0 ) ; }","Generate syntax code: Set SQL ( query the maximum value of the orderid column in the orders table ) , use $conn$ to execute the SQL and get all the query results, and return the 0th element of the query results which is converted to list format.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> db_result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Query all the name, email, address and state data in the drinkers table, convert each item of the query result to dict, store as list and return.","public List getDrinkers ( JdbcTemplate conn ) { List rs = conn . query ( "" select name, email, address, state from drinkers "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect to the database based on $engine$. Query all the name, email, address and state data in the drinkers table, convert each item of the query result to dict, store as list and return.","<met> <mod> public </mod> type_identifier getDrinkers <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Set SQL in java expressions: Query all information in $table$ based on $scorecolumn$. Use $connection$ to execute the SQL and get all the data, and finally return the query results.","public List < Object > testQuoted ( EntityManager connection , Root < Object > table , String scorecolumn ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" scorecolumn "" ) , scorecolumn ) ) ; List < Object > result = connection . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Set SQL in java expressions: Query all information in $table$ based on $scorecolumn$. Use $connection$ to execute the SQL and get all the data, and finally return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testQuoted <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier scorecolumn </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , scorecolumn ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get the id column in the show where link is $link$ ) and get the first piece of data, then return the tenth element of the query result and list it as ""id"".","public String selecgetShowIdtRes ( JdbcTemplate conn , String link ) { List rows = conn . query ( "" select id from show where link= ? "" , new Object [ ] { link } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; }","Generate syntax code: Execute the SQL with $conn$ ( get the id column in the show where link is $link$ ) and get the first piece of data, then return the tenth element of the query result and list it as ""id"".","<met> <mod> public </mod> type_identifier selecgetShowIdtRes <for> ( <for> type_identifier conn </for> , <for> type_identifier link </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { link } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL ( query all columns in the professors table where id is $id$ ) using $db$ and get all the data. Use the for loop to print each item of data in the query results.,"public void selectProfessors ( JdbcTemplate db , String id ) { List professors = db . query ( "" select * from professors where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object p : professors ) { System . out . println ( p ) ; } }",Generate syntax code: Execute the SQL ( query all columns in the professors table where id is $id$ ) using $db$ and get all the data. Use the for loop to print each item of data in the query results.,"<met> <mod> public </mod> void_type selectProfessors <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> professors = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier p : professors ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( p ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Execute the SQL ( get the origin column in the TABLE where destination is $destination$ ) with $conn$ to get all the data printed and return.,"public List selectOrigin ( JdbcTemplate conn , String destination ) { List origin_results = conn . query ( "" select origin from table where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( origin_results ) ; return origin_results ; }",Generate syntax code: Execute the SQL ( get the origin column in the TABLE where destination is $destination$ ) with $conn$ to get all the data printed and return.,"<met> <mod> public </mod> type_identifier selectOrigin <for> ( <for> type_identifier conn </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> origin_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( origin_results ) </arg> </met> ; </exp> <ret> return origin_results ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ connection to execute SQL ( query all columns in zips table through $zipcode$ ) and get all data. If zipcode is empty, use jsonify to return error message: invalid zipcode. Otherwise, use jsonify to return zip information: zipcode attribute of zipcode, place_name information: city attribute of zipcode, state information: state attribute of zipcode.","public JSONObject api ( JdbcTemplate conn , String zipcode ) { List zipcodes = conn . query ( "" select * from zips where zipcode = ? "" , new Object [ ] { zipcode } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( zipcodes . isEmpty ( ) ) { json = new JSONObject ( ) ; json . put ( "" error "" , "" invalid zipcode "" ) ; } else { json = new JSONObject ( ) ; json . put ( "" zip "" , JSONObject . parseObject ( zipcodes . get ( 0 ) . toString ( ) ) . getString ( "" zipcode "" ) ) ; json . put ( "" place_name "" , JSONObject . parseObject ( zipcodes . get ( 0 ) . toString ( ) ) . getString ( "" city "" ) ) ; json . put ( "" state "" , JSONObject . parseObject ( zipcodes . get ( 0 ) . toString ( ) ) . getString ( "" state "" ) ) ; } return json ; }","Generate syntax code: Use $conn$ connection to execute SQL ( query all columns in zips table through $zipcode$ ) and get all data. If zipcode is empty, use jsonify to return error message: invalid zipcode. Otherwise, use jsonify to return zip information: zipcode attribute of zipcode, place_name information: city attribute of zipcode, state information: state attribute of zipcode.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier zipcode </for> ) </for> <blo> { <loc> type_identifier <var> zipcodes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zipcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <met> zipcodes . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </ass> ; </exp> <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </ass> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> zipcodes . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> zipcodes . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> zipcodes . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( get all columns in the happiness table based on $id$ ) and get all the data. Finally return the rendered ""index.html"", where the data parameter is the query result.","public String index ( JdbcTemplate conn , String id , Model model ) { List data = conn . query ( "" select * from happiness where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , data ) ; return "" index.thtml "" ; }","Generate syntax code: Use $conn$ to execute the SQL ( get all columns in the happiness table based on $id$ ) and get all the data. Finally return the rendered ""index.html"", where the data parameter is the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: ,""Use $db_api_connection$ to get the cursor. Try executing the following code: query all columns in the mytables table based on the cursor and get all the data; close the cursor and return the query results. If an exception occurs, a DisconnectionError exception is thrown.","public List testConnection ( JdbcTemplate db_api_connection ) { try { List data = db_api_connection . query ( "" select * from mytables "" , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } catch ( Exception e ) { return null ; } }","Generate syntax code: ,""Use $db_api_connection$ to get the cursor. Try executing the following code: query all columns in the mytables table based on the cursor and get all the data; close the cursor and return the query results. If an exception occurs, a DisconnectionError exception is thrown.","<met> <mod> public </mod> type_identifier testConnection <for> ( <for> type_identifier db_api_connection </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> data = <met> db_api_connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get all the columns in the users table whose username is $uname$ and password is $pwd$ ) . If the number of row of the query result is 0, return the rendered ""error.html"", the input message parameter is ""No such user., and finally return the rendered ""personal_page.html"", where the users parameter is the query result.","public String personalPage ( JdbcTemplate conn , String uname , String pwd , Model model ) { List users = conn . query ( "" select * from users where username=? and password=? "" , new Object [ ] { uname , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such user. "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" users "" , users ) ; return "" personal_page.thtml "" ; } }","Generate syntax code: Use $db$ to execute SQL ( get all the columns in the users table whose username is $uname$ and password is $pwd$ ) . If the number of row of the query result is 0, return the rendered ""error.html"", the input message parameter is ""No such user., and finally return the rendered ""personal_page.html"", where the users parameter is the query result.","<met> <mod> public </mod> type_identifier personalPage <for> ( <for> type_identifier conn </for> , <for> type_identifier uname </for> , <for> type_identifier pwd </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname , pwd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the ORM method to query the first piece of data in the $ProfilesData$ table with gid as $gid$ through $session$. Make sure $session$ is closed. If the query result exists, return True.","public boolean selectUrls ( EntityManager get_value , Root < Object > ProfilesData , String gid ) { CriteriaBuilder cb = get_value . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ProfilesData ) . where ( cb . equal ( ProfilesData . get ( "" gid "" ) , gid ) ) ; List < Object > pdata = get_value . createQuery ( cq ) . getResultList ( ) ; if ( pdata . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Use the ORM method to query the first piece of data in the $ProfilesData$ table with gid as $gid$ through $session$. Make sure $session$ is closed. If the query result exists, return True.","<met> <mod> public </mod> boolean_type selectUrls <for> ( <for> type_identifier get_value </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ProfilesData </for> , <for> type_identifier gid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> get_value . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ProfilesData ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ProfilesData . get <arg> ( string_literal ) </arg> </met> , gid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> pdata = <met> <met> get_value . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> pdata . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute an SQL statement with $conn$ ( query all columns in the $db_table$ where Open is $Open$ ) in a java expression, get all the data, and return it. If an Exception Exception occurs, the specific Exception information is printed.","public List < Object > selectFile ( EntityManager conn , Root < Object > db_table , String Open ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( db_table ) . where ( cb . equal ( db_table . get ( "" incident_status "" ) , Open ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to execute an SQL statement with $conn$ ( query all columns in the $db_table$ where Open is $Open$ ) in a java expression, get all the data, and return it. If an Exception Exception occurs, the specific Exception information is printed.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectFile <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> db_table </for> , <for> type_identifier Open </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( db_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> db_table . get <arg> ( string_literal ) </arg> </met> , Open ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the consumer_id column in the allocation table where id is $id$ and provider_id is $pid$ ) and get all the data. If the query result is not true, print ""no allocation records""; otherwise, return the query result.","public List personalPage ( JdbcTemplate conn , String id , String pid ) { List cids = conn . query ( "" select consumer_id from allocation where id=? and provider_id=? "" , new Object [ ] { id , pid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( cids . isEmpty ( ) ) { System . out . println ( "" no allocation records "" ) ; return null ; } else { return cids ; } }","Generate syntax code: Execute SQL with $conn$ ( get the consumer_id column in the allocation table where id is $id$ and provider_id is $pid$ ) and get all the data. If the query result is not true, print ""no allocation records""; otherwise, return the query result.","<met> <mod> public </mod> type_identifier personalPage <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier pid </for> ) </for> <blo> { <loc> type_identifier <var> cids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , pid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> cids . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return cids ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, execute the SQL via $conn$: Get all columns in 'books' based on $isbn$ and get all the data, render and return 'booksreview.html', where the all_reviews parameter is the all obtained data.","public String login ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List all_reviews = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" all_reviews "" , "" all_reviews "" ) ; return "" booksreview.html "" ; } else { return null ; } }","Generate syntax code: If the request module sends the request as post, execute the SQL via $conn$: Get all columns in 'books' based on $isbn$ and get all the data, render and return 'booksreview.html', where the all_reviews parameter is the all obtained data.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> all_reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to set the SQL using a java expression ( querying the user information in $atable$ where uname is $uname$ ) . Execute the SQL with $conn$ and get the first data and return the query results. If an exception occurs, return False.","public Object appUserLogout ( EntityManager conn , Root < Object > atable , String uname ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( atable ) . where ( cb . equal ( atable . get ( "" uname "" ) , uname ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to set the SQL using a java expression ( querying the user information in $atable$ where uname is $uname$ ) . Execute the SQL with $conn$ and get the first data and return the query results. If an exception occurs, return False.","<met> <mod> public </mod> type_identifier appUserLogout <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> atable </for> , <for> type_identifier uname </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( atable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> atable . get <arg> ( string_literal ) </arg> </met> , uname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL statement ( query all columns in the flights table based on $id$ ) and get all the data. Use for loop iterate through all the query results and prints the 0th element of each row of the query results.,"public void seleselectFlightsctValue ( JdbcTemplate conn , String id ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( JSONObject . parseObject ( flight . toString ( ) ) . get ( 0 ) ) ; } }",Generate syntax code: Use $conn$ to execute the SQL statement ( query all columns in the flights table based on $id$ ) and get all the data. Use for loop iterate through all the query results and prints the 0th element of each row of the query results.,"<met> <mod> public </mod> void_type seleselectFlightsctValue <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> flight . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If logged_in is not in $session$, redirect to the '/ login' page. Otherwise, use $conn$ in the java expression to query SQL ( query all the information in $todostable$ when id is $deleteBtnID$ ) and get all the data. Convert each item of the query result to dict and return.","public Object selectUrls ( EntityManager conn , Root < Object > todostable , String deleteBtnID , HttpSession session ) { Object logger_in = session . getAttribute ( "" logger_in "" ) ; if ( logger_in == null ) { return "" /login "" ; } else { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( todostable ) . where ( cb . equal ( todostable . get ( "" id "" ) , deleteBtnID ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; return values ; } }","Generate syntax code: If logged_in is not in $session$, redirect to the '/ login' page. Otherwise, use $conn$ in the java expression to query SQL ( query all the information in $todostable$ when id is $deleteBtnID$ ) and get all the data. Convert each item of the query result to dict and return.","<met> <mod> public </mod> type_identifier selectUrls <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> todostable </for> , <for> type_identifier deleteBtnID </for> , <for> type_identifier session </for> ) </for> <blo> { <loc> type_identifier <var> logger_in = <met> session . getAttribute <arg> ( string_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> logger_in == null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( todostable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> todostable . get <arg> ( string_literal ) </arg> </met> , deleteBtnID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the format string matching method to set sql ( query all the information in the 'users_table' table according to $user_id$ ) , use $conn$ to execute SQL, get all the query results, use for loop to convert each item of the query results into dict, store it as list and return.","public List getStudents ( JdbcTemplate conn , String user_id ) { List q = conn . query ( "" select * from users_table where user_id= ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return q ; }","Generate syntax code: Use the format string matching method to set sql ( query all the information in the 'users_table' table according to $user_id$ ) , use $conn$ to execute SQL, get all the query results, use for loop to convert each item of the query results into dict, store it as list and return.","<met> <mod> public </mod> type_identifier getStudents <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> q = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return q ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $conn$ ( get the isbn, title, and three columns in the books where isbn is $query$, title is $query$ and author is $query$ ) and return the rendered ""error.html"" if the number of rows in the query results is 0, otherwise, return the rendered ""results.html"", where the books parameter is all the data retrieved after the query.","public String search ( JdbcTemplate conn , String query , Model model ) { List books = conn . query ( "" select isbn, title, author from books where isbn =? and title =? and author=? "" , new Object [ ] { query , query , query } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such flights "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }","Generate syntax code: Execute the SQL using $conn$ ( get the isbn, title, and three columns in the books where isbn is $query$, title is $query$ and author is $query$ ) and return the rendered ""error.html"" if the number of rows in the query results is 0, otherwise, return the rendered ""results.html"", where the books parameter is all the data retrieved after the query.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier query </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { query , query , query } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $db_uri$ to create the database engine and get the connection according to the engine. Use the connection to execute SQL ( query cande in drop_DATABASE ) and get all the data. Return the query results directly.,"public List tearDown ( DataSource db_uri ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List informa = engine . query ( "" select cande from drop_DATABASE "" , new BeanPropertyRowMapper ( List . class ) ) ; return informa ; }",Generate syntax code: Use $db_uri$ to create the database engine and get the connection according to the engine. Use the connection to execute SQL ( query cande in drop_DATABASE ) and get all the data. Return the query results directly.,"<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier db_uri </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> informa = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return informa ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $testing$, execute SQL ( query all columns in the insert_foo table according to $moredata$ ) , get all the query results, close the connection, and return the query results.","public List testExplicittext ( DataSource testing , String moredata ) { JdbcTemplate conn = new JdbcTemplate ( testing ) ; List res = conn . query ( "" select * from insert_foo where moredata= ? "" , new Object [ ] { moredata } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect the database with $testing$, execute SQL ( query all columns in the insert_foo table according to $moredata$ ) , get all the query results, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier testExplicittext <for> ( <for> type_identifier testing </for> , <for> type_identifier moredata </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { moredata } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends a request by POST, execute the SQL statement based on the $conn$ connection:Get the first name data in the users table according to $email$ and return the query result; otherwise render and return 'login.html'.","public Object login ( HttpRequest request , JdbcTemplate conn , String email ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List name = conn . query ( "" select name from users where email= ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return name . get ( 0 ) ; } else { return "" login.html "" ; } }","Generate syntax code: If the request module sends a request by POST, execute the SQL statement based on the $conn$ connection:Get the first name data in the users table according to $email$ and return the query result; otherwise render and return 'login.html'.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> name = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> name . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( query information about otu_id in samples where sample is $sample$ ) and get all the data. Use for loop to put the 0th element of each item in the query result into a list, and finally return a list that is handled with jsonify.","public JSONArray samplesIdValues ( JdbcTemplate conn , String sample ) { List values = conn . query ( "" select otu_id from samples where sample= ? "" , new Object [ ] { sample } , new BeanPropertyRowMapper ( List . class ) ) ; List sample_list = new ArrayList ( ) ; for ( Object i : values ) { sample_list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( sample_list . toString ( ) ) ; }","Generate syntax code: Execute the SQL using $db$ ( query information about otu_id in samples where sample is $sample$ ) and get all the data. Use for loop to put the 0th element of each item in the query result into a list, and finally return a list that is handled with jsonify.","<met> <mod> public </mod> type_identifier samplesIdValues <for> ( <for> type_identifier conn </for> , <for> type_identifier sample </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sample } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> sample_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : values ) <blo> { <exp> <met> sample_list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> sample_list . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the iris table according to $id$ ) , get the first piece of data, and finally return the query result.","public Object getIris ( JdbcTemplate conn , String id ) { List iris_results = conn . query ( "" select * from iris where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = iris_results . get ( 0 ) ; return row ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the iris table according to $id$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier getIris <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> iris_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> iris_results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in 'books' based on $book_isbn$ ) and get the first piece of data. If the query result is not empty, use jsonify to process'No book with that isbn exists' content and return, and finally return query result after being processed by jsonify.","public JSONObject apiRes ( JdbcTemplate conn , String book_isbn ) { List books = conn . query ( "" select * from books where book_isbn =? "" , new Object [ ] { book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; Object book = books . get ( 0 ) ; if ( books . isEmpty ( ) ) { return JSONObject . parseObject ( "" No book with that isbn exists "" ) ; } else { return JSONObject . parseObject ( book . toString ( ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in 'books' based on $book_isbn$ ) and get the first piece of data. If the query result is not empty, use jsonify to process'No book with that isbn exists' content and return, and finally return query result after being processed by jsonify.","<met> <mod> public </mod> type_identifier apiRes <for> ( <for> type_identifier conn </for> , <for> type_identifier book_isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> book = <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <met> JSONObject . parseObject <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseObject <arg> ( <met> book . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in mytable when rownum is less than $nrows$ ) and get all the data. Finally, return the query result.","public List randomSample ( JdbcTemplate conn , String nrows ) { List nrow = conn . query ( "" select * from mytable where rownum < ? "" , new Object [ ] { nrows } , new BeanPropertyRowMapper ( List . class ) ) ; return nrow ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in mytable when rownum is less than $nrows$ ) and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier randomSample <for> ( <for> type_identifier conn </for> , <for> type_identifier nrows </for> ) </for> <blo> { <loc> type_identifier <var> nrow = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nrows } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return nrow ; </ret> } </blo> </met>"
"Generate origin code: Query all the name in the passengers table with flight_id as $flight_id$ through $conn$. If there is no query result, return None; otherwise, loop through the query results and print the name attribute information in the query results.","public List select ( JdbcTemplate conn , String flight_id ) { List data = conn . query ( "" select name from passengers where flight_id =? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . isEmpty ( ) ) { return null ; } else { for ( Object passenger : data ) { System . out . println ( JSONObject . parseObject ( passenger . toString ( ) ) . getString ( "" name "" ) ) ; } return data ; } }","Generate syntax code: Query all the name in the passengers table with flight_id as $flight_id$ through $conn$. If there is no query result, return None; otherwise, loop through the query results and print the name attribute information in the query results.","<met> <mod> public </mod> type_identifier select <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <enh> for ( type_identifier passenger : data ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> passenger . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the flights table with id as $flight_id$ ) and get the first piece of data. If the query result is None, then return None; otherwise return the rendered ""flight.html"", where the flight parameter is the query result.","public String select ( JdbcTemplate conn , String flight_id , Model model ) { List flights = conn . query ( "" select * from flights where id =? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; Object flight = flights . get ( 0 ) ; if ( flights . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" flight "" , flight ) ; return "" flight.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the flights table with id as $flight_id$ ) and get the first piece of data. If the query result is None, then return None; otherwise return the rendered ""flight.html"", where the flight parameter is the query result.","<met> <mod> public </mod> type_identifier select <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> flight = <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , flight ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: make the connection using $engine$. Execute the SQL statement ( select the itemId column in the sells where barId is $barId$ ) to get all the data. Finally each item in the query result is converted to a dictionary type and returned as a list.,"public List selectValue ( DataSource engine , String barId ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select itemid from sells where barid = ? "" , new Object [ ] { barId } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }",Generate syntax code: make the connection using $engine$. Execute the SQL statement ( select the itemId column in the sells where barId is $barId$ ) to get all the data. Finally each item in the query result is converted to a dictionary type and returned as a list.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier barId </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { barId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ connection to execute SQL ( query all columns in uploads_content table through $filename$ ) and get all the data. Use for loop iterate through query results and print them. Convert each item of query results into dict and store as list and return it.,"public List upload ( JdbcTemplate conn , String filename ) { List rows = conn . query ( "" select * from uploads_content where filename = ? "" , new Object [ ] { filename } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object e : rows ) { System . out . println ( e ) ; } return rows ; }",Generate syntax code: Use $conn$ connection to execute SQL ( query all columns in uploads_content table through $filename$ ) and get all the data. Use for loop iterate through query results and print them. Convert each item of query results into dict and store as list and return it.,"<met> <mod> public </mod> type_identifier upload <for> ( <for> type_identifier conn </for> , <for> type_identifier filename </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { filename } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier e : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( e ) </arg> </met> ; </exp> } </blo> </enh> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( get all columns in table_name based on $goods$ ) , try to execute with $conn$, get all the data and finally return true, otherwise return false.","public boolean dbuDoesTablExist ( JdbcTemplate conn , String goods ) { try { List rows = conn . query ( "" select * from table_name where goods= ? "" , new Object [ ] { goods } , new BeanPropertyRowMapper ( List . class ) ) ; return true ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Set SQL ( get all columns in table_name based on $goods$ ) , try to execute with $conn$, get all the data and finally return true, otherwise return false.","<met> <mod> public </mod> boolean_type dbuDoesTablExist <for> ( <for> type_identifier conn </for> , <for> type_identifier goods </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { goods } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return true ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the columns in the flights table with the condition that flights_id is $id$ ) and get all the query results, use for loop to insert each of the query results into a list and return the rendered 'flights.html' page, where the parameter flights is the list where the query results are stored.","public String queryFlights ( JdbcTemplate conn , String id , Model model ) { List res_list = conn . query ( "" select * from table_name where goods= ? "" , new Object [ ] { goods } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , res_list ) ; return "" flights.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query all the columns in the flights table with the condition that flights_id is $id$ ) and get all the query results, use for loop to insert each of the query results into a list and return the rendered 'flights.html' page, where the parameter flights is the list where the query results are stored.","<met> <mod> public </mod> type_identifier queryFlights <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res_list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { goods } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res_list ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL through $conn$ ( get the parent column in the relationship table based on $student$ )  * and get all the data. Then use for loop to print each item of the query results.,"public void getRelation ( JdbcTemplate conn , String student ) { List parents = conn . query ( "" select parent from relationship where student = ? "" , new Object [ ] { student } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object parent : parents ) { System . out . println ( parent ) ; } }",Generate syntax code: Execute the SQL through $conn$ ( get the parent column in the relationship table based on $student$ )  * and get all the data. Then use for loop to print each item of the query results.,"<met> <mod> public </mod> void_type getRelation <for> ( <for> type_identifier conn </for> , <for> type_identifier student </for> ) </for> <blo> { <loc> type_identifier <var> parents = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { student } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier parent : parents ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( parent ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute SQL based on $conn$ ( query all columns of types_test_data in the $DateCol$ table based on $conn$ ) , get all the data, and set the assertion to determine whether the query result is empty.","public void testDateParsing ( JdbcTemplate conn , String DateCol ) { List ery = conn . query ( "" select from types_test_data where datecol= ? "" , new Object [ ] { DateCol } , new BeanPropertyRowMapper ( List . class ) ) ; assert ery . size ( ) > 0 ; }","Generate syntax code: Execute SQL based on $conn$ ( query all columns of types_test_data in the $DateCol$ table based on $conn$ ) , get all the data, and set the assertion to determine whether the query result is empty.","<met> <mod> public </mod> void_type testDateParsing <for> ( <for> type_identifier conn </for> , <for> type_identifier DateCol </for> ) </for> <blo> { <loc> type_identifier <var> ery = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DateCol } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> ery . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Execute the SQL ( querying all game data in the flights where destination is $destination$ ) using the $conn$ connection, and use the for loop to traverse the query results and print.","public void flightPage ( JdbcTemplate conn , String destination ) { List texts = conn . query ( "" select game from flights where destination= ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object t : texts ) { System . out . println ( t ) ; } }","Generate syntax code: Execute the SQL ( querying all game data in the flights where destination is $destination$ ) using the $conn$ connection, and use the for loop to traverse the query results and print.","<met> <mod> public </mod> void_type flightPage <for> ( <for> type_identifier conn </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier t : texts ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( t ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to start a transaction. Try to execute the following code: Use the java expression to execute SQL ( query the quantity information in the $cookies$ table based on $cookie_id$ ) ; execute and get all the query results; and print the query results. If an exception occurs, use transaction to rollback and print the error message.","public void shipIt ( EntityManager conn , Root < Object > cookies , String cookie_id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cookies ) . where ( cb . equal ( cookies . get ( "" cookie_id "" ) , cookie_id ) ) ; List < Object > recs = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( recs ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . out . println ( "" error "" ) ; } }","Generate syntax code: Use $conn$ to start a transaction. Try to execute the following code: Use the java expression to execute SQL ( query the quantity information in the $cookies$ table based on $cookie_id$ ) ; execute and get all the query results; and print the query results. If an exception occurs, use transaction to rollback and print the error message.","<met> <mod> public </mod> void_type shipIt <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cookies </for> , <for> type_identifier cookie_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( cookies ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cookies . get <arg> ( string_literal ) </arg> </met> , cookie_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( recs ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the request method is ""GET"", return the rendered ""login.html"" page; if the request method is ""POST"", use $conn$ to execute SQL ( query the id column in the users table based on $username$ and $password$ ) and get the first query result.","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_id = conn . query ( "" select id from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_id . isEmpty ( ) ) { return "" error.html "" ; } else { return "" /index "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request method is ""GET"", return the rendered ""login.html"" page; if the request method is ""POST"", use $conn$ to execute SQL ( query the id column in the users table based on $username$ and $password$ ) and get the first query result.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user_id = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user_id . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ connection to execute SQL query statement and the content is as follows: query the number of id in the 'table' table based on $aname$, convert row 0 and column 0 data of all query result to integer data and return it.","public Object selectValue ( JdbcTemplate conn , String aname ) { List count = conn . query ( "" select count(id) from table where aname = ? "" , new Object [ ] { aname } , new BeanPropertyRowMapper ( List . class ) ) ; return count . get ( 0 ) ; }","Generate syntax code: Use $conn$ connection to execute SQL query statement and the content is as follows: query the number of id in the 'table' table based on $aname$, convert row 0 and column 0 data of all query result to integer data and return it.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier aname </for> ) </for> <blo> { <loc> type_identifier <var> count = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { aname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> count . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set SQL: Query the id in the table when the name column in $sample_table$ is $value$. SQL calls the execute method to execute nd get a piece of data. If the first obtained data exists, return the first element of the first data. Otherwise, return -1.","public Object getSampleId ( EntityManager sess , Root < Object > sample_table , String value ) { CriteriaBuilder cb = sess . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( sample_table ) . where ( cb . equal ( sample_table . get ( "" name "" ) , value ) ) ; List < Object > result = sess . createQuery ( cq ) . getResultList ( ) ; if ( ! result . isEmpty ( ) ) { Object x = result . get ( 0 ) ; Object sample_id = JSONObject . parseObject ( x . toString ( ) ) . get ( 0 ) ; return sample_id ; } else { return "" -1 "" ; } }","Generate syntax code: Use the java expression to set SQL: Query the id in the table when the name column in $sample_table$ is $value$. SQL calls the execute method to execute nd get a piece of data. If the first obtained data exists, return the first element of the first data. Otherwise, return -1.","<met> <mod> public </mod> type_identifier getSampleId <for> ( <for> type_identifier sess </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sample_table </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sess . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( sample_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> sample_table . get <arg> ( string_literal ) </arg> </met> , value ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> sess . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> result . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <loc> type_identifier <var> x = <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> sample_id = <met> <met> JSONObject . parseObject <arg> ( <met> x . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return sample_id ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the bookpage column in the books table according to $isbn$ ) and get the first query result. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' book.html' page, where the book parameter is the queried result. If an exception is caught, return the rendered 'error.html' page.","public String book ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select bookpage from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { Object book = books . get ( 0 ) ; model . addAttribute ( "" book "" , book ) ; return "" book.html "" ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the bookpage column in the books table according to $isbn$ ) and get the first query result. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' book.html' page, where the book parameter is the queried result. If an exception is caught, return the rendered 'error.html' page.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> book = <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $game$ to get the database engine and establish a connection. Execute the SQL statement by joining ( query all $Score$ data and return ) .,"public List scoreList ( EntityManager game , Root < Object > Score ) { CriteriaBuilder cb = game . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Score ) ; List < Object > laten = game . createQuery ( cq ) . getResultList ( ) ; return laten ; }",Generate syntax code: Use $game$ to get the database engine and establish a connection. Execute the SQL statement by joining ( query all $Score$ data and return ) .,"<met> <mod> public </mod> type_identifier scoreList <for> ( <for> type_identifier game </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Score </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> game . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( Score ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> laten = <met> <met> game . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return laten ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL statement and the content is as follows: Query the 0th element of the first id data in the nittest_table table and set the assertion to determine that the query result is 0.,"public void testTransaction ( JdbcTemplate conn ) { List numbers = conn . query ( "" select id from nittest_table "" , new BeanPropertyRowMapper ( List . class ) ) ; int number = ( Integer ) JSONObject . parseObject ( numbers . get ( 0 ) . toString ( ) ) . get ( 0 ) ; assert number == 0 ; }",Generate syntax code: Use $conn$ to execute the SQL statement and the content is as follows: Query the 0th element of the first id data in the nittest_table table and set the assertion to determine that the query result is 0.,"<met> <mod> public </mod> void_type testTransaction <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> numbers = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> number = <cas> ( type_identifier ) <met> <met> JSONObject . parseObject <arg> ( <met> <met> numbers . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </cas> </var> ; </loc> <ass> assert <bin> number == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Use $conn$ cursor method to execute SQL ( get the name column in the USER table ) and get all the data. Close the cursor connection, then close the database connection and finally return the query results.","public void selectUser ( JdbcTemplate conn ) { List names = conn . query ( "" select name from user "" , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( names ) ; }","Generate syntax code: Use $conn$ cursor method to execute SQL ( get the name column in the USER table ) and get all the data. Close the cursor connection, then close the database connection and finally return the query results.","<met> <mod> public </mod> void_type selectUser <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( names ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Create and return a cursor using $conn$. Execute SQL ( select all columns in the $users$ ) and get all the data. Close the cursor and database connection, and finally return the result of the query.","public List searchUsers ( JdbcTemplate conn ) { List users = conn . query ( "" select * from user "" , new BeanPropertyRowMapper ( List . class ) ) ; return users ; }","Generate syntax code: Create and return a cursor using $conn$. Execute SQL ( select all columns in the $users$ ) and get all the data. Close the cursor and database connection, and finally return the result of the query.","<met> <mod> public </mod> type_identifier searchUsers <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return users ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( get all the columns in the reviews where token is $token$ ) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the rendered ""index.html"", where the review_words parameter is the list content.","public String cleanReview ( JdbcTemplate conn , String token , Model model ) { List review_words = conn . query ( "" select * from reviews where token= ? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" review_words "" , review_words ) ; return "" index.html "" ; }","Generate syntax code: Use $conn$ to execute the SQL ( get all the columns in the reviews where token is $token$ ) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the rendered ""index.html"", where the review_words parameter is the list content.","<met> <mod> public </mod> type_identifier cleanReview <for> ( <for> type_identifier conn </for> , <for> type_identifier token </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> review_words = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { token } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , review_words ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Start a thing with $connection$ : set up the SQL using a java expression ( Query the Haslo in the $uzytkownicy$ when the Login is $login$ ) . Execute the SQL using $connection$ and get the first data. Finally return 0th element of the query result.,"public Object getHasloUzytk ( EntityManager connection , Root < Object > uzytkownicy , String login ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( uzytkownicy ) . where ( cb . equal ( uzytkownicy . get ( "" login "" ) , login ) ) ; List < Object > results = connection . createQuery ( cq ) . getResultList ( ) ; Object result = results . get ( 0 ) ; return JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Start a thing with $connection$ : set up the SQL using a java expression ( Query the Haslo in the $uzytkownicy$ when the Login is $login$ ) . Execute the SQL using $connection$ and get the first data. Finally return 0th element of the query result.,"<met> <mod> public </mod> type_identifier getHasloUzytk <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> uzytkownicy </for> , <for> type_identifier login </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( uzytkownicy ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> uzytkownicy . get <arg> ( string_literal ) </arg> </met> , login ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( query all columns in $datapaths$ where dpid is $dpid$ ) using a java expression, execute the SQL with $conn$ and get all the data. Return None if the data is not retrieved, otherwise return True.","public Object getHasloUzytk ( EntityManager connection , Root < Object > uzytkownicy , String login ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( uzytkownicy ) . where ( cb . equal ( uzytkownicy . get ( "" login "" ) , login ) ) ; List < Object > results = connection . createQuery ( cq ) . getResultList ( ) ; Object result = results . get ( 0 ) ; return JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Set the SQL ( query all columns in $datapaths$ where dpid is $dpid$ ) using a java expression, execute the SQL with $conn$ and get all the data. Return None if the data is not retrieved, otherwise return True.","<met> <mod> public </mod> type_identifier getHasloUzytk <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> uzytkownicy </for> , <for> type_identifier login </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( uzytkownicy ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> uzytkownicy . get <arg> ( string_literal ) </arg> </met> , login ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the username column in the users table based on $password$ ) , execute SQL based on $conn$ and get all the query results. Return the rendered ""regsuccess.html"" page with the username parameter being the query results.","public String getPass ( JdbcTemplate conn , String password , Model model ) { List usernames = conn . query ( "" select username from users where password = ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" username "" , usernames ) ; return "" regsuccess.html "" ; }","Generate syntax code: Set SQL ( query the username column in the users table based on $password$ ) , execute SQL based on $conn$ and get all the query results. Return the rendered ""regsuccess.html"" page with the username parameter being the query results.","<met> <mod> public </mod> type_identifier getPass <for> ( <for> type_identifier conn </for> , <for> type_identifier password </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> usernames = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , usernames ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all the information in the users table based on the value of 'name': $user_name$ ) , use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the length of the query results is not equal to 0, and finally return the query results.","public List testHeavyNesting ( JdbcTemplate conn , String user_name ) { List re_user = conn . query ( "" select * from users where name =? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; assert re_user . size ( ) != 0 ; return re_user ; }","Generate syntax code: Set SQL ( query all the information in the users table based on the value of 'name': $user_name$ ) , use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the length of the query results is not equal to 0, and finally return the query results.","<met> <mod> public </mod> type_identifier testHeavyNesting <for> ( <for> type_identifier conn </for> , <for> type_identifier user_name </for> ) </for> <blo> { <loc> type_identifier <var> re_user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> re_user . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return re_user ; </ret> } </blo> </met>"
"Generate origin code: Use $tlengine$ to get the connection. Try to use a database connection to execute SQL ( query all data in the query_users table ) and get all the query results. Return the query results. Finally, make sure that the database connection is closed.","public List testCommit ( DataSource TimeTable ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List userinf = engine . query ( "" select * from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return userinf ; }","Generate syntax code: Use $tlengine$ to get the connection. Try to use a database connection to execute SQL ( query all data in the query_users table ) and get all the query results. Return the query results. Finally, make sure that the database connection is closed.","<met> <mod> public </mod> type_identifier testCommit <for> ( <for> type_identifier TimeTable </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( TimeTable ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> userinf = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return userinf ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $DB_CONNECT_STRING$ where a parameter max_overflow is 5, set the SQL statement ( query the topics column in the spider_jam_comment table based on $id$ ) , get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list, and return the list.","public List getTotalRequestUrls ( DataSource DB_CONNECT_STRING , String id ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select topics from spider_jam_comment where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List list_request_urls = new ArrayList ( ) ; for ( Object result : results ) { list_request_urls . add ( result ) ; } return list_request_urls ; }","Generate syntax code: Get the database engine through $DB_CONNECT_STRING$ where a parameter max_overflow is 5, set the SQL statement ( query the topics column in the spider_jam_comment table based on $id$ ) , get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getTotalRequestUrls <for> ( <for> type_identifier DB_CONNECT_STRING </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DB_CONNECT_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list_request_urls = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> list_request_urls . add <arg> ( result ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list_request_urls ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all data in the id column of the bypass table based on $machinary$ and $transaction$ ) and return the query results.,"public List testCommit ( JdbcTemplate conn , String machinary , String transaction ) { List results = conn . query ( "" select id from bypass where machinary = ? and transaction = ? "" , new Object [ ] { machinary , transaction } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Use $conn$ to execute SQL ( query all data in the id column of the bypass table based on $machinary$ and $transaction$ ) and return the query results.,"<met> <mod> public </mod> type_identifier testCommit <for> ( <for> type_identifier conn </for> , <for> type_identifier machinary </for> , <for> type_identifier transaction </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { machinary , transaction } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( query the oppose column in the show table according to $link$ ) , and get the first row of data. If the query result is not empty, print the query result, and finally return it.","public Object getShows ( JdbcTemplate conn , String link ) { List rows = conn . query ( "" select oppose from show where link= ? "" , new Object [ ] { link } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; if ( ! rows . isEmpty ( ) ) { System . out . println ( row ) ; } return row ; }","Generate syntax code: Execute SQL through $conn$ ( query the oppose column in the show table according to $link$ ) , and get the first row of data. If the query result is not empty, print the query result, and finally return it.","<met> <mod> public </mod> type_identifier getShows <for> ( <for> type_identifier conn </for> , <for> type_identifier link </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { link } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> rows . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </if_> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to get the connection, execute the SQL connection ( querying the contents of players when player_id is $pid$ ) and get all the data. If the query result is not None, each element in the query result is converted to dict and return. Otherwise, return None.","public List getPlayerInfo ( DataSource engine , String pid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from players where player_id=? "" , new Object [ ] { pid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return res ; } else { return null ; } }","Generate syntax code: Use $engine$ to get the connection, execute the SQL connection ( querying the contents of players when player_id is $pid$ ) and get all the data. If the query result is not None, each element in the query result is converted to dict and return. Otherwise, return None.","<met> <mod> public </mod> type_identifier getPlayerInfo <for> ( <for> type_identifier engine </for> , <for> type_identifier pid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return res ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute a SQL: Query for all columns in the articles table. Return the rendered ""index.html"" and pass the query results to the articles parameter.","public String index ( JdbcTemplate conn , Model model ) { List articles = conn . query ( "" select * from articles "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" articles "" , articles ) ; return "" index.html "" ; }","Generate syntax code: Use $conn$ to execute a SQL: Query for all columns in the articles table. Return the rendered ""index.html"" and pass the query results to the articles parameter.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> articles = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , articles ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all columns in the session table based on $deployment_id$ ) , get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","public List deploy ( JdbcTemplate conn , String deployment_id ) { try { List res = conn . query ( "" select * from session where deployment_id = ? "" , new Object [ ] { deployment_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all columns in the session table based on $deployment_id$ ) , get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","<met> <mod> public </mod> type_identifier deploy <for> ( <for> type_identifier conn </for> , <for> type_identifier deployment_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { deployment_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $DB_CONNECT_STRING$. Execute the SQL statement ( query all the columns in the spider_table according to $body$ ) , get all the data, use for loop to store each item of the query result in list, and return the list.","public List startRequests ( DataSource DB_CONNECT_STRING , String body ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select * from spider_table where body=? "" , new Object [ ] { body } , new BeanPropertyRowMapper ( List . class ) ) ; List res_list = new ArrayList ( ) ; for ( Object item : results ) { res_list . add ( item ) ; } return res_list ; }","Generate syntax code: Get the database engine and establish a connection through $DB_CONNECT_STRING$. Execute the SQL statement ( query all the columns in the spider_table according to $body$ ) , get all the data, use for loop to store each item of the query result in list, and return the list.","<met> <mod> public </mod> type_identifier startRequests <for> ( <for> type_identifier DB_CONNECT_STRING </for> , <for> type_identifier body </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DB_CONNECT_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { body } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : results ) <blo> { <exp> <met> res_list . add <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res_list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the cars table based on $ID$ ) , get all the data, and set the assertion to determine that the query result is not empty list.","public void cars ( JdbcTemplate conn , String ID ) { List df = conn . query ( "" select * from cars where id = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; assert df . size ( ) != 0 ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the cars table based on $ID$ ) , get all the data, and set the assertion to determine that the query result is not empty list.","<met> <mod> public </mod> void_type cars <for> ( <for> type_identifier conn </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> df = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> df . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Try to use the ORM method to execute SQL through $session$ ( query all the information in the $ProductType$ table based on $type_name$ ) , get the first piece of data, and return the query result. If an exception occurs, throw it directly. Finally, make sure that $sessiong$ is closed.","public List < Object > getTypeObject ( EntityManager session , Root < Object > ProductType , String type_name ) { try { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ProductType ) . where ( cb . equal ( ProductType . get ( "" short_name "" ) , type_name ) ) ; List < Object > Product_values = session . createQuery ( cq ) . getResultList ( ) ; return Product_values ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use the ORM method to execute SQL through $session$ ( query all the information in the $ProductType$ table based on $type_name$ ) , get the first piece of data, and return the query result. If an exception occurs, throw it directly. Finally, make sure that $sessiong$ is closed.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getTypeObject <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ProductType </for> , <for> type_identifier type_name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ProductType ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ProductType . get <arg> ( string_literal ) </arg> </met> , type_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> Product_values = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return Product_values ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL: query all columns in the user table where ID is $id$, password is $password$, and email is $email$. Execute the SQL using $db$ and get the first data. Return the rendered 'sigin.html' and pass the query result to the result parameter.","public String findUser ( JdbcTemplate db , String id , String password , String email , Model model ) { List result = db . query ( "" select * from user where id=? and password=? and email=? "" , new Object [ ] { id , password , email } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" result "" , result ) ; return "" sigin.html "" ; }","Generate syntax code: Set SQL: query all columns in the user table where ID is $id$, password is $password$, and email is $email$. Execute the SQL using $db$ and get the first data. Return the rendered 'sigin.html' and pass the query result to the result parameter.","<met> <mod> public </mod> type_identifier findUser <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> , <for> type_identifier password </for> , <for> type_identifier email </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , password , email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request method is GET, return ""register.html"" after rendering directly. Otherwise, try to execute the SQL using $db$ ( querying all columns in the users table where the usernameis $uname$ and password is $pwd$ ) and get the first data. Finally, return the data. If an exception occurs, return the rendered ""error.html"".","public Object register ( HttpRequest request , JdbcTemplate db , String uname , String pwd ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List users = db . query ( "" select * from users where username = : uname? and password=? "" , new Object [ ] { uname , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; return users . get ( 0 ) ; } catch ( Exception e ) { return "" error.html "" ; } } else { return "" register.html "" ; } }","Generate syntax code: If the request method is GET, return ""register.html"" after rendering directly. Otherwise, try to execute the SQL using $db$ ( querying all columns in the users table where the usernameis $uname$ and password is $pwd$ ) and get the first data. Finally, return the data. If an exception occurs, return the rendered ""error.html"".","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier uname </for> , <for> type_identifier pwd </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> users = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname , pwd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the tbname in the dbname table based on $colname$ ) and get all the data. Convert each item in the query result to dict and return.,"public List getDataset ( JdbcTemplate conn , String colname ) { List res = conn . query ( "" select tbname from dbname where colname= ? "" , new Object [ ] { colname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Use $conn$ to execute SQL ( query the tbname in the dbname table based on $colname$ ) and get all the data. Convert each item in the query result to dict and return.,"<met> <mod> public </mod> type_identifier getDataset <for> ( <for> type_identifier conn </for> , <for> type_identifier colname </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { colname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query where Creator is $creator$ in T_Treasure_EvalCustomItem ) . Execute SQL with $conn$ and get all the data. Return query result if the query result length is greater than 0. Otherwise, return False.","public Object getAllData ( JdbcTemplate conn , String creator ) { List res = conn . query ( "" select * from T_Treasure_EvalCustomItem where Creator= ? "" , new Object [ ] { creator } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return res ; } else { return false ; } }","Generate syntax code: Set SQL ( query where Creator is $creator$ in T_Treasure_EvalCustomItem ) . Execute SQL with $conn$ and get all the data. Return query result if the query result length is greater than 0. Otherwise, return False.","<met> <mod> public </mod> type_identifier getAllData <for> ( <for> type_identifier conn </for> , <for> type_identifier creator </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { creator } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return res ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $pymysql_db$ to set up cursors, execute SQL ( query all columns in the reply table based on $user_id$ and $post_id$ ) , get all query results, close the database connection, and return the rendered 'reply.html' page, where the input argument is the obtained data.","public String replyFunc ( DataSource pymysql_db , String user_id , String post_id , Model model ) { JdbcTemplate cursor = new JdbcTemplate ( pymysql_db ) ; List sqlData = cursor . query ( "" select * from reply where user_id=? and post_id=? "" , new Object [ ] { user_id , post_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" sqlData "" , sqlData ) ; return "" reply.html "" ; }","Generate syntax code: Use $pymysql_db$ to set up cursors, execute SQL ( query all columns in the reply table based on $user_id$ and $post_id$ ) , get all query results, close the database connection, and return the rendered 'reply.html' page, where the input argument is the obtained data.","<met> <mod> public </mod> type_identifier replyFunc <for> ( <for> type_identifier pymysql_db </for> , <for> type_identifier user_id </for> , <for> type_identifier post_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( pymysql_db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sqlData = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , post_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , sqlData ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the players table according to $playersid$ ) , get all the query results, and set the assertion to determine whether the length of the query result is not 0. ""","public void testOpentracing ( JdbcTemplate conn , String playersid ) { List res = conn . query ( "" select * from players where playersid= ? "" , new Object [ ] { playersid } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) != 0 ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the players table according to $playersid$ ) , get all the query results, and set the assertion to determine whether the length of the query result is not 0. ""","<met> <mod> public </mod> void_type testOpentracing <for> ( <for> type_identifier conn </for> , <for> type_identifier playersid </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { playersid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
Generate origin code: Use the java expression to set the SQL ( the number of id in the $telemetry$ table when the query time is $timenow$ ) . Use $conn$ to execute the SQL and get all the data. Store the 0th element of each item in the query result is stored in list and return.,"public List selectrows ( EntityManager conn , Root < Object > telemetry , String timenow ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( telemetry ) . where ( cb . equal ( telemetry . get ( "" time "" ) , timenow ) ) ; List < Object > recs = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object rec : recs ) { list . add ( JSONObject . parseObject ( rec . toString ( ) ) . get ( 0 ) ) ; } return list ; }",Generate syntax code: Use the java expression to set the SQL ( the number of id in the $telemetry$ table when the query time is $timenow$ ) . Use $conn$ to execute the SQL and get all the data. Store the 0th element of each item in the query result is stored in list and return.,"<met> <mod> public </mod> type_identifier selectrows <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> telemetry </for> , <for> type_identifier timenow </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( telemetry ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> telemetry . get <arg> ( string_literal ) </arg> </met> , timenow ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier rec : recs ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> rec . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the title column in the books table based on $author$ and $year$ ) and get all the query results. If no data is obtained, print'No such title', otherwise print the query results.","public void main ( JdbcTemplate conn , String author , String year ) { List item = conn . query ( "" select title from books where author = ? and year = ? "" , new Object [ ] { author , year } , new BeanPropertyRowMapper ( List . class ) ) ; if ( item . isEmpty ( ) ) { System . out . println ( "" No such title "" ) ; } else { System . out . println ( item ) ; } }","Generate syntax code: Execute SQL with $conn$ ( query the title column in the books table based on $author$ and $year$ ) and get all the query results. If no data is obtained, print'No such title', otherwise print the query results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier author </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> item = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author , year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> item . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $date$ table based on $datetime$ ) . Execute SQL with $connection$, get all the data, use for loop to traverse each query result, store the 0th element of each piece of data as list, and return the list.","public List getCodesFromBase ( EntityManager connection , Root < Object > date , String datetime ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( date ) . where ( cb . equal ( date . get ( "" datetime "" ) , datetime ) ) ; List < Object > ans = connection . createQuery ( cq ) . getResultList ( ) ; List ans_list = new ArrayList ( ) ; for ( Object i : ans ) { ans_list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return ans_list ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $date$ table based on $datetime$ ) . Execute SQL with $connection$, get all the data, use for loop to traverse each query result, store the 0th element of each piece of data as list, and return the list.","<met> <mod> public </mod> type_identifier getCodesFromBase <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> date </for> , <for> type_identifier datetime </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( date ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> date . get <arg> ( string_literal ) </arg> </met> , datetime ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ans = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ans_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : ans ) <blo> { <exp> <met> ans_list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ans_list ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$ ( query the strategy_name in 'strategy' based on $strategy_id$ ) get all the data, and finally return the obtained result.","public List checkPreviousStrategyName ( JdbcTemplate conn , String strategy_id ) { List res = conn . query ( "" select strategy_name from strategy where strategy_id= ? "" , new Object [ ] { strategy_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute SQL via $conn$ ( query the strategy_name in 'strategy' based on $strategy_id$ ) get all the data, and finally return the obtained result.","<met> <mod> public </mod> type_identifier checkPreviousStrategyName <for> ( <for> type_identifier conn </for> , <for> type_identifier strategy_id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { strategy_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $connection_string$, where echo parameter is False and convert_unicode parameter is True. Query all data with the aid as $aid$ in the engine table and return it.","public List queryInfo ( DataSource connection_string , String aid ) { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List aout = engine . query ( "" select * from engine where aid = ? "" , new Object [ ] { aid } , new BeanPropertyRowMapper ( List . class ) ) ; return aout ; }","Generate syntax code: Get the database engine through $connection_string$, where echo parameter is False and convert_unicode parameter is True. Query all data with the aid as $aid$ in the engine table and return it.","<met> <mod> public </mod> type_identifier queryInfo <for> ( <for> type_identifier connection_string </for> , <for> type_identifier aid </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( connection_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> aout = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { aid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return aout ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the Lat column in the Incidents table according to $lab$ ) , get all the query results, convert the query results to json and return.","public JSONArray incidentMapData ( JdbcTemplate conn , String lab ) { List results = conn . query ( "" select lat from incidents where lab= ? "" , new Object [ ] { lab } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( results . toString ( ) ) ; }","Generate syntax code: Execute SQL with $conn$ ( query the Lat column in the Incidents table according to $lab$ ) , get all the query results, convert the query results to json and return.","<met> <mod> public </mod> type_identifier incidentMapData <for> ( <for> type_identifier conn </for> , <for> type_identifier lab </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { lab } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> results . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement using a java expression with the content of querying all columns in $NOTES$ when id is $note_id$. Execute the SQL statement with $conn$ and get all the data, then return the query results.","public List showNote ( EntityManager conn , Root < Object > NOTES , String note_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( NOTES ) . where ( cb . equal ( NOTES . get ( "" id "" ) , note_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Set the SQL statement using a java expression with the content of querying all columns in $NOTES$ when id is $note_id$. Execute the SQL statement with $conn$ and get all the data, then return the query results.","<met> <mod> public </mod> type_identifier showNote <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> NOTES </for> , <for> type_identifier note_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( NOTES ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> NOTES . get <arg> ( string_literal ) </arg> </met> , note_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in imdb_movies based on $movietitle$ ) and get all data, finally store the result as list and return.","public List todas ( JdbcTemplate conn , String movietitle ) { List db_result = conn . query ( "" select * from imdb_movies where movietitle=? "" , new Object [ ] { movietitle } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in imdb_movies based on $movietitle$ ) and get all data, finally store the result as list and return.","<met> <mod> public </mod> type_identifier todas <for> ( <for> type_identifier conn </for> , <for> type_identifier movietitle </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { movietitle } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement using $connection$ ( query all columns in the Images where the Id of image is $imageId$ ) , get all the data, and return.","public List selectImg ( JdbcTemplate connection , String imageId ) { List results = connection . query ( "" select * from images where imageid =? "" , new Object [ ] { imageId } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Execute the SQL statement using $connection$ ( query all columns in the Images where the Id of image is $imageId$ ) , get all the data, and return.","<met> <mod> public </mod> type_identifier selectImg <for> ( <for> type_identifier connection </for> , <for> type_identifier imageId </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { imageId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the year column in the books table based on $isbn$, $title$ and $author$ ) , get the first row of data, and return the query results.","public Object main ( JdbcTemplate conn , String isbn , String title , String author ) { List years = conn . query ( "" select * from images where imageid =? "" , new Object [ ] { isbn , title , author } , new BeanPropertyRowMapper ( List . class ) ) ; Object year = years . get ( 0 ) ; return year ; }","Generate syntax code: Use $conn$ to execute SQL ( query the year column in the books table based on $isbn$, $title$ and $author$ ) , get the first row of data, and return the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> ) </for> <blo> { <loc> type_identifier <var> years = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> year = <met> years . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return year ; </ret> } </blo> </met>"
Generate origin code: Execute SQL with $conn$ ( query the sequenceno column in the operation_step table according to $id$ ) and return the obtained first row of data.,"public Object getName ( JdbcTemplate conn , String id ) { List list = conn . query ( "" select sequenceno from operation_step where id =? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return list . get ( 0 ) ; }",Generate syntax code: Execute SQL with $conn$ ( query the sequenceno column in the operation_step table according to $id$ ) and return the obtained first row of data.,"<met> <mod> public </mod> type_identifier getName <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> list . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in 'noodles' based on $firstname$ ) , get all the data, finally return the query result.","public List testfour ( JdbcTemplate conn , String firstname ) { List result = conn . query ( "" select * from noodles where firstname =? "" , new Object [ ] { firstname } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in 'noodles' based on $firstname$ ) , get all the data, finally return the query result.","<met> <mod> public </mod> type_identifier testfour <for> ( <for> type_identifier conn </for> , <for> type_identifier firstname </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { firstname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: Find all the columns from the test_categorical table, get the first piece of data, and return.","public Object testCategorical ( JdbcTemplate conn ) { List list = conn . query ( "" select * from test_categorical "" , new BeanPropertyRowMapper ( List . class ) ) ; Object res = list . get ( 0 ) ; return res ; }","Generate syntax code: Use $conn$ to execute the SQL statement: Find all the columns from the test_categorical table, get the first piece of data, and return.","<met> <mod> public </mod> type_identifier testCategorical <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> list . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: Query all columns in the flights table with 'id': $flight_id$ and get the first piece of data.If the data obtained is empty, render and return ""error.html"", otherwise, render and return ""flight.html"", where the flight parameter is the obtained data.","public String flight ( JdbcTemplate conn , String flight_id , Model model ) { List flight = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flight . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" flight "" , flight ) ; return "" flight.html "" ; } }","Generate syntax code: Use $conn$ to execute the SQL statement: Query all columns in the flights table with 'id': $flight_id$ and get the first piece of data.If the data obtained is empty, render and return ""error.html"", otherwise, render and return ""flight.html"", where the flight parameter is the obtained data.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flight = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flight . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , flight ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $distance$ is not empty, use $db_connection$ to execute SQL ( query all columns in the user table based on $distance$ ) , get all the query results, and return the query results.","public List createUser ( JdbcTemplate db_connection , String distance ) { if ( distance != null ) { return null ; } else { List query = db_connection . query ( "" select * from user where distance= ? "" , new Object [ ] { distance } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; } }","Generate syntax code: If $distance$ is not empty, use $db_connection$ to execute SQL ( query all columns in the user table based on $distance$ ) , get all the query results, and return the query results.","<met> <mod> public </mod> type_identifier createUser <for> ( <for> type_identifier db_connection </for> , <for> type_identifier distance </for> ) </for> <blo> { <if_> if <par> ( <bin> distance != null_literal </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> query = <met> db_connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { distance } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: In ORM, the database engine is fetched using $localhost$ further fetching the Session object. Execute the SQL statement ( query all columns in the $File$ where the id of file is $file_id$ ) , render and return 'file.html', where the file parameter is the result of the query.","public String file ( EntityManager localhost , Root < Object > File , String file_id , Model model ) { CriteriaBuilder cb = localhost . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( File ) . where ( cb . equal ( File . get ( "" id "" ) , file_id ) ) ; List < Object > file = localhost . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" file "" , file ) ; return "" file.html "" ; }","Generate syntax code: In ORM, the database engine is fetched using $localhost$ further fetching the Session object. Execute the SQL statement ( query all columns in the $File$ where the id of file is $file_id$ ) , render and return 'file.html', where the file parameter is the result of the query.","<met> <mod> public </mod> type_identifier file <for> ( <for> type_identifier localhost </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> File </for> , <for> type_identifier file_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> localhost . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( File ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> File . get <arg> ( string_literal ) </arg> </met> , file_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> file = <met> <met> localhost . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , file ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Set the SQL statement: Query the maximum value of code_no in the $codetbl$ table and execute the SQL through the $conn$ connection to get the first piece of data.,"public Object maxCodeNo ( EntityManager conn , Root < Object > codetbl ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( codetbl ) ; List < Object > s = conn . createQuery ( cq ) . getResultList ( ) ; Object r = s . get ( 0 ) ; if ( r != null ) { return JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ; } else { return 0 ; } }",Generate syntax code: Set the SQL statement: Query the maximum value of code_no in the $codetbl$ table and execute the SQL through the $conn$ connection to get the first piece of data.,"<met> <mod> public </mod> type_identifier maxCodeNo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> codetbl </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( codetbl ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> s = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> r = <met> s . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> r != null_literal </bin> ) </par> <blo> { <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Create a database engine where conn_string is $conn_string$ and set the echo parameter to False. Creating session instances using sessionmaker. Execute SQL ( Excute tweets in the $TweetData$ where the datetime of science is $since_datetime$ ) in ORM and get all the data. Return if the query result exists, return None if the query result does not exists.","public List getTweetsSince ( DataSource conn_string , EntityManager sess , Root < Object > TweetData , String since_datetime ) { JdbcTemplate engine = new JdbcTemplate ( conn_string ) ; CriteriaBuilder cb = sess . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( TweetData ) . where ( cb . equal ( TweetData . get ( "" since_datetime "" ) , since_datetime ) ) ; List < Object > tweets = sess . createQuery ( cq ) . getResultList ( ) ; if ( tweets . isEmpty ( ) ) { return null ; } else { return tweets ; } }","Generate syntax code: Create a database engine where conn_string is $conn_string$ and set the echo parameter to False. Creating session instances using sessionmaker. Execute SQL ( Excute tweets in the $TweetData$ where the datetime of science is $since_datetime$ ) in ORM and get all the data. Return if the query result exists, return None if the query result does not exists.","<met> <mod> public </mod> type_identifier getTweetsSince <for> ( <for> type_identifier conn_string </for> , <for> type_identifier sess </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> TweetData </for> , <for> type_identifier since_datetime </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( conn_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> cb = <met> sess . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( TweetData ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> TweetData . get <arg> ( string_literal ) </arg> </met> , since_datetime ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> tweets = <met> <met> sess . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> tweets . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return tweets ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL using a java expression ( get all rows of $table_name$ in the $table$ ) , get the data using $conn$ and return.","public List count ( EntityManager conn , Root < Object > table_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_name ) ; List < Object > r = conn . createQuery ( cq ) . getResultList ( ) ; return r ; }","Generate syntax code: Set the SQL using a java expression ( get all rows of $table_name$ in the $table$ ) , get the data using $conn$ and return.","<met> <mod> public </mod> type_identifier count <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( table_name ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> r = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return r ; </ret> } </blo> </met>"
Generate origin code: Execute SQL through $conn$ ( get meta column in the user table based on $name$ ) and get all the data. Then use for loop to store each item of query results as list and finally return the 0th element of the list contents.,"public List testNullIsDecodedAsEmptyDict ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select meta from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : result ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }",Generate syntax code: Execute SQL through $conn$ ( get meta column in the user table based on $name$ ) and get all the data. Then use for loop to store each item of query results as list and finally return the 0th element of the list contents.,"<met> <mod> public </mod> type_identifier testNullIsDecodedAsEmptyDict <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query all columns in the 'tables' table whose name is $name$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result and print it. If the length of the execution result is 0, print ""No data"".","public void showTable ( JdbcTemplate conn , String name ) { List table = conn . query ( "" select * from tables where name =? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! table . isEmpty ( ) ) { for ( Object data : table ) { System . out . println ( data ) ; } } else { System . out . println ( "" No data "" ) ; } }","Generate syntax code: Set the SQL statement ( query all columns in the 'tables' table whose name is $name$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result and print it. If the length of the execution result is 0, print ""No data"".","<met> <mod> public </mod> void_type showTable <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> table = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> table . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <enh> for ( type_identifier data : table ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( data ) </arg> </met> ; </exp> } </blo> </enh> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $session$ ( query all columns in the 'table' table based on $table_name$ and $destination$ ) , get all the data, close the connection, and return the query result.","public List updateDestdb ( JdbcTemplate session , String table_name , String destination ) { List sets = session . query ( "" select * from table where table_name = ? and destination = ? "" , new Object [ ] { table_name , destination } , new BeanPropertyRowMapper ( List . class ) ) ; return sets ; }","Generate syntax code: Execute SQL with $session$ ( query all columns in the 'table' table based on $table_name$ and $destination$ ) , get all the data, close the connection, and return the query result.","<met> <mod> public </mod> type_identifier updateDestdb <for> ( <for> type_identifier session </for> , <for> type_identifier table_name </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> sets = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_name , destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return sets ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method to execute the SQL statement through the $conn$ connection, which is to query the first piece of data in the $SfWaybillResp$ table whose order_id is $order_id$ and return the obtained data.","public List sfQueryWaybillNormal ( EntityManager conn , Root < Object > SfWaybillResp , String order_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( SfWaybillResp ) . where ( cb . equal ( SfWaybillResp . get ( "" order_id "" ) , order_id ) ) ; List < Object > record = conn . createQuery ( cq ) . getResultList ( ) ; return record ; }","Generate syntax code: Use the ORM method to execute the SQL statement through the $conn$ connection, which is to query the first piece of data in the $SfWaybillResp$ table whose order_id is $order_id$ and return the obtained data.","<met> <mod> public </mod> type_identifier sfQueryWaybillNormal <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> SfWaybillResp </for> , <for> type_identifier order_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( SfWaybillResp ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> SfWaybillResp . get <arg> ( string_literal ) </arg> </met> , order_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> record = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return record ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the sqlite_master table based on $type$ and $name$ ) , get the first row of data, and use for loop to traverse and print the 0th element of each article in the query result.","public void printTables ( JdbcTemplate conn , String type , String name ) { List rows = conn . query ( "" select * from sqlite_master where type =? and name=? "" , new Object [ ] { type , name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : rows ) { System . out . println ( item ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the sqlite_master table based on $type$ and $name$ ) , get the first row of data, and use for loop to traverse and print the 0th element of each article in the query result.","<met> <mod> public </mod> void_type printTables <for> ( <for> type_identifier conn </for> , <for> type_identifier type </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type , name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to set SQL based on the java expression: ( query all columns in $data$ table based on 'id': $keyword_id$ ) , execute SQL with $conn$, get all the data, and return query data.If an Exception occurs during execution, output the error log.","public List getMaxId ( EntityManager conn , Root < Object > data , String keyword_id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( data ) . where ( cb . equal ( data . get ( "" id "" ) , keyword_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set SQL based on the java expression: ( query all columns in $data$ table based on 'id': $keyword_id$ ) , execute SQL with $conn$, get all the data, and return query data.If an Exception occurs during execution, output the error log.","<met> <mod> public </mod> type_identifier getMaxId <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> data </for> , <for> type_identifier keyword_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( data ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> data . get <arg> ( string_literal ) </arg> </met> , keyword_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL statement（Format the output string using the format ( ) function. Query all columns in the ratings where the id of rate is $id_rate$ ) . Execute the SQL statement with the $conn$ connection to get all the data, and return all the data.","public List updatePage ( JdbcTemplate conn , String id_rate ) { List texts = conn . query ( "" select * from ratings where id_rate= ? "" , new Object [ ] { id_rate } , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; }","Generate syntax code: Set up the SQL statement（Format the output string using the format ( ) function. Query all columns in the ratings where the id of rate is $id_rate$ ) . Execute the SQL statement with the $conn$ connection to get all the data, and return all the data.","<met> <mod> public </mod> type_identifier updatePage <for> ( <for> type_identifier conn </for> , <for> type_identifier id_rate </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id_rate } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return texts ; </ret> } </blo> </met>"
"Generate origin code: Use a java expression to set up the SQL: query for all the information in the $passengers$ where flight_id is $id$. Execute the SQL using $db$ and get all the data. The rendered""flight.html"" is returned and the query result is passed to the passengers parameter.","public String getPassengers ( EntityManager db , Root < Object > passengers , String id , Model model ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( passengers ) . where ( cb . equal ( passengers . get ( "" flight_id "" ) , id ) ) ; List < Object > passenger = db . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" passengers "" , passenger ) ; return "" flight.html "" ; }","Generate syntax code: Use a java expression to set up the SQL: query for all the information in the $passengers$ where flight_id is $id$. Execute the SQL using $db$ and get all the data. The rendered""flight.html"" is returned and the query result is passed to the passengers parameter.","<met> <mod> public </mod> type_identifier getPassengers <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> passengers </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( passengers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> passengers . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> passenger = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , passenger ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Open and read the ""flights.csv"" file, use for loop to get each origin in the obtained file, execute SQL with $conn$ ( query the type column in the flights table based on $origin$ ) , get all the query results, store the query results from each loop in list and return the list.","public List main ( JdbcTemplate conn , String origin ) { List l = new ArrayList ( ) ; String filePath = "" flights.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String isbn = sc . nextLine ( ) ; List res = conn . query ( "" select type from flights where origin= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { for ( Object value : res ) { l . add ( value ) ; } } } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } return l ; }","Generate syntax code: Open and read the ""flights.csv"" file, use for loop to get each origin in the obtained file, execute SQL with $conn$ ( query the type column in the flights table based on $origin$ ) , get all the query results, store the query results from each loop in list and return the list.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier origin </for> ) </for> <blo> { <loc> type_identifier <var> l = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> isbn = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <enh> for ( type_identifier value : res ) <blo> { <exp> <met> l . add <arg> ( value ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return l ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement: Query all the data in the $scores$ table based on $feature_name$. Use $conn$ to execute SQL and get all the data. If the execution result is not empty, print the execution result and return; otherwise, return 0.","public Object getSource ( EntityManager conn , Root < Object > scores , String feature_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( scores ) . where ( cb . equal ( scores . get ( "" feature_name "" ) , feature_name ) ) ; List < Object > score = conn . createQuery ( cq ) . getResultList ( ) ; if ( score . isEmpty ( ) ) { return 0 ; } else { return score ; } }","Generate syntax code: Use the java expression to set the SQL statement: Query all the data in the $scores$ table based on $feature_name$. Use $conn$ to execute SQL and get all the data. If the execution result is not empty, print the execution result and return; otherwise, return 0.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> scores </for> , <for> type_identifier feature_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( scores ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> scores . get <arg> ( string_literal ) </arg> </met> , feature_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> score = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> score . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> else <blo> { <ret> return score ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, use the $conn$ connection to execute the SQL ( query the columns in books through $title$ and $isbn$ ) and get the first piece of data. Use for loop iterate through all the query results and print the title attribute of the query results. If the length of the query results is 0, then return False; if the length of the query results is not 0, then return 'browse.html', where the books parameter is the query results. If the request module sends the request in a way other than post, render and return 'browse.html'.","public Object browse ( HttpRequest request , JdbcTemplate conn , String title , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List booksSearch = conn . query ( "" select * from books where title = ? and isbn = ? "" , new Object [ ] { title , isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( booksSearch . isEmpty ( ) ) { return false ; } else { for ( Object book : booksSearch ) { System . out . println ( JSONObject . parseObject ( book . toString ( ) ) . getString ( "" title "" ) ) ; } model . addAttribute ( "" books "" , booksSearch ) ; return "" browse.html "" ; } } else { return "" browse.html "" ; } }","Generate syntax code: If the request module sends the request as post, use the $conn$ connection to execute the SQL ( query the columns in books through $title$ and $isbn$ ) and get the first piece of data. Use for loop iterate through all the query results and print the title attribute of the query results. If the length of the query results is 0, then return False; if the length of the query results is not 0, then return 'browse.html', where the books parameter is the query results. If the request module sends the request in a way other than post, render and return 'browse.html'.","<met> <mod> public </mod> type_identifier browse <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> booksSearch = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> booksSearch . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <enh> for ( type_identifier book : booksSearch ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> book . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> model . addAttribute <arg> ( string_literal , booksSearch ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL statement with $connection$ ( query all content in the books_again where isbn is $isbn$ ) and return the query result using jsonify.,"public JSONArray isbnSelect ( JdbcTemplate connection , String isbn ) { List texts = connection . query ( "" select content from books_again where isbn=? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( texts . toString ( ) ) ; }",Generate syntax code: Execute the SQL statement with $connection$ ( query all content in the books_again where isbn is $isbn$ ) and return the query result using jsonify.,"<met> <mod> public </mod> type_identifier isbnSelect <for> ( <for> type_identifier connection </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> texts . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Create the database engine from $db_uri$ and get the connection. Execute the SQL using the join ( querying the blog information in the DATABASE table where blog_name is $blog_name$ ) and fetch all the data. Close the connection and return the query results.,"public List tearDown ( DataSource db_uri , String blog_name ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List database = engine . query ( "" select blog from database where blog_name= ? "" , new Object [ ] { blog_name } , new BeanPropertyRowMapper ( List . class ) ) ; return database ; }",Generate syntax code: Create the database engine from $db_uri$ and get the connection. Execute the SQL using the join ( querying the blog information in the DATABASE table where blog_name is $blog_name$ ) and fetch all the data. Close the connection and return the query results.,"<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier db_uri </for> , <for> type_identifier blog_name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> database = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { blog_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return database ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL statement ( query all columns in the 'table' table through $r_id$ and $raw_d$ ) . Use $conn$ connection to execute SQL to get all the data. If the query result is empty, return 1; otherwise return 0.","public int getInsertEx ( JdbcTemplate conn , String r_id , String raw_id ) { List ans = conn . query ( "" select * from table where r_id = ? and raw_d = ? "" , new Object [ ] { r_id , raw_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ans . isEmpty ( ) ) { return 1 ; } else { return 0 ; } }","Generate syntax code: Set up SQL statement ( query all columns in the 'table' table through $r_id$ and $raw_d$ ) . Use $conn$ connection to execute SQL to get all the data. If the query result is empty, return 1; otherwise return 0.","<met> <mod> public </mod> <int> int </int> getInsertEx <for> ( <for> type_identifier conn </for> , <for> type_identifier r_id </for> , <for> type_identifier raw_id </for> ) </for> <blo> { <loc> type_identifier <var> ans = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { r_id , raw_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> ans . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> else <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the index using $conn$ and execute the SQL based on the index ( query the number of ids in the CAPTURE table where lastid is $lastid$ ) , then get the first data. Finally,return the query results.","public Object count ( JdbcTemplate conn , String lastid ) { List ress = conn . query ( "" select count(id) from CAPTURE where lastid = ? "" , new Object [ ] { lastid } , new BeanPropertyRowMapper ( List . class ) ) ; Object res = ress . get ( 0 ) ; return res ; }","Generate syntax code: Get the index using $conn$ and execute the SQL based on the index ( query the number of ids in the CAPTURE table where lastid is $lastid$ ) , then get the first data. Finally,return the query results.","<met> <mod> public </mod> type_identifier count <for> ( <for> type_identifier conn </for> , <for> type_identifier lastid </for> ) </for> <blo> { <loc> type_identifier <var> ress = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { lastid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> ress . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL through $conn$ ( get all the columns in the review table based on $book_id$ ) and get all the data. Use for loop to print each item of the query results.,"public void selectValue ( JdbcTemplate conn , String book_id ) { List reviews = conn . query ( "" select * from review where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object review : reviews ) { System . out . println ( review ) ; } }",Generate syntax code: Execute the SQL through $conn$ ( get all the columns in the review table based on $book_id$ ) and get all the data. Use for loop to print each item of the query results.,"<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier review : reviews ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( review ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set up sql ( query all the information in the stock_data table based on $adj_open$ and $end_val$ ) , use $conn$ to execute SQL and get all the query results, and return the query results that converted to json format.","public JSONArray stockData ( JdbcTemplate conn , String adj_open , String end_val ) { List data = conn . query ( "" select * from stock_data where adj_open = ? and end_val = ? "" , new Object [ ] { adj_open , end_val } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }","Generate syntax code: Set up sql ( query all the information in the stock_data table based on $adj_open$ and $end_val$ ) , use $conn$ to execute SQL and get all the query results, and return the query results that converted to json format.","<met> <mod> public </mod> type_identifier stockData <for> ( <for> type_identifier conn </for> , <for> type_identifier adj_open </for> , <for> type_identifier end_val </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { adj_open , end_val } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Get the database engine through $url$. Execute SQL statement ( query the first piece of SCHEMA with $SCHEMA_NAME$ in the INFORMATION table ) and return the query result.,"public List queryDatabase ( DataSource url , String SCHEMA_NAME ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List res = engine . query ( "" select schema from information where schema_name = ? "" , new Object [ ] { SCHEMA_NAME } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Get the database engine through $url$. Execute SQL statement ( query the first piece of SCHEMA with $SCHEMA_NAME$ in the INFORMATION table ) and return the query result.,"<met> <mod> public </mod> type_identifier queryDatabase <for> ( <for> type_identifier url </for> , <for> type_identifier SCHEMA_NAME </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { SCHEMA_NAME } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( get the maximum ID column in the documents where the id of domain is $domain_id$ ) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the list content.","public List run ( JdbcTemplate conn , String domain_id ) { List ret = new ArrayList ( ) ; List list = conn . query ( "" select max(id) from documents where domain_id = ? "" , new Object [ ] { textsid } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : list ) { ret . add ( JSONObject . parseObject ( i . toString ( ) ) . getString ( "" id "" ) ) ; } return ret ; }","Generate syntax code: Use $conn$ to execute the SQL ( get the maximum ID column in the documents where the id of domain is $domain_id$ ) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the list content.","<met> <mod> public </mod> type_identifier run <for> ( <for> type_identifier conn </for> , <for> type_identifier domain_id </for> ) </for> <blo> { <loc> type_identifier <var> ret = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { textsid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : list ) <blo> { <exp> <met> ret . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ret ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement to get the first piece of bname in pages based on $type$, print the obtained data, and store the 0th element of each item of the query result as a list and return it.","public List queryInfo ( JdbcTemplate conn , String type ) { List bout = conn . query ( "" select bname from pages where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( bout ) ; List list = new ArrayList ( ) ; for ( Object item : bout ) { list . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use the $conn$ connection to execute the SQL statement to get the first piece of bname in pages based on $type$, print the obtained data, and store the 0th element of each item of the query result as a list and return it.","<met> <mod> public </mod> type_identifier queryInfo <for> ( <for> type_identifier conn </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> bout = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( bout ) </arg> </met> ; </exp> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : bout ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the dataSST table based on $testDB$ ) , get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","public void testDB ( JdbcTemplate conn , String testDB ) { List result = conn . query ( "" select * from datasst where testdb = ? "" , new Object [ ] { testDB } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : result ) { System . out . println ( r ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the dataSST table based on $testDB$ ) , get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","<met> <mod> public </mod> void_type testDB <for> ( <for> type_identifier conn </for> , <for> type_identifier testDB </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { testDB } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set the SQL statement and the content: Query all the columns in the pg_database through $datname$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$. Try to use the cursor to get all the data, return all the query results, and make sure the cursor is closed.","public List databaseExists ( JdbcTemplate conn , String datname ) { try { List ret = conn . query ( "" select * from pg_database where datname = ? "" , new Object [ ] { datname } , new BeanPropertyRowMapper ( List . class ) ) ; return ret ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Set the SQL statement and the content: Query all the columns in the pg_database through $datname$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$. Try to use the cursor to get all the data, return all the query results, and make sure the cursor is closed.","<met> <mod> public </mod> type_identifier databaseExists <for> ( <for> type_identifier conn </for> , <for> type_identifier datname </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> ret = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ret ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up SQL ( query all the information in the app_default_class table based on $app_eui$ ) , execute SQL with $conn$ and get all the query result. Use for loop to iterate through and print all the query result, and hang the process for 6 seconds.","public void freshCache ( JdbcTemplate conn , String app_eui ) { while ( true ) { List result = conn . query ( "" select * from app_default_class where app_eui =? "" , new Object [ ] { app_eui } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } } }","Generate syntax code: Set up SQL ( query all the information in the app_default_class table based on $app_eui$ ) , execute SQL with $conn$ and get all the query result. Use for loop to iterate through and print all the query result, and hang the process for 6 seconds.","<met> <mod> public </mod> void_type freshCache <for> ( <for> type_identifier conn </for> , <for> type_identifier app_eui </for> ) </for> <blo> { <whi> while <par> ( true ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { app_eui } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </whi> } </blo> </met>"
"Generate origin code: Use $conn$ to query all columns in the books table whose isbn is $isbn$, and get the first piece of information. Render and return ""review.html"", where 'book' parameter is the query result and logged_in parameter is True.","public String writeReview ( JdbcTemplate conn , String isbn , Model model ) { List book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , book ) ; return "" review.html "" ; }","Generate syntax code: Use $conn$ to query all columns in the books table whose isbn is $isbn$, and get the first piece of information. Render and return ""review.html"", where 'book' parameter is the query result and logged_in parameter is True.","<met> <mod> public </mod> type_identifier writeReview <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try the following code: set the SQL using a java expression ( query all the information in the $link_table$ where target_type is $target_type$ and target_id is $target_id$ ) ; execute the SQL using $connection $and get all the data; and return the query results using list. Finally, make sure the $connection$ is closed.","public List < Object > checkLink ( EntityManager connection , Root < Object > link_table , String target_type , String target_id ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( link_table ) . where ( cb . equal ( link_table . get ( "" target_type "" ) , target_type ) ) ; cq . select ( link_table ) . where ( cb . equal ( link_table . get ( "" target_id "" ) , target_id ) ) ; List < Object > res = connection . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Try the following code: set the SQL using a java expression ( query all the information in the $link_table$ where target_type is $target_type$ and target_id is $target_id$ ) ; execute the SQL using $connection $and get all the data; and return the query results using list. Finally, make sure the $connection$ is closed.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> checkLink <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> link_table </for> , <for> type_identifier target_type </for> , <for> type_identifier target_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( link_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> link_table . get <arg> ( string_literal ) </arg> </met> , target_type ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( link_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> link_table . get <arg> ( string_literal ) </arg> </met> , target_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Query all gid from pg_prepared_xacts table via $connection$, convert each item of query result into dict to store as 'list' and return.","public List doRecoverTwophase ( JdbcTemplate conn ) { List resultset = conn . query ( "" select gid from pg_prepared_xacts "" , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : resultset ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Query all gid from pg_prepared_xacts table via $connection$, convert each item of query result into dict to store as 'list' and return.","<met> <mod> public </mod> type_identifier doRecoverTwophase <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> resultset = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : resultset ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use the string matching to set sql ( query all the information in the columns table according to $table_name$ ) , use $conn$ to execute SQL, get all the query results, use for loop to form a tuple of the 0th, 1st and 2nd elements of each article of the query results, store them in the form of list, and return this list.","public List getTableColumnsInfo ( JdbcTemplate conn , String textsid ) { List result = conn . query ( "" select * from columns where table_name= ? "" , new Object [ ] { textsid } , new BeanPropertyRowMapper ( List . class ) ) ; List columns = new ArrayList ( ) ; for ( Object row : result ) { columns . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; columns . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 1 ) ) ; columns . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 2 ) ) ; } return columns ; }","Generate syntax code: Use the string matching to set sql ( query all the information in the columns table according to $table_name$ ) , use $conn$ to execute SQL, get all the query results, use for loop to form a tuple of the 0th, 1st and 2nd elements of each article of the query results, store them in the form of list, and return this list.","<met> <mod> public </mod> type_identifier getTableColumnsInfo <for> ( <for> type_identifier conn </for> , <for> type_identifier textsid </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { textsid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> columns = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> columns . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> columns . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> columns . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return columns ; </ret> } </blo> </met>"
"Generate origin code: Use $data$ to get the database engine and connect the database, execute SQL ( get all the columns in the Codes table where codes_name is $cname$ ) , get all the data, and finally return the query result.","public List getCodes ( DataSource data , String cname ) { JdbcTemplate connection = new JdbcTemplate ( data ) ; List codes = connection . query ( "" select * from Codes where codes_name= ? "" , new Object [ ] { cname } , new BeanPropertyRowMapper ( List . class ) ) ; return codes ; }","Generate syntax code: Use $data$ to get the database engine and connect the database, execute SQL ( get all the columns in the Codes table where codes_name is $cname$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getCodes <for> ( <for> type_identifier data </for> , <for> type_identifier cname </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( data ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> codes = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return codes ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ connection to execute SQL statement ( query all columns in test_frame_roundtrip table based on $id$ ) and get all the data. Set assertion to determine that the returned result is not empty list.,"public void testRoundtrip ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select * from test_frame_roundtrip where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; }",Generate syntax code: Use $conn$ connection to execute SQL statement ( query all columns in test_frame_roundtrip table based on $id$ ) and get all the data. Set assertion to determine that the returned result is not empty list.,"<met> <mod> public </mod> void_type testRoundtrip <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Use $db$ to connect to the database, execute SQL ( get all the columns in the users based on $call$ ) , get all the data, and finally return the obtained result data.","public List testInvalidateTrans ( JdbcTemplate conn , String id ) { List kueridb = conn . query ( "" select * from users where call = ? "" , new Object [ ] { call } , new BeanPropertyRowMapper ( List . class ) ) ; return kueridb ; }","Generate syntax code: Use $db$ to connect to the database, execute SQL ( get all the columns in the users based on $call$ ) , get all the data, and finally return the obtained result data.","<met> <mod> public </mod> type_identifier testInvalidateTrans <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> kueridb = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { call } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return kueridb ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request through POST, execute SQL via $conn$ ( query all columns in the users table where 'username' is $uname$ ) to get all the data. If the length of the first piece of data obtained is not 0, render and return ""error.html""; otherwise, use redirect to return ""/"". If the request module sends the request through GET, render and return ""register.html"".","public Object register ( HttpRequest request , JdbcTemplate conn , String uname ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List check = conn . query ( "" select * from users where username = ? "" , new Object [ ] { uname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check . isEmpty ( ) ) { return "" error.html "" ; } else { return "" / "" ; } } else { return "" register.html "" ; } }","Generate syntax code: If the request module sends the request through POST, execute SQL via $conn$ ( query all columns in the users table where 'username' is $uname$ ) to get all the data. If the length of the first piece of data obtained is not 0, render and return ""error.html""; otherwise, use redirect to return ""/"". If the request module sends the request through GET, render and return ""register.html"".","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier uname </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> check = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> check . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as GET, set the SQL statement ( format the output string with the format ( ) function. Query all the columns in the shoe table with the string $shoeid$ ) , and execute SQL statement with $conn$ connection to GET all the data, make sure the database connection is closed and return the data obtained as jsonify.","public Object register ( HttpRequest request , JdbcTemplate conn , String shoeid ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List rows = conn . query ( "" select * from shoe where shoeid= ? "" , new Object [ ] { shoeid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( rows . toString ( ) ) ; } else { return null ; } }","Generate syntax code: If the request module sends the request as GET, set the SQL statement ( format the output string with the format ( ) function. Query all the columns in the shoe table with the string $shoeid$ ) , and execute SQL statement with $conn$ connection to GET all the data, make sure the database connection is closed and return the data obtained as jsonify.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier shoeid </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { shoeid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> rows . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $sqlite$ to create the database engine and obtain the database connection according to the engine. Use the connection to perform SQL ( query the image information in the imagesAbout table based on $imageId$ ) and get the first piece of data. Finally, return the query result.","public List deleteid ( DataSource sqlite , String imageId ) { JdbcTemplate connection = new JdbcTemplate ( sqlite ) ; List delid = connection . query ( "" select image from imagesabout where imageid= ? "" , new Object [ ] { imageId } , new BeanPropertyRowMapper ( List . class ) ) ; return delid ; }","Generate syntax code: Use $sqlite$ to create the database engine and obtain the database connection according to the engine. Use the connection to perform SQL ( query the image information in the imagesAbout table based on $imageId$ ) and get the first piece of data. Finally, return the query result.","<met> <mod> public </mod> type_identifier deleteid <for> ( <for> type_identifier sqlite </for> , <for> type_identifier imageId </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( sqlite ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> delid = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { imageId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return delid ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Use java expression to set SQL ( query all the information in the $table$ table when id is $table_id$ ) ; use $conn$ to execute SQL and get all the data and finally return the query results. If a SQLAlchemyError exception occurs, the specific exception information should be printed and return False.","public Object countRows ( EntityManager conn , Root < Object > table , String table_id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" table_id "" ) , table_id ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; return rows ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Try to execute the following code: Use java expression to set SQL ( query all the information in the $table$ table when id is $table_id$ ) ; use $conn$ to execute SQL and get all the data and finally return the query results. If a SQLAlchemyError exception occurs, the specific exception information should be printed and return False.","<met> <mod> public </mod> type_identifier countRows <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier table_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , table_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the date column in the StockDB where days is $days$ ) with $conn$ and get all the data, then use the for loop to store the tenth element of each item of the query result as a list and return the list content.","public List GetDates ( JdbcTemplate conn , String days ) { List ft = conn . query ( "" select date from stockdb where days = ? "" , new Object [ ] { days } , new BeanPropertyRowMapper ( List . class ) ) ; List date = new ArrayList ( ) ; for ( Object elt : ft ) { date . add ( JSONObject . parseObject ( elt . toString ( ) ) . get ( 0 ) ) ; } return date ; }","Generate syntax code: Execute the SQL ( get the date column in the StockDB where days is $days$ ) with $conn$ and get all the data, then use the for loop to store the tenth element of each item of the query result as a list and return the list content.","<met> <mod> public </mod> type_identifier GetDates <for> ( <for> type_identifier conn </for> , <for> type_identifier days </for> ) </for> <blo> { <loc> type_identifier <var> ft = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { days } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> date = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier elt : ft ) <blo> { <exp> <met> date . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> elt . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return date ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL statement: Query the first piece of duration in the flights table based on $origin$ and $destination$ and return the query result.,"public List main ( JdbcTemplate conn , String origin , String destination ) { List dura = conn . query ( "" select duration from flights where origin = ? and destination = ? "" , new Object [ ] { origin , destination } , new BeanPropertyRowMapper ( List . class ) ) ; return dura ; }",Generate syntax code: Use $conn$ to execute the SQL statement: Query the first piece of duration in the flights table based on $origin$ and $destination$ and return the query result.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier origin </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> dura = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin , destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return dura ; </ret> } </blo> </met>"
"Generate origin code: If the request method is POST, try to use $conn$ to execute SQL ( query the user column in the logs table based on $username$ ) , get the first piece of data, return the query data. Return False if an Exception occurs during execution.","public Object log ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List ans = conn . query ( "" select user from logs where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return ans ; } catch ( Exception e ) { return false ; } } else { return false ; } }","Generate syntax code: If the request method is POST, try to use $conn$ to execute SQL ( query the user column in the logs table based on $username$ ) , get the first piece of data, return the query data. Return False if an Exception occurs during execution.","<met> <mod> public </mod> type_identifier log <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> ans = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ans ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up the SQL using the text method ( get the col_string in one_row_complex where cat is $cat$ ) , then execute the SQL statement using $conn$ to get all the data and return the query results.","public List testParameter ( JdbcTemplate conn , String cat ) { List result = conn . query ( "" select col_string from one_row_complex where cat = ? "" , new Object [ ] { cat } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set up the SQL using the text method ( get the col_string in one_row_complex where cat is $cat$ ) , then execute the SQL statement using $conn$ to get all the data and return the query results.","<met> <mod> public </mod> type_identifier testParameter <for> ( <for> type_identifier conn </for> , <for> type_identifier cat </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cat } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $sqlite$. Execute the SQL statement ( get all the us_county data in the tblByCountyAndYear table where us_state is $state$ ) and close the database connection. Use for loop to store each element in the query result into list and return the list content.,"public List counties ( DataSource sqlite , String state ) { JdbcTemplate connection = new JdbcTemplate ( sqlite ) ; List result = connection . query ( "" select us_county from tblbycountyandyear where us_state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; List counties = new ArrayList ( ) ; for ( Object row : result ) { counties . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return counties ; }",Generate syntax code: Get the database engine and establish a connection through $sqlite$. Execute the SQL statement ( get all the us_county data in the tblByCountyAndYear table where us_state is $state$ ) and close the database connection. Use for loop to store each element in the query result into list and return the list content.,"<met> <mod> public </mod> type_identifier counties <for> ( <for> type_identifier sqlite </for> , <for> type_identifier state </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( sqlite ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { state } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> counties = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> counties . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return counties ; </ret> } </blo> </met>"
"Generate origin code: Use $db_uri$ to get the database engine and establish a connection. Set the SQL statement ( query all columns in the database table based on $value$ ) . Execute SQL, get all the information, make sure that the database connection is closed and return all the obtained data.","public List tearDown ( DataSource db_uri , String value ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List data = conn . query ( "" select * from database where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }","Generate syntax code: Use $db_uri$ to get the database engine and establish a connection. Set the SQL statement ( query all columns in the database table based on $value$ ) . Execute SQL, get all the information, make sure that the database connection is closed and return all the obtained data.","<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier db_uri </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $game$. Use ORM method to execute the SQL statement ( query all the columns in the $Score$ table according to $id$ ) , get the first piece of data, and return the query results.","public List < Object > scoreSelect ( EntityManager game , Root < Object > Score , String id ) { CriteriaBuilder cb = game . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Score ) . where ( cb . equal ( Score . get ( "" id "" ) , id ) ) ; List < Object > score = game . createQuery ( cq ) . getResultList ( ) ; return score ; }","Generate syntax code: Get the database engine and establish a connection through $game$. Use ORM method to execute the SQL statement ( query all the columns in the $Score$ table according to $id$ ) , get the first piece of data, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> scoreSelect <for> ( <for> type_identifier game </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Score </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> game . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Score ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Score . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> score = <met> <met> game . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return score ; </ret> } </blo> </met>"
"Generate origin code: If $group$ does not exist, print ""group is None"". Otherwise, use $conn$ to execute SQL ( query all columns in the address table based on $group$ ) and get all the data. Convert each item in the query result to a dict type and return.","public List addressShowdb ( JdbcTemplate conn , String group ) { if ( group == null ) { System . out . println ( "" group is None "" ) ; return null ; } else { List groupres = conn . query ( "" select * from address where group=? "" , new Object [ ] { group } , new BeanPropertyRowMapper ( List . class ) ) ; return groupres ; } }","Generate syntax code: If $group$ does not exist, print ""group is None"". Otherwise, use $conn$ to execute SQL ( query all columns in the address table based on $group$ ) and get all the data. Convert each item in the query result to a dict type and return.","<met> <mod> public </mod> type_identifier addressShowdb <for> ( <for> type_identifier conn </for> , <for> type_identifier group </for> ) </for> <blo> { <if_> if <par> ( <bin> group == null_literal </bin> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> groupres = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { group } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return groupres ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set sql ( query all the information in the Callback table based on $addend1$ and $addend2$ ) , use $conn$ to execute SQL, get all the query results, and return them.","public List testDo ( JdbcTemplate conn , String addend1 , String addend2 ) { List rp = conn . query ( "" select * from Callback where addend1 = ? and addend2 = ? "" , new Object [ ] { addend1 , addend2 } , new BeanPropertyRowMapper ( List . class ) ) ; return rp ; }","Generate syntax code: Set sql ( query all the information in the Callback table based on $addend1$ and $addend2$ ) , use $conn$ to execute SQL, get all the query results, and return them.","<met> <mod> public </mod> type_identifier testDo <for> ( <for> type_identifier conn </for> , <for> type_identifier addend1 </for> , <for> type_identifier addend2 </for> ) </for> <blo> { <loc> type_identifier <var> rp = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { addend1 , addend2 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rp ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $url$. Set up a cursor and set the SQL statement ( query all columns in the full_path table according to $tbl$ ) , execute sql, get all the data, and return the query results.","public List testCsvPostgresLoad ( DataSource url , String tbl ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List res = conn . query ( "" select * from full_path where tbl= ? "" , new Object [ ] { tbl } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine and establish a connection through $url$. Set up a cursor and set the SQL statement ( query all columns in the full_path table according to $tbl$ ) , execute sql, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier testCsvPostgresLoad <for> ( <for> type_identifier url </for> , <for> type_identifier tbl </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tbl } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the latitude and longitude data in the Campground table through $nameID$, and use $conn$ to execute SQL to get the first piece of data. If the data obtained is not empty, it is printed.","public void locationDistanceSingleOrig ( JdbcTemplate conn , String nameID ) { List res = conn . query ( "" select latitude, longitude from campground where nameid= ? "" , new Object [ ] { nameID } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { System . out . println ( res ) ; } }","Generate syntax code: Set the SQL statement: Query the latitude and longitude data in the Campground table through $nameID$, and use $conn$ to execute SQL to get the first piece of data. If the data obtained is not empty, it is printed.","<met> <mod> public </mod> void_type locationDistanceSingleOrig <for> ( <for> type_identifier conn </for> , <for> type_identifier nameID </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nameID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the string format method to set SQL: query all columns in TABLE1 based on $db_name$. Execute SQL with $conn$ and get all the data. Set assertion to determine that the length of the query result is not 0.,"public void testSelect ( JdbcTemplate conn , String db_name ) { List result = conn . query ( "" select * from TABLE1 where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; }",Generate syntax code: Use the string format method to set SQL: query all columns in TABLE1 based on $db_name$. Execute SQL with $conn$ and get all the data. Set assertion to determine that the length of the query result is not 0.,"<met> <mod> public </mod> void_type testSelect <for> ( <for> type_identifier conn </for> , <for> type_identifier db_name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
Generate origin code: Create the database engine through $db_string$. Execute a SQL: Query for all columns in the tb_fornecedores table and get all the data. Return all obtained data.,"public List dbConnect ( DataSource db_string ) { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List fornecedores = db . query ( "" select * from tb_fornecedores "" , new BeanPropertyRowMapper ( List . class ) ) ; return fornecedores ; }",Generate syntax code: Create the database engine through $db_string$. Execute a SQL: Query for all columns in the tb_fornecedores table and get all the data. Return all obtained data.,"<met> <mod> public </mod> type_identifier dbConnect <for> ( <for> type_identifier db_string </for> ) </for> <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> fornecedores = <met> db . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return fornecedores ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to execute SQL ( query the fake_stuff column in the fake_table table according to $dialect$ ) , get all the query results, set assertions to determine whether the length of the query results is greater than 0, and return the query results.","public List testExplodeInInitializerDisconnect ( JdbcTemplate engine , String dialect ) { List res = engine . query ( "" select fake_stuff from fake_table where dialect = ? "" , new Object [ ] { dialect } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; return res ; }","Generate syntax code: Use $engine$ to execute SQL ( query the fake_stuff column in the fake_table table according to $dialect$ ) , get all the query results, set assertions to determine whether the length of the query results is greater than 0, and return the query results.","<met> <mod> public </mod> type_identifier testExplodeInInitializerDisconnect <for> ( <for> type_identifier engine </for> , <for> type_identifier dialect </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dialect } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( query the updatetime column in the obj table based on $name$ ) , use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through the cursor of the obtained results, convert 'keys' and 'values' of each piece of data into tuple, zip and dict, and store in a list. Finally return the list.","public List selectValue ( JdbcTemplate conn , String name ) { List results = conn . query ( "" select updatetime from obj where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set up the SQL ( query the updatetime column in the obj table based on $name$ ) , use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through the cursor of the obtained results, convert 'keys' and 'values' of each piece of data into tuple, zip and dict, and store in a list. Finally return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the java expression ( query all the columns in the $note_box$ table based on $id$ ) , get all the data, and return the query results.","public List < Object > whereClauseFn ( EntityManager conn , Root < Object > note_box , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( note_box ) . where ( cb . equal ( note_box . get ( "" id "" ) , id ) ) ; List < Object > stmt = conn . createQuery ( cq ) . getResultList ( ) ; return stmt ; }","Generate syntax code: Use $conn$ to execute the java expression ( query all the columns in the $note_box$ table based on $id$ ) , get all the data, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> whereClauseFn <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> note_box </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( note_box ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> note_box . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> stmt = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return stmt ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to connect the database, then set the assertion not to close the connection, execute SQL ( get the counted connections column in the DBAPI table according to $is_disconnect$ ) and get all the data, further close the connection, and finally return the query result.","public List testReconnect ( DataSource db , String is_disconnect ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List res = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { summary } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $db$ to connect the database, then set the assertion not to close the connection, execute SQL ( get the counted connections column in the DBAPI table according to $is_disconnect$ ) and get all the data, further close the connection, and finally return the query result.","<met> <mod> public </mod> type_identifier testReconnect <for> ( <for> type_identifier db </for> , <for> type_identifier is_disconnect </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { summary } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all the columns in the books table that an id is $book_id$, and get the first piece of data. If the query result is empty, render and return ""error.html""; use for loops traversal to query results, return a traverable ( key, value ) tuple array in a list through the items ( ) method. Otherwise, render and return ""book.html"", where the book parameter is the query result.","public String book ( JdbcTemplate conn , String book_id , Model model ) { List book = conn . query ( "" select * from books where id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book . isEmpty ( ) ) { return "" error.html "" ; } else { for ( Object o : book ) { Map map = JSONObject . parseObject ( o . toString ( ) , Map . class ) ; System . out . println ( map ) ; } model . addAttribute ( "" book "" , book ) ; return "" book.html "" ; } }","Generate syntax code: Use $conn$ to query all the columns in the books table that an id is $book_id$, and get the first piece of data. If the query result is empty, render and return ""error.html""; use for loops traversal to query results, return a traverable ( key, value ) tuple array in a list through the items ( ) method. Otherwise, render and return ""book.html"", where the book parameter is the query result.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <enh> for ( type_identifier o : book ) <blo> { <loc> type_identifier <var> map = <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> , <fie> Map . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( map ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Initialize the log module, if $name$ has a value, set sql ( query the value column in the version table based on $name$ ) , use $connection$ to execute SQL and get the 0th element of the first piece of data. Output the info log that gets the result.","public void connect ( JdbcTemplate connection , String name ) { List cursor = connection . query ( "" select value from version where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; Object schema_version = cursor . get ( 0 ) ; System . out . println ( JSONObject . parseObject ( schema_version . toString ( ) ) . get ( 0 ) ) ; }","Generate syntax code: Initialize the log module, if $name$ has a value, set sql ( query the value column in the version table based on $name$ ) , use $connection$ to execute SQL and get the 0th element of the first piece of data. Output the info log that gets the result.","<met> <mod> public </mod> void_type connect <for> ( <for> type_identifier connection </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> schema_version = <met> cursor . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> schema_version . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Create a database engine based on $host$ and use sessionmaker to create session instantiated objects. Execute SQL through the instantiated object ( query the grades information in the tbl_epstrade table based on $row$ ) and get all the data. Finally, return the query result.","public List initTest ( DataSource host , String row ) { JdbcTemplate session = new JdbcTemplate ( host ) ; List grades = session . query ( "" select grades from tbl_epstrade where row<? "" , new Object [ ] { row } , new BeanPropertyRowMapper ( List . class ) ) ; return grades ; }","Generate syntax code: Create a database engine based on $host$ and use sessionmaker to create session instantiated objects. Execute SQL through the instantiated object ( query the grades information in the tbl_epstrade table based on $row$ ) and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier initTest <for> ( <for> type_identifier host </for> , <for> type_identifier row </for> ) </for> <blo> { <loc> type_identifier <var> session = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> grades = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { row } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return grades ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: query all columns in the queue_table where id is $id$. Execute SQL with $conn$ and get the first data. If the query result length is greater than 0, the 0th element of the query result is returned. ""","public Object getqueue ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select * from queue_table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! result . isEmpty ( ) ) { return result . get ( 0 ) ; } else { return null ; } }","Generate syntax code: Set SQL: query all columns in the queue_table where id is $id$. Execute SQL with $conn$ and get the first data. If the query result length is greater than 0, the 0th element of the query result is returned. ""","<met> <mod> public </mod> type_identifier getqueue <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> result . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute the following code: Use the java expression to set SQL: When id is $flight_id$, query all the corresponding information in the $flights$ table; use $conn$ to execute SQL and get all the data; if the query result length is not 0, render the ""success.html"" page and return; otherwise, pass ""Sorry, no such flight with that id. to the message parameter and return the rendered ""error.html"" page. If a ValueError exception occurs, pass ""Invalid flight number. to the message parameter and render the ""error.htm"" page.","public String book ( EntityManager conn , Root < Object > flights , String flight_id , Model model ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( flights ) . where ( cb . equal ( flights . get ( "" id "" ) , flight_id ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; if ( result . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" Sorry, no such flight with that id. "" ) ; return "" error.html "" ; } else { return "" success.html "" ; } } catch ( Exception e ) { model . addAttribute ( "" message "" , "" Invalid flight number. "" ) ; return "" error.html "" ; } }","Generate syntax code: Try to execute the following code: Use the java expression to set SQL: When id is $flight_id$, query all the corresponding information in the $flights$ table; use $conn$ to execute SQL and get all the data; if the query result length is not 0, render the ""success.html"" page and return; otherwise, pass ""Sorry, no such flight with that id. to the message parameter and return the rendered ""error.html"" page. If a ValueError exception occurs, pass ""Invalid flight number. to the message parameter and render the ""error.htm"" page.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> flights </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( flights ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> flights . get <arg> ( string_literal ) </arg> </met> , flight_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $db_engine$ to execute SQL ( query the sample column in the raw_data table based on $test$ ) , get all the query results, and use for loop to print the query results one by one.","public void createAndPopulateRawTable ( JdbcTemplate db_engine , String test ) { List query = db_engine . query ( "" select sample from raw_data where test= ? "" , new Object [ ] { test } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : query ) { System . out . println ( i ) ; } }","Generate syntax code: Use $db_engine$ to execute SQL ( query the sample column in the raw_data table based on $test$ ) , get all the query results, and use for loop to print the query results one by one.","<met> <mod> public </mod> void_type createAndPopulateRawTable <for> ( <for> type_identifier db_engine </for> , <for> type_identifier test </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> db_engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { test } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute SQL ( get all columns in the users where the name is $name$, email is $email$, city is $city$, and phone is $phone$ ) with $conn$ and get all the data, and print the query results.","public void getUser ( JdbcTemplate conn , String name , String email , String city , String phone ) { List exc = conn . query ( "" select * from users where name=? and email=? and city=? and phone=? "" , new Object [ ] { name , email , city , phone } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( exc ) ; }","Generate syntax code: Execute SQL ( get all columns in the users where the name is $name$, email is $email$, city is $city$, and phone is $phone$ ) with $conn$ and get all the data, and print the query results.","<met> <mod> public </mod> void_type getUser <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> , <for> type_identifier email </for> , <for> type_identifier city </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> exc = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , email , city , phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( exc ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the imdb_movies table based on $movietitle$ ) and get all the data, then convert the result to list type and return.","public List buscarPeli ( JdbcTemplate conn , String movietitle ) { List db_result = conn . query ( "" select * from imdb_movies where movietitle = ? "" , new Object [ ] { movietitle } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the imdb_movies table based on $movietitle$ ) and get all the data, then convert the result to list type and return.","<met> <mod> public </mod> type_identifier buscarPeli <for> ( <for> type_identifier conn </for> , <for> type_identifier movietitle </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { movietitle } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query all the columns in the flights table through $value$, use the $conn$ connection to execute SQL, get all the data, store the query result as list and return.","public List getFlights ( JdbcTemplate conn , String value ) { List flights = conn . query ( "" select * from flights where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return flights ; }","Generate syntax code: Set the SQL statement: Query all the columns in the flights table through $value$, use the $conn$ connection to execute SQL, get all the data, store the query result as list and return.","<met> <mod> public </mod> type_identifier getFlights <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return flights ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the id column in the targets table according to $name$ ) ,get the first row of data, and return the 0th element of the query result.","public Object getPwidByName ( JdbcTemplate conn , String name ) { List slf = conn . query ( "" select id from targets where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return slf . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query the id column in the targets table according to $name$ ) ,get the first row of data, and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getPwidByName <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> slf = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> slf . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $session$ ( query all columns in the Users table based on $id$ ) , get all the data, close the connection, and return the query result.","public List getUser ( JdbcTemplate session , String id ) { List imp = session . query ( "" select * from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return imp ; }","Generate syntax code: Execute SQL through $session$ ( query all columns in the Users table based on $id$ ) , get all the data, close the connection, and return the query result.","<met> <mod> public </mod> type_identifier getUser <for> ( <for> type_identifier session </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> imp = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return imp ; </ret> } </blo> </met>"
Generate origin code: Try to execute the following statements: set the SQL ( query for all columns in the USER table where username is $root_username$ and password is $root_password$ ) ; execute the SQL using $connection$ and get the first data. Close the connection and return the result of the query. Return False if exception occurs.,"public Object testDb ( JdbcTemplate connection , String root_username , String root_password ) { try { List res = connection . query ( "" select * from USER where username = ? and password =? "" , new Object [ ] { root_username , root_password } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try to execute the following statements: set the SQL ( query for all columns in the USER table where username is $root_username$ and password is $root_password$ ) ; execute the SQL using $connection$ and get the first data. Close the connection and return the result of the query. Return False if exception occurs.,"<met> <mod> public </mod> type_identifier testDb <for> ( <for> type_identifier connection </for> , <for> type_identifier root_username </for> , <for> type_identifier root_password </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { root_username , root_password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the my_entities table ) and get all the data. Set the assertion to determine that the query result length is not 0. Finally, return the query results in list form.","public List testSave ( JdbcTemplate conn ) { List centities = conn . query ( "" select * from my_entities "" , new BeanPropertyRowMapper ( List . class ) ) ; assert centities . size ( ) != 0 ; return centities ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the my_entities table ) and get all the data. Set the assertion to determine that the query result length is not 0. Finally, return the query results in list form.","<met> <mod> public </mod> type_identifier testSave <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> centities = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> centities . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return centities ; </ret> } </blo> </met>"
"Generate origin code: Try to use the java expression to set up SQL ( query all the data in the $articles_table$ table through $name$ ) . Use the $conn$ connection to execute SQL to get all the data. If an Exception occurs, print exception information and return directly.","public List displayArticleByName ( EntityManager conn , Root < Object > articles_table , String name ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( articles_table ) . where ( cb . equal ( articles_table . get ( "" name "" ) , name ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use the java expression to set up SQL ( query all the data in the $articles_table$ table through $name$ ) . Use the $conn$ connection to execute SQL to get all the data. If an Exception occurs, print exception information and return directly.","<met> <mod> public </mod> type_identifier displayArticleByName <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> articles_table </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( articles_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> articles_table . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL statement with the $conn$ connection: Get All the columns in $flows$ where devid is $devid$ and hour is $hour$, and get all the data, and turn each item of the query into a dict and store it as a list and return.","public List getFlowData ( JdbcTemplate conn , String devid , String hour ) { List res_data = conn . query ( "" select * from flows where devid=? and hour=? "" , new Object [ ] { devid , hour } , new BeanPropertyRowMapper ( List . class ) ) ; return res_data ; }","Generate syntax code: Execute the SQL statement with the $conn$ connection: Get All the columns in $flows$ where devid is $devid$ and hour is $hour$, and get all the data, and turn each item of the query into a dict and store it as a list and return.","<met> <mod> public </mod> type_identifier getFlowData <for> ( <for> type_identifier conn </for> , <for> type_identifier devid </for> , <for> type_identifier hour </for> ) </for> <blo> { <loc> type_identifier <var> res_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { devid , hour } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res_data ; </ret> } </blo> </met>"
"Generate origin code: Create cursor object by $conn$ and execute SQL by cursor:Query all columns from app table, get all the data and return all query results.","public List showAll ( JdbcTemplate conn ) { List res = conn . query ( "" select * from app "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Create cursor object by $conn$ and execute SQL by cursor:Query all columns from app table, get all the data and return all query results.","<met> <mod> public </mod> type_identifier showAll <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the amount of data in the ratings table according to $countid$ ) and return the [0] [0] element in the first query result.,"public Object getFlowData ( JdbcTemplate conn , String countid ) { List num = conn . query ( "" select count(*) from ratings where countid=? "" , new Object [ ] { countid } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( num . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Use $conn$ to execute SQL ( query the amount of data in the ratings table according to $countid$ ) and return the [0] [0] element in the first query result.,"<met> <mod> public </mod> type_identifier getFlowData <for> ( <for> type_identifier conn </for> , <for> type_identifier countid </for> ) </for> <blo> { <loc> type_identifier <var> num = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { countid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> num . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL statement with $db$: Query all columns in books through $isbn$ and get the first piece of data. If there is no query result, then return error through jsonify with the content Invalid isbn.","public JSONObject getBarCounts ( JdbcTemplate db , String isbn ) { List row = db . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( row . isEmpty ( ) ) { JSONObject json = new JSONObject ( ) ; json . put ( "" error "" , "" Invalid isbn "" ) ; } else { return null ; } }","Generate syntax code: Execute SQL statement with $db$: Query all columns in books through $isbn$ and get the first piece of data. If there is no query result, then return error through jsonify with the content Invalid isbn.","<met> <mod> public </mod> type_identifier getBarCounts <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> row = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> row . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL: To query the activateSurvey information in the userdetails table based on $survey$,$company$ and $department$. Use $conn$ to execute SQL and get the first piece of data, and then return the query results.","public List activateSurvey ( JdbcTemplate conn , String survey , String company , String department ) { List values = conn . query ( "" select activatesurvey from userdetails where survey=? and company= ? and department=? "" , new Object [ ] { survey , company , department } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }","Generate syntax code: Set SQL: To query the activateSurvey information in the userdetails table based on $survey$,$company$ and $department$. Use $conn$ to execute SQL and get the first piece of data, and then return the query results.","<met> <mod> public </mod> type_identifier activateSurvey <for> ( <for> type_identifier conn </for> , <for> type_identifier survey </for> , <for> type_identifier company </for> , <for> type_identifier department </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { survey , company , department } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database with $db$, try to execute the SQL ( get all columns in users based on $user_id$ ) , get all the data, return the query result, and finally make sure the connection is closed.","public List testRawjava ( DataSource db , String user_id ) { try { JdbcTemplate conn = new JdbcTemplate ( db ) ; List res = conn . query ( "" select * from users where user_id= ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }","Generate syntax code: Connect to the database with $db$, try to execute the SQL ( get all columns in users based on $user_id$ ) , get all the data, return the query result, and finally make sure the connection is closed.","<met> <mod> public </mod> type_identifier testRawjava <for> ( <for> type_identifier db </for> , <for> type_identifier user_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the uploads_content table based on $content_id$ ) , get all the query results, and use for loop to output each query result.","public void getMetadata ( JdbcTemplate conn , String content_id ) { List rows = conn . query ( "" select * from uploads_content where content_id= ? "" , new Object [ ] { content_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object e : rows ) { System . out . println ( e ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the uploads_content table based on $content_id$ ) , get all the query results, and use for loop to output each query result.","<met> <mod> public </mod> void_type getMetadata <for> ( <for> type_identifier conn </for> , <for> type_identifier content_id </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { content_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier e : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( e ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Get the database engine through $connection_str$ ( set the encoding parameter to 'utf-8' ) , execute the SQL statement ( query all columns in the db_name ) , get all the data and return.","public List searchTable ( DataSource connection_str , String summary ) { JdbcTemplate enj = new JdbcTemplate ( connection_str ) ; List db_result = enj . query ( "" select * from db_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }","Generate syntax code: Get the database engine through $connection_str$ ( set the encoding parameter to 'utf-8' ) , execute the SQL statement ( query all columns in the db_name ) , get all the data and return.","<met> <mod> public </mod> type_identifier searchTable <for> ( <for> type_identifier connection_str </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> enj = <obj> new type_identifier <arg> ( connection_str ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> db_result = <met> enj . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: Use $name$ to query all columns in the database table and get all the data. If there is no row of the query result, use raise to throw the exception with an ""Error"" message. Make sure $conn$ is closed and returns True.","public boolean selectDb ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select * from database where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { System . out . println ( "" Error "" ) ; return false ; } else { return true ; } }","Generate syntax code: Use $name$ to query all columns in the database table and get all the data. If there is no row of the query result, use raise to throw the exception with an ""Error"" message. Make sure $conn$ is closed and returns True.","<met> <mod> public </mod> boolean_type selectDb <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $engine$ ( get the bike_stands column in the stations1 table according to $name$ ) , get all the data, then use for loop to convert each item of the query result into a dictionary type, store it as list, and finally return list content.","public List getBikestands ( JdbcTemplate engine , String name ) { List rows = engine . query ( "" select bike_stands from stations1 where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }","Generate syntax code: Execute SQL with $engine$ ( get the bike_stands column in the stations1 table according to $name$ ) , get all the data, then use for loop to convert each item of the query result into a dictionary type, store it as list, and finally return list content.","<met> <mod> public </mod> type_identifier getBikestands <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Use the java expression to set up the SQL statement: Query the id data in the $users$ table according to $name$, and execute SQL to get all the data. If the length of the obtained data is less than 1, return directly. Otherwise, return all the obtained data.","public List searchProperty ( EntityManager engine , Root < Object > users , String name ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" name "" ) , name ) ) ; List < Object > res = engine . createQuery ( cq ) . getResultList ( ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: connect to the database according to $engine$. Use the java expression to set up the SQL statement: Query the id data in the $users$ table according to $name$, and execute SQL to get all the data. If the length of the obtained data is less than 1, return directly. Otherwise, return all the obtained data.","<met> <mod> public </mod> type_identifier searchProperty <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db_url$ to get the database engine and connect to the database, try to execute SQL ( get the table_name column in the information_schema where table_schema is $table_schema$ ) and get the first data, then return the query results, and throw an exception if an exception occurs during execution.","public Object setOwner ( DataSource db_url , String table_schema ) { try { JdbcTemplate conn = new JdbcTemplate ( db_url ) ; List res = conn . query ( "" select table_name from information_schema where table_schema = ? "" , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return e ; } }","Generate syntax code: Use $db_url$ to get the database engine and connect to the database, try to execute SQL ( get the table_name column in the information_schema where table_schema is $table_schema$ ) and get the first data, then return the query results, and throw an exception if an exception occurs during execution.","<met> <mod> public </mod> type_identifier setOwner <for> ( <for> type_identifier db_url </for> , <for> type_identifier table_schema </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return e ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Set SQL: query the average value of the review_rating in the user_book_review table when book_isbn is $isbn$. Execute the SQL using $db$ and get the first data. Return data for a query using a serialization method.,"public JSONObject api ( JdbcTemplate db , String isbn ) { List book_average_scores = db . query ( "" select avg(review_rating) from user_book_review where book_isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( book_average_scores . get ( 0 ) . toString ( ) ) ; }",Generate syntax code: Set SQL: query the average value of the review_rating in the user_book_review table when book_isbn is $isbn$. Execute the SQL using $db$ and get the first data. Return data for a query using a serialization method.,"<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book_average_scores = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> book_average_scores . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Try to execute the following code: Set up SQL ( query all columns in the pg_database table when datname is $database$ ) ; use $conn$ to execute SQL to get the first piece of data and return the query results. Returns False if an exception occurs.,"public Object databaseExists ( JdbcTemplate conn , String database ) { try { List values = conn . query ( "" select * from pg_database where datname= ? "" , new Object [ ] { database } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try to execute the following code: Set up SQL ( query all columns in the pg_database table when datname is $database$ ) ; use $conn$ to execute SQL to get the first piece of data and return the query results. Returns False if an exception occurs.,"<met> <mod> public </mod> type_identifier databaseExists <for> ( <for> type_identifier conn </for> , <for> type_identifier database </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { database } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up SQL ( query all information in tbl table based on $doc$ ) , use $conn$ to execute SQL and get all query results. Use for loop to iterate through all query results, insert each data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String doc ) { List results = conn . query ( "" select * from tbl where doc = ? "" , new Object [ ] { doc } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set up SQL ( query all information in tbl table based on $doc$ ) , use $conn$ to execute SQL and get all query results. Use for loop to iterate through all query results, insert each data into a list, and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier doc </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { doc } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""GET"", return empty. Otherwise, try to use $conn$ to execute SQL ( query the name column in the flights table based on $id$ ) , get all the data, and return the rendered ""pass.html"" page, where 'f' is set to query data. If an Exception occurs during execution, print ""no flights"".","public Object pas ( HttpRequest request , JdbcTemplate conn , String id , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List f = conn . query ( "" select * from users where email = ? and psd = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" f "" , f ) ; return "" pass.html "" ; } catch ( Exception e ) { System . out . println ( "" no flights "" ) ; return false ; } } else { return false ; } }","Generate syntax code: If the request method is ""GET"", return empty. Otherwise, try to use $conn$ to execute SQL ( query the name column in the flights table based on $id$ ) , get all the data, and return the rendered ""pass.html"" page, where 'f' is set to query data. If an Exception occurs during execution, print ""no flights"".","<met> <mod> public </mod> type_identifier pas <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> f = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , f ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query the isbn data in the books table according to $average_rating$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to store each element in the query result into list and return the list content.","public List review ( JdbcTemplate conn , String average_rating ) { List isbns = conn . query ( "" select isbn from books where average_rating = ? "" , new Object [ ] { average_rating } , new BeanPropertyRowMapper ( List . class ) ) ; return isbns ; }","Generate syntax code: Set the SQL statement ( query the isbn data in the books table according to $average_rating$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to store each element in the query result into list and return the list content.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier conn </for> , <for> type_identifier average_rating </for> ) </for> <blo> { <loc> type_identifier <var> isbns = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { average_rating } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return isbns ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $connection$ ( query the linkValue column in the tableHtml table according to $metadata$ ) and get all records, use for loop to store the value of the linkValue field of each query result in list and return.","public List getEnteredHtmlSet ( JdbcTemplate connection , String metadata ) { List links = connection . query ( "" select linkValue from tableHtml where metadata = ? "" , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object link : links ) { list . add ( JSONObject . parseObject ( link . toString ( ) ) . getString ( "" linkValue "" ) ) ; } return list ; }","Generate syntax code: Execute SQL with $connection$ ( query the linkValue column in the tableHtml table according to $metadata$ ) and get all records, use for loop to store the value of the linkValue field of each query result in list and return.","<met> <mod> public </mod> type_identifier getEnteredHtmlSet <for> ( <for> type_identifier connection </for> , <for> type_identifier metadata </for> ) </for> <blo> { <loc> type_identifier <var> links = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { metadata } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier link : links ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> link . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: If the request request method is GET, the rendered ""pw_change.html"" is returned. Otherwise, set SQL ( query password information in the users table where username is $username$ ) , execute SQL with $conn$, get all the data, and return the query results.","public Object getPw ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List pw = conn . query ( "" select password from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return pw ; } else { return "" pw_change.html "" ; } }","Generate syntax code: If the request request method is GET, the rendered ""pw_change.html"" is returned. Otherwise, set SQL ( query password information in the users table where username is $username$ ) , execute SQL with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier getPw <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> pw = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return pw ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $connection$ to execute SQL ( query the test_logging in the ratings table based on $id$ ) and get all the data. Print all query results and store the 0th element of each item in the query result into list and return.,"public List testLogging ( JdbcTemplate connection , String id ) { List log = connection . query ( "" select test_logging from ratings where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( log ) ; List list = new ArrayList ( ) ; for ( Object test : log ) { list . add ( JSONObject . parseObject ( test . toString ( ) ) . get ( 0 ) ) ; } return list ; }",Generate syntax code: Use $connection$ to execute SQL ( query the test_logging in the ratings table based on $id$ ) and get all the data. Print all query results and store the 0th element of each item in the query result into list and return.,"<met> <mod> public </mod> type_identifier testLogging <for> ( <for> type_identifier connection </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> log = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( log ) </arg> </met> ; </exp> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier test : log ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> test . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( get the sql_id_column column in sql_table based on $sqlschema$ ) , try to use $conn$ to execute the SQL statement, get all the data and return the query result.","public Object getItems ( JdbcTemplate conn , String sqlschema ) { try { List res = conn . query ( "" select sql_id_column from sql_table where sqlschema= ? "" , new Object [ ] { sqlschema } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Set SQL ( get the sql_id_column column in sql_table based on $sqlschema$ ) , try to use $conn$ to execute the SQL statement, get all the data and return the query result.","<met> <mod> public </mod> type_identifier getItems <for> ( <for> type_identifier conn </for> , <for> type_identifier sqlschema </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sqlschema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the key column in the clothes where category is $category$ ) with $conn$, get all the data, and return the query results.","public List main ( JdbcTemplate conn , String category ) { List res = conn . query ( "" select key from clothes where category = ? "" , new Object [ ] { category } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute the SQL ( get the key column in the clothes where category is $category$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier category </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { category } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $db_engine$ to execute SQL ( get abstract column in paperabstracts table based on format-processed $paperid$ ) , get all the data, return null if the length of the obtained result is 0, and finally return the 0th element of the query result.","public Object getAbstract ( JdbcTemplate db_engine , String paperid ) { List tuples = db_engine . query ( "" select abstract from paperabstracts where paperid = ? "" , new Object [ ] { paperid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( tuples . isEmpty ( ) ) { return null ; } else { return tuples . get ( 0 ) ; } }","Generate syntax code: Use $db_engine$ to execute SQL ( get abstract column in paperabstracts table based on format-processed $paperid$ ) , get all the data, return null if the length of the obtained result is 0, and finally return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getAbstract <for> ( <for> type_identifier db_engine </for> , <for> type_identifier paperid </for> ) </for> <blo> { <loc> type_identifier <var> tuples = <met> db_engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { paperid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> tuples . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> tuples . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL using $conn$ ( to get the columns trained_model and metadata in the models where id is $model_id$ ) and get the first data, and finally return the 0th element of the query results.","public Object getId ( JdbcTemplate conn , String model_id ) { List result = conn . query ( "" select trained_model, metadata from models where id = ? "" , new Object [ ] { model_id } , new BeanPropertyRowMapper ( List . class ) ) ; return result . get ( 0 ) ; }","Generate syntax code: Execute SQL using $conn$ ( to get the columns trained_model and metadata in the models where id is $model_id$ ) and get the first data, and finally return the 0th element of the query results.","<met> <mod> public </mod> type_identifier getId <for> ( <for> type_identifier conn </for> , <for> type_identifier model_id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { model_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If $noofdays$ exists, set SQL ( query all columns in eod_data when nse_date is $noofdays$ ) . Execute SQL with $conn$ to get all the data and return the query results.","public Object getEoddata ( JdbcTemplate conn , String noofdays ) { if ( noofdays != null ) { List data = conn . query ( "" select * from eod_data where nse_date= ? "" , new Object [ ] { noofdays } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } else { return null ; } }","Generate syntax code: If $noofdays$ exists, set SQL ( query all columns in eod_data when nse_date is $noofdays$ ) . Execute SQL with $conn$ to get all the data and return the query results.","<met> <mod> public </mod> type_identifier getEoddata <for> ( <for> type_identifier conn </for> , <for> type_identifier noofdays </for> ) </for> <blo> { <if_> if <par> ( <bin> noofdays != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { noofdays } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL statement ( get all the usersname in the users table according to $email$ ) and return all the query results.,"public List getdata ( JdbcTemplate conn , String email ) { List res = conn . query ( "" select usersname from users where email= ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Use $conn$ to execute the SQL statement ( get all the usersname in the users table according to $email$ ) and return all the query results.,"<met> <mod> public </mod> type_identifier getdata <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Try to set SQL ( query all the information in the Neighbors table where the value of DistrictAId is $districtA$ )  use $conn$ to execute sql and get all the data and return the query data.,"public Object importNeighbor ( JdbcTemplate conn , String districtA ) { try { List res = conn . query ( "" select * from Neighbors where DistrictAId= ? "" , new Object [ ] { districtA } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try to set SQL ( query all the information in the Neighbors table where the value of DistrictAId is $districtA$ )  use $conn$ to execute sql and get all the data and return the query data.,"<met> <mod> public </mod> type_identifier importNeighbor <for> ( <for> type_identifier conn </for> , <for> type_identifier districtA </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { districtA } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL statement ( Format the output string with the format ( ) function; Query all columns in finance by $con$. ) , querying all the columns in the finance with the $conn$. ""","public void migrateFinance ( JdbcTemplate conn , String con ) { List texts = conn . query ( "" select * from finance where con= ? "" , new Object [ ] { con } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( texts ) ; }","Generate syntax code: Set up the SQL statement ( Format the output string with the format ( ) function; Query all columns in finance by $con$. ) , querying all the columns in the finance with the $conn$. ""","<met> <mod> public </mod> void_type migrateFinance <for> ( <for> type_identifier conn </for> , <for> type_identifier con </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { con } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( texts ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Try to use $host$ to get the database engine and establish a connection, execute SQL ( get all the columns of AffiliationID in the ReferenceData table that have been processed by the counting method based on $token$ ) , get all the data, close the connection and return the obtained data, otherwise close the connection and hang.","public Object updateAffiliationIdfValue ( DataSource host , String token ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; try { List result = conn . query ( "" select count(AffiliationID) from ReferenceData where token=? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return e ; } }","Generate syntax code: Try to use $host$ to get the database engine and establish a connection, execute SQL ( get all the columns of AffiliationID in the ReferenceData table that have been processed by the counting method based on $token$ ) , get all the data, close the connection and return the obtained data, otherwise close the connection and hang.","<met> <mod> public </mod> type_identifier updateAffiliationIdfValue <for> ( <for> type_identifier host </for> , <for> type_identifier token </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { token } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return e ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine through $DB_CONNECT_STRING$, where the max_overflow parameter is set to 5, execute the SQL statement with the ORM method ( query all columns in the $PortalProfile$ table based on $username$ ) , get the first piece of data, and return the query result.","public List processProfiles ( EntityManager DB_CONNECT_STRING , Root < Object > PortalProfile , String username ) { CriteriaBuilder cb = DB_CONNECT_STRING . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( PortalProfile ) . where ( cb . equal ( PortalProfile . get ( "" url "" ) , username ) ) ; List < Object > values = DB_CONNECT_STRING . createQuery ( cq ) . getResultList ( ) ; return values ; }","Generate syntax code: Get the database engine through $DB_CONNECT_STRING$, where the max_overflow parameter is set to 5, execute the SQL statement with the ORM method ( query all columns in the $PortalProfile$ table based on $username$ ) , get the first piece of data, and return the query result.","<met> <mod> public </mod> type_identifier processProfiles <for> ( <for> type_identifier DB_CONNECT_STRING </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> PortalProfile </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> DB_CONNECT_STRING . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( PortalProfile ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> PortalProfile . get <arg> ( string_literal ) </arg> </met> , username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> DB_CONNECT_STRING . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Query the first comment data in the reviews table with a user_id of $user_id$ through $conn$. Use for loop to iterate through the query results and print, store each element in the query results in list, render and return review.html, where the reviews parameter is the 'list' content.","public String review ( JdbcTemplate conn , String user_id , Model model ) { List reviews = conn . query ( "" select comment from reviews where user_id=? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( reviews . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" reviews "" , reviews ) ; return "" review.html "" ; } }","Generate syntax code: Query the first comment data in the reviews table with a user_id of $user_id$ through $conn$. Use for loop to iterate through the query results and print, store each element in the query results in list, render and return review.html, where the reviews parameter is the 'list' content.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> reviews . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL according to the java expression ( query the maximum value of the epochtime column in the $telemetry$ table based on $date$ ) . Execute SQL through $conn$, get the 0th element of the first piece of data, and return the queried results.","public Object maxepoch ( EntityManager conn , Root < Object > telemetry , String date ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( telemetry ) . where ( cb . equal ( telemetry . get ( "" date "" ) , date ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( result . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Set SQL according to the java expression ( query the maximum value of the epochtime column in the $telemetry$ table based on $date$ ) . Execute SQL through $conn$, get the 0th element of the first piece of data, and return the queried results.","<met> <mod> public </mod> type_identifier maxepoch <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> telemetry </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( telemetry ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> telemetry . get <arg> ( string_literal ) </arg> </met> , date ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all columns in the atable table based on $value$ ) , execute SQL based on $conn$ and get all the query results. Return the data.","public List selectValue ( JdbcTemplate conn , String value ) { List results = conn . query ( "" select * from atable where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set up SQL ( query all columns in the atable table based on $value$ ) , execute SQL based on $conn$ and get all the query results. Return the data.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query load_extension in Table where $hamming_load$ is load_extension ) . Execute the SQL using $db$ and get the first data. Finally, return the query results.","public List begin ( JdbcTemplate db , String hamming_load ) { List txn = db . query ( "" select load_extension from table where hamming_load= ? "" , new Object [ ] { hamming_load } , new BeanPropertyRowMapper ( List . class ) ) ; return txn ; }","Generate syntax code: Set SQL ( query load_extension in Table where $hamming_load$ is load_extension ) . Execute the SQL using $db$ and get the first data. Finally, return the query results.","<met> <mod> public </mod> type_identifier begin <for> ( <for> type_identifier db </for> , <for> type_identifier hamming_load </for> ) </for> <blo> { <loc> type_identifier <var> txn = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { hamming_load } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return txn ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine with $memory$. Start a connection , execute the SQL statement in a java expression ( query for the name in $t_users$ where u2 is $u2$ ) and get the first data. Finally, the query results are returned.","public List < Object > search ( EntityManager memory , Root < Object > t_users , String u2 ) { CriteriaBuilder cb = memory . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( t_users ) . where ( cb . equal ( t_users . get ( "" id "" ) , u2 ) ) ; List < Object > results = memory . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Get the database engine with $memory$. Start a connection , execute the SQL statement in a java expression ( query for the name in $t_users$ where u2 is $u2$ ) and get the first data. Finally, the query results are returned.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> search <for> ( <for> type_identifier memory </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> t_users </for> , <for> type_identifier u2 </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> memory . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( t_users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> t_users . get <arg> ( string_literal ) </arg> </met> , u2 ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> memory . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $testing$. Execute SQL: query all name in the users table based on $id$, return the first query results.","public List test ( DataSource testing , String id ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; List out = connection . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; }","Generate syntax code: Connect to the database through $testing$. Execute SQL: query all name in the users table based on $id$, return the first query results.","<met> <mod> public </mod> type_identifier test <for> ( <for> type_identifier testing </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> out = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> </met>"
"Generate origin code: Query the first id data in the wed_flow table with wed_flow of $wed_flow$ via $conn$. For loop iterates through the query results, prints the 0th element of the query results and returns the query results.","public List selectFlow ( JdbcTemplate conn , String wed_flow ) { List result = conn . query ( "" select id from wed_flow where flow = ? "" , new Object [ ] { wed_flow } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object l : result ) { System . out . println ( JSONObject . parseObject ( l . toString ( ) ) . get ( 0 ) ) ; } return result ; }","Generate syntax code: Query the first id data in the wed_flow table with wed_flow of $wed_flow$ via $conn$. For loop iterates through the query results, prints the 0th element of the query results and returns the query results.","<met> <mod> public </mod> type_identifier selectFlow <for> ( <for> type_identifier conn </for> , <for> type_identifier wed_flow </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { wed_flow } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier l : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> l . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Set SQL: query all the columns in the books table where ISBN is $isbn$. Execute the SQL using $db$ and get the first data. Return the result of the query.,"public Object getBookByISBN ( JdbcTemplate db , String isbn ) { List books = db . query ( "" select * from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return books . get ( 0 ) ; }",Generate syntax code: Set SQL: query all the columns in the books table where ISBN is $isbn$. Execute the SQL using $db$ and get the first data. Return the result of the query.,"<met> <mod> public </mod> type_identifier getBookByISBN <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the operation table based on $operationcode$ ) , get all the query results, and use for loop to traverse and output all the obtained query results.","public void operationFunction ( JdbcTemplate conn , String operationcode ) { List operationRes = conn . query ( "" select * from operation where operationcode= ? "" , new Object [ ] { operationcode } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : operationRes ) { System . out . println ( row ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the operation table based on $operationcode$ ) , get all the query results, and use for loop to traverse and output all the obtained query results.","<met> <mod> public </mod> void_type operationFunction <for> ( <for> type_identifier conn </for> , <for> type_identifier operationcode </for> ) </for> <blo> { <loc> type_identifier <var> operationRes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { operationcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : operationRes ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to connect to the database and create a cursor object through the cursor ( ) method. Execute the SQL statement ( use the format ( ) function to output string in a format way and query all the columns in the 'table' table with the string $table_name$ ) , get all the data, ensure that $conn$ is closed and return the query results.","public List clear ( JdbcTemplate conn , String table_name ) { List result = conn . query ( "" select * from table where table_name= ? "" , new Object [ ] { table_name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $conn$ to connect to the database and create a cursor object through the cursor ( ) method. Execute the SQL statement ( use the format ( ) function to output string in a format way and query all the columns in the 'table' table with the string $table_name$ ) , get all the data, ensure that $conn$ is closed and return the query results.","<met> <mod> public </mod> type_identifier clear <for> ( <for> type_identifier conn </for> , <for> type_identifier table_name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: If $password$ is empty, return the rendered ""register.html"" page; otherwise, use $conn$ to execute SQL ( query all columns in the request table based on $email$ and $password$ ) , get all the data, and return the redirect operation ""/"".","public String register ( JdbcTemplate conn , String email , String password , Model model ) { if ( password == null ) { List data = conn . query ( "" select * from request where email=? and password = ? "" , new Object [ ] { email , password } , new BeanPropertyRowMapper ( List . class ) ) ; return "" / "" ; } else { return "" register.html "" ; } }","Generate syntax code: If $password$ is empty, return the rendered ""register.html"" page; otherwise, use $conn$ to execute SQL ( query all columns in the request table based on $email$ and $password$ ) , get all the data, and return the redirect operation ""/"".","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> , <for> type_identifier password </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <bin> password == null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use java expressions to set up SQL: Query $tbl_node$ table for bp_id. Use $conn$ to execute SQL and get all data. Use for loop to store the 0th element of each item in the query result into set and return it.,"public Set findExisting ( EntityManager conn , Root < Object > tbl_node ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tbl_node ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; Set bp_nodes = new HashSet ( ) ; for ( Object row : result ) { bp_nodes . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return bp_nodes ; }",Generate syntax code: Use java expressions to set up SQL: Query $tbl_node$ table for bp_id. Use $conn$ to execute SQL and get all data. Use for loop to store the 0th element of each item in the query result into set and return it.,"<met> <mod> public </mod> type_identifier findExisting <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tbl_node </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( tbl_node ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> bp_nodes = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> bp_nodes . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return bp_nodes ; </ret> } </blo> </met>"
Generate origin code: Use the ORM method to execute SQL statement ( query the first data in the $Groups$ table based on $uuid$ ) through $session$. Make sure $session$ is closed and return all query results.,"public List getProfile ( EntityManager session , Root < Object > Groups , String uuid ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Groups ) . where ( cb . equal ( Groups . get ( "" uuid "" ) , uuid ) ) ; List < Object > q = session . createQuery ( cq ) . getResultList ( ) ; return q ; }",Generate syntax code: Use the ORM method to execute SQL statement ( query the first data in the $Groups$ table based on $uuid$ ) through $session$. Make sure $session$ is closed and return all query results.,"<met> <mod> public </mod> type_identifier getProfile <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Groups </for> , <for> type_identifier uuid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Groups ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Groups . get <arg> ( string_literal ) </arg> </met> , uuid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> q = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return q ; </ret> } </blo> </met>"
"Generate origin code: Set up sql ( query the bank column in the 'table' table according to $LIMIT$ ) , use $conn$ to execute SQL, get all the query results, and return the 0th element of the query result.","public Object getTableColumnNames ( JdbcTemplate conn , String LIMIT ) { List cur = conn . query ( "" select bank from table where limit=? "" , new Object [ ] { LIMIT } , new BeanPropertyRowMapper ( List . class ) ) ; return cur . get ( 0 ) ; }","Generate syntax code: Set up sql ( query the bank column in the 'table' table according to $LIMIT$ ) , use $conn$ to execute SQL, get all the query results, and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getTableColumnNames <for> ( <for> type_identifier conn </for> , <for> type_identifier LIMIT </for> ) </for> <blo> { <loc> type_identifier <var> cur = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { LIMIT } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> cur . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query the first piece of REMAIN in the chef_to_dish table with id as $id$, use for loop iterate through the query results. Get the 0th element of each row. Print the obtained elements and return them.","public Object setChefToDishByIdIncrease ( JdbcTemplate conn , String id ) { List rows = conn . query ( "" select remain from chef_to_dish where id =? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; Object number = JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ; System . out . println ( number ) ; return number ; }","Generate syntax code: Use $conn$ to query the first piece of REMAIN in the chef_to_dish table with id as $id$, use for loop iterate through the query results. Get the 0th element of each row. Print the obtained elements and return them.","<met> <mod> public </mod> type_identifier setChefToDishByIdIncrease <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> number = <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( number ) </arg> </met> ; </exp> <ret> return number ; </ret> } </blo> </met>"
"Generate origin code: Set SQL according to the java expression ( query the maximum value of the timestamp column in the $DataTable$ table based on $timestamp$ ) . Execute SQL through $conn$ and get all the data. If no data is found, return None. Otherwise, return the result of executing the statement.","public List checkAgg ( EntityManager conn , Root < Object > DataTable , String timestamp ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( DataTable ) . where ( cb . equal ( DataTable . get ( "" timestamp "" ) , timestamp ) ) ; List < Object > last_data_time = conn . createQuery ( cq ) . getResultList ( ) ; if ( last_data_time . isEmpty ( ) ) { return null ; } else { return last_data_time ; } }","Generate syntax code: Set SQL according to the java expression ( query the maximum value of the timestamp column in the $DataTable$ table based on $timestamp$ ) . Execute SQL through $conn$ and get all the data. If no data is found, return None. Otherwise, return the result of executing the statement.","<met> <mod> public </mod> type_identifier checkAgg <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> DataTable </for> , <for> type_identifier timestamp </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( DataTable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> DataTable . get <arg> ( string_literal ) </arg> </met> , timestamp ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> last_data_time = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> last_data_time . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return last_data_time ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine using $oracle$, then execute the SQL using the start method ( get the number column in the team where name is $name$ ) and get all the data and return the query results.","public List getTeam ( DataSource oracle , String name ) { JdbcTemplate engine = new JdbcTemplate ( oracle ) ; List res = engine . query ( "" select number from team where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine using $oracle$, then execute the SQL using the start method ( get the number column in the team where name is $name$ ) and get all the data and return the query results.","<met> <mod> public </mod> type_identifier getTeam <for> ( <for> type_identifier oracle </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( oracle ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Try to use the java expression to execute SQL through $c$: Query all the data in the $users$ table based on $name$ and return the query results. Finally, make sure that $c$ is closed.","public List testTransaction ( EntityManager c , Root < Object > users , String name ) { try { CriteriaBuilder cb = c . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" name "" ) , name ) ) ; List < Object > res = c . createQuery ( cq ) . getResultList ( ) ; return res ; } finally { c . close ( ) ; } }","Generate syntax code: Try to use the java expression to execute SQL through $c$: Query all the data in the $users$ table based on $name$ and return the query results. Finally, make sure that $c$ is closed.","<met> <mod> public </mod> type_identifier testTransaction <for> ( <for> type_identifier c </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> c . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> c . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <fin> finally <blo> { <exp> <met> c . close <arg> ( ) </arg> </met> ; </exp> } </blo> </fin> </try> } </blo> </met>"
Generate origin code: Use the java expression to set the SQL statement and the content is as follows: Query the amount of data in the $articles_table$ table whose categoryID is $category_id$. Execute SQL to get all the data through $connection$ and return the obtained data.,"public List getArticleCount ( EntityManager connection , Root < Object > articles_table , String category_id ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( articles_table ) . where ( cb . equal ( articles_table . get ( "" categoryID "" ) , category_id ) ) ; List < Object > rp = connection . createQuery ( cq ) . getResultList ( ) ; return rp ; }",Generate syntax code: Use the java expression to set the SQL statement and the content is as follows: Query the amount of data in the $articles_table$ table whose categoryID is $category_id$. Execute SQL to get all the data through $connection$ and return the obtained data.,"<met> <mod> public </mod> type_identifier getArticleCount <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> articles_table </for> , <for> type_identifier category_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( articles_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> articles_table . get <arg> ( string_literal ) </arg> </met> , category_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rp = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return rp ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute the SQL statement that query AGE in EMPLOYEE where SEX is $SEX$ and return the result of the query. If an exception occurs, return None.","public List queryPage ( JdbcTemplate conn , String SEX ) { try { List r = conn . query ( "" select age from employee where sex= ? "" , new Object [ ] { SEX } , new BeanPropertyRowMapper ( List . class ) ) ; return r ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$ to execute the SQL statement that query AGE in EMPLOYEE where SEX is $SEX$ and return the result of the query. If an exception occurs, return None.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier SEX </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> r = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { SEX } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return r ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use ORM method to query all the data in $QuestionNode$ table with parent_id as $parent_id$ through $session$. Use for loop iterate through the query results and print them.,"public void total ( EntityManager session , Root < Object > QuestionNode , String parent_id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( QuestionNode ) . where ( cb . equal ( QuestionNode . get ( "" parent_id "" ) , parent_id ) ) ; List < Object > list = session . createQuery ( cq ) . getResultList ( ) ; for ( Object root : list ) { System . out . println ( root ) ; } }",Generate syntax code: Use ORM method to query all the data in $QuestionNode$ table with parent_id as $parent_id$ through $session$. Use for loop iterate through the query results and print them.,"<met> <mod> public </mod> void_type total <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> QuestionNode </for> , <for> type_identifier parent_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( QuestionNode ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> QuestionNode . get <arg> ( string_literal ) </arg> </met> , parent_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> list = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier root : list ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( root ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Query all the columns in the one_row table through $connection$, get all the data, set the assertion to determine that the length of the query result is not 0, and return the query result.","public List testBasicQuery ( JdbcTemplate connection ) { List rows = connection . query ( "" select * from one_row "" , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) != 0 ; return rows ; }","Generate syntax code: Query all the columns in the one_row table through $connection$, get all the data, set the assertion to determine that the length of the query result is not 0, and return the query result.","<met> <mod> public </mod> type_identifier testBasicQuery <for> ( <for> type_identifier connection </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( query all columns in $schema$ where public is $public$ ) using java expression methods, execute the SQL statement by $sess$ and get all the data.","public List schemaExists ( EntityManager sess , Root < Object > schema , String publics ) { CriteriaBuilder cb = sess . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( schema ) . where ( cb . equal ( schema . get ( "" schema_name "" ) , publics ) ) ; List < Object > schema_names = sess . createQuery ( cq ) . getResultList ( ) ; return schema_names ; }","Generate syntax code: Set the SQL ( query all columns in $schema$ where public is $public$ ) using java expression methods, execute the SQL statement by $sess$ and get all the data.","<met> <mod> public </mod> type_identifier schemaExists <for> ( <for> type_identifier sess </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> schema </for> , <for> type_identifier publics </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sess . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( schema ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> schema . get <arg> ( string_literal ) </arg> </met> , publics ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> schema_names = <met> <met> sess . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return schema_names ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( query all columns in the measurement when the DATE is less than the value in $DATE$ ) with $conn$ and get all the data, and return all the query results by jsonify.","public JSONArray tobs ( JdbcTemplate conn , String DATE ) { List tobs_totals = conn . query ( "" select * from measurement where date< ? "" , new Object [ ] { DATE } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( tobs_totals . toString ( ) ) ; }","Generate syntax code: Execute the SQL statement ( query all columns in the measurement when the DATE is less than the value in $DATE$ ) with $conn$ and get all the data, and return all the query results by jsonify.","<met> <mod> public </mod> type_identifier tobs <for> ( <for> type_identifier conn </for> , <for> type_identifier DATE </for> ) </for> <blo> { <loc> type_identifier <var> tobs_totals = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DATE } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> tobs_totals . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Initialize the log module and try to connect the database according to $engine$. Execute SQL ( query the bugid column in the bugs table according to $metaData$ ) , get all the query results and return, and output the debug log if an Exception is caught.","public List fetchAllIssues ( DataSource engine , String metaData ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List rows = conn . query ( "" select bugid from bugs where metaData = ? "" , new Object [ ] { metaData } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Initialize the log module and try to connect the database according to $engine$. Execute SQL ( query the bugid column in the bugs table according to $metaData$ ) , get all the query results and return, and output the debug log if an Exception is caught.","<met> <mod> public </mod> type_identifier fetchAllIssues <for> ( <for> type_identifier engine </for> , <for> type_identifier metaData </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { metaData } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL based on $conn$ ( get the flight column in the flights table based on $id$ ) and get all the data. If the length of the query result is 0, then return the rendered ""error.html"", and finally return the rendered ""flights.html"" directly, where the flights parameter is the query result.","public String flights ( JdbcTemplate conn , String id , Model model ) { List flights = conn . query ( "" select flight from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; } }","Generate syntax code: Execute SQL based on $conn$ ( get the flight column in the flights table based on $id$ ) and get all the data. If the length of the query result is 0, then return the rendered ""error.html"", and finally return the rendered ""flights.html"" directly, where the flights parameter is the query result.","<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the rating in the ratings table based on $isbn$ ) and get all the data. If the length of the obtained result is 1, return the rendered ""searhConfirm.html"", where the num_results parameter is the length of the query result.","public String reviewPage ( JdbcTemplate conn , String isbn , Model model ) { List value = conn . query ( "" select rating from ratings where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( value . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" num_results "" , value . size ( ) ) ; return "" searhConfirm.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the rating in the ratings table based on $isbn$ ) and get all the data. If the length of the obtained result is 1, return the rendered ""searhConfirm.html"", where the num_results parameter is the length of the query result.","<met> <mod> public </mod> type_identifier reviewPage <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> value = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> value . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> value . size <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all columns in the flight_gan table when id is $gan_id$ ) . Return and render ""success.html"" if the number of rows fetched by execution is not zero. If an exception occurs, return and render ""error.html"", pass in the message parameter as ""Invalid flight number..","public String bookPage ( JdbcTemplate conn , String gan_id , Model model ) { List myExecute = conn . query ( "" select * from flight_gan where id= ? "" , new Object [ ] { gan_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( myExecute . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" Invalid flight number. "" ) ; return "" error.html "" ; } else { return "" flights.html "" ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all columns in the flight_gan table when id is $gan_id$ ) . Return and render ""success.html"" if the number of rows fetched by execution is not zero. If an exception occurs, return and render ""error.html"", pass in the message parameter as ""Invalid flight number..","<met> <mod> public </mod> type_identifier bookPage <for> ( <for> type_identifier conn </for> , <for> type_identifier gan_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> myExecute = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { gan_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> myExecute . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $db_engine$ to connect the database and set the SQL, content as follows: Query the status data in the orders table where customerid is $custid$, execute SQL to get all the data, and return the obtained data. When an exception occurs and the database connection is not empty, close the database connection .","public List comprar ( DataSource db_engine , String custid ) { JdbcTemplate engine = new JdbcTemplate ( db_engine ) ; try { List res = engine . query ( "" select status from orders where customerid= ? "" , new Object [ ] { custid } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $db_engine$ to connect the database and set the SQL, content as follows: Query the status data in the orders table where customerid is $custid$, execute SQL to get all the data, and return the obtained data. When an exception occurs and the database connection is not empty, close the database connection .","<met> <mod> public </mod> type_identifier comprar <for> ( <for> type_identifier db_engine </for> , <for> type_identifier custid </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { custid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL ( query all the information in the treview table based on book_id $isbn$ ) , use $conn$ to execute SQL and get all the query results. If the length of the query data is 0, return the rendered 'error.html' page. Otherwise, return the rendered ""books.html"" page and the 'reviews parameter is the query result.","public String searchBook ( JdbcTemplate conn , String isbn , Model model ) { List results = conn . query ( "" select * from treview where book_id = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" reviews "" , results ) ; return "" books.html "" ; } }","Generate syntax code: Set SQL ( query all the information in the treview table based on book_id $isbn$ ) , use $conn$ to execute SQL and get all the query results. If the length of the query data is 0, return the rendered 'error.html' page. Otherwise, return the rendered ""books.html"" page and the 'reviews parameter is the query result.","<met> <mod> public </mod> type_identifier searchBook <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the java expression to execute the SQL statement through $connection$: Query all user_id in the $users$ table, ensure that $connection$ is turned off and return all query results.","public List testNested ( EntityManager connection , Root < Object > users ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) ; List < Object > res = connection . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the java expression to execute the SQL statement through $connection$: Query all user_id in the $users$ table, ensure that $connection$ is turned off and return all query results.","<met> <mod> public </mod> type_identifier testNested <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( users ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If $Cid$ has a value of 0, set SQL ( query all columns of Commands ) , otherwise set SQL ( query all columns of Commands where cid is $Cid$ ) . Execute the SQL statement with $conn$, get all the data and return.","public List selectCommand ( JdbcTemplate conn , Integer Cid ) { String sql_Command = null ; if ( Cid == 0 ) { sql_Command = "" select * from commands "" ; } else { sql_Command = "" select * from commands where cid = ? "" ; } List result = conn . query ( sql_Command , new Object [ ] { Cid } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: If $Cid$ has a value of 0, set SQL ( query all columns of Commands ) , otherwise set SQL ( query all columns of Commands where cid is $Cid$ ) . Execute the SQL statement with $conn$, get all the data and return.","<met> <mod> public </mod> type_identifier selectCommand <for> ( <for> type_identifier conn </for> , <for> type_identifier Cid </for> ) </for> <blo> { <loc> type_identifier <var> sql_Command = null_literal </var> ; </loc> <if_> if <par> ( <bin> Cid == decimal_integer_literal </bin> ) </par> <blo> { <exp> <ass> sql_Command = string_literal </ass> ; </exp> } </blo> else <blo> { <exp> <ass> sql_Command = string_literal </ass> ; </exp> } </blo> </if_> <loc> type_identifier <var> result = <met> conn . query <arg> ( sql_Command , <arr> new type_identifier <dim> [ ] </dim> <arr> { Cid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $mysql_url$, where the echo parameter is set to False, further get the Session object and establish a connection. Execute the SQL statement ( query all the columns in the t1 table according to $id$ ) , get all the data, and print the query results.","public void execute ( DataSource mysql_url , String id ) { JdbcTemplate ss = new JdbcTemplate ( mysql_url ) ; List result = ss . query ( "" select time from comments where summary = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; }","Generate syntax code: Get the database engine through $mysql_url$, where the echo parameter is set to False, further get the Session object and establish a connection. Execute the SQL statement ( query all the columns in the t1 table according to $id$ ) , get all the data, and print the query results.","<met> <mod> public </mod> void_type execute <for> ( <for> type_identifier mysql_url </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ss = <obj> new type_identifier <arg> ( mysql_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> ss . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: create a connection based on $engine$, execute SQL ( query the username in the users table based on $email$ ) and get all the data. Store 0th element of each item of the query result in list. Return False if the length of list is not 0. Otherwise, return True.","public boolean getUser ( DataSource engine , String email ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List username = conn . query ( "" select username from users where email= ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; List l = new ArrayList ( ) ; for ( Object i : username ) { l . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } if ( l . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: create a connection based on $engine$, execute SQL ( query the username in the users table based on $email$ ) and get all the data. Store 0th element of each item of the query result in list. Return False if the length of list is not 0. Otherwise, return True.","<met> <mod> public </mod> boolean_type getUser <for> ( <for> type_identifier engine </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> username = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> l = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : username ) <blo> { <exp> <met> l . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <met> l . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the pointer column of pointer_table based on $ptr$ ) and get all the data. If the number of rows of the query result is not zero, return the query result.","public List updatePointer ( JdbcTemplate conn , String ptr ) { List res = conn . query ( "" select pointer from pointer_table where ptr= ? "" , new Object [ ] { ptr } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Use $conn$ to execute SQL ( get the pointer column of pointer_table based on $ptr$ ) and get all the data. If the number of rows of the query result is not zero, return the query result.","<met> <mod> public </mod> type_identifier updatePointer <for> ( <for> type_identifier conn </for> , <for> type_identifier ptr </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ptr } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $password$ is not empty, use $db$ to execute SQL ( query all columns in the users table based on $password$ ) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""search.html"" page, where the parameter user is the query result.","public String selectRes ( JdbcTemplate conn , String flight_id , Model model ) { List values = conn . query ( "" select * from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( values . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such flights "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" passengers "" , values ) ; return "" fligh.thtml "" ; } }","Generate syntax code: If $password$ is not empty, use $db$ to execute SQL ( query all columns in the users table based on $password$ ) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""search.html"" page, where the parameter user is the query result.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> values . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , values ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( get the date column in the data_hist table based on $code$ ) and get all the data. Then get the length of the query results. If the length is greater than 0, then return the query results.","public List identifyDataHistPriceWave ( JdbcTemplate conn , String code ) { List rs = conn . query ( "" select date from data_hist where code = ? "" , new Object [ ] { code } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }","Generate syntax code: Execute SQL through $conn$ ( get the date column in the data_hist table based on $code$ ) and get all the data. Then get the length of the query results. If the length is greater than 0, then return the query results.","<met> <mod> public </mod> type_identifier identifyDataHistPriceWave <for> ( <for> type_identifier conn </for> , <for> type_identifier code </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { code } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return rs ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use ORM to get all columns in $Users$ table with project_id as $fr$ and use $conn$ to query SQL to get all the data. Then use for loop to store the 0th element of each item of the query result as list, and finally return the contents and length of the list.","public Object search ( EntityManager conn , Root < Object > Users , String fr ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Users ) . where ( cb . equal ( Users . get ( "" project_id "" ) , fr ) ) ; List < Object > rs = conn . createQuery ( cq ) . getResultList ( ) ; List users = new ArrayList ( ) ; for ( Object row : rs ) { users . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } users . add ( users . size ( ) ) ; return users ; }","Generate syntax code: Use ORM to get all columns in $Users$ table with project_id as $fr$ and use $conn$ to query SQL to get all the data. Then use for loop to store the 0th element of each item of the query result as list, and finally return the contents and length of the list.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Users </for> , <for> type_identifier fr </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Users . get <arg> ( string_literal ) </arg> </met> , fr ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> users = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rs ) <blo> { <exp> <met> users . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> users . add <arg> ( <met> users . size <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return users ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Calling$ table according to $id$ ) , get all the queried data, and return the result of the execution statement.","public List < Object > getCallById ( EntityManager conn , Root < Object > Calling , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Calling ) . where ( cb . equal ( Calling . get ( "" project_id "" ) , id ) ) ; List < Object > session = conn . createQuery ( cq ) . getResultList ( ) ; return session ; }","Generate syntax code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Calling$ table according to $id$ ) , get all the queried data, and return the result of the execution statement.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getCallById <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Calling </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Calling ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Calling . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> session = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return session ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method and $conn$ to execute SQL ( query all the information in the $Transaction$ table according to $trans_id$ ) , get all the data queried, and finally output the information of the execution result log.","public void getTransaction ( EntityManager conn , Root < Object > Transaction , String trans_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Transaction ) . where ( cb . equal ( Transaction . get ( "" trans_id "" ) , trans_id ) ) ; List < Object > query = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( query ) ; }","Generate syntax code: Use ORM method and $conn$ to execute SQL ( query all the information in the $Transaction$ table according to $trans_id$ ) , get all the data queried, and finally output the information of the execution result log.","<met> <mod> public </mod> void_type getTransaction <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Transaction </for> , <for> type_identifier trans_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Transaction ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Transaction . get <arg> ( string_literal ) </arg> </met> , trans_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( query ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: Connect to the database with $db$ and create a cursor object to execute the SQL statement: query all columns where the id of pv is $pv_id$ in pv and return the result of the query.,"public List poulateAnagrafica ( DataSource db , String pv_id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List res = engine . query ( "" select * from pv where pv_id= ? "" , new Object [ ] { pv_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Connect to the database with $db$ and create a cursor object to execute the SQL statement: query all columns where the id of pv is $pv_id$ in pv and return the result of the query.,"<met> <mod> public </mod> type_identifier poulateAnagrafica <for> ( <for> type_identifier db </for> , <for> type_identifier pv_id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pv_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all the information in the recommendations table based on $date$ ) , use $conn$ to execute SQL. Use for loop to iterate through to get the cursor of execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Then store in a list and return the list.","public List selectValue ( JdbcTemplate conn , String date ) { List results = conn . query ( "" select * from recommendations where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set up SQL ( query all the information in the recommendations table based on $date$ ) , use $conn$ to execute SQL. Use for loop to iterate through to get the cursor of execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Then store in a list and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine through $postgresql$ and get the connection. Use the connection to execute the SQL ( query all the columns in the articles based on $id$ ) and get the first piece of data. Return the rendered ""article.html"" and pass the query result to the article parameter.","public String article ( DataSource postgresql , String id , Model model ) { JdbcTemplate engine = new JdbcTemplate ( postgresql ) ; List article = engine . query ( "" select * from articles where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" article "" , article . get ( 0 ) ) ; return "" article.html "" ; }","Generate syntax code: Create the database engine through $postgresql$ and get the connection. Use the connection to execute the SQL ( query all the columns in the articles based on $id$ ) and get the first piece of data. Return the rendered ""article.html"" and pass the query result to the article parameter.","<met> <mod> public </mod> type_identifier article <for> ( <for> type_identifier postgresql </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( postgresql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> article = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> article . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get the column_name column in the 'Table' table when column_type is $c_type$ ) , get the first piece of data, print the query result, and finally return the query result.","public List selectValue ( JdbcTemplate db , String c_type ) { List coltype = db . query ( "" select column_name from Table where column_type= ? "" , new Object [ ] { c_type } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( coltype ) ; return coltype ; }","Generate syntax code: Use $db$ to execute SQL ( get the column_name column in the 'Table' table when column_type is $c_type$ ) , get the first piece of data, print the query result, and finally return the query result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db </for> , <for> type_identifier c_type </for> ) </for> <blo> { <loc> type_identifier <var> coltype = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { c_type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( coltype ) </arg> </met> ; </exp> <ret> return coltype ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( query the nspname in the pg_namespace table based on $nspname$ ) , execute the SQL with $conn$ and get all the query results. Store each item of the query results as 'list' and return.","public List getSchemaNames ( JdbcTemplate conn , String nspname ) { List schema_names = conn . query ( "" select nspname from pg_namespace where nspname= ? "" , new Object [ ] { nspname } , new BeanPropertyRowMapper ( List . class ) ) ; return schema_names ; }","Generate syntax code: Set up the SQL ( query the nspname in the pg_namespace table based on $nspname$ ) , execute the SQL with $conn$ and get all the query results. Store each item of the query results as 'list' and return.","<met> <mod> public </mod> type_identifier getSchemaNames <for> ( <for> type_identifier conn </for> , <for> type_identifier nspname </for> ) </for> <blo> { <loc> type_identifier <var> schema_names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nspname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return schema_names ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the email column in the customers table according to $name$ ) , get all the query results, and convert the data to list. If the result of the query is queried, return True; otherwise, return False.","public boolean isUser ( JdbcTemplate conn , String name ) { List res = conn . query ( "" select email from customers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return true ; } else { return false ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the email column in the customers table according to $name$ ) , get all the query results, and convert the data to list. If the result of the query is queried, return True; otherwise, return False.","<met> <mod> public </mod> boolean_type isUser <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return true ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement using the $db$ connection ( query all autoload in the 'table_name' where the metadata is $metadata$ ) , iterate through the query results through the for loop and print.","public void displayTable ( JdbcTemplate db , String metadata ) { List rs = db . query ( "" select autoload from table_name where metadata= ? "" , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rs ) { System . out . println ( row ) ; } }","Generate syntax code: Execute the SQL statement using the $db$ connection ( query all autoload in the 'table_name' where the metadata is $metadata$ ) , iterate through the query results through the for loop and print.","<met> <mod> public </mod> void_type displayTable <for> ( <for> type_identifier db </for> , <for> type_identifier metadata </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { metadata } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rs ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Create the database engine through $path$ and use the raw_connection method to get the connection. If $following$ is not None, use the java expression to set SQL: To query the profilename information in the $users$ table based on $following$. Execute SQL and get all the data and return the query results. Otherwise, return False if $following$ is None.","public Object dbGet ( EntityManager path , Root < Object > users , String following ) { if ( following != null ) { CriteriaBuilder cb = path . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" following "" ) , following ) ) ; List < Object > ling = path . createQuery ( cq ) . getResultList ( ) ; return ling ; } else { return false ; } }","Generate syntax code: Create the database engine through $path$ and use the raw_connection method to get the connection. If $following$ is not None, use the java expression to set SQL: To query the profilename information in the $users$ table based on $following$. Execute SQL and get all the data and return the query results. Otherwise, return False if $following$ is None.","<met> <mod> public </mod> type_identifier dbGet <for> ( <for> type_identifier path </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier following </for> ) </for> <blo> { <if_> if <par> ( <bin> following != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> cb = <met> path . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , following ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ling = <met> <met> path . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return ling ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as GET, render and return ""buy.html"". Otherwise, use $conn$ connection to execute SQL statement ( get the cash in the users table based on $uid$ ) and get the first records. If there is no query result, return None, otherwise use redirect to return the query results.","public Object buy ( HttpRequest request , JdbcTemplate conn , String uid ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select cash from users where uid = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return null ; } else { return rows . get ( 0 ) ; } } else { return "" buy.html "" ; } }","Generate syntax code: If the request module sends the request as GET, render and return ""buy.html"". Otherwise, use $conn$ connection to execute SQL statement ( get the cash in the users table based on $uid$ ) and get the first records. If there is no query result, return None, otherwise use redirect to return the query results.","<met> <mod> public </mod> type_identifier buy <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier uid </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Connect to the database according to$db_connect$ and execute the SQL statement: query all the columns in $employees$ where money is $money$ and get all the data. Store the 0th element of each item of the query result as a list and return.,"public List get ( DataSource db_connect , String money ) { JdbcTemplate engine = new JdbcTemplate ( db_connect ) ; List query = engine . query ( "" select * from employees where money= ? "" , new Object [ ] { money } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object i : query ) { list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return list ; }",Generate syntax code: Connect to the database according to$db_connect$ and execute the SQL statement: query all the columns in $employees$ where money is $money$ and get all the data. Store the 0th element of each item of the query result as a list and return.,"<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier db_connect </for> , <for> type_identifier money </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { money } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""GET"", use $conn$ to execute SQL ( query the rating column in the reviews table based on $book_id$ ) and get all the query results. If the execution statement result is empty, return ""fail""; otherwise, return the query result.","public Object bookpage ( HttpRequest request , JdbcTemplate conn , String book_id ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List review_obj = conn . query ( "" select rating from reviews where book_id= ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_obj . isEmpty ( ) ) { return "" fail "" ; } else { return review_obj ; } } else { return null ; } }","Generate syntax code: If the request method is ""GET"", use $conn$ to execute SQL ( query the rating column in the reviews table based on $book_id$ ) and get all the query results. If the execution statement result is empty, return ""fail""; otherwise, return the query result.","<met> <mod> public </mod> type_identifier bookpage <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> review_obj = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> review_obj . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return review_obj ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the requested method is ""POST"", execute SQL ( get the username column in the users where the book_id is $book$ ) with $conn$ and get all the data, then return the rendered ""book.html"" where the reviews parameter is the result of the query, otherwise ""/book/"" and $book$ handled by redirect are returned.","public Object book ( HttpRequest request , JdbcTemplate conn , String book , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List reviews = conn . query ( "" select username from users where book_id = ? "" , new Object [ ] { book } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return reviews ; } else { return "" /book/ "" + book ; } }","Generate syntax code: If the requested method is ""POST"", execute SQL ( get the username column in the users where the book_id is $book$ ) with $conn$ and get all the data, then return the rendered ""book.html"" where the reviews parameter is the result of the query, otherwise ""/book/"" and $book$ handled by redirect are returned.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier book </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return reviews ; </ret> } </blo> else <blo> { <ret> return <bin> string_literal + book </bin> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL according to the java expression ( get all the columns in the $reviews$ table where book_id is $id$ ) and get all the data. Finally, return the ""title"" and ""author"" contents processed by jsonify, where 'title' is the title column of the query result and 'author' is the author column of the query result.","public JSONArray findBookReviews ( EntityManager db , Root < Object > reviews , String id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( reviews ) . where ( cb . equal ( reviews . get ( "" book_id "" ) , id ) ) ; List < Object > rs = db . createQuery ( cq ) . getResultList ( ) ; JSONArray list = new JSONArray ( ) ; for ( Object r : rs ) { JSONObject json = new JSONObject ( ) ; json . put ( "" title "" , JSONObject . parseObject ( r . toString ( ) ) . getString ( "" title "" ) ) ; json . put ( "" author "" , JSONObject . parseObject ( r . toString ( ) ) . getString ( "" author "" ) ) ; list . add ( json ) ; } return list ; }","Generate syntax code: Use $db$ to execute SQL according to the java expression ( get all the columns in the $reviews$ table where book_id is $id$ ) and get all the data. Finally, return the ""title"" and ""author"" contents processed by jsonify, where 'title' is the title column of the query result and 'author' is the author column of the query result.","<met> <mod> public </mod> type_identifier findBookReviews <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> reviews </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( reviews ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> reviews . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : rs ) <blo> { <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> list . add <arg> ( json ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine through $call_center$ and set the echo parameter to False. Create a connection according to the database engine. Set SQL with the java expression ( query all the information in the $call$ table based on $id_call$ ) . Execute SQL, get all query results and return them.","public List updateStatus ( EntityManager call_center , Root < Object > call , String id_call ) { CriteriaBuilder cb = call_center . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( call ) . where ( cb . equal ( call . get ( "" id_call "" ) , id_call ) ) ; List < Object > result = call_center . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Create the database engine through $call_center$ and set the echo parameter to False. Create a connection according to the database engine. Set SQL with the java expression ( query all the information in the $call$ table based on $id_call$ ) . Execute SQL, get all query results and return them.","<met> <mod> public </mod> type_identifier updateStatus <for> ( <for> type_identifier call_center </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> call </for> , <for> type_identifier id_call </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> call_center . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( call ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> call . get <arg> ( string_literal ) </arg> </met> , id_call ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> call_center . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Get the database engine and make the connection via $config_uri$. Execute SQL ( query all columns in the database_name ) and get all the data. Close the database connection and return the result of the query. If an Exception Exception occurs, the specific Exception information is printed and False is returned.","public Object searchRecord ( DataSource config_uri ) { try { JdbcTemplate engine = new JdbcTemplate ( config_uri ) ; List records = engine . query ( "" select * from database_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return records ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Try to execute the following code: Get the database engine and make the connection via $config_uri$. Execute SQL ( query all columns in the database_name ) and get all the data. Close the database connection and return the result of the query. If an Exception Exception occurs, the specific Exception information is printed and False is returned.","<met> <mod> public </mod> type_identifier searchRecord <for> ( <for> type_identifier config_uri </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( config_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> records = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return records ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get the rank column in the testtable where ider is $ider$ ) and get all the data, convert the query results to the dictionary type, set the assertion dictionary length to 2, and return the query results.","public List testKeys ( JdbcTemplate conn , String ider ) { List keys = conn . query ( "" select rank from testtable where ider= ? "" , new Object [ ] { ider } , new BeanPropertyRowMapper ( List . class ) ) ; assert keys . size ( ) == 2 ; return keys ; }","Generate syntax code: Execute the SQL with $conn$ ( get the rank column in the testtable where ider is $ider$ ) and get all the data, convert the query results to the dictionary type, set the assertion dictionary length to 2, and return the query results.","<met> <mod> public </mod> type_identifier testKeys <for> ( <for> type_identifier conn </for> , <for> type_identifier ider </for> ) </for> <blo> { <loc> type_identifier <var> keys = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ider } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> keys . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return keys ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to get the cursor. Execute SQL with cursors ( get the acres information in the tablename table based on $perc$ and $series$ ) and get all the data. Use for loop to store the 0th element of each item of the query result in list.,"public List getAcresField ( JdbcTemplate conn , String perc , String series ) { List acres = conn . query ( "" select acres from tablename where perc=? and series=? "" , new Object [ ] { perc , series } , new BeanPropertyRowMapper ( List . class ) ) ; List acres_rec = new ArrayList ( ) ; for ( Object i : acres ) { acres_rec . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return acres_rec ; }",Generate syntax code: Use $conn$ to get the cursor. Execute SQL with cursors ( get the acres information in the tablename table based on $perc$ and $series$ ) and get all the data. Use for loop to store the 0th element of each item of the query result in list.,"<met> <mod> public </mod> type_identifier getAcresField <for> ( <for> type_identifier conn </for> , <for> type_identifier perc </for> , <for> type_identifier series </for> ) </for> <blo> { <loc> type_identifier <var> acres = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { perc , series } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> acres_rec = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : acres ) <blo> { <exp> <met> acres_rec . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return acres_rec ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statement to get all the id in $plots$ based on $name$, use the $conn$ connection to execute the SQL and get the data. Store the 0th element of each item of the query result as list and return it.","public List getCustomerPlots ( EntityManager conn , Root < Object > plots , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( plots ) . where ( cb . equal ( plots . get ( "" name "" ) , name ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object x : res ) { list . add ( JSONObject . parseObject ( x . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use the java expression to set up the SQL statement to get all the id in $plots$ based on $name$, use the $conn$ connection to execute the SQL and get the data. Store the 0th element of each item of the query result as list and return it.","<met> <mod> public </mod> type_identifier getCustomerPlots <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> plots </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( plots ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> plots . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier x : res ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> x . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine via $CKAN_DATASTORE_WRITE_URL$ and establish a connection. Set up SQL ( query all columns in USER table based on $PASSWORD$ ) and get all the data. Close the connection, use for loop to convert each query result into dict, store as list, and finally return the list.","public List selectUser ( DataSource CKAN_DATASTORE_WRITE_URL , String PASSWORD ) { JdbcTemplate engine = new JdbcTemplate ( CKAN_DATASTORE_WRITE_URL ) ; List users = engine . query ( "" select * from user where PASSWORD = ? "" , new Object [ ] { PASSWORD } , new BeanPropertyRowMapper ( List . class ) ) ; return users ; }","Generate syntax code: Get the database engine via $CKAN_DATASTORE_WRITE_URL$ and establish a connection. Set up SQL ( query all columns in USER table based on $PASSWORD$ ) and get all the data. Close the connection, use for loop to convert each query result into dict, store as list, and finally return the list.","<met> <mod> public </mod> type_identifier selectUser <for> ( <for> type_identifier CKAN_DATASTORE_WRITE_URL </for> , <for> type_identifier PASSWORD </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( CKAN_DATASTORE_WRITE_URL ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> users = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { PASSWORD } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return users ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query the temperatura information in the sensor table based on $humedad$ and $clima$ ) , and use $conn$ to execute SQL. Store all query results obtained after execution into the DataFrame of pandas and set the column name as the keys of the query results. Finally, return DataFrame.","public List getDataFrame ( JdbcTemplate conn , String humedad , String clima ) { List result = conn . query ( "" select temperatura from sensor where humedad=? and clima=? "" , new Object [ ] { humedad , clima } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set up SQL ( query the temperatura information in the sensor table based on $humedad$ and $clima$ ) , and use $conn$ to execute SQL. Store all query results obtained after execution into the DataFrame of pandas and set the column name as the keys of the query results. Finally, return DataFrame.","<met> <mod> public </mod> type_identifier getDataFrame <for> ( <for> type_identifier conn </for> , <for> type_identifier humedad </for> , <for> type_identifier clima </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { humedad , clima } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database. Set up SQL statement with the following content: Query all columns in the frequents based on $bar$, execute SQL statement to get all the data, convert each item of query results into dict to store as list and return it.","public List getBarCounts ( DataSource engine , String bar ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from frequents where bar = ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Use $engine$ to connect to the database. Set up SQL statement with the following content: Query all columns in the frequents based on $bar$, execute SQL statement to get all the data, convert each item of query results into dict to store as list and return it.","<met> <mod> public </mod> type_identifier getBarCounts <for> ( <for> type_identifier engine </for> , <for> type_identifier bar </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bar } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Connect to the database through $db$ and set the SQL statement: Query the number of all columns in the information_schema table based on $table_schema$. Execute SQL to get all the data and return all the data obtained.,"public List getBarCounts ( DataSource db , String table_schema ) { JdbcTemplate connection = new JdbcTemplate ( db ) ; List count = connection . query ( "" select count(*) from information_schema where table_schema= ? "" , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; return count ; }",Generate syntax code: Connect to the database through $db$ and set the SQL statement: Query the number of all columns in the information_schema table based on $table_schema$. Execute SQL to get all the data and return all the data obtained.,"<met> <mod> public </mod> type_identifier getBarCounts <for> ( <for> type_identifier db </for> , <for> type_identifier table_schema </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> count = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return count ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the TABLE1 table according to $label$ ) , get all the data, and finally return the query result.","public List getData ( JdbcTemplate conn , String label ) { List datas = conn . query ( "" select * from TABLE1 where label= ? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; return datas ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the TABLE1 table according to $label$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier conn </for> , <for> type_identifier label </for> ) </for> <blo> { <loc> type_identifier <var> datas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { label } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return datas ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the base_table based on $table_id$ ) , get the first row of data, close the connection, and return the query results.","public List queryPage ( JdbcTemplate conn , String table_id ) { List query_table = conn . query ( "" select * from base_table where table_id= ? "" , new Object [ ] { table_id } , new BeanPropertyRowMapper ( List . class ) ) ; return query_table ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the base_table based on $table_id$ ) , get the first row of data, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier table_id </for> ) </for> <blo> { <loc> type_identifier <var> query_table = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query_table ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL statement ( format the output string with the format ( ) function, query all columns in the INVESTORS table with the string $stock$ ) . Use the $conn$ connection to execute the SQL and get all the data. Store the query result as list and return it.","public List CompareDB ( JdbcTemplate conn , String stock ) { List info = conn . query ( "" select * from investors where stock = ? "" , new Object [ ] { stock } , new BeanPropertyRowMapper ( List . class ) ) ; return info ; }","Generate syntax code: Set up the SQL statement ( format the output string with the format ( ) function, query all columns in the INVESTORS table with the string $stock$ ) . Use the $conn$ connection to execute the SQL and get all the data. Store the query result as list and return it.","<met> <mod> public </mod> type_identifier CompareDB <for> ( <for> type_identifier conn </for> , <for> type_identifier stock </for> ) </for> <blo> { <loc> type_identifier <var> info = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { stock } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return info ; </ret> } </blo> </met>"
"Generate origin code: Set SQL statement: Query the 'name' in the metadata table base on $value$ and execute SQL statement by $conn$. If the number of rows of the query result is 0, return False; otherwise return the first piece of data of the query result.","public Object getData ( JdbcTemplate conn , String value ) { List result = conn . query ( "" select name from metadata where value= ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return false ; } else { return result . get ( 0 ) ; } }","Generate syntax code: Set SQL statement: Query the 'name' in the metadata table base on $value$ and execute SQL statement by $conn$. If the number of rows of the query result is 0, return False; otherwise return the first piece of data of the query result.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the% symbol string matching method to set up SQL: query the game_id in Games table where game is $game_name$. Execute SQL with $conn$ and get the first data. Returns the tenth data if the query result exists, or None if it does not.","public Object gameId ( JdbcTemplate conn , String game_name ) { List result = conn . query ( "" select game_id from games where game = ? "" , new Object [ ] { game_name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }","Generate syntax code: Use the% symbol string matching method to set up SQL: query the game_id in Games table where game is $game_name$. Execute SQL with $conn$ and get the first data. Returns the tenth data if the query result exists, or None if it does not.","<met> <mod> public </mod> type_identifier gameId <for> ( <for> type_identifier conn </for> , <for> type_identifier game_name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { game_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Return False directly if insert_key is None. Otherwise, use $conn$ to execute SQL ( query the insert_val in the table table based on $insert_key$ ) and get all the data. Finally, return the query results.","public Object queryRow ( JdbcTemplate conn , String insert_key ) { if ( insert_key == null ) { return false ; } else { List values = conn . query ( "" select insert_val from table where insert_key= ? "" , new Object [ ] { insert_key } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; } }","Generate syntax code: Return False directly if insert_key is None. Otherwise, use $conn$ to execute SQL ( query the insert_val in the table table based on $insert_key$ ) and get all the data. Finally, return the query results.","<met> <mod> public </mod> type_identifier queryRow <for> ( <for> type_identifier conn </for> , <for> type_identifier insert_key </for> ) </for> <blo> { <if_> if <par> ( <bin> insert_key == null_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { insert_key } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as a POST, then the SQL is executed using the $conn$ connection ( query the first favorite_stock in the login_info where the name of user is $user_name$ ) . Use $base$ to process the query results with the % operator. Return the processed result using redirect.","public Object addfav ( HttpRequest request , JdbcTemplate conn , String user_name , Integer base ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List texts = conn . query ( "" select favorite_stock from login_info where user_name= ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; int uri = base % Integer . parseInt ( texts . get ( 0 ) . toString ( ) ) ; return uri ; } else { return null ; } }","Generate syntax code: If the request module sends the request as a POST, then the SQL is executed using the $conn$ connection ( query the first favorite_stock in the login_info where the name of user is $user_name$ ) . Use $base$ to process the query results with the % operator. Return the processed result using redirect.","<met> <mod> public </mod> type_identifier addfav <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user_name </for> , <for> type_identifier base </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> uri = <bin> base % <met> Integer . parseInt <arg> ( <met> <met> texts . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </bin> </var> ; </loc> <ret> return uri ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: execute the SQL through the cursor method of $connection$ ( get all the columns in the milks table based on $location$ ) and get all the data. Close the connection and finally return the query results.,"public List testConnectMethod ( JdbcTemplate connection , String location ) { List results = connection . query ( "" select * from milks where location = ? "" , new Object [ ] { location } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: execute the SQL through the cursor method of $connection$ ( get all the columns in the milks table based on $location$ ) and get all the data. Close the connection and finally return the query results.,"<met> <mod> public </mod> type_identifier testConnectMethod <for> ( <for> type_identifier connection </for> , <for> type_identifier location </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { location } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to execute SQL ( get all the columns in the RowProxy table according to $id$ ) , get all the data, and finally return the query result.","public List searchRowproxy ( JdbcTemplate engine , String id ) { List d = engine . query ( "" select * from RowProxy where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return d ; }","Generate syntax code: Use $engine$ to execute SQL ( get all the columns in the RowProxy table according to $id$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier searchRowproxy <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> d = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return d ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the origin column in the flights table ) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"public List main ( JdbcTemplate conn ) { List flights = conn . query ( "" select origin from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; List origins = new ArrayList ( ) ; for ( Object row : flights ) { origins . add ( row ) ; } return origins ; }",Generate syntax code: Use $conn$ to execute the SQL ( get the origin column in the flights table ) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> origins = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : flights ) <blo> { <exp> <met> origins . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return origins ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use $conn$ to execute the SQL statement: Get all the topic_name in $topics$, render and return ""topiclist.html"", where the alltopics parameter is the query result; otherwise, use redirect to return ""/ teacher"".","public Object topiclist ( HttpRequest request , JdbcTemplate conn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List alltopics = conn . query ( "" select topic_name from topics "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" alltopics "" , alltopics ) ; return "" topiclist.html "" ; } else { return "" /teacher "" ; } }","Generate syntax code: If the request module sends the request in a post method, use $conn$ to execute the SQL statement: Get all the topic_name in $topics$, render and return ""topiclist.html"", where the alltopics parameter is the query result; otherwise, use redirect to return ""/ teacher"".","<met> <mod> public </mod> type_identifier topiclist <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> alltopics = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , alltopics ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", the judgment is made. If the $title$ is an empty string, return the rendered ""index.html""; otherwise, use $conn$ to execute the SQL statement ( query all the columns in the books table based on $isbn$ and $title$ ) , get all the data, and return the rendered ""index.html"", where the books parameter is the query result. If the request method is not ""POST"", return the rendered ""index.html"".","public Object search ( HttpRequest request , JdbcTemplate conn , String isbn , String title , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { if ( title == "" "" ) { return "" index.html "" ; } else { List books = conn . query ( "" select * from books where isbn=? and title=? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" index.html "" ; } } else { return "" index.html "" ; } }","Generate syntax code: If the request method is ""POST"", the judgment is made. If the $title$ is an empty string, return the rendered ""index.html""; otherwise, use $conn$ to execute the SQL statement ( query all the columns in the books table based on $isbn$ and $title$ ) , get all the data, and return the rendered ""index.html"", where the books parameter is the query result. If the request method is not ""POST"", return the rendered ""index.html"".","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <if_> if <par> ( <bin> title == string_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the ReferalFilePath column in the $References$ table where Username is $username$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store the 0th element of each query result as list, and return the list.","public List getReferralPath ( EntityManager conn , Root < Object > References , String username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( References ) . where ( cb . equal ( References . get ( "" username "" ) , username ) ) ; List < Object > fs = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object item : fs ) { list . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Set SQL based on the java expression ( query the ReferalFilePath column in the $References$ table where Username is $username$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store the 0th element of each query result as list, and return the list.","<met> <mod> public </mod> type_identifier getReferralPath <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> References </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( References ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> References . get <arg> ( string_literal ) </arg> </met> , username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> fs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : fs ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the number of all columns in the product table based on $uuid$ ) , get the first piece of data, and return the query results. If an exception occurs during execution, throw the exception directly, and finally ensure that the database is closed.","public List persistBundle ( JdbcTemplate conn , String uuid ) { try { List res = conn . query ( "" select count(*) from product where uuid= ? "" , new Object [ ] { uuid } , new BeanPropertyRowMapper ( List . class ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the number of all columns in the product table based on $uuid$ ) , get the first piece of data, and return the query results. If an exception occurs during execution, throw the exception directly, and finally ensure that the database is closed.","<met> <mod> public </mod> type_identifier persistBundle <for> ( <for> type_identifier conn </for> , <for> type_identifier uuid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uuid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $db$ to connect to the database and execute the SQL ( get the name column in the users table based on $id$ ) and get all the data. Finally return the query results.,"public List testAutoflush2 ( DataSource db , String id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List names = engine . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; }",Generate syntax code: Use $db$ to connect to the database and execute the SQL ( get the name column in the users table based on $id$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier testAutoflush2 <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> names = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return names ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query $table$ table value column based on $key$ ) . Execute SQL with $conn$ and get all the data. If there is a query result, return its 0th element. Otherwise throw KeyError with $key$ as parameter.","public Object getSource ( EntityManager conn , Root < Object > table , String key ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" key "" ) , key ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; if ( values . isEmpty ( ) ) { Exception e = new KeyException ( ) ; return e ; } else { return values . get ( 0 ) ; } }","Generate syntax code: Set SQL based on the java expression: ( query $table$ table value column based on $key$ ) . Execute SQL with $conn$ and get all the data. If there is a query result, return its 0th element. Otherwise throw KeyError with $key$ as parameter.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier key </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , key ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> values . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <ret> return e ; </ret> } </blo> else <blo> { <ret> return <met> values . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL statement via $db_connection$:Get all instance data in user table according to $name$, set assertion to determine that the result is not empty 'list', and return all the obtained data.","public List getQuery ( JdbcTemplate db_connection , String name ) { List rs = db_connection . query ( "" select instance from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; assert rs . size ( ) != 0 ; return rs ; }","Generate syntax code: Execute SQL statement via $db_connection$:Get all instance data in user table according to $name$, set assertion to determine that the result is not empty 'list', and return all the obtained data.","<met> <mod> public </mod> type_identifier getQuery <for> ( <for> type_identifier db_connection </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> db_connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rs . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return rs ; </ret> } </blo> </met>"
Generate origin code: Set up SQL: query all columns in the reviews table where userid is $userid$. Use $db$ to execute SQL and get all data. Return the rendered 'userpage.html' and pass the query result into the res parameter.,"public String getQuery ( JdbcTemplate db , String userid , Model model ) { List res = db . query ( "" select * from reviews where userid = ? "" , new Object [ ] { userid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" userpage.html "" ; }",Generate syntax code: Set up SQL: query all columns in the reviews table where userid is $userid$. Use $db$ to execute SQL and get all data. Return the rendered 'userpage.html' and pass the query result into the res parameter.,"<met> <mod> public </mod> type_identifier getQuery <for> ( <for> type_identifier db </for> , <for> type_identifier userid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { userid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the users table sur_name column based on $uuid$ ) , execute SQL based on $conn$ and get all the query results. Return the rendered ""dashboard.html"" page with results parameter being query result.","public String dashboard ( JdbcTemplate conn , String uuid , Model model ) { List results = conn . query ( "" select sur_name from users where uuid = ? "" , new Object [ ] { uuid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" dashboard.html "" ; }","Generate syntax code: Set SQL ( query the users table sur_name column based on $uuid$ ) , execute SQL based on $conn$ and get all the query results. Return the rendered ""dashboard.html"" page with results parameter being query result.","<met> <mod> public </mod> type_identifier dashboard <for> ( <for> type_identifier conn </for> , <for> type_identifier uuid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uuid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set SQL: Get data in $bm$ based on $type$, and execute SQL to get all data by $conn$. If the query result exists, return the last element of the query result; otherwise, return 0.","public Object getDataBabyMonitor ( EntityManager conn , Root < Object > bm , String type ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( bm ) . where ( cb . equal ( bm . get ( "" type "" ) , type ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; if ( result . isEmpty ( ) ) { return 0 ; } else { return result . get ( - 1 ) ; } }","Generate syntax code: Use the java expression to set SQL: Get data in $bm$ based on $type$, and execute SQL to get all data by $conn$. If the query result exists, return the last element of the query result; otherwise, return 0.","<met> <mod> public </mod> type_identifier getDataBabyMonitor <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> bm </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( bm ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> bm . get <arg> ( string_literal ) </arg> </met> , type ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> else <blo> { <ret> return <met> result . get <arg> ( <una> - decimal_integer_literal </una> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to query all the columns in the banks table with id as $id$ and get all the data. Set the assertion to determine the length of the query result is greater than 0, convert the query result into list and return it.","public List selectValue ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select * from banks where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) > 0 ; return result ; }","Generate syntax code: Use $conn$ to query all the columns in the banks table with id as $id$ and get all the data. Set the assertion to determine the length of the query result is greater than 0, convert the query result into list and return it.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: If the method of the request is POST, then use $conn$ to execute SQL ( get all the columns in the books based on $isbn$, $low_title$ and $low_author$ ) and get all the data. Input the query result into the books field and render ""books.html"". Otherwise, only the rendered ""booksearch.html"" page will be returned.","public String bookSearch ( HttpRequest request , JdbcTemplate conn , String isbn , String low_title , String low_author , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select * from books where isbn=? and low_title=? and low_author=? "" , new Object [ ] { isbn , low_title , low_author } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" books.html "" ; } else { return "" booksearch.html "" ; } }","Generate syntax code: If the method of the request is POST, then use $conn$ to execute SQL ( get all the columns in the books based on $isbn$, $low_title$ and $low_author$ ) and get all the data. Input the query result into the books field and render ""books.html"". Otherwise, only the rendered ""booksearch.html"" page will be returned.","<met> <mod> public </mod> type_identifier bookSearch <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier low_title </for> , <for> type_identifier low_author </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , low_title , low_author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $DATABASEURI$ to get the data engine, where the convert_unicode parameter is True. Connect to the database and execute SQL ( get the mname column in teams based on 'tname' is $tname$ ) and get all the data. Finally return the query result.","public List searchTeam ( DataSource DATABASEURI , String tname ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List res = conn . query ( "" select mname from teams where tname = ? "" , new Object [ ] { tname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $DATABASEURI$ to get the data engine, where the convert_unicode parameter is True. Connect to the database and execute SQL ( get the mname column in teams based on 'tname' is $tname$ ) and get all the data. Finally return the query result.","<met> <mod> public </mod> type_identifier searchTeam <for> ( <for> type_identifier DATABASEURI </for> , <for> type_identifier tname </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( DATABASEURI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up SQL: Query the data in the $currency$ table, and execute SQL to get all the data via $con$. For loop iterates through all the query results and prints the 0th element of each row. Return all the query results.","public List < Object > getLastUpdate ( EntityManager con , Root < Object > currency ) { CriteriaBuilder cb = con . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( currency ) ; List < Object > data = con . createQuery ( cq ) . getResultList ( ) ; for ( Object item : data ) { System . out . println ( JSONObject . parseObject ( item . toString ( ) ) . getString ( 0 ) ) ; } return data ; }","Generate syntax code: Use the java expression to set up SQL: Query the data in the $currency$ table, and execute SQL to get all the data via $con$. For loop iterates through all the query results and prints the 0th element of each row. Return all the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getLastUpdate <for> ( <for> type_identifier con </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> currency </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> con . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( currency ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> <met> con . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : data ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all the information in the REVIEWS table based on $user_id$ and $book_id$ ) and get the first piece of data. Return False, if there are query results; otherwise, return True. If an Exception occurs during execution, return the rendered ""error.html"" page.","public Object book ( JdbcTemplate conn , String user_id , String book_id ) { try { List reviewfounds = conn . query ( "" select * from reviews where user_id = ? and book_id = ? "" , new Object [ ] { user_id , book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( reviewfounds . isEmpty ( ) ) { return false ; } else { return true ; } } catch ( Exception e ) { return "" error.html "" ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all the information in the REVIEWS table based on $user_id$ and $book_id$ ) and get the first piece of data. Return False, if there are query results; otherwise, return True. If an Exception occurs during execution, return the rendered ""error.html"" page.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier book_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> reviewfounds = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> reviewfounds . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement: Query the information in the $foo$ table based on $data$, use $conn$ to execute SQL and get all the data. Make sure $conn$ is closed. Set the assertion to determine that the length of the execution result is greater than 0 and return the execution result.","public List getSource ( EntityManager conn , Root < Object > foo , String data ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( foo ) . where ( cb . equal ( foo . get ( "" data "" ) , data ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; assert results . size ( ) > 0 ; return results ; }","Generate syntax code: Use the java expression to set the SQL statement: Query the information in the $foo$ table based on $data$, use $conn$ to execute SQL and get all the data. Make sure $conn$ is closed. Set the assertion to determine that the length of the execution result is greater than 0 and return the execution result.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> foo </for> , <for> type_identifier data </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( foo ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> foo . get <arg> ( string_literal ) </arg> </met> , data ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database, execute SQL ( get all the columns in the tickets based on $metadata$ ) and get all the data, and finally return the query result.","public List getConnectTickets ( DataSource engine , String metadata ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List res = connection . query ( "" select * from tickets where metadata= ? "" , new Object [ ] { metadata } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $engine$ to connect to the database, execute SQL ( get all the columns in the tickets based on $metadata$ ) and get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getConnectTickets <for> ( <for> type_identifier engine </for> , <for> type_identifier metadata </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { metadata } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use java expressions to set up SQL ( query the contents of the $aliases$ table ) . Use $conn$ to execute SQL and get all the data. Use for loop to store the 0th element and the 1st element of each item in the query results into list, and store list into set. Finally, return the processed set.","public Set getAliases ( EntityManager conn , Root < Object > aliases ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( aliases ) ; List < Object > list = conn . createQuery ( cq ) . getResultList ( ) ; Set dictionary = new HashSet ( ) ; for ( Object row : list ) { dictionary . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; dictionary . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 1 ) ) ; } return dictionary ; }","Generate syntax code: Use java expressions to set up SQL ( query the contents of the $aliases$ table ) . Use $conn$ to execute SQL and get all the data. Use for loop to store the 0th element and the 1st element of each item in the query results into list, and store list into set. Finally, return the processed set.","<met> <mod> public </mod> type_identifier getAliases <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> aliases </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( aliases ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> list = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> dictionary = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : list ) <blo> { <exp> <met> dictionary . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> dictionary . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return dictionary ; </ret> } </blo> </met>"
"Generate origin code: If the request method of request is ""POST"", use $conn$ to execute SQL ( query all columns in the bookreviews table based on $username$ and $isbn$ ) , get the first piece of data, and finally return the query result.","public Object bookQuery ( HttpRequest request , JdbcTemplate conn , String username , String isbn ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List items = conn . query ( "" select * from bookreviews where username = ? and isbn = ? "" , new Object [ ] { username , isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return items . get ( 0 ) ; } else { return null ; } }","Generate syntax code: If the request method of request is ""POST"", use $conn$ to execute SQL ( query all columns in the bookreviews table based on $username$ and $isbn$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier bookQuery <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier isbn </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> items = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> items . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement ( query the curso column in the trab table according to $id$ ) , get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list and return. If an Exception is caught, print the exception and return False.","public Object listarMaterias ( DataSource db_string , String id ) { try { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List result = db . query ( "" select curso from trab where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( Object part : result ) { res . add ( part ) ; } return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement ( query the curso column in the trab table according to $id$ ) , get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list and return. If an Exception is caught, print the exception and return False.","<met> <mod> public </mod> type_identifier listarMaterias <for> ( <for> type_identifier db_string </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier part : result ) <blo> { <exp> <met> res . add <arg> ( part ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $host$. Execute the SQL statement ( query all the columns in the database table based on $customers$ and $mock$ ) , get all the data, and return the query results.","public List sqlImport ( DataSource host , String customers , String mock ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List query = conn . query ( "" select * from database where customers=? and mock=? "" , new Object [ ] { customers , mock } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }","Generate syntax code: Get the database engine and establish a connection through $host$. Execute the SQL statement ( query all the columns in the database table based on $customers$ and $mock$ ) , get all the data, and return the query results.","<met> <mod> public </mod> type_identifier sqlImport <for> ( <for> type_identifier host </for> , <for> type_identifier customers </for> , <for> type_identifier mock </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { customers , mock } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method to set SQL ( query all columns in the $buildsets_table$ table according to $id$ ) , execute SQL according to $conn$ and get all the query results. If the query result is not empty, return the 0th element of the 0th data; otherwise, return None.","public Object getBranch ( EntityManager conn , Root < Object > buildsets_table , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( buildsets_table ) . where ( cb . equal ( buildsets_table . get ( "" id "" ) , id ) ) ; List < Object > r = conn . createQuery ( cq ) . getResultList ( ) ; if ( r . isEmpty ( ) ) { return null ; } else { return JSONObject . parseObject ( r . get ( 0 ) . toString ( ) ) . get ( 0 ) ; } }","Generate syntax code: Use ORM method to set SQL ( query all columns in the $buildsets_table$ table according to $id$ ) , execute SQL according to $conn$ and get all the query results. If the query result is not empty, return the 0th element of the 0th data; otherwise, return None.","<met> <mod> public </mod> type_identifier getBranch <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> buildsets_table </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( buildsets_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> buildsets_table . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> r = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> r . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> r . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $DBHost$. Try to execute the SQL statement with ORM method ( query all the columns in the $project$ table according to $projId$ ) , get the first piece of data, return the 0th element of the data. Output the exception if an Exception occurs during execution, and finally close the database connection and all connections.","public Object getRowCount ( EntityManager DBHost , Root < Object > project , String projId ) { try { CriteriaBuilder cb = DBHost . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( project ) . where ( cb . equal ( project . get ( "" projId "" ) , projId ) ) ; List < Object > result = DBHost . createQuery ( cq ) . getResultList ( ) ; return result . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Get the database engine and establish a connection through $DBHost$. Try to execute the SQL statement with ORM method ( query all the columns in the $project$ table according to $projId$ ) , get the first piece of data, return the 0th element of the data. Output the exception if an Exception occurs during execution, and finally close the database connection and all connections.","<met> <mod> public </mod> type_identifier getRowCount <for> ( <for> type_identifier DBHost </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> project </for> , <for> type_identifier projId </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> DBHost . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( project ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> project . get <arg> ( string_literal ) </arg> </met> , projId ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> DBHost . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users table based on $username$ and $password$ ) and get all the data. If the query result exists, return the rendered ""success.html"" page.","public String register ( JdbcTemplate conn , String username , String password ) { List users = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return "" success.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users table based on $username$ and $password$ ) and get all the data. If the query result exists, return the rendered ""success.html"" page.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement ( query all the tobs data in measurement based on $date$ ) . Use for loop iterate through the query results and print the 0th element of each item. Use jsonify to return the query results.,"public JSONArray tobs ( JdbcTemplate conn , String date ) { List temps = conn . query ( "" select tobs from measurement where date= ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : temps ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( temps . toString ( ) ) ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query all the tobs data in measurement based on $date$ ) . Use for loop iterate through the query results and print the 0th element of each item. Use jsonify to return the query results.,"<met> <mod> public </mod> type_identifier tobs <for> ( <for> type_identifier conn </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> temps = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : temps ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> temps . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL ( get all the columns in the test_index_label ) with $conn$,get all the data, set assertion to determine that the query result is not 0, and return the query result.","public List searchLabel ( JdbcTemplate conn ) { List labels = conn . query ( "" select * from test_index_label "" , new BeanPropertyRowMapper ( List . class ) ) ; assert labels . size ( ) != 0 ; return labels ; }","Generate syntax code: Execute SQL ( get all the columns in the test_index_label ) with $conn$,get all the data, set assertion to determine that the query result is not 0, and return the query result.","<met> <mod> public </mod> type_identifier searchLabel <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> labels = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> labels . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return labels ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the number of id in the titanic table whose age is less than $num$ ) , use $conn$ to execute SQL to get all the data, print the query results and return.","public List unitTest ( JdbcTemplate conn , String num ) { List results = conn . query ( "" select count(id) from titanic where age < ? "" , new Object [ ] { num } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; return results ; }","Generate syntax code: Set SQL ( query the number of id in the titanic table whose age is less than $num$ ) , use $conn$ to execute SQL to get all the data, print the query results and return.","<met> <mod> public </mod> type_identifier unitTest <for> ( <for> type_identifier conn </for> , <for> type_identifier num </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { num } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Connect via $engine$. Set the SQL ( all columns in the $account$ are selected where uname is $uname$ ) in a java expression and return after getting all the data. If an exception is generated, the logging error level is used to output the exception information and return None.","public List < Object > getSource ( EntityManager engine , Root < Object > account , String uname ) { try { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( account ) . where ( cb . equal ( account . get ( "" uname "" ) , uname ) ) ; List < Object > results = engine . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Connect via $engine$. Set the SQL ( all columns in the $account$ are selected where uname is $uname$ ) in a java expression and return after getting all the data. If an exception is generated, the logging error level is used to output the exception information and return None.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getSource <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> account </for> , <for> type_identifier uname </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( account ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> account . get <arg> ( string_literal ) </arg> </met> , uname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use $con$ to execute SQL ( query all the year in the books through $author$ ) and return all the query results.","public List books ( HttpRequest request , JdbcTemplate con , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List years = con . query ( "" select year from books where author= ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return years ; } else { return null ; } }","Generate syntax code: If the request module sends the request in a post method, use $con$ to execute SQL ( query all the year in the books through $author$ ) and return all the query results.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier request </for> , <for> type_identifier con </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> years = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return years ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect the database with $engine$ and set the SQL based on the java expression ( query the file_path column in the $files$ table based on $exp_id$ ) . Execute SQL and get all the data, use for loop to traverse each query result, store them as list, and finally return the list.","public List < Object > gatherFileLocs ( EntityManager engine , Root < Object > files , String exp_id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( files ) . where ( cb . equal ( files . get ( "" exp_id "" ) , exp_id ) ) ; List < Object > results = engine . createQuery ( cq ) . getResultList ( ) ; List files_dict = new ArrayList ( ) ; for ( Object file1 : results ) { files_dict . add ( file1 ) ; } return files_dict ; }","Generate syntax code: Connect the database with $engine$ and set the SQL based on the java expression ( query the file_path column in the $files$ table based on $exp_id$ ) . Execute SQL and get all the data, use for loop to traverse each query result, store them as list, and finally return the list.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> gatherFileLocs <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> files </for> , <for> type_identifier exp_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( files ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> files . get <arg> ( string_literal ) </arg> </met> , exp_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> files_dict = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier file1 : results ) <blo> { <exp> <met> files_dict . add <arg> ( file1 ) </arg> </met> ; </exp> } </blo> </enh> <ret> return files_dict ; </ret> } </blo> </met>"
Generate origin code: Set SQL in java expressions: Query name in $users$ table when projid is equal to $fr$. Use $conn$ to execute SQL and get all data. Print and return the query results.,"public List < Object > update ( EntityManager conn , Root < Object > users , String fr ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" projid "" ) , fr ) ) ; List < Object > names = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( names ) ; return names ; }",Generate syntax code: Set SQL in java expressions: Query name in $users$ table when projid is equal to $fr$. Use $conn$ to execute SQL and get all data. Print and return the query results.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> update <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier fr </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , fr ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> names = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( names ) </arg> </met> ; </exp> <ret> return names ; </ret> } </blo> </met>"
"Generate origin code: Set SQL with the java expression ( query all the information in the $users$ table based on $email$ ) . Use $connection$ to execute SQL and get the first piece of data. Close the connection. Return if the query result exists. Otherwise, return False.","public Object addFriend ( EntityManager connection , Root < Object > users , String email ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" email "" ) , email ) ) ; List < Object > email_users = connection . createQuery ( cq ) . getResultList ( ) ; if ( email_users . isEmpty ( ) ) { return false ; } else { return email_users . get ( 0 ) ; } }","Generate syntax code: Set SQL with the java expression ( query all the information in the $users$ table based on $email$ ) . Use $connection$ to execute SQL and get the first piece of data. Close the connection. Return if the query result exists. Otherwise, return False.","<met> <mod> public </mod> type_identifier addFriend <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , email ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> email_users = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> email_users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> email_users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all data in the count column of the resources table based on $type_id$ ) , store the data back as list and return.","public List getUserMenu ( JdbcTemplate conn , String type_id ) { List entries = conn . query ( "" select count from resources where type_id= ? "" , new Object [ ] { type_id } , new BeanPropertyRowMapper ( List . class ) ) ; List json_row = new ArrayList ( ) ; for ( Object en : entries ) { json_row . add ( en ) ; } return json_row ; }","Generate syntax code: Use $conn$ to execute SQL ( query all data in the count column of the resources table based on $type_id$ ) , store the data back as list and return.","<met> <mod> public </mod> type_identifier getUserMenu <for> ( <for> type_identifier conn </for> , <for> type_identifier type_id </for> ) </for> <blo> { <loc> type_identifier <var> entries = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json_row = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier en : entries ) <blo> { <exp> <met> json_row . add <arg> ( en ) </arg> </met> ; </exp> } </blo> </enh> <ret> return json_row ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", set the SQL ( query the book_id column in the reviews table based on $user_id$ ) , use $conn$ to execute the SQL and get all the query results. Return the query results.","public List selectValue ( HttpRequest request , JdbcTemplate conn , String user_id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List book_id = conn . query ( "" select book_id from reviews where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return book_id ; } else { return null ; } }","Generate syntax code: If the request method is ""POST"", set the SQL ( query the book_id column in the reviews table based on $user_id$ ) , use $conn$ to execute the SQL and get all the query results. Return the query results.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> book_id = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return book_id ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL: Query all columns in musei, execute SQL statement by $conn$ to get all the data and return the obtained data.","public List FindAllMusei ( JdbcTemplate conn ) { List result = conn . query ( "" Select * from musei "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set SQL: Query all columns in musei, execute SQL statement by $conn$ to get all the data and return the obtained data.","<met> <mod> public </mod> type_identifier FindAllMusei <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all columns in the flights where ganid is $ganid$ and get all the data. Render and return 'flights.html', where the flights parameter is the result of the query.","public String selectValue ( JdbcTemplate conn , String ganid , Model model ) { List flights = conn . query ( "" select * from flights where ganid= ? "" , new Object [ ] { ganid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; }","Generate syntax code: Use $conn$ to query all columns in the flights where ganid is $ganid$ and get all the data. Render and return 'flights.html', where the flights parameter is the result of the query.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier ganid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ganid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get all columns in the files table based on $boxID$ ) and get all the data. Then use for loop to print each item of the query results.,"public void copyContentData ( JdbcTemplate conn , String boxID ) { List rows = conn . query ( "" select * from files where boxid = ? "" , new Object [ ] { boxID } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { System . out . println ( row ) ; } }",Generate syntax code: Use $conn$ to execute the SQL ( get all columns in the files table based on $boxID$ ) and get all the data. Then use for loop to print each item of the query results.,"<met> <mod> public </mod> void_type copyContentData <for> ( <for> type_identifier conn </for> , <for> type_identifier boxID </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { boxID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: get the connection via the start method of $engine$ and then execute SQL ( get the player_headshot in 'players' based on $name$ ) and get all the data. Use for loop to iterate through the query result and return the result of each item if the 0th element of the query is not empty.,"public Object getPlayerImage ( DataSource engine , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select player_headshot from players where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : res ) { if ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) != "" "" ) { return row ; } else { return null ; } } }",Generate syntax code: get the connection via the start method of $engine$ and then execute SQL ( get the player_headshot in 'players' based on $name$ ) and get all the data. Use for loop to iterate through the query result and return the result of each item if the 0th element of the query is not empty.,"<met> <mod> public </mod> type_identifier getPlayerImage <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <if_> if <par> ( <bin> <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> != string_literal </bin> ) </par> <blo> { <ret> return row ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute SQL according to the java expression ( get the name column in the $passengers$ table whose flight_id is $id$ ) and use $db$ to execute SQL to get all the data. If the length of the query result is 0, return ""No names., and finally return the query result.","public Object getPassName ( EntityManager db , Root < Object > passengers , String id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( passengers ) . where ( cb . equal ( passengers . get ( "" flight_id "" ) , id ) ) ; List < Object > names = db . createQuery ( cq ) . getResultList ( ) ; if ( names . isEmpty ( ) ) { return "" No names. "" ; } else { return names ; } }","Generate syntax code: Execute SQL according to the java expression ( get the name column in the $passengers$ table whose flight_id is $id$ ) and use $db$ to execute SQL to get all the data. If the length of the query result is 0, return ""No names., and finally return the query result.","<met> <mod> public </mod> type_identifier getPassName <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> passengers </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( passengers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> passengers . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> names = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> names . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return names ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL ( query all the columns in the one_row where number_of_rows is $cname$ ) using $conn$ and get the first data. Set the assertion determination query result length to 1 and return the query result.,"public Object searchDottedName ( JdbcTemplate conn , String cname ) { List rows = conn . query ( "" select * from one_row where number_of_rows= ? "" , new Object [ ] { cname } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; assert rows . size ( ) == 1 ; return row ; }",Generate syntax code: Execute the SQL ( query all the columns in the one_row where number_of_rows is $cname$ ) using $conn$ and get the first data. Set the assertion determination query result length to 1 and return the query result.,"<met> <mod> public </mod> type_identifier searchDottedName <for> ( <for> type_identifier conn </for> , <for> type_identifier cname </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $db$, to execute SQL according to the java expression ( get the username column in the $users$ table where password is $pwd$ ) , get all the data, and then print the query result.","public void register ( HttpRequest request , EntityManager db , Root < Object > users , String pwd ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" password "" ) , pwd ) ) ; List < Object > usernames = db . createQuery ( cq ) . getResultList ( ) ; System . out . println ( usernames ) ; } }","Generate syntax code: If the request method is ""POST"", use $db$, to execute SQL according to the java expression ( get the username column in the $users$ table where password is $pwd$ ) , get all the data, and then print the query result.","<met> <mod> public </mod> void_type register <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier pwd </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , pwd ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> usernames = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( usernames ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $engine$: Query the first piece of cname information in User table based on $cid$. Set assertion to determine that the length of the returned result is 1, and return the query result.","public Object commitWithSavepoint ( JdbcTemplate engine , String cname ) { List results = engine . query ( "" select cname from user where cid = ? "" , new Object [ ] { cid } , new BeanPropertyRowMapper ( List . class ) ) ; Object result = results . get ( 0 ) ; assert results . size ( ) == 1 ; return result ; }","Generate syntax code: Execute the SQL statement through $engine$: Query the first piece of cname information in User table based on $cid$. Set assertion to determine that the length of the returned result is 1, and return the query result.","<met> <mod> public </mod> type_identifier commitWithSavepoint <for> ( <for> type_identifier engine </for> , <for> type_identifier cname </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $Customer$ table whose name is $bindparam$ ) . Execute SQL through $engine$, get all the data and return the query results.","public List testSqlalchemyCore ( EntityManager engine , Root < Object > Customer , String bindparam ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Customer ) . where ( cb . equal ( Customer . get ( "" name "" ) , bindparam ) ) ; List < Object > res = engine . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $Customer$ table whose name is $bindparam$ ) . Execute SQL through $engine$, get all the data and return the query results.","<met> <mod> public </mod> type_identifier testSqlalchemyCore <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Customer </for> , <for> type_identifier bindparam </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Customer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Customer . get <arg> ( string_literal ) </arg> </met> , bindparam ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, connect to the database via $dbe$. Set the SQL ( query the loginpassword in Member via $uid$ ) , execute the SQL to get all the data, and return all the obtained data.","public List login ( HttpRequest request , DataSource dbe , String uid ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { JdbcTemplate connection = new JdbcTemplate ( dbe ) ; List actualpwd = connection . query ( "" select loginpassword from member where uid = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; return actualpwd ; } else { return null ; } }","Generate syntax code: If the request module sends the request as post, connect to the database via $dbe$. Set the SQL ( query the loginpassword in Member via $uid$ ) , execute the SQL to get all the data, and return all the obtained data.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier dbe </for> , <for> type_identifier uid </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( dbe ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> actualpwd = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return actualpwd ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $tlengine$ to get the connection. Use the connection to execute SQL ( query all columns in the users_table table ) . Use the keys in the execution result as the key in the dictionary, each item in the execution result cursor as the value, and store the obtained dictionary into list. Close the connection and return the processed list.","public List testCommit ( DataSource tlengine , String summary ) { JdbcTemplate external_connection = new JdbcTemplate ( tlengine ) ; List inf_dic = external_connection . query ( "" select * from users_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return inf_dic ; }","Generate syntax code: Use $tlengine$ to get the connection. Use the connection to execute SQL ( query all columns in the users_table table ) . Use the keys in the execution result as the key in the dictionary, each item in the execution result cursor as the value, and store the obtained dictionary into list. Close the connection and return the processed list.","<met> <mod> public </mod> type_identifier testCommit <for> ( <for> type_identifier tlengine </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> external_connection = <obj> new type_identifier <arg> ( tlengine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> inf_dic = <met> external_connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return inf_dic ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL ( get all the columns in the users where the id of user is $user_id$ ) with $conn$, and finally return whether the function that return the result of the query is true or false for 1.","public boolean clearResetCode ( JdbcTemplate conn , String user_id ) { List res = conn . query ( "" select * from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res . size ( ) == 1 ; }","Generate syntax code: Execute SQL ( get all the columns in the users where the id of user is $user_id$ ) with $conn$, and finally return whether the function that return the result of the query is true or false for 1.","<met> <mod> public </mod> boolean_type clearResetCode <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <bin> <met> res . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ret> } </blo> </met>"
Generate origin code: Use $con$ to query the SQLITE_MASTER table for the first piece of name data with path as $path$.Use for loop iterate through all the results and print the 0th element of the query result. Make sure $con$ is closed.,"public Object printSchema ( JdbcTemplate con , String path ) { List outputs = con . query ( "" select name from sqlite_master where path = ? "" , new Object [ ] { path } , new BeanPropertyRowMapper ( List . class ) ) ; Object output = outputs . get ( 0 ) ; return JSONObject . parseObject ( output . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Use $con$ to query the SQLITE_MASTER table for the first piece of name data with path as $path$.Use for loop iterate through all the results and print the 0th element of the query result. Make sure $con$ is closed.,"<met> <mod> public </mod> type_identifier printSchema <for> ( <for> type_identifier con </for> , <for> type_identifier path </for> ) </for> <blo> { <loc> type_identifier <var> outputs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { path } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> output = <met> outputs . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> output . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use a java expression to set the SQL statement to get all the data in $users$ where the id of user is $user_id$, execute the SQL statement over a $conn$ connection, and store the query results as dict as a list and return.","public List queryOldRecs ( EntityManager conn , Root < Object > users , String user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" id "" ) , user_id ) ) ; List < Object > again_uesr = conn . createQuery ( cq ) . getResultList ( ) ; return again_uesr ; }","Generate syntax code: Use a java expression to set the SQL statement to get all the data in $users$ where the id of user is $user_id$, execute the SQL statement over a $conn$ connection, and store the query results as dict as a list and return.","<met> <mod> public </mod> type_identifier queryOldRecs <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> again_uesr = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return again_uesr ; </ret> } </blo> </met>"
"Generate origin code: et the SQL statement: Query the number of id in the Districts table, use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result.","public Object getDistrictCount ( JdbcTemplate conn ) { List count_res = conn . query ( "" select count(id) from districts "" , new BeanPropertyRowMapper ( List . class ) ) ; return count_res . get ( 0 ) ; }","Generate syntax code: et the SQL statement: Query the number of id in the Districts table, use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result.","<met> <mod> public </mod> type_identifier getDistrictCount <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> count_res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> count_res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: connect to the database where engine is $engine$. Query all the columns in the table_name where the name of schema is $schema_name$ and get all the data, convert each item of the query result into a dict, store it as a list, and return it.","public List backupOldTable ( DataSource engine , String schema_name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List gojome = con . query ( "" select * from table_name where schema_name= ? "" , new Object [ ] { schema_name } , new BeanPropertyRowMapper ( List . class ) ) ; return gojome ; }","Generate syntax code: connect to the database where engine is $engine$. Query all the columns in the table_name where the name of schema is $schema_name$ and get all the data, convert each item of the query result into a dict, store it as a list, and return it.","<met> <mod> public </mod> type_identifier backupOldTable <for> ( <for> type_identifier engine </for> , <for> type_identifier schema_name </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> gojome = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schema_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return gojome ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the RIDERS table based on $rider$ ) , get all the data, store the 0th element of each item of the query result as tuple and return it.","public List testMultipleRowsOneCommit ( JdbcTemplate conn , String rider ) { List result = conn . query ( "" select * from riders where rider = ? "" , new Object [ ] { rider } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object r : result ) { list . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the RIDERS table based on $rider$ ) , get all the data, store the 0th element of each item of the query result as tuple and return it.","<met> <mod> public </mod> type_identifier testMultipleRowsOneCommit <for> ( <for> type_identifier conn </for> , <for> type_identifier rider </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { rider } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : result ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to execute the SQL statement through the $conn$ connection, which says: Query all the columns in the books table based on $isbn$ and $title$, get all the data, render and return ""books.html"", where the 'results' parameter is all the obtained data. If an exception occurs, render and return ""tbr.html"".","public String books ( JdbcTemplate conn , String isbn , String title , Model model ) { try { List results = conn . query ( "" select * from books where isbn = ? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" books.html "" ; } catch ( Exception e ) { return "" tbr.html "" ; } }","Generate syntax code: Try to execute the SQL statement through the $conn$ connection, which says: Query all the columns in the books table based on $isbn$ and $title$, get all the data, render and return ""books.html"", where the 'results' parameter is all the obtained data. If an exception occurs, render and return ""tbr.html"".","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection via $easyFindDB$. Use the java expression to set up the SQL statement ( query the id data in the $prod$ table based on $categoria$ and $nome$ ) and execute the SQL statement to get all the data. If the length of the query result is 1, return False; otherwise return all the query results.","public Object queryProd ( EntityManager easyFindDB , Root < Object > prod , String categoria , String nome ) { CriteriaBuilder cb = easyFindDB . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( prod ) . where ( cb . equal ( prod . get ( "" categoria "" ) , categoria ) ) ; cq . select ( prod ) . where ( cb . equal ( prod . get ( "" nome "" ) , nome ) ) ; List < Object > risControl = easyFindDB . createQuery ( cq ) . getResultList ( ) ; if ( risControl . size ( ) == 1 ) { return false ; } else { return risControl ; } }","Generate syntax code: Get the database engine and establish a connection via $easyFindDB$. Use the java expression to set up the SQL statement ( query the id data in the $prod$ table based on $categoria$ and $nome$ ) and execute the SQL statement to get all the data. If the length of the query result is 1, return False; otherwise return all the query results.","<met> <mod> public </mod> type_identifier queryProd <for> ( <for> type_identifier easyFindDB </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> prod </for> , <for> type_identifier categoria </for> , <for> type_identifier nome </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> easyFindDB . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( prod ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> prod . get <arg> ( string_literal ) </arg> </met> , categoria ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( prod ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> prod . get <arg> ( string_literal ) </arg> </met> , nome ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> risControl = <met> <met> easyFindDB . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> risControl . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return risControl ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the requested method is 'POST', SQL is executed using $db$ ( to get the users column in the zips where zipcode is $zipcode$ ) and the first data is returned to the rendered ""location.html"", where the Zips parameter is the result of the query.","public Object location ( HttpRequest request , JdbcTemplate db , String zipcode , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = db . query ( "" select users from zips where zipcode = ? "" , new Object [ ] { zipcode } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" zips "" , res ) ; return "" location.html "" ; } else { return null ; } }","Generate syntax code: If the requested method is 'POST', SQL is executed using $db$ ( to get the users column in the zips where zipcode is $zipcode$ ) and the first data is returned to the rendered ""location.html"", where the Zips parameter is the result of the query.","<met> <mod> public </mod> type_identifier location <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier zipcode </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zipcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Open the books.csv file and read it, use for loop traversal to read the content, execute the SQL statement through $conn$: Use $author$ to query all the 'title' data in the books table and print the query results.","public void main ( JdbcTemplate conn ) { List list = new ArrayList ( ) ; String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String author = sc . nextLine ( ) ; List results = conn . query ( "" select title from books where author= ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open the books.csv file and read it, use for loop traversal to read the content, execute the SQL statement through $conn$: Use $author$ to query all the 'title' data in the books table and print the query results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> author = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $postgresql$. Execute the SQL statement ( query the first piece of data in the taxonomyresults table according to $taxonomysampleinfo$ ) , close the connection, and return the query results.","public List clear ( DataSource postgresql , String taxonomysampleinfo ) { JdbcTemplate eng = new JdbcTemplate ( postgresql ) ; List statement = eng . query ( "" select * from taxonomyresults where taxonomysampleinfo= ? "" , new Object [ ] { taxonomysampleinfo } , new BeanPropertyRowMapper ( List . class ) ) ; return statement ; }","Generate syntax code: Get the database engine and establish a connection through $postgresql$. Execute the SQL statement ( query the first piece of data in the taxonomyresults table according to $taxonomysampleinfo$ ) , close the connection, and return the query results.","<met> <mod> public </mod> type_identifier clear <for> ( <for> type_identifier postgresql </for> , <for> type_identifier taxonomysampleinfo </for> ) </for> <blo> { <loc> type_identifier <var> eng = <obj> new type_identifier <arg> ( postgresql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> statement = <met> eng . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { taxonomysampleinfo } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return statement ; </ret> } </blo> </met>"
"Generate origin code: se $connection$ to execute a SQL: Query all columns in the fiche table and get all the data. Use for loop traversal to query the results, print the id of the query results and the corresponding values of titre and text.","public void affListe ( JdbcTemplate connection ) { List r = connection . query ( "" select * from fiche "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : r ) { JSONObject jsonObject = JSONObject . parseObject ( r . toString ( ) ) ; System . out . println ( jsonObject . getString ( "" id "" ) + jsonObject . getString ( "" titre "" ) + jsonObject . getString ( "" text "" ) ) ; } }","Generate syntax code: se $connection$ to execute a SQL: Query all columns in the fiche table and get all the data. Use for loop traversal to query the results, print the id of the query results and the corresponding values of titre and text.","<met> <mod> public </mod> void_type affListe <for> ( <for> type_identifier connection </for> ) </for> <blo> { <loc> type_identifier <var> r = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : r ) <blo> { <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> + <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> </bin> + <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL: To query all columns in the dual table based on $rownum$. If the number of rows of the query result is not 0, return the number of rows of the query result.","public Object query ( JdbcTemplate conn , String rownum ) { List result = conn . query ( "" select * from dual where rownum< ? "" , new Object [ ] { rownum } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . size ( ) ; } }","Generate syntax code: Use $conn$ to execute SQL: To query all columns in the dual table based on $rownum$. If the number of rows of the query result is not 0, return the number of rows of the query result.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier conn </for> , <for> type_identifier rownum </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { rownum } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> result . size <arg> ( ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $time_now$ exists, create the database engine and get the connection through $postgres_dbapi$; execute SQL ( query the num in the database_name table based on $time_now$ ) and get all the data; close the connection and return the query results. Otherwise ( $time_now$ does not exist ) , return False.","public Object createDatabase ( DataSource postgres_dbapi , String time_now ) { if ( time_now != null ) { JdbcTemplate conn = new JdbcTemplate ( postgres_dbapi ) ; List nums = conn . query ( "" select num from database_name where time_now= ? "" , new Object [ ] { time_now } , new BeanPropertyRowMapper ( List . class ) ) ; return nums ; } else { return false ; } }","Generate syntax code: If $time_now$ exists, create the database engine and get the connection through $postgres_dbapi$; execute SQL ( query the num in the database_name table based on $time_now$ ) and get all the data; close the connection and return the query results. Otherwise ( $time_now$ does not exist ) , return False.","<met> <mod> public </mod> type_identifier createDatabase <for> ( <for> type_identifier postgres_dbapi </for> , <for> type_identifier time_now </for> ) </for> <blo> { <if_> if <par> ( <bin> time_now != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( postgres_dbapi ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> nums = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { time_now } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return nums ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Create a cursor with $conn$ and execute a SQL through the cursor: Query the first id in the sqlalchemy_bench table and return all the query results.,"public Object initSqlite3 ( DataSource conn ) { JdbcTemplate engine = new JdbcTemplate ( conn ) ; List res = engine . query ( "" select id from sqlalchemy_bench "" , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }",Generate syntax code: Create a cursor with $conn$ and execute a SQL through the cursor: Query the first id in the sqlalchemy_bench table and return all the query results.,"<met> <mod> public </mod> type_identifier initSqlite3 <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Set SQL ( query the 'password' data in the player_master table through $username$ ) . Use the $conn$ connection to execute SQL to get all the data. For loop iterates the execution result and prints.,"public void selectValue ( JdbcTemplate conn , String username ) { List result = conn . query ( "" select password from player_master where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }",Generate syntax code: Set SQL ( query the 'password' data in the player_master table through $username$ ) . Use the $conn$ connection to execute SQL to get all the data. For loop iterates the execution result and prints.,"<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: connect the database according to $engine$, set SQL ( query all columns in the outcome_vw table based on $model_name$ and $pct_correct$ ) , execute SQL, get all the query results, return the rendered project_outcomes.html page, and set the parameter rsOutcome to the query result.","public String admin ( DataSource engine , String model_name , String pct_correct , Model model ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rsOutcome = con . query ( "" select * from outcome_vw where model_name = ? and pct_correct = ? "" , new Object [ ] { model_name , pct_correct } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rsOutcome "" , rsOutcome ) ; return "" project_outcomes.html "" ; }","Generate syntax code: connect the database according to $engine$, set SQL ( query all columns in the outcome_vw table based on $model_name$ and $pct_correct$ ) , execute SQL, get all the query results, return the rendered project_outcomes.html page, and set the parameter rsOutcome to the query result.","<met> <mod> public </mod> type_identifier admin <for> ( <for> type_identifier engine </for> , <for> type_identifier model_name </for> , <for> type_identifier pct_correct </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rsOutcome = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { model_name , pct_correct } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , rsOutcome ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get all columns in $Threads$ table based on $thread_number$ ) , get the first row of data, and finally return the query result.","public List markThreadDead ( EntityManager conn , Root < Object > Threads , String thread_number ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Threads ) . where ( cb . equal ( Threads . get ( "" thread_number "" ) , thread_number ) ) ; List < Object > thread_rows = conn . createQuery ( cq ) . getResultList ( ) ; return thread_rows ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get all columns in $Threads$ table based on $thread_number$ ) , get the first row of data, and finally return the query result.","<met> <mod> public </mod> type_identifier markThreadDead <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Threads </for> , <for> type_identifier thread_number </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Threads ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Threads . get <arg> ( string_literal ) </arg> </met> , thread_number ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> thread_rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return thread_rows ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get all columns in the pets table based on $name$ ) and get all data, then return the query results. If not try, then pass.","public List testRollback ( JdbcTemplate conn , String name ) { try { List results = conn . query ( "" select * from pets where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get all columns in the pets table based on $name$ ) and get all data, then return the query results. If not try, then pass.","<met> <mod> public </mod> type_identifier testRollback <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use java expressions to set the SQL ( query the foo column in the $table_name$ with $id$ ) , execute the SQL with $conn$ and get all the data, and set assertions to determine that the length of the returned result is greater than 0.","public void testChange ( EntityManager conn , Root < Object > table_name , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_name ) . where ( cb . equal ( table_name . get ( "" id "" ) , id ) ) ; List < Object > foolist = conn . createQuery ( cq ) . getResultList ( ) ; assert foolist . size ( ) > 0 ; }","Generate syntax code: Use java expressions to set the SQL ( query the foo column in the $table_name$ with $id$ ) , execute the SQL with $conn$ and get all the data, and set assertions to determine that the length of the returned result is greater than 0.","<met> <mod> public </mod> void_type testChange <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_name </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table_name ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table_name . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> foolist = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> foolist . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
Generate origin code: Use ORM method to execute SQL statement through $conn$: Query the contents with olympic_id as $olympic_id$ in the $Medal$ table and get all the data. Set assertion to determine the length of the returned results is not 0.,"public void getMedal ( EntityManager conn , Root < Object > Medal , String olympic_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Medal ) . where ( cb . equal ( Medal . get ( "" olympic_id "" ) , olympic_id ) ) ; List < Object > medal_olympics = conn . createQuery ( cq ) . getResultList ( ) ; assert medal_olympics . size ( ) != 0 ; }",Generate syntax code: Use ORM method to execute SQL statement through $conn$: Query the contents with olympic_id as $olympic_id$ in the $Medal$ table and get all the data. Set assertion to determine the length of the returned results is not 0.,"<met> <mod> public </mod> void_type getMedal <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Medal </for> , <for> type_identifier olympic_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Medal ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Medal . get <arg> ( string_literal ) </arg> </met> , olympic_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> medal_olympics = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> medal_olympics . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Create a cursor object through $conn$ and use the cursor object to execute the SQL statement, and the content is as follows: Query all the u_name in the customer table according to $u_id$ and return the query results.","public List get ( DataSource conn , String u_id ) { JdbcTemplate c = new JdbcTemplate ( conn ) ; List result = c . query ( "" select u_name from customer where u_id = ? "" , new Object [ ] { u_id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Create a cursor object through $conn$ and use the cursor object to execute the SQL statement, and the content is as follows: Query all the u_name in the customer table according to $u_id$ and return the query results.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier conn </for> , <for> type_identifier u_id </for> ) </for> <blo> { <loc> type_identifier <var> c = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> c . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { u_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Try to use ORM method to execute the SQL statement via $conn$: Query all of data in the $tables$ table, return the query results, and is an Exception occurs, return False.","public Object getData ( EntityManager conn , Root < Object > tables ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tables ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use ORM method to execute the SQL statement via $conn$: Query all of data in the $tables$ table, return the query results, and is an Exception occurs, return False.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tables </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( tables ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL: query all columns in the City table where City is $city$, temp is $temp$, pressure is $pressure$ and wind is $wind$. Execute the SQL using $connection$ and get all the data. Return the result of the query.","public List searchCity ( JdbcTemplate connection , String city , String temp , String pressure , String wind ) { List results = connection . query ( "" select * from City where city=? and temp=? and pressure=? and wind=? "" , new Object [ ] { city , temp , pressure , wind } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set SQL: query all columns in the City table where City is $city$, temp is $temp$, pressure is $pressure$ and wind is $wind$. Execute the SQL using $connection$ and get all the data. Return the result of the query.","<met> <mod> public </mod> type_identifier searchCity <for> ( <for> type_identifier connection </for> , <for> type_identifier city </for> , <for> type_identifier temp </for> , <for> type_identifier pressure </for> , <for> type_identifier wind </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { city , temp , pressure , wind } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Get the database engine through $uri$ and use the created database engine to execute the SQL statement: Query all the id in the testtable and return all the query results.,"public List getInfo ( DataSource uri ) { JdbcTemplate engine = new JdbcTemplate ( uri ) ; List res = engine . query ( "" select id from testtable "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Get the database engine through $uri$ and use the created database engine to execute the SQL statement: Query all the id in the testtable and return all the query results.,"<met> <mod> public </mod> type_identifier getInfo <for> ( <for> type_identifier uri </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Try to use java expressions to set up SQL ( query the id in the $class_or_mapper$ table ) . Use $conn$ to execute SQL and get all the data. Finally, return the query result. If an exception occurs, the ""Error"" message is printed directly.","public Object getById ( EntityManager conn , Root < Object > class_or_mapper ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( class_or_mapper ) ; List < Object > objects = conn . createQuery ( cq ) . getResultList ( ) ; return objects ; } catch ( Exception e ) { System . out . println ( "" Error "" ) ; return false ; } }","Generate syntax code: Try to use java expressions to set up SQL ( query the id in the $class_or_mapper$ table ) . Use $conn$ to execute SQL and get all the data. Finally, return the query result. If an exception occurs, the ""Error"" message is printed directly.","<met> <mod> public </mod> type_identifier getById <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> class_or_mapper </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( class_or_mapper ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> objects = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return objects ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute a SQL statement: Get all columns in the books table based on $qisbn$ and $qtitle$, and get all the data. If the query result is empty, then return None; otherwise, use for loop iterate through the query results and print them.","public Object books ( JdbcTemplate conn , String qisbn , String qtitle ) { List val = conn . query ( "" select * from books where qisbn = ? and qtitle = ? "" , new Object [ ] { qisbn , qtitle } , new BeanPropertyRowMapper ( List . class ) ) ; if ( val . isEmpty ( ) ) { return null ; } else { for ( Object row : val ) { System . out . println ( row ) ; } return val ; } }","Generate syntax code: Use the $conn$ connection to execute a SQL statement: Get all columns in the books table based on $qisbn$ and $qtitle$, and get all the data. If the query result is empty, then return None; otherwise, use for loop iterate through the query results and print them.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier conn </for> , <for> type_identifier qisbn </for> , <for> type_identifier qtitle </for> ) </for> <blo> { <loc> type_identifier <var> val = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { qisbn , qtitle } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> val . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <enh> for ( type_identifier row : val ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return val ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$, execute SQL based on the java expression ( get gi column in $table_gi_taxid_nuc$ table based on $tax_id$ ) and get all the data. Return the query results and finally make sure $conn$ connection is closed.","public Object getTaxids ( EntityManager conn , Root < Object > table_gi_taxid_nuc , String tax_id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_gi_taxid_nuc ) . where ( cb . equal ( table_gi_taxid_nuc . get ( "" tax_id "" ) , tax_id ) ) ; List < Object > records = conn . createQuery ( cq ) . getResultList ( ) ; return records ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$, execute SQL based on the java expression ( get gi column in $table_gi_taxid_nuc$ table based on $tax_id$ ) and get all the data. Return the query results and finally make sure $conn$ connection is closed.","<met> <mod> public </mod> type_identifier getTaxids <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_gi_taxid_nuc </for> , <for> type_identifier tax_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table_gi_taxid_nuc ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table_gi_taxid_nuc . get <arg> ( string_literal ) </arg> </met> , tax_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> records = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return records ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL to query all columns in userdetails where survey is $survey$ and company is $company$, get all the data, execute the SQL statement using the $conn$ connection, and return all the query results.","public Object activateSurvey ( JdbcTemplate conn , String survey , String company ) { List infor = conn . query ( "" select * from userdetails where survey=? and company=? "" , new Object [ ] { survey , company } , new BeanPropertyRowMapper ( List . class ) ) ; return infor ; }","Generate syntax code: Set the SQL to query all columns in userdetails where survey is $survey$ and company is $company$, get all the data, execute the SQL statement using the $conn$ connection, and return all the query results.","<met> <mod> public </mod> type_identifier activateSurvey <for> ( <for> type_identifier conn </for> , <for> type_identifier survey </for> , <for> type_identifier company </for> ) </for> <blo> { <loc> type_identifier <var> infor = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { survey , company } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return infor ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( use the method of format string to query the id in the ratings table based on $genre$ ) and get all the data. Convert the query result to a list type and return the 0th data.,"public Object lookupGenreId ( JdbcTemplate conn , String genre ) { List genre_id = conn . query ( "" select id from ratings where genre =? "" , new Object [ ] { genre } , new BeanPropertyRowMapper ( List . class ) ) ; return genre_id . get ( 0 ) ; }",Generate syntax code: Use $conn$ to execute SQL ( use the method of format string to query the id in the ratings table based on $genre$ ) and get all the data. Convert the query result to a list type and return the 0th data.,"<met> <mod> public </mod> type_identifier lookupGenreId <for> ( <for> type_identifier conn </for> , <for> type_identifier genre </for> ) </for> <blo> { <loc> type_identifier <var> genre_id = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { genre } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> genre_id . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect the database through $db$ and execute the SQL statement, which reads: Query all email data from the users table according to $name$ and return all the query results.","public List testConnection ( DataSource db , String name ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List rp = conn . query ( "" select email from users where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return rp ; }","Generate syntax code: Connect the database through $db$ and execute the SQL statement, which reads: Query all email data from the users table according to $name$ and return all the query results.","<met> <mod> public </mod> type_identifier testConnection <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rp = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rp ; </ret> } </blo> </met>"
"Generate origin code: Try use the java expression to set up the SQL statement: Query the number of name in the $table$ table whose id is $id$, execute the SQL statement through the $conn$ connection to get the first piece of data and return the execution result. If Exception occurs, return the exception information with the logging.error ( ) method.","public Object getStats ( EntityManager conn , Root < Object > table , String id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" url "" ) , id ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try use the java expression to set up the SQL statement: Query the number of name in the $table$ table whose id is $id$, execute the SQL statement through the $conn$ connection to get the first piece of data and return the execution result. If Exception occurs, return the exception information with the logging.error ( ) method.","<met> <mod> public </mod> type_identifier getStats <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Set up sql ( query the table_name column in the schema_tables table according to $schema_value$ ) , execute SQL, get all the query results, and return them.","public List queryPage ( DataSource engine , String schema_value ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List table_names = conn . query ( "" select table_name from schema_tables where schema_value= ? "" , new Object [ ] { schema_value } , new BeanPropertyRowMapper ( List . class ) ) ; return table_names ; }","Generate syntax code: connect the database according to $engine$. Set up sql ( query the table_name column in the schema_tables table according to $schema_value$ ) , execute SQL, get all the query results, and return them.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier engine </for> , <for> type_identifier schema_value </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> table_names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schema_value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return table_names ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query title column in books table based on $author$ ) , use $conn$ to execute SQL and get all query results, use for loop to iterate through all query results, print ""Search result:"" and 'title' field of each data. If the list is empty, return the rendered ""error.html"" with the parameter message ""Sorry"". Otherwise, return the rendered ""all_book_results.html"" page and the list which stores the query results with parameter of books_list.","public String bookResults ( JdbcTemplate conn , String author , Model model ) { List books_list = conn . query ( "" select title from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object book : books_list ) { System . out . println ( book ) ; } if ( books_list . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" Sorry "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" books_list "" , books_list ) ; return "" all_book_results.html "" ; } }","Generate syntax code: Set up SQL ( query title column in books table based on $author$ ) , use $conn$ to execute SQL and get all query results, use for loop to iterate through all query results, print ""Search result:"" and 'title' field of each data. If the list is empty, return the rendered ""error.html"" with the parameter message ""Sorry"". Otherwise, return the rendered ""all_book_results.html"" page and the list which stores the query results with parameter of books_list.","<met> <mod> public </mod> type_identifier bookResults <for> ( <for> type_identifier conn </for> , <for> type_identifier author </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books_list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier book : books_list ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( book ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <met> books_list . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books_list ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the pokemon_id column in the sightings table according to $order_by$ ) , get all the data, use for loop to convert each item of the query result into dict, and store it in list, and then return the list.","public List getTopPokemon ( JdbcTemplate conn , String order_by ) { List list = conn . query ( "" select pokemon_id from sightings where order_by= ? "" , new Object [ ] { order_by } , new BeanPropertyRowMapper ( List . class ) ) ; List pokemons = new ArrayList ( ) ; for ( Object r : list ) { pokemons . add ( r ) ; } return pokemons ; }","Generate syntax code: Use $conn$ to execute SQL ( query the pokemon_id column in the sightings table according to $order_by$ ) , get all the data, use for loop to convert each item of the query result into dict, and store it in list, and then return the list.","<met> <mod> public </mod> type_identifier getTopPokemon <for> ( <for> type_identifier conn </for> , <for> type_identifier order_by </for> ) </for> <blo> { <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { order_by } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> pokemons = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : list ) <blo> { <exp> <met> pokemons . add <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> <ret> return pokemons ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statemen: Query all the columns in the french_wordlist through $student$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$ to get all the data. Set the assertion to determine whether the length of the execution result is greater than 0, and return all the execution results.","public List listWordList ( JdbcTemplate conn , String student ) { List result = conn . query ( "" select * from french_wordlist where student = ? "" , new Object [ ] { student } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) > 0 ; return result ; }","Generate syntax code: Set the SQL statemen: Query all the columns in the french_wordlist through $student$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$ to get all the data. Set the assertion to determine whether the length of the execution result is greater than 0, and return all the execution results.","<met> <mod> public </mod> type_identifier listWordList <for> ( <for> type_identifier conn </for> , <for> type_identifier student </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { student } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $localhost$. Execute the SQL statement ( query the adj_open column in the stock_data table according to $id$ ) and get all the data. Use for loop to convert the 0th, 1st, and 2nd elements of each item of the query result into the values corresponding to the 'id', 'adj_open', and 'adj_close' keys in dict respectively, and store them in list. Return the list converted to json.","public JSONArray stockData ( DataSource localhost , String id ) { JdbcTemplate engine = new JdbcTemplate ( localhost ) ; List data = engine . query ( "" select adj_open from stock_data where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray newdata = new JSONArray ( ) ; for ( Object datum : data ) { JSONObject json = new JSONObject ( ) ; json . put ( "" id "" , JSONObject . parseObject ( datum . toString ( ) ) . get ( 0 ) ) ; json . put ( "" adj_open "" , JSONObject . parseObject ( datum . toString ( ) ) . get ( 1 ) ) ; json . put ( "" adj_close "" , JSONObject . parseObject ( datum . toString ( ) ) . get ( 2 ) ) ; newdata . add ( json ) ; } return newdata ; }","Generate syntax code: Get the database engine through $localhost$. Execute the SQL statement ( query the adj_open column in the stock_data table according to $id$ ) and get all the data. Use for loop to convert the 0th, 1st, and 2nd elements of each item of the query result into the values corresponding to the 'id', 'adj_open', and 'adj_close' keys in dict respectively, and store them in list. Return the list converted to json.","<met> <mod> public </mod> type_identifier stockData <for> ( <for> type_identifier localhost </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( localhost ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> newdata = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier datum : data ) <blo> { <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> datum . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> datum . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> datum . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> newdata . add <arg> ( json ) </arg> </met> ; </exp> } </blo> </enh> <ret> return newdata ; </ret> } </blo> </met>"
"Generate origin code: Try to get the database enginevia $host$ and establish a connection, where the echo parameter is True, execute the SQL statement ( get all columns in datas based on $date$ ) and get all the data and return the obtained result. Print the exception if an exception occurs during execution, and finally make sure the connection is closed.","public List addBatchOperInfos ( DataSource host , String date ) { try { JdbcTemplate connection = new JdbcTemplate ( host ) ; List res = connection . query ( "" select * from datas where date= ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to get the database enginevia $host$ and establish a connection, where the echo parameter is True, execute the SQL statement ( get all columns in datas based on $date$ ) and get all the data and return the obtained result. Print the exception if an exception occurs during execution, and finally make sure the connection is closed.","<met> <mod> public </mod> type_identifier addBatchOperInfos <for> ( <for> type_identifier host </for> , <for> type_identifier date </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the user_id data in the users table where user_name is $name$, and execute the SQL statement with $conn$ to get all the data. Try to set the assertion to determine the length of the execution result to 0. Finally make sure $conn$ is closed.","public void testMorerollbackOffConn ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select user_id from users where user_name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; try { assert result . size ( ) == 0 ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Set the SQL statement: Query the user_id data in the users table where user_name is $name$, and execute the SQL statement with $conn$ to get all the data. Try to set the assertion to determine the length of the execution result to 0. Finally make sure $conn$ is closed.","<met> <mod> public </mod> void_type testMorerollbackOffConn <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <try> try <blo> { <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all query results for the dest column in the flights table based on $minutes$ ) and use for loop to print the data one by one.,"public void main ( JdbcTemplate conn , String minutes ) { List query = conn . query ( "" select dest from flights where minutes= ? "" , new Object [ ] { minutes } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : query ) { System . out . println ( i ) ; } }",Generate syntax code: Use $conn$ to execute SQL ( query all query results for the dest column in the flights table based on $minutes$ ) and use for loop to print the data one by one.,"<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier minutes </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { minutes } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement: Query the data in the $tconfig$ table whose id is $item_id$, and use $conn$ to execute SQL to get all the data and return it.","public List query ( EntityManager conn , Root < Object > tconfig , String item_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tconfig ) . where ( cb . equal ( tconfig . get ( "" id "" ) , item_id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the java expression to set the SQL statement: Query the data in the $tconfig$ table whose id is $item_id$, and use $conn$ to execute SQL to get all the data and return it.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tconfig </for> , <for> type_identifier item_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tconfig ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tconfig . get <arg> ( string_literal ) </arg> </met> , item_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get all the columns in the transactions where the name of list is $listname$ ) , get all the data, and finally return the rendered ""transactions.html"" with the list parameter as the result of the query.","public String transactionsList ( JdbcTemplate conn , String listname , Model model ) { List list = conn . query ( "" select * from transactions where listname= ? "" , new Object [ ] { listname } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" list "" , list ) ; return "" transactions.html "" ; }","Generate syntax code: Execute the SQL with $conn$ ( get all the columns in the transactions where the name of list is $listname$ ) , get all the data, and finally return the rendered ""transactions.html"" with the list parameter as the result of the query.","<met> <mod> public </mod> type_identifier transactionsList <for> ( <for> type_identifier conn </for> , <for> type_identifier listname </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { listname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , list ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If $data$ is not None, then use $conn$ to execute the SQL ( get the queue column in the Task table based on $data$ ) and get all the data. Use for loop to store each item of the query results as list and return it.","public List selectQueue ( JdbcTemplate conn , String data ) { if ( data != null ) { List Tasks = conn . query ( "" select queue from task where data = ? "" , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; return Tasks ; } else { return null ; } }","Generate syntax code: If $data$ is not None, then use $conn$ to execute the SQL ( get the queue column in the Task table based on $data$ ) and get all the data. Use for loop to store each item of the query results as list and return it.","<met> <mod> public </mod> type_identifier selectQueue <for> ( <for> type_identifier conn </for> , <for> type_identifier data </for> ) </for> <blo> { <if_> if <par> ( <bin> data != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> Tasks = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { data } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return Tasks ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up SQL based on the java expression ( query the 'table' column in the $Customer$ table based on $id$ ) . connect the database according to $engine$, execute SQL, get all the data, and return the result of executing the statement.","public List testCoreReuseStmt ( EntityManager engine , Root < Object > Customer , String id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Customer ) . where ( cb . equal ( Customer . get ( "" id "" ) , id ) ) ; List < Object > row = engine . createQuery ( cq ) . getResultList ( ) ; return row ; }","Generate syntax code: Set up SQL based on the java expression ( query the 'table' column in the $Customer$ table based on $id$ ) . connect the database according to $engine$, execute SQL, get all the data, and return the result of executing the statement.","<met> <mod> public </mod> type_identifier testCoreReuseStmt <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Customer </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Customer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Customer . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> row = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement ( query the first piece of isbn data in reviews based on $userid$ ) . Return the query result.,"public List revBook ( JdbcTemplate conn , String userid ) { List bookrs = conn . query ( "" select isbn from reviews where userid = ? "" , new Object [ ] { userid } , new BeanPropertyRowMapper ( List . class ) ) ; return bookrs ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query the first piece of isbn data in reviews based on $userid$ ) . Return the query result.,"<met> <mod> public </mod> type_identifier revBook <for> ( <for> type_identifier conn </for> , <for> type_identifier userid </for> ) </for> <blo> { <loc> type_identifier <var> bookrs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { userid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return bookrs ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the CHECKIN table based on $humidity$ )  get the first row of data and return the data.,"public Object main ( JdbcTemplate conn , String humidity ) { List adder = conn . query ( "" select * from checkin where humidity = ? "" , new Object [ ] { humidity } , new BeanPropertyRowMapper ( List . class ) ) ; return adder . get ( 0 ) ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the CHECKIN table based on $humidity$ )  get the first row of data and return the data.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier humidity </for> ) </for> <blo> { <loc> type_identifier <var> adder = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { humidity } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> adder . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the get_users table based on $full_name$ ) , get the first row of data, and return the query results.","public List insertData ( JdbcTemplate conn , String full_name ) { List users = conn . query ( "" select * from get_users where full_name = ? "" , new Object [ ] { full_name } , new BeanPropertyRowMapper ( List . class ) ) ; return users ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the get_users table based on $full_name$ ) , get the first row of data, and return the query results.","<met> <mod> public </mod> type_identifier insertData <for> ( <for> type_identifier conn </for> , <for> type_identifier full_name </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { full_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return users ; </ret> } </blo> </met>"
Generate origin code: Query all columns in the dataSST table with date_use as $date_use$ through $conn$ and get all the data. Use for loop iterate through the query result and print it.,"public void getGrapXMLdata ( JdbcTemplate conn , String date_use ) { List results = conn . query ( "" select * from datasst where date_use = ? "" , new Object [ ] { date_use } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : results ) { System . out . println ( r ) ; } }",Generate syntax code: Query all columns in the dataSST table with date_use as $date_use$ through $conn$ and get all the data. Use for loop iterate through the query result and print it.,"<met> <mod> public </mod> void_type getGrapXMLdata <for> ( <for> type_identifier conn </for> , <for> type_identifier date_use </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date_use } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Create the database engine where memory is $memory$. Start a connection . Execute the SQL represented by the java expression using the join ( get all columns in $t_ccs$ where project_id is $project_id$ ) and get all the data. Finally, set assertion to judge that the length of the query result is not 0.","public void testSelect ( EntityManager memory , Root < Object > t_ccs , String project_id ) { CriteriaBuilder cb = memory . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( t_ccs ) . where ( cb . equal ( t_ccs . get ( "" project_id "" ) , project_id ) ) ; List < Object > rows = memory . createQuery ( cq ) . getResultList ( ) ; assert rows . size ( ) != 0 ; }","Generate syntax code: Create the database engine where memory is $memory$. Start a connection . Execute the SQL represented by the java expression using the join ( get all columns in $t_ccs$ where project_id is $project_id$ ) and get all the data. Finally, set assertion to judge that the length of the query result is not 0.","<met> <mod> public </mod> void_type testSelect <for> ( <for> type_identifier memory </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> t_ccs </for> , <for> type_identifier project_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> memory . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( t_ccs ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> t_ccs . get <arg> ( string_literal ) </arg> </met> , project_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> memory . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Try to set up sql ( query all the information in the database table based on $engine$ and $session$ ) , use $conn$ to execute SQL and get all the query results. If the query results are not empty, use for loop to convert each of the query results to dict, store in list and return. If an Exception is caught, print the exception. Finally, close the connection.","public List getSubsetData ( JdbcTemplate conn , String engine , String session ) { try { List rows = conn . query ( "" select * from database where engine = ? and session = ? "" , new Object [ ] { engine , session } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! rows . isEmpty ( ) ) { return rows ; } else { return null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set up sql ( query all the information in the database table based on $engine$ and $session$ ) , use $conn$ to execute SQL and get all the query results. If the query results are not empty, use for loop to convert each of the query results to dict, store in list and return. If an Exception is caught, print the exception. Finally, close the connection.","<met> <mod> public </mod> type_identifier getSubsetData <for> ( <for> type_identifier conn </for> , <for> type_identifier engine </for> , <for> type_identifier session </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { engine , session } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> rows . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return rows ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$ ( get all the columns in the events_entity_id based on $entity_id$ ) and get all the data, convert the 0th element of each item of the query result into list, further set the assertion list content length to 2, and finally return the list content.","public List testInputMinDate ( JdbcTemplate conn , String entity_id ) { List r = conn . query ( "" select * from events_entity_id where entity_id= ? "" , new Object [ ] { entity_id } , new BeanPropertyRowMapper ( List . class ) ) ; List rows = new ArrayList ( ) ; for ( Object x : r ) { rows . add ( JSONObject . parseObject ( x . toString ( ) ) . get ( 0 ) ) ; } assert rows . size ( ) == 2 ; return rows ; }","Generate syntax code: Execute SQL via $conn$ ( get all the columns in the events_entity_id based on $entity_id$ ) and get all the data, convert the 0th element of each item of the query result into list, further set the assertion list content length to 2, and finally return the list content.","<met> <mod> public </mod> type_identifier testInputMinDate <for> ( <for> type_identifier conn </for> , <for> type_identifier entity_id </for> ) </for> <blo> { <loc> type_identifier <var> r = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { entity_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> rows = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier x : r ) <blo> { <exp> <met> rows . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> x . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"" and $session$ does not get the data 'logged_in', use $conn$ to execute SQL ( query the longitude column in the ZIPCODE table according to $zip$ ) , get the first row of data and return. Otherwise, return the rendered 'checked.html' page.","public Object weather ( HttpRequest request , JdbcTemplate conn , String zip , HttpSession session ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { if ( session . getAttribute ( "" logged_in "" ) != null ) { List lat = conn . query ( "" select longitude from zipcode where zip = ? "" , new Object [ ] { zip } , new BeanPropertyRowMapper ( List . class ) ) ; return lat ; } else { return "" checked.html "" ; } } else { return "" checked.html "" ; } }","Generate syntax code: If the request method is ""POST"" and $session$ does not get the data 'logged_in', use $conn$ to execute SQL ( query the longitude column in the ZIPCODE table according to $zip$ ) , get the first row of data and return. Otherwise, return the rendered 'checked.html' page.","<met> <mod> public </mod> type_identifier weather <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier zip </for> , <for> type_identifier session </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> lat = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zip } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return lat ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up SQL ( query all the information in the flights table based on $date$ ) , execute SQL with $conn$ and get all the query results. Return the rendered ""index.html"" page with the flights parameter as the query results.","public String selectRes ( JdbcTemplate conn , String date , Model model ) { List flights = conn . query ( "" select * from flights where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; }","Generate syntax code: Set up SQL ( query all the information in the flights table based on $date$ ) , execute SQL with $conn$ and get all the query results. Return the rendered ""index.html"" page with the flights parameter as the query results.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> type_identifier date </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query all columns in the customers table where email is $email$ ) , use $db_conn$ to execute the query statement ( where the email parameter is email ) , get all the data, convert the query results to list form and return.","public List existeEmail ( JdbcTemplate db_conn , String email ) { List query = db_conn . query ( "" select * from customers where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }","Generate syntax code: Set the SQL statement ( query all columns in the customers table where email is $email$ ) , use $db_conn$ to execute the query statement ( where the email parameter is email ) , get all the data, convert the query results to list form and return.","<met> <mod> public </mod> type_identifier existeEmail <for> ( <for> type_identifier db_conn </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> db_conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </met>"
Generate origin code: ed_tx_id in the pde_trades table and get all the data. For loop iterates through the execution result and returns the 0th element of the execution result.,"public Object countTradingTxs ( JdbcTemplate conn ) { List result_set = conn . query ( "" select count(requested_tx_id) from pde_trades "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : result_set ) { return JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ; } }",Generate syntax code: ed_tx_id in the pde_trades table and get all the data. For loop iterates through the execution result and returns the 0th element of the execution result.,"<met> <mod> public </mod> type_identifier countTradingTxs <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result_set = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : result_set ) <blo> { <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </enh> } </blo> </met>"
"Generate origin code: Get the database engine through $DB_CONNECT_STRING$, where the parameter max_overflow is set to 5. Execute the SQL statement ( query the profileurl column in the people_profile table according to $username$ ) , get all the data, and use for loop to print each piece of the query result.","public void initialProfiles ( DataSource DB_CONNECT_STRING , String username ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select profileurl from people_profile where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : results ) { System . out . println ( r ) ; } }","Generate syntax code: Get the database engine through $DB_CONNECT_STRING$, where the parameter max_overflow is set to 5. Execute the SQL statement ( query the profileurl column in the people_profile table according to $username$ ) , get all the data, and use for loop to print each piece of the query result.","<met> <mod> public </mod> void_type initialProfiles <for> ( <for> type_identifier DB_CONNECT_STRING </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DB_CONNECT_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Use $connection$ to execute SQL ( query the title in the books table based on $isbn$ ) and get the first piece of data. Return the query results after being processed by jsonify.,"public JSONArray isbnApi ( JdbcTemplate connection , String isbn ) { List api_response = connection . query ( "" select title from books where isbn =? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( api_response . toString ( ) ) ; }",Generate syntax code: Use $connection$ to execute SQL ( query the title in the books table based on $isbn$ ) and get the first piece of data. Return the query results after being processed by jsonify.,"<met> <mod> public </mod> type_identifier isbnApi <for> ( <for> type_identifier connection </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> api_response = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> api_response . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query fake_stuff in the _fake_table table ) and get all the data. Return the query results.,"public List testExplode ( JdbcTemplate conn ) { List values = conn . query ( "" select fake_stuff from _fake_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }",Generate syntax code: Use $conn$ to execute SQL ( query fake_stuff in the _fake_table table ) and get all the data. Return the query results.,"<met> <mod> public </mod> type_identifier testExplode <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
Generate origin code: make the connection using $engine$. Execute the SQL statement ( select the drinkerID column in the drinkers where name is $name$ ) and fetch all the data. Return None if the result set is None and return None if the result set is dictionary type.,"public List findDrinker ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select drinkerid from drinkers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }",Generate syntax code: make the connection using $engine$. Execute the SQL statement ( select the drinkerID column in the drinkers where name is $name$ ) and fetch all the data. Return None if the result set is None and return None if the result set is dictionary type.,"<met> <mod> public </mod> type_identifier findDrinker <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $field$ has a value, use $conn$ to execute SQL ( query all columns in the books table based on $field$ ) , get all the query results, and return the rendered 'search.html', where parameter books is the query result.","public String search ( JdbcTemplate conn , String field , Model model ) { List resultBooks = conn . query ( "" select * from books where field = ? "" , new Object [ ] { field } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , resultBooks ) ; return "" search.html "" ; }","Generate syntax code: If $field$ has a value, use $conn$ to execute SQL ( query all columns in the books table based on $field$ ) , get all the query results, and return the rendered 'search.html', where parameter books is the query result.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier field </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> resultBooks = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { field } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , resultBooks ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ connection, get all columns in the users table through $username$ and $password$ and get all the data. If the number of rows of the query results is not 0, render and return 'success.html', where the message parameter is 'YES'; render and return 'success.html', where the message parameter is 'NO'.","public String registration ( JdbcTemplate conn , String username , String password , Model model ) { List res = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" NO "" ) ; } else { model . addAttribute ( "" message "" , "" YES "" ) ; } return "" success.html "" ; }","Generate syntax code: Use $conn$ connection, get all columns in the users table through $username$ and $password$ and get all the data. If the number of rows of the query results is not 0, render and return 'success.html', where the message parameter is 'YES'; render and return 'success.html', where the message parameter is 'NO'.","<met> <mod> public </mod> type_identifier registration <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> </if_> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query title in file according to where id is $id$ ) and get all the data. Render and return to 'index.html', where the titles parameter is the result of the query.","public String index ( JdbcTemplate conn , String id , Model model ) { List infor_title = conn . query ( "" select title from file where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" titles "" , infor_title ) ; return "" index.html "" ; }","Generate syntax code: Execute SQL with $conn$ ( query title in file according to where id is $id$ ) and get all the data. Render and return to 'index.html', where the titles parameter is the result of the query.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> infor_title = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , infor_title ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Through the $conn$ connection, use ORM method to execute the SQL statement ( query the first piece of data in the $Country$ table according to $noc$ ) , set the assertion to determine that the length of the returned result is not 0, and return the queried data.","public Object getValue ( EntityManager conn , Root < Object > Country , String url ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Country ) . where ( cb . equal ( Country . get ( "" noc "" ) , noc ) ) ; List < Object > outputs = conn . createQuery ( cq ) . getResultList ( ) ; assert outputs . size ( ) != 0 ; return outputs . get ( 0 ) ; }","Generate syntax code: Through the $conn$ connection, use ORM method to execute the SQL statement ( query the first piece of data in the $Country$ table according to $noc$ ) , set the assertion to determine that the length of the returned result is not 0, and return the queried data.","<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Country </for> , <for> type_identifier url </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Country ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Country . get <arg> ( string_literal ) </arg> </met> , noc ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> outputs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> outputs . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return <met> outputs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the users where the name of user is $username$ and password is $password$ ) with $conn$ and get all the data, then print each item of the query results using the for loop.","public void checkLogin ( JdbcTemplate conn , String username , String password ) { List results = conn . query ( "" select * from users where username = ? and password=? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : results ) { System . out . println ( item ) ; } }","Generate syntax code: Execute the SQL ( get all the columns in the users where the name of user is $username$ and password is $password$ ) with $conn$ and get all the data, then print each item of the query results using the for loop.","<met> <mod> public </mod> void_type checkLogin <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use the format string matching method to set SQL ( query all columns in the home_list table based on $id$ ) , and execute SQL according to $conn$. If the data is queried, return all the obtained data.","public List selectAllData ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select * from home_list where id=? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Use the format string matching method to set SQL ( query all columns in the home_list table based on $id$ ) , and execute SQL according to $conn$. If the data is queried, return all the obtained data.","<met> <mod> public </mod> type_identifier selectAllData <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the java expression to set up the SQL statement: Query the name data in the $clientes$ table based on $clienteid$. Use the $conn$ connection to execute the SQL statement to get all the data and return it.,"public List changeSaldo ( EntityManager conn , Root < Object > clientes , String clienteid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( clientes ) . where ( cb . equal ( clientes . get ( "" clienteid "" ) , clienteid ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }",Generate syntax code: Use the java expression to set up the SQL statement: Query the name data in the $clientes$ table based on $clienteid$. Use the $conn$ connection to execute the SQL statement to get all the data and return it.,"<met> <mod> public </mod> type_identifier changeSaldo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> clientes </for> , <for> type_identifier clienteid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( clientes ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> clientes . get <arg> ( string_literal ) </arg> </met> , clienteid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $engine_auth$. Use the connected object to create a cursor object , set the SQL statement: Query the Field data in the table table whose Type is $m_type$, execute SQL to get the first piece of data, and return the obtained data.","public List selectRes ( DataSource engine_auth , String m_type ) { JdbcTemplate conn = new JdbcTemplate ( engine_auth ) ; List res = conn . query ( "" select Field from table where Type= ? "" , new Object [ ] { m_type } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine and establish a connection through $engine_auth$. Use the connected object to create a cursor object , set the SQL statement: Query the Field data in the table table whose Type is $m_type$, execute SQL to get the first piece of data, and return the obtained data.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier engine_auth </for> , <for> type_identifier m_type </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine_auth ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { m_type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table based on $id$ ) , get all the query results, and return the rendered flights.html page, where the flights parameter is assigned to the queried data.","public String flights ( JdbcTemplate conn , String id , Model model ) { List flights = conn . query ( "" select * from flights where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table based on $id$ ) , get all the query results, and return the rendered flights.html page, where the flights parameter is assigned to the queried data.","<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends a request by post, execute SQL via $conn$ ( query all columns in books by $author$ and use the % operator to match the conditions in the SQL string ) and get all the data. For loop iterates through all the obtained data, prints, and returns all the obtained data.","public List search ( HttpRequest request , JdbcTemplate conn , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List data = conn . query ( "" select * from books where author= ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object x : data ) { System . out . println ( x ) ; } return data ; } else { return null ; } }","Generate syntax code: If the request module sends a request by post, execute SQL via $conn$ ( query all columns in books by $author$ and use the % operator to match the conditions in the SQL string ) and get all the data. For loop iterates through all the obtained data, prints, and returns all the obtained data.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier x : data ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( x ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: In ORM, execute SQL using $session$ ( query all information in the $BoltwoodSQL$ where timestamp is $dt$ ) . Convert all executed query results to DataFrame. If the empty attribute of the transformed data is True, return None. Otherwise, close $session$ and return the processed data.","public List before ( EntityManager session , Root < Object > BoltwoodSQL , String dt ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( BoltwoodSQL ) . where ( cb . equal ( BoltwoodSQL . get ( "" timestamp "" ) , dt ) ) ; List < Object > data = session . createQuery ( cq ) . getResultList ( ) ; if ( data . isEmpty ( ) ) { return null ; } else { return data ; } }","Generate syntax code: In ORM, execute SQL using $session$ ( query all information in the $BoltwoodSQL$ where timestamp is $dt$ ) . Convert all executed query results to DataFrame. If the empty attribute of the transformed data is True, return None. Otherwise, close $session$ and return the processed data.","<met> <mod> public </mod> type_identifier before <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> BoltwoodSQL </for> , <for> type_identifier dt </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( BoltwoodSQL ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> BoltwoodSQL . get <arg> ( string_literal ) </arg> </met> , dt ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return data ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( query the review column in the reviewtable table according to $isbn$ ) and get all the query results. If the query result length is 1, return True; otherwise, return False.","public boolean bookreviewFunc ( JdbcTemplate conn , String isbn ) { List review_return = conn . query ( "" select review from reviewtable where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_return . size ( ) == 1 ) { return true ; } else { return false ; } }","Generate syntax code: Execute SQL through $conn$ ( query the review column in the reviewtable table according to $isbn$ ) and get all the query results. If the query result length is 1, return True; otherwise, return False.","<met> <mod> public </mod> boolean_type bookreviewFunc <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> review_return = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> review_return . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return true ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query the the first piece of message with lastname as $lastname$ in the $User$ table and return the query results. If Exception occurs, print the exception message.","public List getValue ( EntityManager conn , Root < Object > User , String lastname ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" lastname "" ) , lastname ) ) ; List < Object > output = conn . createQuery ( cq ) . getResultList ( ) ; return output ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to query the the first piece of message with lastname as $lastname$ in the $User$ table and return the query results. If Exception occurs, print the exception message.","<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier lastname </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , lastname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> output = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return output ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try the following code: set the SQL ( get the name column in $categories_table$ where the id of category is $category_id$ ) in a java expression. Execute the SQL with $conn$ and get all the data. If an exception occurs, return directly after outputting the specific exception information.","public List getSource ( EntityManager conn , Root < Object > categories_table , String category_id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( categories_table ) . where ( cb . equal ( categories_table . get ( "" categoryID "" ) , category_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try the following code: set the SQL ( get the name column in $categories_table$ where the id of category is $category_id$ ) in a java expression. Execute the SQL with $conn$ and get all the data. If an exception occurs, return directly after outputting the specific exception information.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> categories_table </for> , <for> type_identifier category_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( categories_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> categories_table . get <arg> ( string_literal ) </arg> </met> , category_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up sql ( query all the information in the passengers table based on $flight_id$ ) , use $conn$ to execute SQL and get all the query results. Return the rendered ""flights.html"", where the parameter passenger_detail is the query result.","public String flights ( JdbcTemplate conn , String flight_id , Model model ) { List passenger_detail = conn . query ( "" select * from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passenger_detail . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" passenger_detail "" , passenger_detail ) ; return "" flights.thtml "" ; } }","Generate syntax code: Set up sql ( query all the information in the passengers table based on $flight_id$ ) , use $conn$ to execute SQL and get all the query results. Return the rendered ""flights.html"", where the parameter passenger_detail is the query result.","<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> passenger_detail = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passenger_detail . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , passenger_detail ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the schema information in the DataFrame table based on $options$ ) and get all the data. Store the 0th element of each item in the query result into list and return.,"public List chunksize ( JdbcTemplate conn , String options ) { List schemas = conn . query ( "" select schema from dataframe where options= ? "" , new Object [ ] { options } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object alpha : schemas ) { list . add ( JSONObject . parseObject ( alpha . toString ( ) ) . get ( 0 ) ) ; } return list ; }",Generate syntax code: Use $conn$ to execute SQL ( query the schema information in the DataFrame table based on $options$ ) and get all the data. Store the 0th element of each item in the query result into list and return.,"<met> <mod> public </mod> type_identifier chunksize <for> ( <for> type_identifier conn </for> , <for> type_identifier options </for> ) </for> <blo> { <loc> type_identifier <var> schemas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { options } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier alpha : schemas ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> alpha . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database according to $engine$. Set SQL: Query the City data in Bars through $bar$, execute SQL to get the first piece of data, and return None if the query result is empty; otherwise, return the query result in dictionary form.","public List findBar ( DataSource engine , String bar ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select city from bars where bar = ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: Connect to the database according to $engine$. Set SQL: Query the City data in Bars through $bar$, execute SQL to get the first piece of data, and return None if the query result is empty; otherwise, return the query result in dictionary form.","<met> <mod> public </mod> type_identifier findBar <for> ( <for> type_identifier engine </for> , <for> type_identifier bar </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bar } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $id$ is not None, use $conn$ to execute SQL ( query the username in the jam_people table based on $id$ ) and get all the data. If the query result is not an empty string, return the query result.","public List fillUsernamePeople ( JdbcTemplate conn , String id ) { if ( id != null ) { List username = conn . query ( "" select username from jam_people where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! username . isEmpty ( ) ) { return username ; } else { return null ; } } else { return null ; } }","Generate syntax code: If $id$ is not None, use $conn$ to execute SQL ( query the username in the jam_people table based on $id$ ) and get all the data. If the query result is not an empty string, return the query result.","<met> <mod> public </mod> type_identifier fillUsernamePeople <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <if_> if <par> ( <bin> id != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> username = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> username . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return username ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database by $create_db_engine$, execute SQL ( get all the columns in DATABASE based on $db_name$ ) , get all the data, and finally return the query result.","public List getDb ( DataSource create_db_engine , String db_name ) { JdbcTemplate conn = new JdbcTemplate ( create_db_engine ) ; List res = conn . query ( "" select * from DATABASE where db_name= ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: connect to the database by $create_db_engine$, execute SQL ( get all the columns in DATABASE based on $db_name$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getDb <for> ( <for> type_identifier create_db_engine </for> , <for> type_identifier db_name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( create_db_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ to get that connection and query the first piece data of origin,destination and duration from the flights table. Use for loop traversal to query the results, print the query results in the form of {flight.origin} to {flight.destination} duration {flight.duration}, and return the query results.","public List main ( JdbcTemplate conn ) { List flights = conn . query ( "" select origin, destination, duration from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { JSONObject json = JSONObject . parseObject ( flight . toString ( ) ) ; System . out . println ( json . getString ( "" origin "" ) + "" to "" + json . getString ( "" destination "" ) + "" duration "" + json . getString ( "" duration "" ) ) ; } return flights ; }","Generate syntax code: Use the $conn$ to get that connection and query the first piece data of origin,destination and duration from the flights table. Use for loop traversal to query the results, print the query results in the form of {flight.origin} to {flight.destination} duration {flight.duration}, and return the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <loc> type_identifier <var> json = <met> JSONObject . parseObject <arg> ( <met> flight . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> <bin> <bin> <met> json . getString <arg> ( string_literal ) </arg> </met> + string_literal </bin> + <met> json . getString <arg> ( string_literal ) </arg> </met> </bin> + string_literal </bin> + <met> json . getString <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return flights ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ connection ( query all columns in the Data table through $year$ ) and get all thedata. For each item in the for loop, convert the 0th element to key and the 1st element to int type as value into the dictionary. Use jsonify to return the contents of the dictionary.","public JSONArray nationalInfo ( JdbcTemplate conn , String year ) { List data16 = conn . query ( "" select * from data where year= ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray data_dict = new JSONArray ( ) ; for ( Object data : data16 ) { JSONObject json = new JSONObject ( ) ; JSONObject jsonObject = JSONObject . parseObject ( data . toString ( ) ) ; json . put ( jsonObject . get ( 0 ) . toString ( ) , jsonObject . get ( 1 ) ) ; data_dict . add ( json ) ; } return data_dict ; }","Generate syntax code: Execute SQL through $conn$ connection ( query all columns in the Data table through $year$ ) and get all thedata. For each item in the for loop, convert the 0th element to key and the 1st element to int type as value into the dictionary. Use jsonify to return the contents of the dictionary.","<met> <mod> public </mod> type_identifier nationalInfo <for> ( <for> type_identifier conn </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> data16 = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> data_dict = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier data : data16 ) <blo> { <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> data . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> json . put <arg> ( <met> <met> jsonObject . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> , <met> jsonObject . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> data_dict . add <arg> ( json ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data_dict ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the pg_relation_size in the pg where name is $name$ ) with $conn$ and get all the data, return None if the query result is false, and finally return the result of the SQL statement.","public List getTableSize ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select pg_relation_size from pg where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: Execute the SQL ( get the pg_relation_size in the pg where name is $name$ ) with $conn$ and get all the data, return None if the query result is false, and finally return the result of the SQL statement.","<met> <mod> public </mod> type_identifier getTableSize <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $db_string$. Execute the SQL statement ( query all thecolumns in the sistema table according to $vendas$ ) , get all the data, and return the query results.","public List getVendas ( DataSource db_string , String vendas ) { JdbcTemplate engine = new JdbcTemplate ( db_string ) ; List ven = engine . query ( "" select * from sistema where vendas = ? "" , new Object [ ] { vendas } , new BeanPropertyRowMapper ( List . class ) ) ; return ven ; }","Generate syntax code: Get the database engine through $db_string$. Execute the SQL statement ( query all thecolumns in the sistema table according to $vendas$ ) , get all the data, and return the query results.","<met> <mod> public </mod> type_identifier getVendas <for> ( <for> type_identifier db_string </for> , <for> type_identifier vendas </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ven = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { vendas } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ven ; </ret> } </blo> </met>"
"Generate origin code: Use java expressions to set the SQL ( query all columns of $Customer$ where id is $id$, get the database connection with $engine$, execute the SQL based on the connection, get the first data, and return the result of the query.","public Object selectValue ( EntityManager engine , Root < Object > Customer , String id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Customer ) . where ( cb . equal ( Customer . get ( "" id "" ) , id ) ) ; List < Object > reses = engine . createQuery ( cq ) . getResultList ( ) ; return reses . get ( 0 ) ; }","Generate syntax code: Use java expressions to set the SQL ( query all columns of $Customer$ where id is $id$, get the database connection with $engine$, execute the SQL based on the connection, get the first data, and return the result of the query.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Customer </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Customer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Customer . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> reses = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> reses . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $engine$ to connect to the database and then execute the SQL ( get all the columns in the mark table with id as $video_id$ ) and get all the data. Then use for loop to print each item of the query results and finally close the connection.,"public void getExperienceVideoId ( DataSource engine , String video_id ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select time from comments where summary = ? "" , new Object [ ] { video_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }",Generate syntax code: Use $engine$ to connect to the database and then execute the SQL ( get all the columns in the mark table with id as $video_id$ ) and get all the data. Then use for loop to print each item of the query results and finally close the connection.,"<met> <mod> public </mod> void_type getExperienceVideoId <for> ( <for> type_identifier engine </for> , <for> type_identifier video_id </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { video_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set the SQL using a java expression: query all the columns in $items$ with $mid$. Execute the SQL statement with $conn$ and get all the data, close the database connection, and return the data.","public List getSource ( EntityManager conn , Root < Object > items , String mid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( items ) . where ( cb . equal ( items . get ( "" mid "" ) , mid ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Set the SQL using a java expression: query all the columns in $items$ with $mid$. Execute the SQL statement with $conn$ and get all the data, close the database connection, and return the data.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> items </for> , <for> type_identifier mid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( items ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> items . get <arg> ( string_literal ) </arg> </met> , mid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( use the format ( ) function format string to get all the columns in a volcano_data by $full_db$ ) , execute the SQL statement with $conn$ to get all the data, render and return 'raw_data.html', where the data parameter is the result of the query.","public String dbPush ( JdbcTemplate conn , String full_db , Model model ) { List full_dbs = conn . query ( "" select * from volcano_data where data= ? "" , new Object [ ] { full_db } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , full_dbs ) ; return "" raw_data.html "" ; }","Generate syntax code: Set the SQL statement ( use the format ( ) function format string to get all the columns in a volcano_data by $full_db$ ) , execute the SQL statement with $conn$ to get all the data, render and return 'raw_data.html', where the data parameter is the result of the query.","<met> <mod> public </mod> type_identifier dbPush <for> ( <for> type_identifier conn </for> , <for> type_identifier full_db </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> full_dbs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { full_db } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , full_dbs ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $con$ to get all the columns in the Drinker table, get all the data, convert each item of the query result to dict, store it as list, and return.","public List getDrinkers ( JdbcTemplate con ) { List rs = con . query ( "" select * from drinker "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: Use $con$ to get all the columns in the Drinker table, get all the data, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getDrinkers <for> ( <for> type_identifier con </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $db$ ( get the lokaatioID column in the havainto table according to $id$ ) , get the first piece of data, and then use for loop to print each item of the query result.","public void taydenna ( JdbcTemplate db , String id ) { List testi = db . query ( "" select lokaatioID from havainto where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object t : testi ) { System . out . println ( t ) ; } }","Generate syntax code: Execute SQL with $db$ ( get the lokaatioID column in the havainto table according to $id$ ) , get the first piece of data, and then use for loop to print each item of the query result.","<met> <mod> public </mod> void_type taydenna <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> testi = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier t : testi ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( t ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Create a cursor object with $conn$ and use the cursor to execute the SQL statement: Query the value information in the userdata table based on $m_series$. Use for loop to iterate through all the obtained data, print the 0th element of each item in the query result, store it in list and return the list content.","public List getData ( DataSource conn , String m_series ) { JdbcTemplate cur = new JdbcTemplate ( conn ) ; List list = cur . query ( "" select value from userdata where series = ? "" , new Object [ ] { m_series } , new BeanPropertyRowMapper ( List . class ) ) ; List data = new ArrayList ( ) ; for ( Object row : list ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; data . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return data ; }","Generate syntax code: Create a cursor object with $conn$ and use the cursor to execute the SQL statement: Query the value information in the userdata table based on $m_series$. Use for loop to iterate through all the obtained data, print the 0th element of each item in the query result, store it in list and return the list content.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier conn </for> , <for> type_identifier m_series </for> ) </for> <blo> { <loc> type_identifier <var> cur = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> list = <met> cur . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { m_series } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> data = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : list ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> data . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: connect to the database based on the begin ( ) method of $engine$. Execute the query statement: get all columns in users based on $team$ and get all data. Use for loop iterate through the query results, taking each team and name and printing them.","public void selectValue ( DataSource engine , String team ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from users where team = ? "" , new Object [ ] { team } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : res ) { String team1 = JSONObject . parseObject ( row . toString ( ) ) . getString ( "" team "" ) ; String name = JSONObject . parseObject ( row . toString ( ) ) . getString ( "" name "" ) ; System . out . println ( team1 + name ) ; } }","Generate syntax code: connect to the database based on the begin ( ) method of $engine$. Execute the query statement: get all columns in users based on $team$ and get all data. Use for loop iterate through the query results, taking each team and name and printing them.","<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier team </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { team } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <loc> type_identifier <var> team1 = <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> name = <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> team1 + name </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database. Execute SQL statement: query all columns in drinkers table through $phone$ and get all data. Convert query result to dict, store it as list and return it.","public List getDrinkers ( DataSource engine , String phone ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List rs = conn . query ( "" select * from drinkers where phone = ? "" , new Object [ ] { phone } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: Use $engine$ to connect to the database. Execute SQL statement: query all columns in drinkers table through $phone$ and get all data. Convert query result to dict, store it as list and return it.","<met> <mod> public </mod> type_identifier getDrinkers <for> ( <for> type_identifier engine </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
Generate origin code: Use java expressions to set up SQL ( query the user_name in the $users$ table based on $email$ and $password_hash$ ) . Use $conn$ to execute SQL. Return the judgment result that the rowcount property of the execution result is equal to 1.,"public boolean createUser ( EntityManager conn , Root < Object > users , String email , String password_hash ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" email "" ) , email ) ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" password_hash "" ) , password_hash ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res . size ( ) == 1 ; }",Generate syntax code: Use java expressions to set up SQL ( query the user_name in the $users$ table based on $email$ and $password_hash$ ) . Use $conn$ to execute SQL. Return the judgment result that the rowcount property of the execution result is equal to 1.,"<met> <mod> public </mod> boolean_type createUser <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier email </for> , <for> type_identifier password_hash </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , email ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , password_hash ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <bin> <met> res . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ret> } </blo> </met>"
"Generate origin code: Use $url$ to get the database engine and connect to the database, then execute the SQL ( get all columns in the schools table based on $name$ ) and get all the data. Then close the connection and finally return the query results.","public List testDialectInitUsesOptions ( DataSource url , String name ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List schools = conn . query ( "" select * from schools where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return schools ; }","Generate syntax code: Use $url$ to get the database engine and connect to the database, then execute the SQL ( get all columns in the schools table based on $name$ ) and get all the data. Then close the connection and finally return the query results.","<met> <mod> public </mod> type_identifier testDialectInitUsesOptions <for> ( <for> type_identifier url </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> schools = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return schools ; </ret> } </blo> </met>"
"Generate origin code: If the request method is 'GET', execute the SQL statement ( query all the columns in the check_in_list table where the checker_id is $user_id$ and check_zipcode is $zipcode$ ) using $conn$ and get all the data. Return the result of executed SQL statement. Otherwise, return to the rendered check_in_error.html.","public Object selectValue ( HttpRequest request , JdbcTemplate conn , String user_id , String zipcode ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List results = conn . query ( "" select * from check_in_list where checker_id = ? and check_zipcode = ? "" , new Object [ ] { user_id , zipcode } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } else { return "" check_in_error.html "" ; } }","Generate syntax code: If the request method is 'GET', execute the SQL statement ( query all the columns in the check_in_list table where the checker_id is $user_id$ and check_zipcode is $zipcode$ ) using $conn$ and get all the data. Return the result of executed SQL statement. Otherwise, return to the rendered check_in_error.html.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier zipcode </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , zipcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the parsed_obj column in the $slivers$ table based on $sliver_urn$ ) . Execute SQL through $conn$ and get the first piece of data. Return False if the query result is empty; otherwise, return the query result.","public Object getSliverObj ( EntityManager conn , Root < Object > slivers , String sliver_urn ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( slivers ) . where ( cb . equal ( slivers . get ( "" sliver_urn "" ) , sliver_urn ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; if ( rows . isEmpty ( ) ) { return false ; } else { return rows . get ( 0 ) ; } }","Generate syntax code: Set SQL based on the java expression ( query the parsed_obj column in the $slivers$ table based on $sliver_urn$ ) . Execute SQL through $conn$ and get the first piece of data. Return False if the query result is empty; otherwise, return the query result.","<met> <mod> public </mod> type_identifier getSliverObj <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> slivers </for> , <for> type_identifier sliver_urn </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( slivers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> slivers . get <arg> ( string_literal ) </arg> </met> , sliver_urn ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $sqlite$. Set up the SQL statement ( query all the columns in the Alltypes table according to $parm$ ) , execute sql, get all the data, close the connection, and return the query result converted to json.","public JSONArray getState ( DataSource sqlite , String parm ) { JdbcTemplate conn = new JdbcTemplate ( sqlite ) ; List data = conn . query ( "" select * from Alltypes where parm= ? "" , new Object [ ] { parm } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }","Generate syntax code: Get the database engine and establish a connection through $sqlite$. Set up the SQL statement ( query all the columns in the Alltypes table according to $parm$ ) , execute sql, get all the data, close the connection, and return the query result converted to json.","<met> <mod> public </mod> type_identifier getState <for> ( <for> type_identifier sqlite </for> , <for> type_identifier parm </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( sqlite ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { parm } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through the $conn$ connection: Query all the rating in the reviews table based on the $book_id$. Get the length of the query result. If the length of the query result is not 0, use for loop to traverse the query result, print it and return the length of the query result.","public int booksApi ( JdbcTemplate conn , String book_id ) { List reviews = conn . query ( "" select rating from reviews where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; int review_count = reviews . size ( ) ; if ( review_count != 0 ) { for ( Object row : reviews ) { System . out . println ( row ) ; } } return review_count ; }","Generate syntax code: Execute the SQL statement through the $conn$ connection: Query all the rating in the reviews table based on the $book_id$. Get the length of the query result. If the length of the query result is not 0, use for loop to traverse the query result, print it and return the length of the query result.","<met> <mod> public </mod> <int> int </int> booksApi <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> review_count = <met> reviews . size <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> review_count != decimal_integer_literal </bin> ) </par> <blo> { <enh> for ( type_identifier row : reviews ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> <ret> return review_count ; </ret> } </blo> </met>"
"Generate origin code: Use $db_uri$ to get the database engine and connect to the database, then execute SQL ( get all columns in the lights table based on $i_id$ ) and get all the data. Then close the connection and finally return the query results.","public List setUp ( DataSource db_uri , String i_id ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List results = conn . query ( "" select * from lights where i_id = ? "" , new Object [ ] { i_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Use $db_uri$ to get the database engine and connect to the database, then execute SQL ( get all columns in the lights table based on $i_id$ ) and get all the data. Then close the connection and finally return the query results.","<met> <mod> public </mod> type_identifier setUp <for> ( <for> type_identifier db_uri </for> , <for> type_identifier i_id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { i_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the table_name in the information_schema table with 'table_schema': $table_schema$. Use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","public List getTableListFromDb ( JdbcTemplate conn , String table_schema ) { List table_names = conn . query ( "" select table_name from information_schema where table_schema = ? "" , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; return table_names ; }","Generate syntax code: Set the SQL statement: Query the table_name in the information_schema table with 'table_schema': $table_schema$. Use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getTableListFromDb <for> ( <for> type_identifier conn </for> , <for> type_identifier table_schema </for> ) </for> <blo> { <loc> type_identifier <var> table_names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return table_names ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get 'a' column in the anon_1 table according to $label$ ) and get all the data. If the query result is not None, return the query result.","public List deprecated ( JdbcTemplate db , String label ) { List deps = db . query ( "" select a from anon_1 where label= ? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; if ( deps . isEmpty ( ) ) { return null ; } else { return deps ; } }","Generate syntax code: Use $db$ to execute SQL ( get 'a' column in the anon_1 table according to $label$ ) and get all the data. If the query result is not None, return the query result.","<met> <mod> public </mod> type_identifier deprecated <for> ( <for> type_identifier db </for> , <for> type_identifier label </for> ) </for> <blo> { <loc> type_identifier <var> deps = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { label } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> deps . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return deps ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $from_connection$ and the java expression to execute SQL: Get all the data in the $from_table$ table and store the obtained data as list. If the length of list content exists, retun the list content.","public List selectFile ( EntityManager from_connection , Root < Object > from_table ) { CriteriaBuilder cb = from_connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( from_table ) ; List < Object > table_data = from_connection . createQuery ( cq ) . getResultList ( ) ; if ( table_data . isEmpty ( ) ) { return null ; } else { return table_data ; } }","Generate syntax code: Use $from_connection$ and the java expression to execute SQL: Get all the data in the $from_table$ table and store the obtained data as list. If the length of list content exists, retun the list content.","<met> <mod> public </mod> type_identifier selectFile <for> ( <for> type_identifier from_connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> from_table </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> from_connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( from_table ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> table_data = <met> <met> from_connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> table_data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return table_data ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get the description column in the $Youtube$ table where url is $url$ ) , get all the data, close the $conn$ connection, and finally return the query result.","public List < Object > getDesc ( EntityManager conn , Root < Object > Youtube , String url ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Youtube ) . where ( cb . equal ( Youtube . get ( "" url "" ) , url ) ) ; List < Object > desc = conn . createQuery ( cq ) . getResultList ( ) ; return desc ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get the description column in the $Youtube$ table where url is $url$ ) , get all the data, close the $conn$ connection, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getDesc <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Youtube </for> , <for> type_identifier url </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Youtube ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Youtube . get <arg> ( string_literal ) </arg> </met> , url ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> desc = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return desc ; </ret> } </blo> </met>"
"Generate origin code: Use $dbraw_engine$ to connect to the database and execute the SQL statement: Query all the columns in the world table with 'id' of $wid$, get the first piece of data, close the database connection and return the obtained data.","public List getRandomWorldSingleRaw ( DataSource dbraw_engine , String wid ) { JdbcTemplate connection = new JdbcTemplate ( dbraw_engine ) ; List result = connection . query ( "" select * from world where id = ? "" , new Object [ ] { wid } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $dbraw_engine$ to connect to the database and execute the SQL statement: Query all the columns in the world table with 'id' of $wid$, get the first piece of data, close the database connection and return the obtained data.","<met> <mod> public </mod> type_identifier getRandomWorldSingleRaw <for> ( <for> type_identifier dbraw_engine </for> , <for> type_identifier wid </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( dbraw_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { wid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL statement ( get the first piece of year_occur in traffic_tbl table ) . Use for loop iterate the query result and print it. Use jsonify to return the query result.,"public JSONArray queryInfo ( JdbcTemplate conn ) { List results = conn . query ( "" select year_occur from traffic_tbl "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row ) ; } return JSONObject . parseArray ( results . toString ( ) ) ; }",Generate syntax code: Use $conn$ to execute SQL statement ( get the first piece of year_occur in traffic_tbl table ) . Use for loop iterate the query result and print it. Use jsonify to return the query result.,"<met> <mod> public </mod> type_identifier queryInfo <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> results . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the hits column in the $url_domain$ table based on the condition that domain is $udomain$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","public List < Object > addDomain ( EntityManager conn , Root < Object > url_domain , String udomain ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( url_domain ) . where ( cb . equal ( url_domain . get ( "" domain "" ) , udomain ) ) ; List < Object > recs = conn . createQuery ( cq ) . getResultList ( ) ; return recs ; }","Generate syntax code: Set SQL based on the java expression ( query the hits column in the $url_domain$ table based on the condition that domain is $udomain$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> addDomain <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> url_domain </for> , <for> type_identifier udomain </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( url_domain ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> url_domain . get <arg> ( string_literal ) </arg> </met> , udomain ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $url$, and the echo parameter is True, get a connection. Execute the SQL statement ( query all the columns in the DATABASE table according to $mtime$ ) , get all the data, and return the query results.","public List resetDatabase ( DataSource url , String mtime ) { JdbcTemplate c = new JdbcTemplate ( url ) ; List res = c . query ( "" elect * from DATABASE where mtime= ? "" , new Object [ ] { mtime } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine through $url$, and the echo parameter is True, get a connection. Execute the SQL statement ( query all the columns in the DATABASE table according to $mtime$ ) , get all the data, and return the query results.","<met> <mod> public </mod> type_identifier resetDatabase <for> ( <for> type_identifier url </for> , <for> type_identifier mtime </for> ) </for> <blo> { <loc> type_identifier <var> c = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> c . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { mtime } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users_tl table based on $username$ and $password$ ) . If the number of rows in the query result is 0, return the rendered ""loginfail.html"". Otherwise, return the rendered ""index.html"".","public String login ( JdbcTemplate conn , String username , String password ) { List result_u = conn . query ( "" select * from users_tl where username=? and password=? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result_u . isEmpty ( ) ) { return "" index.html "" ; } else { return "" loginfail.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users_tl table based on $username$ and $password$ ) . If the number of rows in the query result is 0, return the rendered ""loginfail.html"". Otherwise, return the rendered ""index.html"".","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> result_u = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result_u . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $url$ to get the database and use raw_connection method to connect to the data and execute SQL through cursor method ( get column 'a' in the travisci_mysql table based on $c$ ) and get all the data. Finally print the query results.,"public void testCsvMysqlLoad ( DataSource url , String c ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List res = conn . query ( "" select a from travisci_mysql where c = ? "" , new Object [ ] { c } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }",Generate syntax code: Use $url$ to get the database and use raw_connection method to connect to the data and execute SQL through cursor method ( get column 'a' in the travisci_mysql table based on $c$ ) and get all the data. Finally print the query results.,"<met> <mod> public </mod> void_type testCsvMysqlLoad <for> ( <for> type_identifier url </for> , <for> type_identifier c </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { c } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the ball column in the users table according to $username$ ) and get all the query results. If the result is empty, return the rendered result.html page; otherwise, return the rendered result.html page, where the parameter result is 'Error!'.","public String register ( JdbcTemplate conn , String username , Model model ) { List check = conn . query ( "" select ball from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check . isEmpty ( ) ) { return "" result.html "" ; } else { model . addAttribute ( "" result "" , "" Error! "" ) ; return "" result.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the ball column in the users table according to $username$ ) and get all the query results. If the result is empty, return the rendered result.html page; otherwise, return the rendered result.html page, where the parameter result is 'Error!'.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> check = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> check . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the Bar column in the Bar_table where Bar is $b$ ) and get all the data, return None if the query result is None, and finally convert each item of the query result to a dictionary type using a for loop and return the dictionary content.","public List findBarHelper ( JdbcTemplate conn , String b ) { List rs = conn . query ( "" select bar from bar_table where bar= ? "" , new Object [ ] { b } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }","Generate syntax code: Execute SQL with $conn$ ( get the Bar column in the Bar_table where Bar is $b$ ) and get all the data, return None if the query result is None, and finally convert each item of the query result to a dictionary type using a for loop and return the dictionary content.","<met> <mod> public </mod> type_identifier findBarHelper <for> ( <for> type_identifier conn </for> , <for> type_identifier b </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { b } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return rs ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL ( based on all columns in the flights where flight_id is $flight_id$ ) using $db$ and get all the data. Convert each item in the query result to dict and return.,"public List flights ( JdbcTemplate conn , String flight_id ) { List fs = conn . query ( "" select * from flights where flight_id= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( fs . isEmpty ( ) ) { return null ; } else { return fs ; } }",Generate syntax code: Execute the SQL ( based on all columns in the flights where flight_id is $flight_id$ ) using $db$ and get all the data. Convert each item in the query result to dict and return.,"<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> fs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> fs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return fs ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the timestamp_id in the calibration_original table based on $calibration_value$ ) and get all the data. If the query result is None, the ""Error"" information is printed. Otherwise, return the query result.","public List calibrationCore ( JdbcTemplate conn , String calibration_value ) { List timestamp = conn . query ( "" select timestamp_id from calibration_original where calibration_value= ? "" , new Object [ ] { calibration_value } , new BeanPropertyRowMapper ( List . class ) ) ; if ( timestamp . isEmpty ( ) ) { System . out . println ( "" Error "" ) ; return null ; } else { return timestamp ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the timestamp_id in the calibration_original table based on $calibration_value$ ) and get all the data. If the query result is None, the ""Error"" information is printed. Otherwise, return the query result.","<met> <mod> public </mod> type_identifier calibrationCore <for> ( <for> type_identifier conn </for> , <for> type_identifier calibration_value </for> ) </for> <blo> { <loc> type_identifier <var> timestamp = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { calibration_value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> timestamp . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return timestamp ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $conn$: Query all email and password from the users table. Use for loop traversal to query the results and print them, and finally return all the query results.","public List searchBooks ( JdbcTemplate conn ) { List results = conn . query ( "" select email,password from users "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { for ( Object items : results ) { System . out . println ( items ) ; } return results ; } }","Generate syntax code: Execute the SQL statement through $conn$: Query all email and password from the users table. Use for loop traversal to query the results and print them, and finally return all the query results.","<met> <mod> public </mod> type_identifier searchBooks <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <enh> for ( type_identifier items : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( items ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $connection$ to execute the SQL statement ( query all id, origin, destination, duration in the flights table ) , return None if the length of the query result is 0; otherwise, return the query result.","public List main ( JdbcTemplate conn ) { List flights = conn . query ( "" select id, origin, destination, duration from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return null ; } else { return flights ; } }","Generate syntax code: Use $connection$ to execute the SQL statement ( query all id, origin, destination, duration in the flights table ) , return None if the length of the query result is 0; otherwise, return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return flights ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $con$ to connect to the database and execute the SQL ( get all the columns in a tableParam where tableParam is $tableParam$ ) to get the first data and return the result of the query.,"public List insert ( DataSource con , String tableParam ) { JdbcTemplate conn = new JdbcTemplate ( con ) ; List res = conn . query ( "" select * from tableParam where tableParam= ? "" , new Object [ ] { tableParam } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Use $con$ to connect to the database and execute the SQL ( get all the columns in a tableParam where tableParam is $tableParam$ ) to get the first data and return the result of the query.,"<met> <mod> public </mod> type_identifier insert <for> ( <for> type_identifier con </for> , <for> type_identifier tableParam </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( con ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tableParam } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query the password column in the users table based on $username$ ) , execute SQL with $conn$ and get all the query results. Usw for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List getUser ( JdbcTemplate conn , String username ) { List results = conn . query ( "" select password from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; List passwords = new ArrayList ( ) ; for ( Object i : results ) { passwords . add ( i ) ; } return passwords ; }","Generate syntax code: Set up SQL ( query the password column in the users table based on $username$ ) , execute SQL with $conn$ and get all the query results. Usw for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getUser <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> passwords = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> passwords . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return passwords ; </ret> } </blo> </met>"
"Generate origin code: Use string splicing to set up SQL ( query the income column in the customers table based on $customerid$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List selectUserSaldo ( JdbcTemplate conn , String customerid ) { List results = conn . query ( "" select income from customers where customerid = ? "" , new Object [ ] { customerid } , new BeanPropertyRowMapper ( List . class ) ) ; List incomes = new ArrayList ( ) ; for ( Object i : results ) { incomes . add ( i ) ; } return incomes ; }","Generate syntax code: Use string splicing to set up SQL ( query the income column in the customers table based on $customerid$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier selectUserSaldo <for> ( <for> type_identifier conn </for> , <for> type_identifier customerid </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { customerid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> incomes = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> incomes . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return incomes ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( query all columns of $QuestionAnswer$ where question is $question$ ) using a java expression and fetch all the data. SQL statements are executed with $conn$ in looping conditions, and the 'anwser' for each item of data is stored in a list. Finally, the generated result is returned.","public List selecValue ( EntityManager conn , Root < Object > QuestionAnswer , String question ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( QuestionAnswer ) . where ( cb . equal ( QuestionAnswer . get ( "" question "" ) , question ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; List res = new ArrayList ( ) ; for ( Object row : rows ) { res . add ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" answer "" ) ) ; } return res ; }","Generate syntax code: Set up the SQL ( query all columns of $QuestionAnswer$ where question is $question$ ) using a java expression and fetch all the data. SQL statements are executed with $conn$ in looping conditions, and the 'anwser' for each item of data is stored in a list. Finally, the generated result is returned.","<met> <mod> public </mod> type_identifier selecValue <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> QuestionAnswer </for> , <for> type_identifier question </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( QuestionAnswer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> QuestionAnswer . get <arg> ( string_literal ) </arg> </met> , question ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> res . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all the columns in the books table, get all the data, render and return books.html, where the books parameter is the query result.","public String books ( JdbcTemplate conn , Model model ) { List books = conn . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" books.html "" ; }","Generate syntax code: Use $conn$ to query all the columns in the books table, get all the data, render and return books.html, where the books parameter is the query result.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in realtime_bus based on $stopid$ under the condition that the% operator matches the string ) . Return the results of querying all data after execution.,"public List getLastOrder ( JdbcTemplate conn , String stopid ) { List results = conn . query ( "" select * from realtime_bus where stopid= ? "" , new Object [ ] { stopid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in realtime_bus based on $stopid$ under the condition that the% operator matches the string ) . Return the results of querying all data after execution.,"<met> <mod> public </mod> type_identifier getLastOrder <for> ( <for> type_identifier conn </for> , <for> type_identifier stopid </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { stopid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in the Pays table where TransactionId is $t$, Name is $drinker$, and Bar is $bar$ ) . Execute SQL with $conn$ and get all the data. Return None if the query result is None. Otherwise, convert each item in the query result to type dict and return.","public List findPays ( JdbcTemplate conn , String t , String drinker , String bar ) { List rs = conn . query ( "" select * from pays where transactionid=? and name=? and bar=? "" , new Object [ ] { t , drinker , bar } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }","Generate syntax code: Set SQL ( query all columns in the Pays table where TransactionId is $t$, Name is $drinker$, and Bar is $bar$ ) . Execute SQL with $conn$ and get all the data. Return None if the query result is None. Otherwise, convert each item in the query result to type dict and return.","<met> <mod> public </mod> type_identifier findPays <for> ( <for> type_identifier conn </for> , <for> type_identifier t </for> , <for> type_identifier drinker </for> , <for> type_identifier bar </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { t , drinker , bar } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return rs ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect to the database using $mysql$ and create the cursor object using the cursor ( ) method. Execute the SQL ( query all columns in the call_list table where articles is $articles$ ) and get all the data. If the query result is greater than 0, then render and return 'articles.html', where the articles parameter is the result of the query. Otherwise, render and return 'articles.html', where the msg parameter with content 'No Articles Found'.","public String articles ( DataSource mysql , String articles , Model model ) { JdbcTemplate cur = new JdbcTemplate ( mysql ) ; List information = cur . query ( "" select * from call_list where articles= ? "" , new Object [ ] { articles } , new BeanPropertyRowMapper ( List . class ) ) ; if ( information . isEmpty ( ) ) { model . addAttribute ( "" msg "" , "" No Articles Found "" ) ; return "" articles.html "" ; } else { model . addAttribute ( "" articles "" , information ) ; return "" articles.html "" ; } }","Generate syntax code: Connect to the database using $mysql$ and create the cursor object using the cursor ( ) method. Execute the SQL ( query all columns in the call_list table where articles is $articles$ ) and get all the data. If the query result is greater than 0, then render and return 'articles.html', where the articles parameter is the result of the query. Otherwise, render and return 'articles.html', where the msg parameter with content 'No Articles Found'.","<met> <mod> public </mod> type_identifier articles <for> ( <for> type_identifier mysql </for> , <for> type_identifier articles </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cur = <obj> new type_identifier <arg> ( mysql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> information = <met> cur . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { articles } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> information . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , information ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $cursor$ to execute SQL ( get all the columns in the tbl table according to $id$ ) , asynchronously use for loop to convert each item of the query result to a list type, and finally return the query result.","public List getTable ( JdbcTemplate cursor , String id ) { List c = cursor . query ( "" select * from tbl where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List ret = new ArrayList ( ) ; for ( Object i : c ) { ret . add ( i ) ; } return ret ; }","Generate syntax code: Use $cursor$ to execute SQL ( get all the columns in the tbl table according to $id$ ) , asynchronously use for loop to convert each item of the query result to a list type, and finally return the query result.","<met> <mod> public </mod> type_identifier getTable <for> ( <for> type_identifier cursor </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> c = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ret = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : c ) <blo> { <exp> <met> ret . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ret ; </ret> } </blo> </met>"
"Generate origin code: In the case of async, use $conn$ to get the connection. Use the connection to execute the SQL ( query all columns in the tbl ) and get all the data. Use for loop to store the query data in list and return it.","public List testPool ( JdbcTemplate conn ) { List c = conn . query ( "" select * from tbl "" , new BeanPropertyRowMapper ( List . class ) ) ; List ret = new ArrayList ( ) ; for ( Object i : c ) { ret . add ( i ) ; } return ret ; }","Generate syntax code: In the case of async, use $conn$ to get the connection. Use the connection to execute the SQL ( query all columns in the tbl ) and get all the data. Use for loop to store the query data in list and return it.","<met> <mod> public </mod> type_identifier testPool <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> c = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ret = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : c ) <blo> { <exp> <met> ret . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ret ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: query the bot_speak information in the 'Table' where question is $question$. Execute SQL with $conn$ and get the first data. Finally, return the query results.","public Object selectQuestion ( JdbcTemplate conn , String question ) { List speaks = conn . query ( "" select bot_speak from Table where question = ? "" , new Object [ ] { question } , new BeanPropertyRowMapper ( List . class ) ) ; Object speak = speaks . get ( 0 ) ; return speak ; }","Generate syntax code: Set SQL: query the bot_speak information in the 'Table' where question is $question$. Execute SQL with $conn$ and get the first data. Finally, return the query results.","<met> <mod> public </mod> type_identifier selectQuestion <for> ( <for> type_identifier conn </for> , <for> type_identifier question </for> ) </for> <blo> { <loc> type_identifier <var> speaks = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { question } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> speak = <met> speaks . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return speak ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the query statement : Query the first piece of element in the tokens table based on $bid$, use for loop iterate through the query results, and return the 0th element of the query results.","public Object tokenInitTx ( JdbcTemplate conn , String bid ) { List resultSets = conn . query ( "" select element from tokens where bid = ? "" , new Object [ ] { bid } , new BeanPropertyRowMapper ( List . class ) ) ; Object resultSet = resultSets . get ( 0 ) ; return JSONObject . parseObject ( resultSet . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Use the $conn$ connection to execute the query statement : Query the first piece of element in the tokens table based on $bid$, use for loop iterate through the query results, and return the 0th element of the query results.","<met> <mod> public </mod> type_identifier tokenInitTx <for> ( <for> type_identifier conn </for> , <for> type_identifier bid </for> ) </for> <blo> { <loc> type_identifier <var> resultSets = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> resultSet = <met> resultSets . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> resultSet . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, use the jsonify method to return {""error"": ""book not found""}. Otherwise, store the title, author and year in the query results in the values corresponding to the corresponding keywords in the dictionary. Finally, return the serialized dictionary.","public Object flightApi ( JdbcTemplate conn , String isbn ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; Object book = books . get ( 0 ) ; if ( books . isEmpty ( ) ) { JSONObject json = new JSONObject ( ) ; json . put ( "" error "" , "" book not found "" ) ; return json ; } else { JSONObject jsonObject = JSONObject . parseObject ( book . toString ( ) ) ; JSONObject json = new JSONObject ( ) ; json . put ( "" title "" , jsonObject . getString ( "" title "" ) ) ; json . put ( "" author "" , jsonObject . getString ( "" author "" ) ) ; json . put ( "" year "" , jsonObject . getString ( "" year "" ) ) ; return json ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, use the jsonify method to return {""error"": ""book not found""}. Otherwise, store the title, author and year in the query results in the values corresponding to the corresponding keywords in the dictionary. Finally, return the serialized dictionary.","<met> <mod> public </mod> type_identifier flightApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> book = <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return json ; </ret> } </blo> else <blo> { <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> book . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> json . put <arg> ( string_literal , <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return json ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the first row of data in the Column table based on $column$ ) and return the data.,"public Object testContainsDoesntCompile ( JdbcTemplate conn , String column ) { List rows = conn . query ( "" select * from column where column = ? "" , new Object [ ] { column } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( 0 ) ; return row ; }",Generate syntax code: Use $conn$ to execute SQL ( query the first row of data in the Column table based on $column$ ) and return the data.,"<met> <mod> public </mod> type_identifier testContainsDoesntCompile <for> ( <for> type_identifier conn </for> , <for> type_identifier column </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { column } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $SQLALCHEMY_TEST_DATABASE_URI$. Execute the SQL statement ( query all the columns in the users table according to $FOREIGN_KEY$ ) , get all the data, and return the query results.","public List manualTest ( DataSource SQLALCHEMY_TEST_DATABASE_URI , String FOREIGN_KEY ) { JdbcTemplate engine = new JdbcTemplate ( SQLALCHEMY_TEST_DATABASE_URI ) ; List values = engine . query ( "" select * from users where foreign_key= ? "" , new Object [ ] { FOREIGN_KEY } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }","Generate syntax code: Get the database engine and establish a connection through $SQLALCHEMY_TEST_DATABASE_URI$. Execute the SQL statement ( query all the columns in the users table according to $FOREIGN_KEY$ ) , get all the data, and return the query results.","<met> <mod> public </mod> type_identifier manualTest <for> ( <for> type_identifier SQLALCHEMY_TEST_DATABASE_URI </for> , <for> type_identifier FOREIGN_KEY </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( SQLALCHEMY_TEST_DATABASE_URI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> values = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { FOREIGN_KEY } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Get the cursor using $connection$, and use the cursor to execute SQL ( query all the columns in pillar where user is $user$ and pwd is $pwd$ ) and get all the data. Close the cursor and connection and return the result of the query using a serialization method.","public JSONArray get ( DataSource connection , String user , String pwd ) { JdbcTemplate cursor = new JdbcTemplate ( connection ) ; List result = cursor . query ( "" select * from pillar where user=? and pwd=? "" , new Object [ ] { user , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; }","Generate syntax code: Get the cursor using $connection$, and use the cursor to execute SQL ( query all the columns in pillar where user is $user$ and pwd is $pwd$ ) and get all the data. Close the cursor and connection and return the result of the query using a serialization method.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier connection </for> , <for> type_identifier user </for> , <for> type_identifier pwd </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( connection ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user , pwd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $db_engine$. Execute SQL ( query all columns in the DATABASE table based on $db_name$ ) , get the first piece of data, and return the query result.","public List < Object > dropDb ( DataSource db_engine , String db_name ) { JdbcTemplate conn = new JdbcTemplate ( db_engine ) ; List assy = conn . query ( "" select * from database where db_name =? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return assy ; }","Generate syntax code: connect the database according to $db_engine$. Execute SQL ( query all columns in the DATABASE table based on $db_name$ ) , get the first piece of data, and return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> dropDb <for> ( <for> type_identifier db_engine </for> , <for> type_identifier db_name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> assy = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return assy ; </ret> } </blo> </met>"
"Generate origin code: Set sql ( query all columns in the ROLLBACK_TEST table according to $session$ ) , use $conn$ to execute SQL and get the first row of data, and return the judgment of whether the query result is 0 or not.","public boolean supportsTransactions ( JdbcTemplate conn , String session ) { List counts = conn . query ( "" select COUNT from ROLLBACK_TEST where session = ? "" , new Object [ ] { session } , new BeanPropertyRowMapper ( List . class ) ) ; return counts . size ( ) == 0 ; }","Generate syntax code: Set sql ( query all columns in the ROLLBACK_TEST table according to $session$ ) , use $conn$ to execute SQL and get the first row of data, and return the judgment of whether the query result is 0 or not.","<met> <mod> public </mod> boolean_type supportsTransactions <for> ( <for> type_identifier conn </for> , <for> type_identifier session </for> ) </for> <blo> { <loc> type_identifier <var> counts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { session } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <bin> <met> counts . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL ( get the hair column in the universities where name is $name$ ) with $conn$, get the first data, then print the query results and return the rendered 'courses.html', where the university parameter is the result of the query.","public String supportsTransactions ( JdbcTemplate conn , String name , Model model ) { List university = conn . query ( "" select hair from universities where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( university ) ; model . addAttribute ( "" university "" , university ) ; return "" courses.html "" ; }","Generate syntax code: Execute SQL ( get the hair column in the universities where name is $name$ ) with $conn$, get the first data, then print the query results and return the rendered 'courses.html', where the university parameter is the result of the query.","<met> <mod> public </mod> type_identifier supportsTransactions <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> university = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( university ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , university ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: when values are $value$, query all the columns in the Table. Execute the SQL using $db$ and get all the data. Print each item in the query result using a for loop.","public void searchval ( JdbcTemplate db , String value ) { List result = db . query ( "" select * from Table where values = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object entry : result ) { System . out . println ( entry ) ; } }","Generate syntax code: Set SQL: when values are $value$, query all the columns in the Table. Execute the SQL using $db$ and get all the data. Print each item in the query result using a for loop.","<met> <mod> public </mod> void_type searchval <for> ( <for> type_identifier db </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier entry : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( entry ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL based on the java expression ( get the tax_id column in the $table_gi_taxid_nuc$ table with gi as $gi$ ) and get all the data, then use for loop to store each item of the query result as list, return the list contents, and finally make sure the $conn$ connection is closed""","public List getSource ( EntityManager conn , Root < Object > table_gi_taxid_nuc , String gi ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_gi_taxid_nuc ) . where ( cb . equal ( table_gi_taxid_nuc . get ( "" gi "" ) , gi ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; List res = new ArrayList ( ) ; for ( Object taxid : results ) { res . add ( taxid ) ; } return res ; } finally { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL based on the java expression ( get the tax_id column in the $table_gi_taxid_nuc$ table with gi as $gi$ ) and get all the data, then use for loop to store each item of the query result as list, return the list contents, and finally make sure the $conn$ connection is closed""","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_gi_taxid_nuc </for> , <for> type_identifier gi </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table_gi_taxid_nuc ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table_gi_taxid_nuc . get <arg> ( string_literal ) </arg> </met> , gi ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier taxid : results ) <blo> { <exp> <met> res . add <arg> ( taxid ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the data, then execute the SQL based on the java expression ( get all the columns in the $table$ table with timestamp between $begin_timestamp$ and $end_timestamp$ ) and get all the data. Use for loop to store each item of the query results as list. Further close the connection and finally return the contents of the list.","public List coreQueryData ( EntityManager engine , Root < Object > table , String begin_timestamp , String end_timestamp ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . between ( table . get ( "" table "" ) , begin_timestamp , end_timestamp ) ) ; List < Object > rows = engine . createQuery ( cq ) . getResultList ( ) ; List res = new ArrayList ( ) ; for ( Object row : rows ) { res . add ( row ) ; } return res ; }","Generate syntax code: Use $engine$ to connect to the data, then execute the SQL based on the java expression ( get all the columns in the $table$ table with timestamp between $begin_timestamp$ and $end_timestamp$ ) and get all the data. Use for loop to store each item of the query results as list. Further close the connection and finally return the contents of the list.","<met> <mod> public </mod> type_identifier coreQueryData <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier begin_timestamp </for> , <for> type_identifier end_timestamp </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . between <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , begin_timestamp , end_timestamp ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> res . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the destination column in the flights table according to $origin$ ) , get all the data, use for loop to traverse the query results, store the 0th element of each article in list, and return the list.","public List main ( JdbcTemplate conn , String origin ) { List flights = conn . query ( "" select destination from flights where origin = ? "" , new Object [ ] { origin } , new BeanPropertyRowMapper ( List . class ) ) ; List flight_list = new ArrayList ( ) ; for ( Object i : flights ) { flight_list . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return flight_list ; }","Generate syntax code: Execute SQL with $conn$ ( query the destination column in the flights table according to $origin$ ) , get all the data, use for loop to traverse the query results, store the 0th element of each article in list, and return the list.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier origin </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> flight_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : flights ) <blo> { <exp> <met> flight_list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return flight_list ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish the connection through $db_uri$. Set the SQL statement to: Query all columns in the DATABASE table based on $name$, execute the SQL statement to get all the data. Make sure $conn$ is closed and print all the query results.","public void tearDown ( DataSource db_uri , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List res = conn . query ( "" select time froselect * from database where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }","Generate syntax code: Get the database engine and establish the connection through $db_uri$. Set the SQL statement to: Query all columns in the DATABASE table based on $name$, execute the SQL statement to get all the data. Make sure $conn$ is closed and print all the query results.","<met> <mod> public </mod> void_type tearDown <for> ( <for> type_identifier db_uri </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, use the $conn$ connection to execute the SQL: Get all the columns in $books_review$ based on $id$ and get all the data. If the query result is not empty, return the query results; otherwise, render and return ""book.html"".","public Object review ( HttpRequest request , JdbcTemplate conn , String id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List check_usr_review = conn . query ( "" select * from books_review where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check_usr_review . isEmpty ( ) ) { return null ; } else { return check_usr_review ; } } else { return "" book.html "" ; } }","Generate syntax code: If the request module sends the request as post, use the $conn$ connection to execute the SQL: Get all the columns in $books_review$ based on $id$ and get all the data. If the query result is not empty, return the query results; otherwise, render and return ""book.html"".","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> check_usr_review = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> check_usr_review . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return check_usr_review ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement to: query all data where value is $value$ in $groupType$, use a java expression, and execute the query statement over a $conn$ connection. Use the for loop to traverse the query results, print machine and group information in the query results.","public void arePart ( EntityManager conn , Root < Object > groupType , String value ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( groupType ) . where ( cb . equal ( groupType . get ( "" value "" ) , value ) ) ; List < Object > groupl = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object o : groupl ) { JSONObject jsonObject = JSONObject . parseObject ( o . toString ( ) ) ; System . out . println ( jsonObject . getString ( "" machine "" ) + jsonObject . getString ( "" group "" ) ) ; } }","Generate syntax code: Set the SQL statement to: query all data where value is $value$ in $groupType$, use a java expression, and execute the query statement over a $conn$ connection. Use the for loop to traverse the query results, print machine and group information in the query results.","<met> <mod> public </mod> void_type arePart <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> groupType </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( groupType ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> groupType . get <arg> ( string_literal ) </arg> </met> , value ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> groupl = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier o : groupl ) <blo> { <loc> type_identifier <var> jsonObject = <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> + <met> jsonObject . getString <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Create cursors with $conn$ and use cursors to execute SQL statements: Get all the columns from the wemoveUser table and get all the data. Make sure the cursor and $conn$ are closed and return all query result.,"public List handler ( DataSource conn ) { JdbcTemplate engine = new JdbcTemplate ( conn ) ; List res = engine . query ( "" select * from wemoveuser "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Create cursors with $conn$ and use cursors to execute SQL statements: Get all the columns from the wemoveUser table and get all the data. Make sure the cursor and $conn$ are closed and return all query result.,"<met> <mod> public </mod> type_identifier handler <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the Machine column in the $machine$ table whose id is $uuid$ ) . Execute SQL through $session$, get all the data and close the connection. Return True, if there is a result and the length is 1; otherwise, return False.","public boolean inventoryExists ( EntityManager session , Root < Object > machine , String uuid ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( machine ) . where ( cb . equal ( machine . get ( "" id "" ) , uuid ) ) ; List < Object > result = session . createQuery ( cq ) . getResultList ( ) ; if ( result . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Set SQL based on the java expression ( query the Machine column in the $machine$ table whose id is $uuid$ ) . Execute SQL through $session$, get all the data and close the connection. Return True, if there is a result and the length is 1; otherwise, return False.","<met> <mod> public </mod> boolean_type inventoryExists <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> machine </for> , <for> type_identifier uuid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( machine ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> machine . get <arg> ( string_literal ) </arg> </met> , uuid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the day column in the flights table based on $id$ ) , get all the data, and return the query results. If an Exception occurs during execution, the exception is printed.","public List book ( JdbcTemplate conn , String id ) { try { List res = conn . query ( "" select day from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the day column in the flights table based on $id$ ) , get all the data, and return the query results. If an Exception occurs during execution, the exception is printed.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement and the content is as follows: Query all columns from the url_list table and use $conn$ to execute SQL to get the first piece of data. Return -1 if the execution result is empty; otherwise, return the execution result.","public Object getURL ( JdbcTemplate conn ) { List ret = conn . query ( "" select * from url_list "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( ret . isEmpty ( ) ) { return - 1 ; } else { return ret ; } }","Generate syntax code: Set the SQL statement and the content is as follows: Query all columns from the url_list table and use $conn$ to execute SQL to get the first piece of data. Return -1 if the execution result is empty; otherwise, return the execution result.","<met> <mod> public </mod> type_identifier getURL <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> ret = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> ret . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <una> - decimal_integer_literal </una> ; </ret> } </blo> else <blo> { <ret> return ret ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL statement via $session$ connection: Query all OAuth in test_factory table based on $flask_env$, close $session$ connection and return all query results.","public List getrec ( JdbcTemplate session , String flask_env ) { List res = session . query ( "" select OAuth from test_factory where flask_env= ? "" , new Object [ ] { flask_env } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute SQL statement via $session$ connection: Query all OAuth in test_factory table based on $flask_env$, close $session$ connection and return all query results.","<met> <mod> public </mod> type_identifier getrec <for> ( <for> type_identifier session </for> , <for> type_identifier flask_env </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flask_env } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Use the acquire method of $engine$ to get the connection. Use java expressions to set SQL ( query the name information in the $users$ table when id is $uID$ ) . Use the connection to execute the SQL and return after getting the first piece of data.,"public Object user ( EntityManager engine , Root < Object > users , String uID ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" id "" ) , uID ) ) ; List < Object > old_recs = engine . createQuery ( cq ) . getResultList ( ) ; return old_recs . get ( 0 ) ; }",Generate syntax code: Use the acquire method of $engine$ to get the connection. Use java expressions to set SQL ( query the name information in the $users$ table when id is $uID$ ) . Use the connection to execute the SQL and return after getting the first piece of data.,"<met> <mod> public </mod> type_identifier user <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier uID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , uID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> old_recs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> old_recs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$ and use the java expression to set up the SQL statement: Query the data in $bm$ and execute SQL to get all the data. If the query resulst exist, return the last element of the query results; otherwise, return 0.","public Object getData ( EntityManager engine , Root < Object > bm ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( bm ) ; List < Object > result = engine . createQuery ( cq ) . getResultList ( ) ; if ( result . isEmpty ( ) ) { return result . get ( - 1 ) ; } else { return 0 ; } }","Generate syntax code: Connect to the database through $engine$ and use the java expression to set up the SQL statement: Query the data in $bm$ and execute SQL to get all the data. If the query resulst exist, return the last element of the query results; otherwise, return 0.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> bm </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( bm ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <met> result . get <arg> ( <una> - decimal_integer_literal </una> ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL statement ( query all the columns in the Restaurant ) with $conn$ and return after getting all the data. Close $conn$ and return the result of executing the SQL statement.,"public List search ( JdbcTemplate conn ) { List results = conn . query ( "" select * from restaurant "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Execute the SQL statement ( query all the columns in the Restaurant ) with $conn$ and return after getting all the data. Close $conn$ and return the result of executing the SQL statement.,"<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( query the description column in the 'table' table according to $id$ ) , get all the data, use for loop to convert each item of the query result into dict, store it into list, and return the list.","public List getCommonWords ( JdbcTemplate conn , String id ) { List descriptions = conn . query ( "" select description from table where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return descriptions ; }","Generate syntax code: Execute SQL through $conn$ ( query the description column in the 'table' table according to $id$ ) , get all the data, use for loop to convert each item of the query result into dict, store it into list, and return the list.","<met> <mod> public </mod> type_identifier getCommonWords <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> descriptions = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return descriptions ; </ret> } </blo> </met>"
"Generate origin code: Use $url$ to get the database engine by the way of ORM, further get the Session object and set the autocommit parameter to True. Execute the SQL ( query the $Person$ table based on $name$ ) , get the first column of data, and finally return the result of the execution statement.","public List < Object > stuff ( EntityManager url , Root < Object > Person , String name ) { CriteriaBuilder cb = url . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Person ) . where ( cb . equal ( Person . get ( "" name "" ) , name ) ) ; List < Object > p = url . createQuery ( cq ) . getResultList ( ) ; return p ; }","Generate syntax code: Use $url$ to get the database engine by the way of ORM, further get the Session object and set the autocommit parameter to True. Execute the SQL ( query the $Person$ table based on $name$ ) , get the first column of data, and finally return the result of the execution statement.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> stuff <for> ( <for> type_identifier url </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Person </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> url . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Person ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Person . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> p = <met> <met> url . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return p ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to create the cursor by the cursor ( ) method. If the request module sends the request as post, set the SQL ( query all columns in services through $status$ ) , execute the SQL statement to get all the data. Close the cursor, render and return ""marketplace.html"", where the res parameter is the result of the query.","public Object marketplace ( HttpRequest request , JdbcTemplate conn , String status , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select * from services where status = ? "" , new Object [ ] { status } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" marketplace.html "" ; } else { return null ; } }","Generate syntax code: Use $conn$ to create the cursor by the cursor ( ) method. If the request module sends the request as post, set the SQL ( query all columns in services through $status$ ) , execute the SQL statement to get all the data. Close the cursor, render and return ""marketplace.html"", where the res parameter is the result of the query.","<met> <mod> public </mod> type_identifier marketplace <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier status </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { status } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement with the $conn$ connection: Query all the name column in the passengers table where flight_id is $flight_id$, print the query results, store each element of the query results as list and return.","public List flight ( JdbcTemplate conn , String flight_id ) { List passengers_table = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( passengers_table ) ; return passengers_table ; }","Generate syntax code: Execute the SQL statement with the $conn$ connection: Query all the name column in the passengers table where flight_id is $flight_id$, print the query results, store each element of the query results as list and return.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> passengers_table = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( passengers_table ) </arg> </met> ; </exp> <ret> return passengers_table ; </ret> } </blo> </met>"
Generate origin code: connect to the database through $engine$ and execute the SQL ( get the description column in the Customer table based on $id$ ) and get all the data. Finally return the query results.,"public List testCoreFetchmanyWStreaming ( DataSource engine , String id ) { JdbcTemplate engine = new JdbcTemplate ( engine ) ; List results = engine . query ( "" select description from customer where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: connect to the database through $engine$ and execute the SQL ( get the description column in the Customer table based on $id$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier testCoreFetchmanyWStreaming <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $db$, set up SQL ( query all columns in the deadlock_users table based on $user_id$ and $name$ ) , execute SQL, get all the data, close the connection, and return the data.","public List testRollbackDeadlock ( DataSource db , String user_id , String name ) { JdbcTemplate conn1 = new JdbcTemplate ( db ) ; List uesrs = conn1 . query ( "" select * from deadlock_users where user_id = ? and name = ? "" , new Object [ ] { user_id , name } , new BeanPropertyRowMapper ( List . class ) ) ; return uesrs ; }","Generate syntax code: Connect the database with $db$, set up SQL ( query all columns in the deadlock_users table based on $user_id$ and $name$ ) , execute SQL, get all the data, close the connection, and return the data.","<met> <mod> public </mod> type_identifier testRollbackDeadlock <for> ( <for> type_identifier db </for> , <for> type_identifier user_id </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn1 = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> uesrs = <met> conn1 . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return uesrs ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get the Name column processed by the counting method in the tracks table according to $name$ ) , get all the data, and then use for loop to print each item in the query result.","public void findNameNum ( JdbcTemplate db , String name ) { List result = db . query ( "" select count(Name) from tracks where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : result ) { System . out . println ( i ) ; } }","Generate syntax code: Use $db$ to execute SQL ( get the Name column processed by the counting method in the tracks table according to $name$ ) , get all the data, and then use for loop to print each item in the query result.","<met> <mod> public </mod> void_type findNameNum <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$ , try to query all the columns in m_table and get all the data. For loop iterates through the queried information and prints. If an Exception occurs, print the exception message.","public void connectTable ( DataSource engine ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select * from m_table "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : result ) { System . out . println ( item ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Connect to the database through $engine$ , try to query all the columns in m_table and get all the data. For loop iterates through the queried information and prints. If an Exception occurs, print the exception message.","<met> <mod> public </mod> void_type connectTable <for> ( <for> type_identifier engine </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL through the $conn$ connection: Query all the columns in the zips table based on the $zipcode$ and get all the data. Use for loop to store each element in the query result into list, take out the 0th element of the list content, render and return locations.html, where the results parameter is the 0th element of the list content.","public String location ( JdbcTemplate conn , String zipcode , Model model ) { List query_results = conn . query ( "" select * from zips where zipcode= ? "" , new Object [ ] { zipcode } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object row : query_results ) { results . add ( row ) ; } Object result = results . get ( 0 ) ; model . addAttribute ( "" results "" , result ) ; return "" locations.html "" ; }","Generate syntax code: Execute SQL through the $conn$ connection: Query all the columns in the zips table based on the $zipcode$ and get all the data. Use for loop to store each element in the query result into list, take out the 0th element of the list content, render and return locations.html, where the results parameter is the 0th element of the list content.","<met> <mod> public </mod> type_identifier location <for> ( <for> type_identifier conn </for> , <for> type_identifier zipcode </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> query_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zipcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : query_results ) <blo> { <exp> <met> results . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <loc> type_identifier <var> result = <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL: Query the first 'name' in the books table based on $bk_id$. If the query result is empty, render and return ""error.html"", where the message parameter is ""No such book.; otherwise, render and return ""book_info.html"", where the book parameter is the query result.","public String bookInfo ( JdbcTemplate conn , String bk_id , Model model ) { List books = conn . query ( "" select name from books where bk_id = ? "" , new Object [ ] { bk_id } , new BeanPropertyRowMapper ( List . class ) ) ; Object book = books . get ( 0 ) ; if ( books . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such book. "" ) ; return "" error.html "" ; } else { model . addAttribute ( "" book "" , book ) ; return "" book_info.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL: Query the first 'name' in the books table based on $bk_id$. If the query result is empty, render and return ""error.html"", where the message parameter is ""No such book.; otherwise, render and return ""book_info.html"", where the book parameter is the query result.","<met> <mod> public </mod> type_identifier bookInfo <for> ( <for> type_identifier conn </for> , <for> type_identifier bk_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bk_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> book = <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL ( query the ratings data in the reviewtable with $isbn$ ) using the $conn$ connection and get the number of rows of data. If the number of rows obtained is not 0, all data is queried and the rendered ""review.html"" is returned with the review parameter as the result of the query.","public String userReview ( JdbcTemplate conn , String isbn , Model model ) { List review = conn . query ( "" select ratings from reviewtable where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; int count = review . size ( ) ; if ( review . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" review "" , review ) ; return "" review.html "" ; } }","Generate syntax code: Execute SQL ( query the ratings data in the reviewtable with $isbn$ ) using the $conn$ connection and get the number of rows of data. If the number of rows obtained is not 0, all data is queried and the rendered ""review.html"" is returned with the review parameter as the result of the query.","<met> <mod> public </mod> type_identifier userReview <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> review = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> count = <met> review . size <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> review . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , review ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database where the engine is $engine$. Execute the SQL statement ( query all columns in the Customer ) using the database connection and get all the data. If no data is obtained, False is returned, otherwise return True .","public boolean getCustomer ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: connect to the database where the engine is $engine$. Execute the SQL statement ( query all columns in the Customer ) using the database connection and get all the data. If no data is obtained, False is returned, otherwise return True .","<met> <mod> public </mod> boolean_type getCustomer <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL: query all columns in the factura where total is $valor_total$ and the id of user is $id_user$. Execute the SQL using $db$ and get all the query data. Finally, return the query results.","public List confirmed ( JdbcTemplate db , String valor_total , String id_user ) { List datas = db . query ( "" select * from factura where total=? and id_user=? "" , new Object [ ] { valor_total , id_user } , new BeanPropertyRowMapper ( List . class ) ) ; return datas ; }","Generate syntax code: Set SQL: query all columns in the factura where total is $valor_total$ and the id of user is $id_user$. Execute the SQL using $db$ and get all the query data. Finally, return the query results.","<met> <mod> public </mod> type_identifier confirmed <for> ( <for> type_identifier db </for> , <for> type_identifier valor_total </for> , <for> type_identifier id_user </for> ) </for> <blo> { <loc> type_identifier <var> datas = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { valor_total , id_user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return datas ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement to: Get all the columns in orderItem based on $orderId$, match the conditions in the SQL string using the % operator, use the $conn$ connection to execute the SQL to get all the data and return the query results.","public List getOrderItems ( JdbcTemplate db , String orderId ) { List execStr = db . query ( "" select * from orderitem where orderid =? "" , new Object [ ] { orderId } , new BeanPropertyRowMapper ( List . class ) ) ; return execStr ; }","Generate syntax code: Set the SQL statement to: Get all the columns in orderItem based on $orderId$, match the conditions in the SQL string using the % operator, use the $conn$ connection to execute the SQL to get all the data and return the query results.","<met> <mod> public </mod> type_identifier getOrderItems <for> ( <for> type_identifier db </for> , <for> type_identifier orderId </for> ) </for> <blo> { <loc> type_identifier <var> execStr = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orderId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return execStr ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query any DISH_PRICE in the dish where the ID of DISH is $DISH_ID$, and return all results. If an exception occurs, print 'fail'.","public List setDishPriceByDishId ( JdbcTemplate conn , String DISH_ID ) { try { List gui = conn . query ( "" select DISH_PRICE from dish where DISH_ID=? "" , new Object [ ] { DISH_ID } , new BeanPropertyRowMapper ( List . class ) ) ; return gui ; } catch ( Exception e ) { System . out . println ( "" fail "" ) ; return null ; } }","Generate syntax code: Try to use $conn$ to query any DISH_PRICE in the dish where the ID of DISH is $DISH_ID$, and return all results. If an exception occurs, print 'fail'.","<met> <mod> public </mod> type_identifier setDishPriceByDishId <for> ( <for> type_identifier conn </for> , <for> type_identifier DISH_ID </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> gui = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DISH_ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return gui ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Use the java expression to set the SQL statement ( query the data in the $regressions$ table according to $regression_id$ ) , execute SQL and get all the data. If the execution result exists, return the 0th element of the execution result; otherwise, return None.","public Object getRegression ( EntityManager engine , Root < Object > regressions , String regression_id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( regressions ) . where ( cb . equal ( regressions . get ( "" uregression_idrl "" ) , regression_id ) ) ; List < Object > vs = engine . createQuery ( cq ) . getResultList ( ) ; if ( vs . isEmpty ( ) ) { return null ; } else { return vs . get ( 0 ) ; } }","Generate syntax code: connect the database according to $engine$. Use the java expression to set the SQL statement ( query the data in the $regressions$ table according to $regression_id$ ) , execute SQL and get all the data. If the execution result exists, return the 0th element of the execution result; otherwise, return None.","<met> <mod> public </mod> type_identifier getRegression <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> regressions </for> , <for> type_identifier regression_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( regressions ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> regressions . get <arg> ( string_literal ) </arg> </met> , regression_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> vs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> vs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> vs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query all columns in $users$ table based on $name$ ) . Execute SQL with $conn$ and get all the data, use for loop to convert each item of query result to dict, print and return ""b"".","public Object getSource ( EntityManager conn , Root < Object > users , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" name "" ) , name ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object row : result ) { System . out . println ( row ) ; } return "" b "" ; }","Generate syntax code: Set SQL based on the java expression: ( query all columns in $users$ table based on $name$ ) . Execute SQL with $conn$ and get all the data, use for loop to convert each item of query result to dict, print and return ""b"".","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the amount of data in the events table when table_name is $hash_cohort$ ) and get the first piece of data. Set the assertion to determine the number of query results to 1. Finally, return the data.","public Object testEmptyOutput ( JdbcTemplate conn , String hash_cohort ) { List count_ts = conn . query ( "" select count(*) from events where table_name= ? "" , new Object [ ] { hash_cohort } , new BeanPropertyRowMapper ( List . class ) ) ; assert count_ts . size ( ) == 1 ; return count_ts . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query the amount of data in the events table when table_name is $hash_cohort$ ) and get the first piece of data. Set the assertion to determine the number of query results to 1. Finally, return the data.","<met> <mod> public </mod> type_identifier testEmptyOutput <for> ( <for> type_identifier conn </for> , <for> type_identifier hash_cohort </for> ) </for> <blo> { <loc> type_identifier <var> count_ts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { hash_cohort } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> count_ts . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return <met> count_ts . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all the information in the books table based on $isbn$ ) , use $conn$ to execute the SQL and get all the query results. Return the query results converted to json format.","public JSONArray selectValue ( JdbcTemplate conn , String isbn ) { List data = conn . query ( "" select * from books where isbn =? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( data . toString ( ) ) ; }","Generate syntax code: Set up SQL ( query all the information in the books table based on $isbn$ ) , use $conn$ to execute the SQL and get all the query results. Return the query results converted to json format.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use the $conn$ connection to execute SQL: To get all the columns in the users table based on the $username$ and get all the data. If the query result is empty, render and return ""error.html""; if not, use redirect to return ""/"". If the request module sends the request not in a post way, render and return""login.html"".","public Object query ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" error.html "" ; } else { return "" / "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request module sends the request in a post method, use the $conn$ connection to execute SQL: To get all the columns in the users table based on the $username$ and get all the data. If the query result is empty, render and return ""error.html""; if not, use redirect to return ""/"". If the request module sends the request not in a post way, render and return""login.html"".","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine via $test_pymysql$ and use 'with' statement to establish a connection. Set up the SQL ( query all the columns in the tbl table based on $val$ ) , and execute the SQL, use for loop to iterate through to get the cursor of the execution result. Convery 'keys' and 'value' of each piece of data into tuple, zip and dict, and stor in a list. Use for loop to iterate through the list and print 'id' and 'val' of each piece of data. Finally, close the connection.","public void selectValue ( DataSource test_pymysql , String val ) { JdbcTemplate conn = new JdbcTemplate ( test_pymysql ) ; List vals = conn . query ( "" select * from tbl where val = ? "" , new Object [ ] { val } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : vals ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" id "" ) + JSONObject . parseObject ( row . toString ( ) ) . getString ( "" val "" ) ) ; } }","Generate syntax code: Get the database engine via $test_pymysql$ and use 'with' statement to establish a connection. Set up the SQL ( query all the columns in the tbl table based on $val$ ) , and execute the SQL, use for loop to iterate through to get the cursor of the execution result. Convery 'keys' and 'value' of each piece of data into tuple, zip and dict, and stor in a list. Use for loop to iterate through the list and print 'id' and 'val' of each piece of data. Finally, close the connection.","<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier test_pymysql </for> , <for> type_identifier val </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( test_pymysql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> vals = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { val } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : vals ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> + <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all the columns in the 'tables' table where user_id is $id$ ) , get all the data and print. If a SQLAlchemyError exception occurs during execution, print the exception converted to a string and convert the dictionary whose 'status' is 200 and 'message' is ""OK"" to json and return.","public JSONObject adoptPet ( JdbcTemplate conn , String id ) { try { List res = conn . query ( "" select * from tables where user_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" status "" , 200 ) ; jsonObject . put ( "" message "" , "" ok "" ) ; return jsonObject ; }","Generate syntax code: Try to use $conn$ to execute SQL ( query all the columns in the 'tables' table where user_id is $id$ ) , get all the data and print. If a SQLAlchemyError exception occurs during execution, print the exception converted to a string and convert the dictionary whose 'status' is 200 and 'message' is ""OK"" to json and return.","<met> <mod> public </mod> type_identifier adoptPet <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , decimal_integer_literal ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL statement ( get all columns in books based on $isbn$ and $title$ ) , execute the SQL statement through the $conn$ connection. If the number of rows of the query results is 0, render and return ""error.html"". Get all the data, render and return ""results.html"", where the result of the books parameter is all the data obtained.","public String getBooks ( JdbcTemplate conn , String isbn , String title , Model model ) { List books = conn . query ( "" select * from books where isbn = ? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }","Generate syntax code: Set up the SQL statement ( get all columns in books based on $isbn$ and $title$ ) , execute the SQL statement through the $conn$ connection. If the number of rows of the query results is 0, render and return ""error.html"". Get all the data, render and return ""results.html"", where the result of the books parameter is all the data obtained.","<met> <mod> public </mod> type_identifier getBooks <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the $connection$ connection to execute the SQL statement: Query all the columns in the books table and get all the data. Set the assertion to determine that the length of the query result is greater than 1 and render and return ""books.html"", where the books parameter is the query result.","public String getBooks ( JdbcTemplate connection , Model model ) { List books = connection . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; assert books . size ( ) > 1 ; model . addAttribute ( "" books "" , books ) ; return "" books.html "" ; }","Generate syntax code: Use the $connection$ connection to execute the SQL statement: Query all the columns in the books table and get all the data. Set the assertion to determine that the length of the query result is greater than 1 and render and return ""books.html"", where the books parameter is the query result.","<met> <mod> public </mod> type_identifier getBooks <for> ( <for> type_identifier connection </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> books . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ connection to execute SQL statement: Get all columns in station based on $id$ and get all data. Store the 0th element of each item of the query result as list and return it.,"public List stations ( JdbcTemplate conn , String id ) { List stations = conn . query ( "" select * from station where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List stations2 = new ArrayList ( ) ; for ( Object i : stations ) { stations2 . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return stations2 ; }",Generate syntax code: Use $conn$ connection to execute SQL statement: Get all columns in station based on $id$ and get all data. Store the 0th element of each item of the query result as list and return it.,"<met> <mod> public </mod> type_identifier stations <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> stations = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> stations2 = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : stations ) <blo> { <exp> <met> stations2 . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return stations2 ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get the isbn column in the books table based on $title$ and $author$ ) , get all the data, and return the rendered ""home.html"", where the result parameter is the query result.","public String search ( JdbcTemplate db , String title , String author , Model model ) { List all_isbn = db . query ( "" select isbn from books where title=? and author=? "" , new Object [ ] { title , author } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" result "" , all_isbn ) ; return "" home.html "" ; }","Generate syntax code: Use $db$ to execute SQL ( get the isbn column in the books table based on $title$ and $author$ ) , get all the data, and return the rendered ""home.html"", where the result parameter is the query result.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier db </for> , <for> type_identifier title </for> , <for> type_identifier author </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> all_isbn = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , all_isbn ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Through $conn$ connection, set up the SQL statement using the java expression ( query all q data in the $t1$ table based on $column$ ) , execute the SQL statement to get the data and return all the query results.","public List < Object > tesGetInfo ( EntityManager conn , Root < Object > t1 , String column ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( t1 ) . where ( cb . equal ( t1 . get ( "" column "" ) , column ) ) ; List < Object > info = conn . createQuery ( cq ) . getResultList ( ) ; return info ; }","Generate syntax code: Through $conn$ connection, set up the SQL statement using the java expression ( query all q data in the $t1$ table based on $column$ ) , execute the SQL statement to get the data and return all the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tesGetInfo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> t1 </for> , <for> type_identifier column </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( t1 ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> t1 . get <arg> ( string_literal ) </arg> </met> , column ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> info = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return info ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement to get all the columns in orderdetail where the id of order is $orderid$, execute the SQL statement to get all the data through the $conn$ connection, and store each query result item as a dict in a list and return.","public List getDetalleHistorial ( JdbcTemplate conn , String orderid ) { List moviedata = conn . query ( "" select * from orderdetail where orderid= ? "" , new Object [ ] { orderid } , new BeanPropertyRowMapper ( List . class ) ) ; return moviedata ; }","Generate syntax code: Set the SQL statement to get all the columns in orderdetail where the id of order is $orderid$, execute the SQL statement to get all the data through the $conn$ connection, and store each query result item as a dict in a list and return.","<met> <mod> public </mod> type_identifier getDetalleHistorial <for> ( <for> type_identifier conn </for> , <for> type_identifier orderid </for> ) </for> <blo> { <loc> type_identifier <var> moviedata = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orderid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return moviedata ; </ret> } </blo> </met>"
Generate origin code: Execute SQL ( query the first data in $BLOG$ where TITLE is $TITLE$ ) using ORM through a $conn$ connection to return the 0th element of the query result.,"public Object selectRes ( EntityManager conn , Root < Object > BLOG , String TITLE ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( BLOG ) . where ( cb . equal ( BLOG . get ( "" TITLE "" ) , TITLE ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Execute SQL ( query the first data in $BLOG$ where TITLE is $TITLE$ ) using ORM through a $conn$ connection to return the 0th element of the query result.,"<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> BLOG </for> , <for> type_identifier TITLE </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( BLOG ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> BLOG . get <arg> ( string_literal ) </arg> </met> , TITLE ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the java expression ( get all the columns in the $hash_table$ table based on $addonid$ ) and try to get all the data. Finally ensure that the database connection is closed.,"public Object hashesExists ( EntityManager conn , Root < Object > hash_table , String addonid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( hash_table ) . where ( cb . equal ( hash_table . get ( "" addonid "" ) , addonid ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }",Generate syntax code: Use $conn$ to execute the java expression ( get all the columns in the $hash_table$ table based on $addonid$ ) and try to get all the data. Finally ensure that the database connection is closed.,"<met> <mod> public </mod> type_identifier hashesExists <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> hash_table </for> , <for> type_identifier addonid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( hash_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> hash_table . get <arg> ( string_literal ) </arg> </met> , addonid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( query the id column in the book table based on $user_id$ ) , execute the SQL based on $conn$ and get all the query result, close the connection, and return the data.","public List selectBook ( JdbcTemplate conn , String user_id ) { List ids = conn . query ( "" select id from book where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return ids ; }","Generate syntax code: Set up the SQL ( query the id column in the book table based on $user_id$ ) , execute the SQL based on $conn$ and get all the query result, close the connection, and return the data.","<met> <mod> public </mod> type_identifier selectBook <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> ids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ids ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( get the book_name column in the books table based on $id$ ) and get all the data. If the obtained result is not None, then return the rendered ""error.html"", and finally return the rendered ""book.html"", where the book_names parameter is the data obtained by executing the SQL.","public String book ( JdbcTemplate conn , String id , Model model ) { List book_names = conn . query ( "" select book_name from books where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_names . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" book_names "" , book_names ) ; return "" book.html "" ; } }","Generate syntax code: Use $conn$ to execute the SQL ( get the book_name column in the books table based on $id$ ) and get all the data. If the obtained result is not None, then return the rendered ""error.html"", and finally return the rendered ""book.html"", where the book_names parameter is the data obtained by executing the SQL.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book_names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book_names . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , book_names ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Set SQL statement: Query all columns in the drinkers table with name as $name$ and execute SQL to get all the data. If the query result is empty, return None; otherwise return the query results in the form of the dictionary.","public List findDrinker ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select * from drinkers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: connect to the database based on $engine$. Set SQL statement: Query all columns in the drinkers table with name as $name$ and execute SQL to get all the data. If the query result is empty, return None; otherwise return the query results in the form of the dictionary.","<met> <mod> public </mod> type_identifier findDrinker <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up the SQL using a java expression ( query the value in $table$ according to $col$ ) , execute the SQL using $conn$ and get all the data. Store the 0th element of each item of the query result as a list and return.","public List values ( EntityManager conn , Root < Object > table , String col ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" col "" ) , col ) ) ; List < Object > reccol = conn . createQuery ( cq ) . getResultList ( ) ; List result = new ArrayList ( ) ; for ( Object x : reccol ) { result . add ( JSONObject . parseObject ( x . toString ( ) ) . get ( 0 ) ) ; } }","Generate syntax code: Set up the SQL using a java expression ( query the value in $table$ according to $col$ ) , execute the SQL using $conn$ and get all the data. Store the 0th element of each item of the query result as a list and return.","<met> <mod> public </mod> type_identifier values <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier col </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , col ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> reccol = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier x : reccol ) <blo> { <exp> <met> result . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> x . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the data request method is POST, use $conn$ to execute SQL ( query all data in the 'request' column of the POST table based on $check_password_hash$ and $check_password_hash$ ) , store the query result as list and return. Otherwise, return the rendered ""login.html"" page.","public Object login ( HttpRequest request , JdbcTemplate conn , String check_password_hash ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select request from post where check_password_hash = ? "" , new Object [ ] { check_password_hash } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { return row ; } } else { return "" login.html "" ; } }","Generate syntax code: If the data request method is POST, use $conn$ to execute SQL ( query all data in the 'request' column of the POST table based on $check_password_hash$ and $check_password_hash$ ) , store the query result as list and return. Otherwise, return the rendered ""login.html"" page.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier check_password_hash </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { check_password_hash } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <ret> return row ; </ret> } </blo> </enh> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the detail table based on $host$ ) . Get all query results, print and return.","public List dbhost ( JdbcTemplate conn , String host ) { List rs = conn . query ( "" select * from detail where host= ? "" , new Object [ ] { host } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rs ) ; return rs ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the detail table based on $host$ ) . Get all query results, print and return.","<met> <mod> public </mod> type_identifier dbhost <for> ( <for> type_identifier conn </for> , <for> type_identifier host </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { host } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( rs ) </arg> </met> ; </exp> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Use the cursor method of $connection$ to execute the SQL ( get all columns in the user table based on $id$ ) and get all the data. Then close the cursor method, close the database connection and finally print the query results.","public void databaseForSqliteSelect ( DataSource connection , String id ) { JdbcTemplate cursor = new JdbcTemplate ( connection ) ; List values = cursor . query ( "" select * from user where id =? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( values ) ; }","Generate syntax code: Use the cursor method of $connection$ to execute the SQL ( get all columns in the user table based on $id$ ) and get all the data. Then close the cursor method, close the database connection and finally print the query results.","<met> <mod> public </mod> void_type databaseForSqliteSelect <for> ( <for> type_identifier connection </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( connection ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> values = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( values ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Open the given book.csv file, read each item of data in the file through a for loop, then execute the SQL query statement using the $conn$ connection ( when the author equals each item of data read, get the corresponding title in the books ) and get all the data. Print the query result at last.","public List queryDb ( JdbcTemplate conn ) { List list = new ArrayList ( ) ; String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String author = sc . nextLine ( ) ; List texts = conn . query ( "" select title from books where author= ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( texts ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } return list ; }","Generate syntax code: Open the given book.csv file, read each item of data in the file through a for loop, then execute the SQL query statement using the $conn$ connection ( when the author equals each item of data read, get the corresponding title in the books ) and get all the data. Print the query result at last.","<met> <mod> public </mod> type_identifier queryDb <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> author = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( texts ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the number of eligible rows in the table where name is $name$ ) , execute SQL with $conn$ to get all the data and return the 0th of the query results.","public Object selectCount ( JdbcTemplate conn , String name ) { List results = conn . query ( "" select count(*) from table where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Set SQL ( query the number of eligible rows in the table where name is $name$ ) , execute SQL with $conn$ to get all the data and return the 0th of the query results.","<met> <mod> public </mod> type_identifier selectCount <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use the $engine$ to connect the database and execute SQL ( get the name column in the Beers table where id is $bid$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return.,"public List findBeersname ( DataSource engine , String bid ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select name from Beers where id= ? "" , new Object [ ] { bid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Use the $engine$ to connect the database and execute SQL ( get the name column in the Beers table where id is $bid$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return.,"<met> <mod> public </mod> type_identifier findBeersname <for> ( <for> type_identifier engine </for> , <for> type_identifier bid </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Try to connect to the database with $engine$, execut SQL ( get all of the weather_info where temp_min is $temp_min$ and temp_max is $temp_max$ ) to convert each query result into a dict store as a list and return.","public List queryPage ( DataSource engine , String temp_min , String temp_max ) { try { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List res_data = connection . query ( "" select temp from weather_info where temp_min=? and temp_max=? "" , new Object [ ] { temp_min , temp_max } , new BeanPropertyRowMapper ( List . class ) ) ; return res_data ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to connect to the database with $engine$, execut SQL ( get all of the weather_info where temp_min is $temp_min$ and temp_max is $temp_max$ ) to convert each query result into a dict store as a list and return.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier engine </for> , <for> type_identifier temp_min </for> , <for> type_identifier temp_max </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res_data = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { temp_min , temp_max } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res_data ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Create the database engine and connect via $localhost$. Execute the SQL statement ( query the number of all columns in the pg_database table based on $datname$ ) to get the first piece of data and return the obtained data.,"public List sqlImport ( DataSource localhost , String datname ) { JdbcTemplate conn = new JdbcTemplate ( localhost ) ; List value = conn . query ( "" select count(*) from pg_database where datname = ? "" , new Object [ ] { datname } , new BeanPropertyRowMapper ( List . class ) ) ; return value ; }",Generate syntax code: Create the database engine and connect via $localhost$. Execute the SQL statement ( query the number of all columns in the pg_database table based on $datname$ ) to get the first piece of data and return the obtained data.,"<met> <mod> public </mod> type_identifier sqlImport <for> ( <for> type_identifier localhost </for> , <for> type_identifier datname </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( localhost ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> value = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return value ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get all the columns in the table where message is $message_te$ ) , get all the data, return the query results, and print an exception if an exception occurs during execution.","public List init ( JdbcTemplate conn , String message_te ) { try { List res = conn . query ( "" select * from table where message_te= ? "" , new Object [ ] { message_te } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get all the columns in the table where message is $message_te$ ) , get all the data, return the query results, and print an exception if an exception occurs during execution.","<met> <mod> public </mod> type_identifier init <for> ( <for> type_identifier conn </for> , <for> type_identifier message_te </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { message_te } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Execute the SQL statement through $con$ ( query the first event_name and event_date in the events table where id is $id$ ) and return the query results.,"public List getEventName ( JdbcTemplate conn , String id ) { List ret = conn . query ( "" select event_name, event_date from events where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return ret ; }",Generate syntax code: Execute the SQL statement through $con$ ( query the first event_name and event_date in the events table where id is $id$ ) and return the query results.,"<met> <mod> public </mod> type_identifier getEventName <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ret = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ret ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database according to $engine$. Set up the SQL query statement: Query the number of all columns in lookup_schema, execute SQL to get the first piece of data, and use for loop traversal to query the results and print.","public List geoiRun ( DataSource engine ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List row_counts = con . query ( "" select count(*) from lookup_schema "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : row_counts ) { System . out . println ( row ) ; } }","Generate syntax code: Connect to the database according to $engine$. Set up the SQL query statement: Query the number of all columns in lookup_schema, execute SQL to get the first piece of data, and use for loop traversal to query the results and print.","<met> <mod> public </mod> type_identifier geoiRun <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> row_counts = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : row_counts ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set up SQL statements using java expressions and execute SQL statements using $conn$ ( query hash column in $source_file$ according to $filehash$ ) , obtain all the data and return.","public List < Object > getSource ( EntityManager conn , Root < Object > source_file , String filehash ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( source_file ) . where ( cb . equal ( source_file . get ( "" filehash "" ) , filehash ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Set up SQL statements using java expressions and execute SQL statements using $conn$ ( query hash column in $source_file$ according to $filehash$ ) , obtain all the data and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> source_file </for> , <for> type_identifier filehash </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( source_file ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> source_file . get <arg> ( string_literal ) </arg> </met> , filehash ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method to execute the SQL statement through the $con$ connection: Query all the data in the $Friend$ table where a right_id is $right_id$, and use for loop traversal to query the results, print them, and return all the query results.","public List < Object > updateFriendTable ( EntityManager con , Root < Object > Friend , String right_id ) { CriteriaBuilder cb = con . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Friend ) . where ( cb . equal ( Friend . get ( "" right_id "" ) , right_id ) ) ; List < Object > result = con . createQuery ( cq ) . getResultList ( ) ; for ( Object friend : result ) { System . out . println ( friend ) ; } return result ; }","Generate syntax code: Use ORM method to execute the SQL statement through the $con$ connection: Query all the data in the $Friend$ table where a right_id is $right_id$, and use for loop traversal to query the results, print them, and return all the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> updateFriendTable <for> ( <for> type_identifier con </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Friend </for> , <for> type_identifier right_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> con . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Friend ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Friend . get <arg> ( string_literal ) </arg> </met> , right_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> con . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier friend : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( friend ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the ic_item table with _id as $item_id$ ) and get all the data. If the query result is true, return True.","public boolean getItem ( JdbcTemplate conn , String item_id ) { List items = conn . query ( "" select * from ic_item where _id = ? "" , new Object [ ] { item_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( items . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the ic_item table with _id as $item_id$ ) and get all the data. If the query result is true, return True.","<met> <mod> public </mod> boolean_type getItem <for> ( <for> type_identifier conn </for> , <for> type_identifier item_id </for> ) </for> <blo> { <loc> type_identifier <var> items = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { item_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> items . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL ( query all columns in book ) with $conn$ to get all the data. Returns ""display.html"" after rendering, of which the argument books is the result of the query.","public String search ( JdbcTemplate conn , Model model ) { List books = conn . query ( "" select * from book "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" display.html "" ; }","Generate syntax code: Execute SQL ( query all columns in book ) with $conn$ to get all the data. Returns ""display.html"" after rendering, of which the argument books is the result of the query.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set sql ( query the model_id column in the model_metadata table based on $model_group_id$ ) , execute the SQL with $conn$, get all the query results, use for loop to insert each item of the query result into list and return.","public List getModelsIds ( JdbcTemplate conn , String model_group_id ) { List query = conn . query ( "" select model_id from model_metadata where model_group_id = ? "" , new Object [ ] { model_group_id } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }","Generate syntax code: Set sql ( query the model_id column in the model_metadata table based on $model_group_id$ ) , execute the SQL with $conn$, get all the query results, use for loop to insert each item of the query result into list and return.","<met> <mod> public </mod> type_identifier getModelsIds <for> ( <for> type_identifier conn </for> , <for> type_identifier model_group_id </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { model_group_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all the information in the books table based on id $book_id$ ) , use $conn$ to execute SQL and get all the query results. If the query result is empty, return the rendered ""error.html"" page with the 'message' parameter: ""No such book exists here. Otherwise, return the rendered ""details.html"" page with the 'book' parameter book being the query result and 'rating' is the 'average_rating' field of the 0th data of the query result.","public String details ( JdbcTemplate conn , String book_id , Model model ) { List books = conn . query ( "" select * from books where id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such book exists here. "" ) ; return "" error.html "" ; } else { String rating = JSONObject . parseObject ( books . get ( 0 ) . toString ( ) ) . getString ( "" average_rating "" ) ; model . addAttribute ( "" rating "" , rating ) ; model . addAttribute ( "" books "" , books ) ; return "" details.html "" ; } }","Generate syntax code: Set SQL ( query all the information in the books table based on id $book_id$ ) , use $conn$ to execute SQL and get all the query results. If the query result is empty, return the rendered ""error.html"" page with the 'message' parameter: ""No such book exists here. Otherwise, return the rendered ""details.html"" page with the 'book' parameter book being the query result and 'rating' is the 'average_rating' field of the 0th data of the query result.","<met> <mod> public </mod> type_identifier details <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> rating = <met> <met> JSONObject . parseObject <arg> ( <met> <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , rating ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$. Try to query all the columns in the tableDB table with name as $name$ and get all data, make sure the database connection is closed and return the query result. If an Exception exception occurs, print the exception message.","public List getInformation ( DataSource engine , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; try { List query = conn . query ( "" select * from tabledb where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Connect to the database through $engine$. Try to query all the columns in the tableDB table with name as $name$ and get all data, make sure the database connection is closed and return the query result. If an Exception exception occurs, print the exception message.","<met> <mod> public </mod> type_identifier getInformation <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Execute SQL via $conn$ ( get all columns in the books table based on $search_criteria$ ) and get all the data. Close $conn$ and finally return the query result.,"public List testListenTargetsScope ( JdbcTemplate conn , String search_criteria ) { List res = conn . query ( "" select * from books where search_criteria= ? "" , new Object [ ] { search_criteria } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Execute SQL via $conn$ ( get all columns in the books table based on $search_criteria$ ) and get all the data. Close $conn$ and finally return the query result.,"<met> <mod> public </mod> type_identifier testListenTargetsScope <for> ( <for> type_identifier conn </for> , <for> type_identifier search_criteria </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { search_criteria } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the first row of data in the Name table based on $NewName$ and $path$ ) , close the connection, and return the data.","public Object renameTable ( JdbcTemplate conn , String NewName , String path ) { List files = conn . query ( "" select * from books where search_criteria= ? "" , new Object [ ] { NewName , path } , new BeanPropertyRowMapper ( List . class ) ) ; return files . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query the first row of data in the Name table based on $NewName$ and $path$ ) , close the connection, and return the data.","<met> <mod> public </mod> type_identifier renameTable <for> ( <for> type_identifier conn </for> , <for> type_identifier NewName </for> , <for> type_identifier path </for> ) </for> <blo> { <loc> type_identifier <var> files = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { NewName , path } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> files . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $db$ to execute SQL ( query the name column in the users table based on $password$ ) , get all the query results, set the assertion to determine the query result length, and return the redirected 'login' page. Otherwise, return the redirected 'signupp' page.","public String signUp ( HttpRequest request , JdbcTemplate db , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List login = db . query ( "" select name from users where password= ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; assert login . size ( ) > 0 ; return "" login "" ; } else { return "" signupp "" ; } }","Generate syntax code: If the request method is ""POST"", use $db$ to execute SQL ( query the name column in the users table based on $password$ ) , get all the query results, set the assertion to determine the query result length, and return the redirected 'login' page. Otherwise, return the redirected 'signupp' page.","<met> <mod> public </mod> type_identifier signUp <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> login = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> login . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( get all the columns in the orderState table based on $orderId$ ) , use the $conn$ connection to execute the SQL statement and get all the data. Convert each item of the query result to dict, store as list and return.","public List getOrderState ( JdbcTemplate conn , String orderId ) { List OrderStates = conn . query ( "" select * from orderstate where orderid = ? "" , new Object [ ] { orderId } , new BeanPropertyRowMapper ( List . class ) ) ; return OrderStates ; }","Generate syntax code: Set the SQL statement ( get all the columns in the orderState table based on $orderId$ ) , use the $conn$ connection to execute the SQL statement and get all the data. Convert each item of the query result to dict, store as list and return.","<met> <mod> public </mod> type_identifier getOrderState <for> ( <for> type_identifier conn </for> , <for> type_identifier orderId </for> ) </for> <blo> { <loc> type_identifier <var> OrderStates = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orderId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return OrderStates ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement and the content is as follows: Query all the columns in the generopeliculas table based on $categoria$ and executes SQL, use $conn$ to get all the data. Use for loop to store each element in the execution result in list and return the list.","public List getPelisEnCategoria ( JdbcTemplate conn , String categoria ) { List result = conn . query ( "" select * from generopeliculas where categoria = ? "" , new Object [ ] { categoria } , new BeanPropertyRowMapper ( List . class ) ) ; List peliscat = new ArrayList ( ) ; for ( Object a : result ) { peliscat . add ( a ) ; } return peliscat ; }","Generate syntax code: Set the SQL statement and the content is as follows: Query all the columns in the generopeliculas table based on $categoria$ and executes SQL, use $conn$ to get all the data. Use for loop to store each element in the execution result in list and return the list.","<met> <mod> public </mod> type_identifier getPelisEnCategoria <for> ( <for> type_identifier conn </for> , <for> type_identifier categoria </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { categoria } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> peliscat = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier a : result ) <blo> { <exp> <met> peliscat . add <arg> ( a ) </arg> </met> ; </exp> } </blo> </enh> <ret> return peliscat ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query stdin in copy_name ) and get all the data. Finally, return the query results.","public List loaddata ( JdbcTemplate conn ) { List stdin_val = conn . query ( "" select stdin from copy_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return stdin_val ; }","Generate syntax code: Use $conn$ to execute SQL ( query stdin in copy_name ) and get all the data. Finally, return the query results.","<met> <mod> public </mod> type_identifier loaddata <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> stdin_val = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return stdin_val ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all columns in the flights table with an id of $flight_id$ and get the first piece of data. If the query result is empty, render and return ""error.html""; otherwise, return the query results.","public Object flight ( JdbcTemplate conn , String flight_id ) { List flights = conn . query ( "" select * from flights where id =? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return "" error.html "" ; } else { return flights . get ( 0 ) ; } }","Generate syntax code: Use $conn$ to query all columns in the flights table with an id of $flight_id$ and get the first piece of data. If the query result is empty, render and return ""error.html""; otherwise, return the query results.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( query all columns in the books table based on the condition that id is $book_id$ ) and get all the query results. If the length of the query results is not 1, return the rendered ""error.html"" page; otherwise, execute SQL ( query all the columns in the reviews table for $book_id$ ) , get all the query results, and return the rendered ""book.html"" page, where the parameter book_info is set to the 0th element of the first query result, and the parameter reviews is set to the second query result.","public String book ( JdbcTemplate conn , String book_id , Model model ) { List book_info = conn . query ( "" select * from books where id=? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_info . size ( ) != 1 ) { return "" error.html "" ; } else { List reviews = conn . query ( "" select * from reviews where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book_info "" , book_info . get ( 0 ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" book.html "" ; } }","Generate syntax code: Use $db$ to execute SQL ( query all columns in the books table based on the condition that id is $book_id$ ) and get all the query results. If the length of the query results is not 1, return the rendered ""error.html"" page; otherwise, execute SQL ( query all the columns in the reviews table for $book_id$ ) , get all the query results, and return the rendered ""book.html"" page, where the parameter book_info is set to the 0th element of the first query result, and the parameter reviews is set to the second query result.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book_info = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> book_info . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> book_info . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, set the SQL ( query all columns in books with 'title' as $search$ ) and uses $conn$ to execute the SQL to get all the data. If the result is null, return None; otherwise, render and return ""search.html"", where the books parameter is the execution result. If the request module sends the request in a way other than post, render and return ""index.html"".","public String books ( HttpRequest request , JdbcTemplate conn , String search , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select * from books where title = ? "" , new Object [ ] { search } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" books "" , books ) ; return "" search.html "" ; } } else { return "" index.html "" ; } }","Generate syntax code: If the request module sends the request as post, set the SQL ( query all columns in books with 'title' as $search$ ) and uses $conn$ to execute the SQL to get all the data. If the result is null, return None; otherwise, render and return ""search.html"", where the books parameter is the execution result. If the request module sends the request in a way other than post, render and return ""index.html"".","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier search </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { search } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Set up the SQL ( query the itemId column in the likes table based on 'drinkerId': $name$ ) and execute the SQL. Use for loop to iterate through all the obtained query results, insert the 'item' field of each piece of data into a list, and return the list.","public List getLikes ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select itemid from likes where drinkerid = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : rs ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" item "" ) ) ; } return list ; }","Generate syntax code: connect to the database based on $engine$. Set up the SQL ( query the itemId column in the likes table based on 'drinkerId': $name$ ) and execute the SQL. Use for loop to iterate through all the obtained query results, insert the 'item' field of each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getLikes <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rs ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: f the request module sends the request through POST, set the SQL statement: Query all the columns in the users table based on $email$, use $conn$ to execute SQL to get all the data and print. If the execution result is empty, return False; otherwise return True.","public boolean login ( HttpRequest request , JdbcTemplate conn , String email ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List results = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return false ; } else { return true ; } } else { return false ; } }","Generate syntax code: f the request module sends the request through POST, set the SQL statement: Query all the columns in the users table based on $email$, use $conn$ to execute SQL to get all the data and print. If the execution result is empty, return False; otherwise return True.","<met> <mod> public </mod> boolean_type login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up sql ( query the weather column in the home_list table according to $id$ ) , use $conn$ to execute SQL and get all the query results. If the data is obtained, print and return the query results.","public List selectDataById ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select weather from home_list where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { System . out . println ( res ) ; return res ; } }","Generate syntax code: Set up sql ( query the weather column in the home_list table according to $id$ ) , use $conn$ to execute SQL and get all the query results. If the data is obtained, print and return the query results.","<met> <mod> public </mod> type_identifier selectDataById <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the data in the message column of the username table based on $channel$ ) , output the results of the query, take the data as the value of the dictionary 'message_uid' key and return with json format.","public JSONObject submitMessage ( JdbcTemplate conn , String channel ) { List result = conn . query ( "" select weather from home_list where id = ? "" , new Object [ ] { channel } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; JSONObject json = new JSONObject ( ) ; json . put ( "" message_uid "" , result ) ; return json ; }","Generate syntax code: Use $conn$ to execute SQL ( query all the data in the message column of the username table based on $channel$ ) , output the results of the query, take the data as the value of the dictionary 'message_uid' key and return with json format.","<met> <mod> public </mod> type_identifier submitMessage <for> ( <for> type_identifier conn </for> , <for> type_identifier channel </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { channel } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Open and read the books.csv file. Use for loop iterate through the read file, use the $conn$ connection to execute the SQL statement: query all columns in the books table based on $isbn$ and $title$ and get all the data and print the query results.","public void getBooks ( JdbcTemplate conn ) { String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String isbn = sc . nextLine ( ) ; String title = sc . nextLine ( ) ; List vals = conn . query ( "" select * from books where isbn = ? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( vals ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open and read the books.csv file. Use for loop iterate through the read file, use the $conn$ connection to execute the SQL statement: query all columns in the books table based on $isbn$ and $title$ and get all the data and print the query results.","<met> <mod> public </mod> void_type getBooks <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> isbn = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> title = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> vals = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( vals ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Execute the SQL statement: Query the first 'name' and manf data from the beers table, convert each item of the query result to dict, store it as list, and return.","public Object getBeers ( DataSource engine , String summary ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select name, manf from beers "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs . get ( 0 ) ; }","Generate syntax code: connect to the database according to $engine$. Execute the SQL statement: Query the first 'name' and manf data from the beers table, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getBeers <for> ( <for> type_identifier engine </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> rs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Set up the SQL ( query the id in users based on $username$ and $password$ ) ; use $conn$ to execute SQL and get the first piece of data and return the query results. If a ValueError exception occurs, return the rendered ""error.html"".","public Object reLogin ( JdbcTemplate conn , String username , String password ) { try { List ids = conn . query ( "" select id from users where username=? and password=? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; return ids . get ( 0 ) ; } catch ( Exception e ) { return "" error.html "" ; } }","Generate syntax code: Try to execute the following code: Set up the SQL ( query the id in users based on $username$ and $password$ ) ; use $conn$ to execute SQL and get the first piece of data and return the query results. If a ValueError exception occurs, return the rendered ""error.html"".","<met> <mod> public </mod> type_identifier reLogin <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> ids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> ids . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set sql ( query the isbn column in the books table based on $title$, $author$ and $year$ ) , use $conn$ to execute SQL, get all the query results, and print them.","public void main ( JdbcTemplate conn , String title , String author , String year ) { List f = conn . query ( "" select isbn from books where title =? and author = ? and year = ? "" , new Object [ ] { title , author , year } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( f ) ; }","Generate syntax code: Set sql ( query the isbn column in the books table based on $title$, $author$ and $year$ ) , use $conn$ to execute SQL, get all the query results, and print them.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> f = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , author , year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( f ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Set the SQL statement to get all the columns in the words table based on $id$, use $conn$ connection to execute the SQL to get all the data, and return all the obtained data.","public List selectValue ( JdbcTemplate conn , String id ) { List ret_value = conn . query ( "" select * from words where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return ret_value ; }","Generate syntax code: Set the SQL statement to get all the columns in the words table based on $id$, use $conn$ connection to execute the SQL to get all the data, and return all the obtained data.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ret_value = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ret_value ; </ret> } </blo> </met>"
"Generate origin code: Use the $engine$ to connect the database and execute SQL ( get the key_word column in the 'table' table according to $key_id$ ) , get the first piece of data, and finally return the query result.","public Object searchKey ( DataSource engine , String key_id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List keys = conn . query ( "" select key_word from table where key_id=? "" , new Object [ ] { key_id } , new BeanPropertyRowMapper ( List . class ) ) ; return keys . get ( 0 ) ; }","Generate syntax code: Use the $engine$ to connect the database and execute SQL ( get the key_word column in the 'table' table according to $key_id$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier searchKey <for> ( <for> type_identifier engine </for> , <for> type_identifier key_id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> keys = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { key_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> keys . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $con$ to execute SQL ( get all columns in 'samples' based on $equation$ ) and get all the data. Close the $con$ connection and finally return the query result.,"public List selectValue ( JdbcTemplate conn , String equation ) { List res = conn . query ( "" select * from samples where equation= ? "" , new Object [ ] { equation } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Use $con$ to execute SQL ( get all columns in 'samples' based on $equation$ ) and get all the data. Close the $con$ connection and finally return the query result.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier equation </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { equation } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $conn$: Query file in structure table based on the $id$, get the first piece of data and return.","public Object file ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select file from structure where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Execute the SQL statement through $conn$: Query file in structure table based on the $id$, get the first piece of data and return.","<met> <mod> public </mod> type_identifier file <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database via $engine$ and execute SQL ( query all columns in the pool table based on $pool_pre_ping$ ) , get all the data, and finally return the obtained result.","public List testPrePingDbStaysShutdown ( DataSource engine , String pool_pre_ping ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from pool where pool_pre_ping= ? "" , new Object [ ] { pool_pre_ping } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect to the database via $engine$ and execute SQL ( query all columns in the pool table based on $pool_pre_ping$ ) , get all the data, and finally return the obtained result.","<met> <mod> public </mod> type_identifier testPrePingDbStaysShutdown <for> ( <for> type_identifier engine </for> , <for> type_identifier pool_pre_ping </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pool_pre_ping } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Users$ table according to the condition that projid is $fr$, ) , get all the queried data, use for loop to traverse the index sequence of the query results, and output the data subscript and data.","public void select ( EntityManager conn , Root < Object > Users , String fr ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Users ) . where ( cb . equal ( Users . get ( "" projid "" ) , fr ) ) ; List < Object > users = conn . createQuery ( cq ) . getResultList ( ) ; for ( int i = 0 ; i < users . size ( ) ; i ++ ) { System . out . println ( i + "" "" + JSONObject . parseObject ( users . get ( i ) . toString ( ) ) ) ; } }","Generate syntax code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Users$ table according to the condition that projid is $fr$, ) , get all the queried data, use for loop to traverse the index sequence of the query results, and output the data subscript and data.","<met> <mod> public </mod> void_type select <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Users </for> , <for> type_identifier fr </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Users . get <arg> ( string_literal ) </arg> </met> , fr ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <for> for ( <loc> <int> int </int> <var> i = decimal_integer_literal </var> ; </loc> <bin> i < <met> users . size <arg> ( ) </arg> </met> </bin> ; <upd> i ++ </upd> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> i + string_literal </bin> + <met> JSONObject . parseObject <arg> ( <met> <met> users . get <arg> ( i ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </for> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the comments in the ratings table based on $isbn$ ) and get all the data. The default setting is False for the label of existing multiple data, and True for the label of existing multiple data if the query result length is greater than 1. Return the rendered ""bookpage.html"", where the row parameter is the 0th element of the query result, and the get_more parameter is the label of whether there are multiple pieces of data.","public Object bookPage ( JdbcTemplate conn , String isbn , Model model ) { List values = conn . query ( "" select comments from ratings where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; boolean get_more = false ; if ( values . size ( ) > 1 ) { get_more = true ; } model . addAttribute ( "" row "" , values . get ( 0 ) ) ; model . addAttribute ( "" get_more "" , get_more ) ; return "" bookpage.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query the comments in the ratings table based on $isbn$ ) and get all the data. The default setting is False for the label of existing multiple data, and True for the label of existing multiple data if the query result length is greater than 1. Return the rendered ""bookpage.html"", where the row parameter is the 0th element of the query result, and the get_more parameter is the label of whether there are multiple pieces of data.","<met> <mod> public </mod> type_identifier bookPage <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> boolean_type <var> get_more = false </var> ; </loc> <if_> if <par> ( <bin> <met> values . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <exp> <ass> get_more = true </ass> ; </exp> } </blo> </if_> <exp> <met> model . addAttribute <arg> ( string_literal , <met> values . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , get_more ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: f the request method is' POST', set sql ( query the entry_date column in the transaction table based on $comment$, $item$, $payer$, $amount$ and $status$ ) , use $conn$ to execute SQL, get the first piece of data, and return the rendered 'transaction_form.html' page, where the date parameter should be assigned to the queried data.","public Object transactionEntry ( HttpRequest request , JdbcTemplate conn , String comment , String item , String payer , String amount , String status , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List entry_dates = conn . query ( "" select entry_date from transaction where comment=? and item=? and payer=? and amount=? and status=? "" , new Object [ ] { comment , item , payer , amount , status } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" date "" , entry_dates . get ( 0 ) ) ; return "" transaction_form.html "" ; } else { return null ; } }","Generate syntax code: f the request method is' POST', set sql ( query the entry_date column in the transaction table based on $comment$, $item$, $payer$, $amount$ and $status$ ) , use $conn$ to execute SQL, get the first piece of data, and return the rendered 'transaction_form.html' page, where the date parameter should be assigned to the queried data.","<met> <mod> public </mod> type_identifier transactionEntry <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier comment </for> , <for> type_identifier item </for> , <for> type_identifier payer </for> , <for> type_identifier amount </for> , <for> type_identifier status </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> entry_dates = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { comment , item , payer , amount , status } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> entry_dates . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query iduser in the exis_table table ) and get all the data. Convert each item of data in the query result to a dict type, store in list and return. If an exception occurs, return False.","public Object testAbort ( JdbcTemplate conn ) { try { List res_information = conn . query ( "" select iduser from exis_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return res_information ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query iduser in the exis_table table ) and get all the data. Convert each item of data in the query result to a dict type, store in list and return. If an exception occurs, return False.","<met> <mod> public </mod> type_identifier testAbort <for> ( <for> type_identifier conn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res_information = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res_information ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL ( get all the columns in the table ) with $conn$, get all the data, and return.","public List searchRecords ( JdbcTemplate conn ) { List records = conn . query ( "" select * from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return records ; }","Generate syntax code: Execute SQL ( get all the columns in the table ) with $conn$, get all the data, and return.","<met> <mod> public </mod> type_identifier searchRecords <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> records = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return records ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine with $elephantsql$ and execute the SQL statement ( query all columns in the Temperature_avg_table ) . Convert all the data obtained to the DataFrame form, where the column name is the keys of the query result. Finally, the processed data is returned.","public List fineTemp ( DataSource elephantsql , String summary ) { JdbcTemplate db = new JdbcTemplate ( elephantsql ) ; List df = db . query ( "" select * from temperature_avg_table "" , new BeanPropertyRowMapper ( List . class ) ) ; return df ; }","Generate syntax code: Get the database engine with $elephantsql$ and execute the SQL statement ( query all columns in the Temperature_avg_table ) . Convert all the data obtained to the DataFrame form, where the column name is the keys of the query result. Finally, the processed data is returned.","<met> <mod> public </mod> type_identifier fineTemp <for> ( <for> type_identifier elephantsql </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( elephantsql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> df = <met> db . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return df ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method to execute the SQL statement through $session$: Query the first piece of data in the $Teams$ table based on $team_id$. Use the commit ( ) method to update the data, make sure that $session$ is closed, and return the query results.","public Object getValue ( EntityManager session , Root < Object > Teams , String team_id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Teams ) . where ( cb . equal ( Teams . get ( "" team_id "" ) , team_id ) ) ; List < Object > outputs = session . createQuery ( cq ) . getResultList ( ) ; return outputs . get ( 0 ) ; }","Generate syntax code: Use the ORM method to execute the SQL statement through $session$: Query the first piece of data in the $Teams$ table based on $team_id$. Use the commit ( ) method to update the data, make sure that $session$ is closed, and return the query results.","<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Teams </for> , <for> type_identifier team_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Teams ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Teams . get <arg> ( string_literal ) </arg> </met> , team_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> outputs = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> outputs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in table based on $datum$ ) and get all the data. Return the query results.,"public List getOne ( JdbcTemplate conn , String datum ) { List rows = conn . query ( "" select * from table where datum= ? "" , new Object [ ] { datum } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in table based on $datum$ ) and get all the data. Return the query results.,"<met> <mod> public </mod> type_identifier getOne <for> ( <for> type_identifier conn </for> , <for> type_identifier datum </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datum } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: If $clause$ is not None, use $conn$ to execute SQL ( query all columns in the table_name table when clause_string equals $clause$ ) and get all the data. Use for loop to convert the data to list and return.","public List getAll ( JdbcTemplate conn , String clause ) { if ( clause != null ) { List table_names = conn . query ( "" select * from table_name where clause_string= ? "" , new Object [ ] { clause } , new BeanPropertyRowMapper ( List . class ) ) ; List table_l = new ArrayList ( ) ; for ( Object i : table_names ) { table_l . add ( i ) ; } return table_l ; } else { return null ; } }","Generate syntax code: If $clause$ is not None, use $conn$ to execute SQL ( query all columns in the table_name table when clause_string equals $clause$ ) and get all the data. Use for loop to convert the data to list and return.","<met> <mod> public </mod> type_identifier getAll <for> ( <for> type_identifier conn </for> , <for> type_identifier clause </for> ) </for> <blo> { <if_> if <par> ( <bin> clause != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> table_names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { clause } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> table_l = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : table_names ) <blo> { <exp> <met> table_l . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return table_l ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ ) , and get all the query results. If the query result length is less than 1, return the rendered ""apology.html"" page; otherwise, return the rendered ""results.html"" page and set the res parameter to the query result. If the request method is not ""POST"", return the rendered ""search.html"" page.","public Object search ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return "" apology.html "" ; } else { model . addAttribute ( "" res "" , res ) ; return "" results.html "" ; } } else { return "" search.html "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ ) , and get all the query results. If the query result length is less than 1, return the rendered ""apology.html"" page; otherwise, return the rendered ""results.html"" page and set the res parameter to the query result. If the request method is not ""POST"", return the rendered ""search.html"" page.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( query all columns in the FRC_ALL_TRADES table based on $evdate$ ) and get all the data. Finally, return all the query results.","public List getAllTrades ( JdbcTemplate conn , String evdate ) { List result_all_trades = conn . query ( "" select * from frc_all_trades where evdate= ? "" , new Object [ ] { evdate } , new BeanPropertyRowMapper ( List . class ) ) ; return result_all_trades ; }","Generate syntax code: Use $conn$ to execute the SQL ( query all columns in the FRC_ALL_TRADES table based on $evdate$ ) and get all the data. Finally, return all the query results.","<met> <mod> public </mod> type_identifier getAllTrades <for> ( <for> type_identifier conn </for> , <for> type_identifier evdate </for> ) </for> <blo> { <loc> type_identifier <var> result_all_trades = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { evdate } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result_all_trades ; </ret> } </blo> </met>"
"Generate origin code: If the request method is GET, return the rendered 'login.html'. Otherwise, use the java expression to set the SQL ( query the id in the $users$ table where username is $username$ and password is $password$ ) . Use $db$ to execute the SQL and get the first data. Return the rendered 'search.html' and passe the query result to the result parameter.","public Object login ( HttpRequest request , EntityManager db , Root < Object > users , String username , String password , Model model ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" login.html "" ; } else { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" username "" ) , username ) ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" password "" ) , password ) ) ; List < Object > results = db . createQuery ( cq ) . getResultList ( ) ; Object result = results . get ( 0 ) ; model . addAttribute ( "" result "" , result ) ; return "" search.html "" ; } }","Generate syntax code: If the request method is GET, return the rendered 'login.html'. Otherwise, use the java expression to set the SQL ( query the id in the $users$ table where username is $username$ and password is $password$ ) . Use $db$ to execute the SQL and get the first data. Return the rendered 'search.html' and passe the query result to the result parameter.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier username </for> , <for> type_identifier password </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , username ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , password ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$: Query all columns in the books table and get the first piece of data. If the length of the obtained data is less than or equal to 0, return False; otherwise render and return ""booklist.html"", where the books parameter is the obtained data.","public Object bookSearch ( JdbcTemplate conn , Model model ) { List books = conn . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return false ; } else { model . addAttribute ( "" books "" , books . get ( 0 ) ) ; return "" booklist.html "" ; } }","Generate syntax code: Execute SQL via $conn$: Query all columns in the books table and get the first piece of data. If the length of the obtained data is less than or equal to 0, return False; otherwise render and return ""booklist.html"", where the books parameter is the obtained data.","<met> <mod> public </mod> type_identifier bookSearch <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to query the first id statistic in the sightings table whose pokemon_id is $pokemon_id$ and return the pth element of the query result.,"public Object getTotalSpawnsCount ( JdbcTemplate conn , String pokemon_id ) { List result = conn . query ( "" select count(id) from sightings where pokemon_id = ? "" , new Object [ ] { pokemon_id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( result . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Use $conn$ to query the first id statistic in the sightings table whose pokemon_id is $pokemon_id$ and return the pth element of the query result.,"<met> <mod> public </mod> type_identifier getTotalSpawnsCount <for> ( <for> type_identifier conn </for> , <for> type_identifier pokemon_id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pokemon_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get all the columns in the 'my_table' based on $Date$ ) , get all the data, use for loop to store every item of queried data as list, and then return the list. If an exception occurs, return 500.","public Object postgresqlTrace ( JdbcTemplate conn , String Date ) { try { List res = conn . query ( "" select * from my_table where Date = ? "" , new Object [ ] { Date } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object item : res ) { result . add ( item ) ; } return result ; } catch ( Exception e ) { return 500 ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get all the columns in the 'my_table' based on $Date$ ) , get all the data, use for loop to store every item of queried data as list, and then return the list. If an exception occurs, return 500.","<met> <mod> public </mod> type_identifier postgresqlTrace <for> ( <for> type_identifier conn </for> , <for> type_identifier Date </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : res ) <blo> { <exp> <met> result . add <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Execute SQL statement via $conn$: Query all tablename in pg_tables table by $t$. For loop iterates through all query results and prints. Return all query results.,"public List get ( JdbcTemplate conn , String t ) { List tables = conn . query ( "" select tablename from pg_tables where t =? "" , new Object [ ] { t } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object table : tables ) { System . out . println ( table ) ; } return tables ; }",Generate syntax code: Execute SQL statement via $conn$: Query all tablename in pg_tables table by $t$. For loop iterates through all query results and prints. Return all query results.,"<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier conn </for> , <for> type_identifier t </for> ) </for> <blo> { <loc> type_identifier <var> tables = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { t } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier table : tables ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( table ) </arg> </met> ; </exp> } </blo> </enh> <ret> return tables ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to execute the SQL statement through $conn$: Query the first Id in the $persons$ table where Name is $name$. If the query result is empty, return None, otherwise return the 0th element of the query result.","public Object getPersonId ( EntityManager conn , Root < Object > persons , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( persons ) . where ( cb . equal ( persons . get ( "" name "" ) , name ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; if ( rows . isEmpty ( ) ) { return null ; } else { JSONObject firstRow = JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) ; return firstRow . get ( 0 ) ; } }","Generate syntax code: Use the java expression to execute the SQL statement through $conn$: Query the first Id in the $persons$ table where Name is $name$. If the query result is empty, return None, otherwise return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getPersonId <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> persons </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( persons ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> persons . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> firstRow = <met> JSONObject . parseObject <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <ret> return <met> firstRow . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the maximum value of the latest_date column in the account_latestfetchdate table ) and get all the query results. If the query result is empty, or the 0th element of the query result is empty, return None, otherwise return the query result.","public List execute ( JdbcTemplate conn ) { List max_date = conn . query ( "" select max(latest_date) from account_latestfetchdate "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( max_date . isEmpty ( ) ) { return null ; } else { return max_date ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the maximum value of the latest_date column in the account_latestfetchdate table ) and get all the query results. If the query result is empty, or the 0th element of the query result is empty, return None, otherwise return the query result.","<met> <mod> public </mod> type_identifier execute <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> max_date = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> max_date . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return max_date ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ connection to execute SQL statement ( get all columns in frame_roundtrip based on $name$ ) and get all the data, convert query result into dict, store it as list and return it.","public List testRoundtrip ( JdbcTemplate conn , String name ) { List query = conn . query ( "" select * from frame_roundtrip where name =? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }","Generate syntax code: Use $conn$ connection to execute SQL statement ( get all columns in frame_roundtrip based on $name$ ) and get all the data, convert query result into dict, store it as list and return it.","<met> <mod> public </mod> type_identifier testRoundtrip <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL statement: Query all columns in the record table through $prix$, $link$ and $id$. Use $conn$ connection to execute SQL statement to get all the data. Return the obtained data.","public List getUpdate ( JdbcTemplate conn , String prix , String link , String id ) { List res = conn . query ( "" select * from record where prix = ? and link = ? and id = ? "" , new Object [ ] { prix , link , id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up SQL statement: Query all columns in the record table through $prix$, $link$ and $id$. Use $conn$ connection to execute SQL statement to get all the data. Return the obtained data.","<met> <mod> public </mod> type_identifier getUpdate <for> ( <for> type_identifier conn </for> , <for> type_identifier prix </for> , <for> type_identifier link </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { prix , link , id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all columns in the DATABASES table based on $DATABASE_SERVER$ and $DATABASE_URI$ ) , execute SQL based on $conn$ and get the first piece of data, and return the data.","public Object createDatabase ( JdbcTemplate conn , String DATABASE_SERVER , String DATABASE_URI , String id ) { List log_starts = conn . query ( "" select * from DATABASES where DATABASE_SERVER=? and DATABASE_URI=? "" , new Object [ ] { DATABASE_SERVER , DATABASE_URI } , new BeanPropertyRowMapper ( List . class ) ) ; return log_starts . get ( 0 ) ; }","Generate syntax code: Set up SQL ( query all columns in the DATABASES table based on $DATABASE_SERVER$ and $DATABASE_URI$ ) , execute SQL based on $conn$ and get the first piece of data, and return the data.","<met> <mod> public </mod> type_identifier createDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier DATABASE_SERVER </for> , <for> type_identifier DATABASE_URI </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> log_starts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DATABASE_SERVER , DATABASE_URI } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> log_starts . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get email and password from the page. If the length is 0 when use $db$ to execute SQL ( query the data of id column in the users table based on email and password ) , return ""Incorrect Email or Password"". otherwise, return the jump command ""/ database"".","public Object processLogin ( HttpRequest request , JdbcTemplate db ) { Object email = request . form ( ) . get ( "" email "" ) ; Object password = request . form ( ) . get ( "" password "" ) ; List result = db . query ( "" select id from users where email = ?, and password = ? "" , new Object [ ] { email , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" Incorrect Email or Password. "" ; } else { return "" /database "" ; } }","Generate syntax code: Get email and password from the page. If the length is 0 when use $db$ to execute SQL ( query the data of id column in the users table based on email and password ) , return ""Incorrect Email or Password"". otherwise, return the jump command ""/ database"".","<met> <mod> public </mod> type_identifier processLogin <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> ) </for> <blo> { <loc> type_identifier <var> email = <met> <met> request . form <arg> ( ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> password = <met> <met> request . form <arg> ( ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to set up SQL query statement using the java expression as follows: Query all vendor with devid as $devid$ in the $mtable$ table, use the $conn$ connection to execute the SQL statement to get the data and return the query results stored as list. If Exception occurs, output the error message using the logging.error ( ) method.","public List < Object > mircoDevices ( EntityManager conn , Root < Object > mtable , String devid ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( mtable ) . where ( cb . equal ( mtable . get ( "" devid "" ) , devid ) ) ; List < Object > out = conn . createQuery ( cq ) . getResultList ( ) ; return out ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set up SQL query statement using the java expression as follows: Query all vendor with devid as $devid$ in the $mtable$ table, use the $conn$ connection to execute the SQL statement to get the data and return the query results stored as list. If Exception occurs, output the error message using the logging.error ( ) method.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> mircoDevices <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> mtable </for> , <for> type_identifier devid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( mtable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> mtable . get <arg> ( string_literal ) </arg> </met> , devid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> out = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the ""current_user"" obtained by $session$.get method is an empty list, return 'index' after processing using the url_for and redirect methods. Otherwise, execute SQL ( query all columns in Books ) with $conn$, get all the data and return.","public Object search ( JdbcTemplate conn , HttpSession session ) { if ( session . getAttribute ( "" current_user "" ) == null ) { return "" index "" ; } else { List results = conn . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } }","Generate syntax code: If the ""current_user"" obtained by $session$.get method is an empty list, return 'index' after processing using the url_for and redirect methods. Otherwise, execute SQL ( query all columns in Books ) with $conn$, get all the data and return.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier session </for> ) </for> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> == null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database based on $testing$. Use java expression to execute the SQL statement: Select all the data in the $t$ table where foo is $m_FOO$, and return all the query results.","public List testExpanding ( EntityManager testing , Root < Object > t , String m_FOO ) { CriteriaBuilder cb = testing . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( t ) . where ( cb . equal ( t . get ( "" foo "" ) , m_FOO ) ) ; List < Object > res = testing . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: connect to the database based on $testing$. Use java expression to execute the SQL statement: Select all the data in the $t$ table where foo is $m_FOO$, and return all the query results.","<met> <mod> public </mod> type_identifier testExpanding <for> ( <for> type_identifier testing </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> t </for> , <for> type_identifier m_FOO </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> testing . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( t ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> t . get <arg> ( string_literal ) </arg> </met> , m_FOO ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> testing . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Get the connection through $admin_engine$. Execute SQL ( query the val information in the DATABASE table based on $DATAid$ ) and get all data. Close the connection and return the query results.,"public List teardownDb ( DataSource admin_engine , String DATAid ) { JdbcTemplate conn = new JdbcTemplate ( admin_engine ) ; List valsql = conn . query ( "" select val from database where dataid= ? "" , new Object [ ] { DATAid } , new BeanPropertyRowMapper ( List . class ) ) ; return valsql ; }",Generate syntax code: Get the connection through $admin_engine$. Execute SQL ( query the val information in the DATABASE table based on $DATAid$ ) and get all data. Close the connection and return the query results.,"<met> <mod> public </mod> type_identifier teardownDb <for> ( <for> type_identifier admin_engine </for> , <for> type_identifier DATAid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( admin_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> valsql = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DATAid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return valsql ; </ret> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query the id in the $User$ table when openid equals $identity_url$ ) and get the first piece of data. If the query result is not None, return the query results. Otherwise, return 'create_profile' after being processed by redirect and url_for.","public Object queryLogin ( EntityManager conn , Root < Object > User , String identity_url ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" openid "" ) , identity_url ) ) ; List < Object > users = conn . createQuery ( cq ) . getResultList ( ) ; if ( users . isEmpty ( ) ) { return "" create_profile "" ; } else { return users . get ( 0 ) ; } }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query the id in the $User$ table when openid equals $identity_url$ ) and get the first piece of data. If the query result is not None, return the query results. Otherwise, return 'create_profile' after being processed by redirect and url_for.","<met> <mod> public </mod> type_identifier queryLogin <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier identity_url </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , identity_url ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $devices$ table based on the condition that controller is $idController$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result. Each cronologia_mac field is set to the value corresponding to the dictionary 'mac', and the devices_name field is set to the value corresponding to the dictionary' name'. And insert it into a list, and finally return the list.","public List listaCronologiaController ( EntityManager conn , Root < Object > devices , String idController ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( devices ) . where ( cb . equal ( devices . get ( "" controller "" ) , idController ) ) ; List < Object > recordQuery = conn . createQuery ( cq ) . getResultList ( ) ; List storyList = new ArrayList ( ) ; for ( Object record : recordQuery ) { JSONObject json = JSONObject . parseObject ( record . toString ( ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" mac "" , json . getString ( "" cronologia_mac "" ) ) ; jsonObject . put ( "" name "" , json . getString ( "" devices_name "" ) ) ; storyList . add ( json ) ; } return storyList ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $devices$ table based on the condition that controller is $idController$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result. Each cronologia_mac field is set to the value corresponding to the dictionary 'mac', and the devices_name field is set to the value corresponding to the dictionary' name'. And insert it into a list, and finally return the list.","<met> <mod> public </mod> type_identifier listaCronologiaController <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> devices </for> , <for> type_identifier idController </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( devices ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> devices . get <arg> ( string_literal ) </arg> </met> , idController ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recordQuery = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> storyList = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier record : recordQuery ) <blo> { <loc> type_identifier <var> json = <met> JSONObject . parseObject <arg> ( <met> record . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> json . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> json . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> storyList . add <arg> ( json ) </arg> </met> ; </exp> } </blo> </enh> <ret> return storyList ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the books table when title equals $myString$ ) and get all the data. Use for loop to print each item in the query results.,"public void bookQuery ( JdbcTemplate conn , String myString ) { List selections = conn . query ( "" select * from books where title = ? "" , new Object [ ] { myString } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object book : selections ) { System . out . println ( book ) ; } }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the books table when title equals $myString$ ) and get all the data. Use for loop to print each item in the query results.,"<met> <mod> public </mod> void_type bookQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier myString </for> ) </for> <blo> { <loc> type_identifier <var> selections = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { myString } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier book : selections ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( book ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, then use $connection$ to execute SQL ( query all columns in users through $username$ and $password$ ) and get the first piece of data. If the query result is empty, use redirect to return the 'index' spliced by url_for; otherwise, return the query result. If the request module sends the request in a GET way, render and return ""index.html"".","public Object index ( HttpRequest request , JdbcTemplate connection , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List users = connection . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return "" index "" ; } else { return users . get ( 0 ) ; } } else { return "" index.html "" ; } }","Generate syntax code: If the request module sends the request as post, then use $connection$ to execute SQL ( query all columns in users through $username$ and $password$ ) and get the first piece of data. If the query result is empty, use redirect to return the 'index' spliced by url_for; otherwise, return the query result. If the request module sends the request in a GET way, render and return ""index.html"".","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier connection </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> users = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the values column in the $ta$ table based on $id$ ) . Execute SQL through $conn$, get all the data, and return the query results.","public List markArticle ( EntityManager conn , Root < Object > ta , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ta ) . where ( cb . equal ( ta . get ( "" id "" ) , id ) ) ; List < Object > recs = conn . createQuery ( cq ) . getResultList ( ) ; return recs ; }","Generate syntax code: Set SQL based on the java expression ( query the values column in the $ta$ table based on $id$ ) . Execute SQL through $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier markArticle <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ta </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ta ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ta . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement ( query all columns in the books table based on $isbn$ and $title$ ) and get all the data. Use for loop iterate through the query results and print them.,"public void queryBooks ( JdbcTemplate conn , String isbn , String title ) { List res = conn . query ( "" select * from books where isbn = ? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : res ) { System . out . println ( i ) ; } }",Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query all columns in the books table based on $isbn$ and $title$ ) and get all the data. Use for loop iterate through the query results and print them.,"<met> <mod> public </mod> void_type queryBooks <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set the SQL statement to get all the columns in the universities table based on $motto$, and use the $conn$ connection to execute SQL and get the data. Use for loop to travers the execution result, print it, and return the execution result.","public List selectUniversity ( JdbcTemplate conn , String motto ) { List universities = conn . query ( "" select * from universities where motto =? "" , new Object [ ] { motto } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object uni : universities ) { System . out . println ( uni ) ; } return universities ; }","Generate syntax code: Set the SQL statement to get all the columns in the universities table based on $motto$, and use the $conn$ connection to execute SQL and get the data. Use for loop to travers the execution result, print it, and return the execution result.","<met> <mod> public </mod> type_identifier selectUniversity <for> ( <for> type_identifier conn </for> , <for> type_identifier motto </for> ) </for> <blo> { <loc> type_identifier <var> universities = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { motto } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier uni : universities ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( uni ) </arg> </met> ; </exp> } </blo> </enh> <ret> return universities ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL statement through $db$: Query all the isbn, title, author, year data in the books table. Use for loop iterate the query results and print the obtained data.","public void main ( JdbcTemplate db ) { List books = db . query ( "" select isbn, title, author, year from books "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object book : books ) { JSONObject json = JSONObject . parseObject ( book . toString ( ) ) ; System . out . println ( "" f "" + json . getString ( "" isbn "" ) + "" title "" + json . getString ( "" title "" ) + "" author "" + json . getString ( "" author "" ) + "" publication year "" + json . getString ( "" year "" ) ) ; } }","Generate syntax code: Execute SQL statement through $db$: Query all the isbn, title, author, year data in the books table. Use for loop iterate the query results and print the obtained data.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier db </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> db . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier book : books ) <blo> { <loc> type_identifier <var> json = <met> JSONObject . parseObject <arg> ( <met> book . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> <bin> <bin> <bin> <bin> <bin> string_literal + <met> json . getString <arg> ( string_literal ) </arg> </met> </bin> + string_literal </bin> + <met> json . getString <arg> ( string_literal ) </arg> </met> </bin> + string_literal </bin> + <met> json . getString <arg> ( string_literal ) </arg> </met> </bin> + string_literal </bin> + <met> json . getString <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $connection$ to query all ite in the db_cols table with label $label$, convert the query results into a list and return.","public List getItems ( JdbcTemplate connection , String label ) { List items = connection . query ( "" select ite from db_cols where label= ? "" , new Object [ ] { label } , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }","Generate syntax code: Use $connection$ to query all ite in the db_cols table with label $label$, convert the query results into a list and return.","<met> <mod> public </mod> type_identifier getItems <for> ( <for> type_identifier connection </for> , <for> type_identifier label </for> ) </for> <blo> { <loc> type_identifier <var> items = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { label } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $session$ ( query the first piece of title data in the commands table using $id$ ) , make sure $session$ is closed, and return all the query results.","public List countAllCommandsOnHost ( JdbcTemplate session , String id ) { List out = session . query ( "" select title from commands where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; }","Generate syntax code: Execute the SQL statement through $session$ ( query the first piece of title data in the commands table using $id$ ) , make sure $session$ is closed, and return all the query results.","<met> <mod> public </mod> type_identifier countAllCommandsOnHost <for> ( <for> type_identifier session </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> out = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> </met>"
"Generate origin code: Get the cursor with $conn$. Set up SQL with the % Operator: query the table_name in the tables where table_schema is $table_schema$. Execute the SQL using the cursor and get the first data. Print the query results and use the for loop to store the query results in a list. Finally, return list.","public List getTable ( JdbcTemplate conn , String table_schema ) { List rows = conn . query ( "" select table_name from tables where table_schema= ? "" , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rows . get ( 0 ) ) ; List table_list = new ArrayList ( ) ; JSONArray jsonArray = JSONObject . parseArray ( rows . get ( 0 ) . toString ( ) ) ; for ( Object o : jsonArray ) { table_list . add ( o ) ; } return table_list ; }","Generate syntax code: Get the cursor with $conn$. Set up SQL with the % Operator: query the table_name in the tables where table_schema is $table_schema$. Execute the SQL using the cursor and get the first data. Print the query results and use the for loop to store the query results in a list. Finally, return list.","<met> <mod> public </mod> type_identifier getTable <for> ( <for> type_identifier conn </for> , <for> type_identifier table_schema </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <loc> type_identifier <var> table_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> jsonArray = <met> JSONObject . parseArray <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier o : jsonArray ) <blo> { <exp> <met> table_list . add <arg> ( o ) </arg> </met> ; </exp> } </blo> </enh> <ret> return table_list ; </ret> } </blo> </met>"
"Generate origin code: If the request method to execute request is POST, use $conn$ to execute SQL ( query username in users based on $book_id$ ) , get the first piece of data, and finally return the data. Otherwise, return the rendered book.html.","public Object queryBook ( HttpRequest request , JdbcTemplate conn , String book_id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List usernames = conn . query ( "" select username from users where book_id= ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; return usernames . get ( 0 ) ; } else { return "" book.html "" ; } }","Generate syntax code: If the request method to execute request is POST, use $conn$ to execute SQL ( query username in users based on $book_id$ ) , get the first piece of data, and finally return the data. Otherwise, return the rendered book.html.","<met> <mod> public </mod> type_identifier queryBook <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> usernames = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> usernames . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the $conn$ cursor method to execute SQL ( get all the columns in mobile_homes where home is $home$ ) and get the first data, then use the for loop to convert each item of the query result to a list type and return the list content.","public List mobileHomesEndpoint ( JdbcTemplate conn , String home ) { List results = conn . query ( "" select * from mobile_homes where home= ? "" , new Object [ ] { home } , new BeanPropertyRowMapper ( List . class ) ) ; List mh_data = new ArrayList ( ) ; for ( Object result : results ) { mh_data . add ( result ) ; } return mh_data ; }","Generate syntax code: Use the $conn$ cursor method to execute SQL ( get all the columns in mobile_homes where home is $home$ ) and get the first data, then use the for loop to convert each item of the query result to a list type and return the list content.","<met> <mod> public </mod> type_identifier mobileHomesEndpoint <for> ( <for> type_identifier conn </for> , <for> type_identifier home </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { home } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> mh_data = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> mh_data . add <arg> ( result ) </arg> </met> ; </exp> } </blo> </enh> <ret> return mh_data ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all the query results of all the information in the datasourceId table based on $countTotal$ ) , and use for loop to insert the data one by one into a list, and return this list. If an Exception occurs during execution, return the 'error' that converted to list.","public Object getNA ( JdbcTemplate conn , String countTotal ) { try { List query = conn . query ( "" select * from datasourceid where counttotal= ? "" , new Object [ ] { countTotal } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object i : query ) { result . add ( i ) ; } return result ; } catch ( Exception e ) { return "" error "" ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all the query results of all the information in the datasourceId table based on $countTotal$ ) , and use for loop to insert the data one by one into a list, and return this list. If an Exception occurs during execution, return the 'error' that converted to list.","<met> <mod> public </mod> type_identifier getNA <for> ( <for> type_identifier conn </for> , <for> type_identifier countTotal </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { countTotal } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> result . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: connect to the database via $engine$, try to execute the SQL ( get all the columns in the Table according to $user$ ) and get all the data. Return the obtained result and print an exception if a ValueError exception occurs during execution.","public List updateTable ( DataSource engine , String user ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; try { List rs = con . query ( "" select * from table where user= ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: connect to the database via $engine$, try to execute the SQL ( get all the columns in the Table according to $user$ ) and get all the data. Return the obtained result and print an exception if a ValueError exception occurs during execution.","<met> <mod> public </mod> type_identifier updateTable <for> ( <for> type_identifier engine </for> , <for> type_identifier user </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL statement using $conn$ ( query all columns in the nodes where id_node is $id$ ) and get all the data, print the query results, and use jsonify to return the query results.","public JSONArray test ( JdbcTemplate conn , String id ) { List infor_node = conn . query ( "" select * from nodes where id_node= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( infor_node ) ; return JSONObject . parseArray ( infor_node . toString ( ) ) ; }","Generate syntax code: Execute the SQL statement using $conn$ ( query all columns in the nodes where id_node is $id$ ) and get all the data, print the query results, and use jsonify to return the query results.","<met> <mod> public </mod> type_identifier test <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> infor_node = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( infor_node ) </arg> </met> ; </exp> <ret> return <met> JSONObject . parseArray <arg> ( <met> infor_node . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $localhost$, use ORM method to execute SQL ( query all columns in the $File$ table according to the condition that id is $File_id$ ) , get the first piece of data, and return the rendered 'index.html' page, where the parameter files is the query results.","public String selectIndex ( EntityManager localhost , Root < Object > File , String File_id , Model model ) { CriteriaBuilder cb = localhost . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( File ) . where ( cb . equal ( File . get ( "" id "" ) , File_id ) ) ; List < Object > files = localhost . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" files "" , files ) ; return "" index.html "" ; }","Generate syntax code: Get the database engine through $localhost$, use ORM method to execute SQL ( query all columns in the $File$ table according to the condition that id is $File_id$ ) , get the first piece of data, and return the rendered 'index.html' page, where the parameter files is the query results.","<met> <mod> public </mod> type_identifier selectIndex <for> ( <for> type_identifier localhost </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> File </for> , <for> type_identifier File_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> localhost . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( File ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> File . get <arg> ( string_literal ) </arg> </met> , File_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> files = <met> <met> localhost . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , files ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use ORM to execute SQL statement via $session$: Query $Key$ table for the first data whose 'account' is $acc_name$. If the query result is empty, return False, and finally make sure that $session$ is turned off and return the value corresponding to key_id in the query result.","public Object getKeyId ( EntityManager session , Root < Object > Key , String acc_name ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Key ) . where ( cb . equal ( Key . get ( "" account "" ) , acc_name ) ) ; List < Object > keys = session . createQuery ( cq ) . getResultList ( ) ; if ( keys . isEmpty ( ) ) { return false ; } else { return JSONObject . parseObject ( keys . get ( 0 ) . toString ( ) ) . getString ( "" key_id "" ) ; } }","Generate syntax code: Use ORM to execute SQL statement via $session$: Query $Key$ table for the first data whose 'account' is $acc_name$. If the query result is empty, return False, and finally make sure that $session$ is turned off and return the value corresponding to key_id in the query result.","<met> <mod> public </mod> type_identifier getKeyId <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Key </for> , <for> type_identifier acc_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Key ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Key . get <arg> ( string_literal ) </arg> </met> , acc_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> keys = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> keys . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> keys . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $uri$. Try to establish a connection, execute the SQL statement ( query the id column in the ROLE table according to $user_name$ ) , get all the data, close the connection, and return the query results. If an Exception is caught, print the exception.","public List droUser ( DataSource uri , String user_name ) { try { JdbcTemplate conn = new JdbcTemplate ( uri ) ; List res = conn . query ( "" select id from role where user_name= ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Get the database engine through $uri$. Try to establish a connection, execute the SQL statement ( query the id column in the ROLE table according to $user_name$ ) , get all the data, close the connection, and return the query results. If an Exception is caught, print the exception.","<met> <mod> public </mod> type_identifier droUser <for> ( <for> type_identifier uri </for> , <for> type_identifier user_name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL: Query all data_col in the testtable table based on $id$. Each query is stored in list using for loop and the assertion is set to determine that the list length is not 0. Finally, return the stored list.","public List testOpt ( JdbcTemplate conn , String id ) { List data_colb = conn . query ( "" select data_col from testtable where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List data_colist = new ArrayList ( ) ; for ( Object i : data_colb ) { data_colist . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return data_colist ; }","Generate syntax code: Use $conn$ to execute SQL: Query all data_col in the testtable table based on $id$. Each query is stored in list using for loop and the assertion is set to determine that the list length is not 0. Finally, return the stored list.","<met> <mod> public </mod> type_identifier testOpt <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> data_colb = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> data_colist = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : data_colb ) <blo> { <exp> <met> data_colist . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data_colist ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the year information in the count_vectors table based on $corpusid$ ) and get all the query results. Use for loop to print each of these elements of the query results. Finally, return the query results.","public List loadSparsVectorDataStructures ( JdbcTemplate conn , String corpusid ) { List texts = conn . query ( "" select year from count_vectors where corpusid= ? "" , new Object [ ] { corpusid } , new BeanPropertyRowMapper ( List . class ) ) ; List years = new ArrayList ( ) ; for ( Object i : texts ) { years . add ( i ) ; } return years ; }","Generate syntax code: Use $conn$ to execute SQL ( query the year information in the count_vectors table based on $corpusid$ ) and get all the query results. Use for loop to print each of these elements of the query results. Finally, return the query results.","<met> <mod> public </mod> type_identifier loadSparsVectorDataStructures <for> ( <for> type_identifier conn </for> , <for> type_identifier corpusid </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { corpusid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> years = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : texts ) <blo> { <exp> <met> years . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return years ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to set up the SQL statement to get all the tasks in the $table$ based on $updatetime$. Use $conn$ connection to execute the SQL and get the data. Use for loop iterate through all the query results and print them.,"public void checkSelect ( EntityManager conn , Root < Object > table , String updatetime ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" updatetime "" ) , updatetime ) ) ; List < Object > out = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object t : out ) { System . out . println ( t ) ; } }",Generate syntax code: Use the java expression to set up the SQL statement to get all the tasks in the $table$ based on $updatetime$. Use $conn$ connection to execute the SQL and get the data. Use for loop iterate through all the query results and print them.,"<met> <mod> public </mod> void_type checkSelect <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier updatetime </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , updatetime ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> out = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier t : out ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( t ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( get the login column in the USER table based on $id$ ) and get all the data. Finally return the query results.,"public List getRecord ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select login from user where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Use $conn$ to execute SQL ( get the login column in the USER table based on $id$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier getRecord <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: query name in the users table where the user_id is $user$. Execute the SQL using $connect$ and get all the data. If the query result length is not 0, then return to rendered 'index.html' and pass the query result to the user parameter. Otherwise redirect to ""/login"" using redirect.","public String index ( JdbcTemplate connect , String user , Model model ) { List users = connect . query ( "" select name from users where user_id =? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return "" /login "" ; } else { model . addAttribute ( "" user "" , users ) ; return "" index.html "" ; } }","Generate syntax code: Set SQL: query name in the users table where the user_id is $user$. Execute the SQL using $connect$ and get all the data. If the query result length is not 0, then return to rendered 'index.html' and pass the query result to the user parameter. Otherwise redirect to ""/login"" using redirect.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier connect </for> , <for> type_identifier user </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> connect . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: In ORM, SQL is executed using $db$ ( query title information in $Question$ based on $question_id$ ) and get all the data. Set assertion to determine that the length of the query result is not 0. Use the for loop to print each item of data in the query results.","public void exampleQuery ( EntityManager db , Root < Object > Question , String question_id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Question ) . where ( cb . equal ( Question . get ( "" question_id "" ) , question_id ) ) ; List < Object > title = db . createQuery ( cq ) . getResultList ( ) ; assert title . size ( ) != 0 ; for ( Object res : title ) { System . out . println ( res ) ; } }","Generate syntax code: In ORM, SQL is executed using $db$ ( query title information in $Question$ based on $question_id$ ) and get all the data. Set assertion to determine that the length of the query result is not 0. Use the for loop to print each item of data in the query results.","<met> <mod> public </mod> void_type exampleQuery <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Question </for> , <for> type_identifier question_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Question ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Question . get <arg> ( string_literal ) </arg> </met> , question_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> title = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> title . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <enh> for ( type_identifier res : title ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Get the database engine through $db$, where the echo parameter is True, then connect to the database and execute the SQL ( get the webname column in the web table based on $url$ ) . Use for loop to store the 0th element of each item of the query result as list, and finally return the list contents""","public List selectValue ( DataSource db , String url ) { JdbcTemplate c = new JdbcTemplate ( db ) ; List results = c . query ( "" select webname from web where url = ? "" , new Object [ ] { url } , new BeanPropertyRowMapper ( List . class ) ) ; List webnames = new ArrayList ( ) ; for ( Object result : results ) { webnames . add ( JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ) ; } return webnames ; }","Generate syntax code: Get the database engine through $db$, where the echo parameter is True, then connect to the database and execute the SQL ( get the webname column in the web table based on $url$ ) . Use for loop to store the 0th element of each item of the query result as list, and finally return the list contents""","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db </for> , <for> type_identifier url </for> ) </for> <blo> { <loc> type_identifier <var> c = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> c . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { url } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> webnames = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> webnames . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return webnames ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the origin column of flights based on $destination$ ) , get all the data, use for loop to print the origin column data in f format for each item of the query result, and finally return the query result.","public List main ( JdbcTemplate conn , String destination ) { List flights = conn . query ( "" select origin from flights where destination= ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( JSONObject . parseObject ( flight . toString ( ) ) . getString ( "" origin "" ) ) ; } return flights ; }","Generate syntax code: Use $conn$ to execute SQL ( get the origin column of flights based on $destination$ ) , get all the data, use for loop to print the origin column data in f format for each item of the query result, and finally return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> flight . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return flights ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL statement through the $conn$ connection: Query all columns in the universities table where name is $university_name$ and get the first piece of data. Return the execution result.,"public List course ( JdbcTemplate conn , String university_name ) { List university = conn . query ( "" select * from universities where name= ? "" , new Object [ ] { university_name } , new BeanPropertyRowMapper ( List . class ) ) ; return university ; }",Generate syntax code: Execute the SQL statement through the $conn$ connection: Query all columns in the universities table where name is $university_name$ and get the first piece of data. Return the execution result.,"<met> <mod> public </mod> type_identifier course <for> ( <for> type_identifier conn </for> , <for> type_identifier university_name </for> ) </for> <blo> { <loc> type_identifier <var> university = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { university_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return university ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the chapters table based on $quiz_type$ ) and get all the data. If the query result is true, return the query result.","public List preProcess ( JdbcTemplate conn , String quiz_type ) { List results = conn . query ( "" select * from chapters where quiz_type = ? "" , new Object [ ] { quiz_type } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the chapters table based on $quiz_type$ ) and get all the data. If the query result is true, return the query result.","<met> <mod> public </mod> type_identifier preProcess <for> ( <for> type_identifier conn </for> , <for> type_identifier quiz_type </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { quiz_type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine with $db_string$ and make the connection, execute the SQL statement ( get the id_filme column in the Filme where titulo is $titulo$ ) and get all the data. Return the result of a query after disconnecting the database.","public List verificaIdFilme ( DataSource db_string , String titulo ) { JdbcTemplate connection = new JdbcTemplate ( db_string ) ; List results = connection . query ( "" select id_filme from filme where titulo = ? "" , new Object [ ] { titulo } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Get the database engine with $db_string$ and make the connection, execute the SQL statement ( get the id_filme column in the Filme where titulo is $titulo$ ) and get all the data. Return the result of a query after disconnecting the database.","<met> <mod> public </mod> type_identifier verificaIdFilme <for> ( <for> type_identifier db_string </for> , <for> type_identifier titulo </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { titulo } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Create the engine based on $sqlite$ and set the SQL through the java expression ( when time is $too_old$, query the id in the $sleep$ table ) . Execute the SQL and get all the data. Finally, each item of the data is printed through for loop.","public void query ( EntityManager sqlite , Root < Object > sleep , String too_old ) { CriteriaBuilder cb = sqlite . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( sleep ) . where ( cb . equal ( sleep . get ( "" time "" ) , too_old ) ) ; List < Object > idsleep = sqlite . createQuery ( cq ) . getResultList ( ) ; for ( Object cmd : idsleep ) { System . out . println ( cmd ) ; } }","Generate syntax code: Create the engine based on $sqlite$ and set the SQL through the java expression ( when time is $too_old$, query the id in the $sleep$ table ) . Execute the SQL and get all the data. Finally, each item of the data is printed through for loop.","<met> <mod> public </mod> void_type query <for> ( <for> type_identifier sqlite </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sleep </for> , <for> type_identifier too_old </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sqlite . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( sleep ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> sleep . get <arg> ( string_literal ) </arg> </met> , too_old ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> idsleep = <met> <met> sqlite . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier cmd : idsleep ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( cmd ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to set the SQL statement: Query the number of all columns from the table table, use $conn$ to execute the SQL statement to get all the data and return. If an Exception occurs, use logging.error ( ) to return exception information.","public List countTableRows ( JdbcTemplate conn ) { try { List res = conn . query ( "" select count(*) from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set the SQL statement: Query the number of all columns from the table table, use $conn$ to execute the SQL statement to get all the data and return. If an Exception occurs, use logging.error ( ) to return exception information.","<met> <mod> public </mod> type_identifier countTableRows <for> ( <for> type_identifier conn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Execute the SQL statement through $conn$ with the following contents: Query all the columns in samples based on $id$ and gets all the data. Use for loop iterate through the query results and print them. Then store the query results into list and return the contents of the list.,"public List getOtuId ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select * from samples where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List res_list = new ArrayList ( ) ; for ( Object row : res ) { System . out . println ( row ) ; res_list . add ( row ) ; } return res_list ; }",Generate syntax code: Execute the SQL statement through $conn$ with the following contents: Query all the columns in samples based on $id$ and gets all the data. Use for loop iterate through the query results and print them. Then store the query results into list and return the contents of the list.,"<met> <mod> public </mod> type_identifier getOtuId <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> <exp> <met> res_list . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res_list ; </ret> } </blo> </met>"
Generate origin code: Use $connection$ and the java expression to execute SQL: Get all the data in the $features$ table and return the obtained data.,"public List selectFile ( EntityManager connection , Root < Object > features , String too_old ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( features ) ; List < Object > features_res = connection . createQuery ( cq ) . getResultList ( ) ; return features_res ; }",Generate syntax code: Use $connection$ and the java expression to execute SQL: Get all the data in the $features$ table and return the obtained data.,"<met> <mod> public </mod> type_identifier selectFile <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> features </for> , <for> type_identifier too_old </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( features ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> features_res = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return features_res ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the TIMESTAMP column in the eq_eod_data table processed by the maximum function according to $id$ ) , get all the data, and finally return the 0th element of the 0th row of the query result.","public Object getLastloadedtime ( JdbcTemplate conn , String id ) { List ts = conn . query ( "" select max(timestamp) from eq_eod_data where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( ts . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Execute SQL with $conn$ ( get the TIMESTAMP column in the eq_eod_data table processed by the maximum function according to $id$ ) , get all the data, and finally return the 0th element of the 0th row of the query result.","<met> <mod> public </mod> type_identifier getLastloadedtime <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> ts . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: tep1: Execute SQL statement through $db$ connection ( query all columns in universities based on $university_name$ ) and get the first piece of data. Step2: Execute SQL statement through $db$ connection ( query columns in professors where uni_id is the id attribute in step1 query and l_name is $professor_name$ ) and get the first piece of data. Step3: Execute SQL statement through $db$ connection ( query all columns in the courses table where professor_id is the id attribute in step2 query result ) . Step4: Execute SQL statement through $db$ connection ( query all columns in publications where professor_id is the id attribute in step2 query result ) . Render and return 'professor.html', where the publications parameter is the query result of step4, the courses parameter is the query result of step3, the professor parameter is the query result of step2, and the university parameter is the query result of step1.","public String queryProfessor ( JdbcTemplate db , String university_name , String professor_name , Model model ) { List universitys = db . query ( "" select * from universities where name= ? "" , new Object [ ] { university_name } , new BeanPropertyRowMapper ( List . class ) ) ; String universityId = JSONObject . parseObject ( universitys . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; List professors = db . query ( "" select * from professors where uni_id=? and l_name=? "" , new Object [ ] { universityId , professor_name } , new BeanPropertyRowMapper ( List . class ) ) ; String professorId = JSONObject . parseObject ( professors . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; List courses = db . query ( "" select * from courses where professor_id= ? "" , new Object [ ] { professorId } , new BeanPropertyRowMapper ( List . class ) ) ; List publications = db . query ( "" select * from publications where professor_id= ? "" , new Object [ ] { professorId } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" publications "" , publications ) ; model . addAttribute ( "" courses "" , courses ) ; model . addAttribute ( "" professors "" , professors . get ( 0 ) ) ; model . addAttribute ( "" universitys "" , universitys . get ( 0 ) ) ; return "" professor.html "" ; }","Generate syntax code: tep1: Execute SQL statement through $db$ connection ( query all columns in universities based on $university_name$ ) and get the first piece of data. Step2: Execute SQL statement through $db$ connection ( query columns in professors where uni_id is the id attribute in step1 query and l_name is $professor_name$ ) and get the first piece of data. Step3: Execute SQL statement through $db$ connection ( query all columns in the courses table where professor_id is the id attribute in step2 query result ) . Step4: Execute SQL statement through $db$ connection ( query all columns in publications where professor_id is the id attribute in step2 query result ) . Render and return 'professor.html', where the publications parameter is the query result of step4, the courses parameter is the query result of step3, the professor parameter is the query result of step2, and the university parameter is the query result of step1.","<met> <mod> public </mod> type_identifier queryProfessor <for> ( <for> type_identifier db </for> , <for> type_identifier university_name </for> , <for> type_identifier professor_name </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> universitys = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { university_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> universityId = <met> <met> JSONObject . parseObject <arg> ( <met> <met> universitys . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> professors = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { universityId , professor_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> professorId = <met> <met> JSONObject . parseObject <arg> ( <met> <met> professors . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> courses = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { professorId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> publications = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { professorId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , publications ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , courses ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , <met> professors . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , <met> universitys . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $e$ to connect the database and execute SQL ( get the date column in the GBP table according to $id$ ) , get all the data, then use for loop to store each item of the query result as a list type and return.","public List getDates ( DataSource e , String id ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List dates = conn . query ( "" select date from GBP where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return dates ; }","Generate syntax code: Use $e$ to connect the database and execute SQL ( get the date column in the GBP table according to $id$ ) , get all the data, then use for loop to store each item of the query result as a list type and return.","<met> <mod> public </mod> type_identifier getDates <for> ( <for> type_identifier e </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> dates = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return dates ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ cursor method to execute SQL（get all the columns in the 'table_name' where name is $name$ ) and get all the data, and use the for loop to add and return the 0th, 1st, and 2nd elements of each item in the query result.","public Object sqlite3ViaIndex ( DataSource conn , String name ) { JdbcTemplate c = new JdbcTemplate ( conn ) ; List rows = c . query ( "" select * from table_name where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : rows ) { String start = JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) . toString ( ) ; Object stop = JSONObject . parseObject ( row . toString ( ) ) . get ( 1 ) ; Object score = JSONObject . parseObject ( row . toString ( ) ) . get ( 2 ) ; Object calc = start + stop + score ; return calc ; } }","Generate syntax code: Use the $conn$ cursor method to execute SQL（get all the columns in the 'table_name' where name is $name$ ) and get all the data, and use the for loop to add and return the 0th, 1st, and 2nd elements of each item in the query result.","<met> <mod> public </mod> type_identifier sqlite3ViaIndex <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> c = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows = <met> c . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <loc> type_identifier <var> start = <met> <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> stop = <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> score = <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> calc = <bin> <bin> start + stop </bin> + score </bin> </var> ; </loc> <ret> return calc ; </ret> } </blo> </enh> } </blo> </met>"
Generate origin code: Use java expressions to set SQL: Query the id in $tc$ when tconst equals $movieID$. Use $conn$ to execute SQL and get the first data. Return the 0th of the query results.,"public Object getMovieMain ( EntityManager conn , Root < Object > tc , String movieID ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tc ) . where ( cb . equal ( tc . get ( "" tconst "" ) , movieID ) ) ; List < Object > movie = conn . createQuery ( cq ) . getResultList ( ) ; return movie . get ( 0 ) ; }",Generate syntax code: Use java expressions to set SQL: Query the id in $tc$ when tconst equals $movieID$. Use $conn$ to execute SQL and get the first data. Return the 0th of the query results.,"<met> <mod> public </mod> type_identifier getMovieMain <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tc </for> , <for> type_identifier movieID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tc ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tc . get <arg> ( string_literal ) </arg> </met> , movieID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> movie = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> movie . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get all the columns in the books where isbn is $searchstring$, author is $searchstring$ and title is $searchstring$ ) and get all the data, and finally return the rendered ""search.html"" with the rbboks parameter as the result of the query.","public String search ( JdbcTemplate conn , String searchstring , Model model ) { List rbooks = conn . query ( "" select * from books where isbn=? and author =? and title =? "" , new Object [ ] { searchstring , searchstring , searchstring } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rbooks "" , rbooks ) ; return "" search.html "" ; }","Generate syntax code: Execute the SQL with $conn$ ( get all the columns in the books where isbn is $searchstring$, author is $searchstring$ and title is $searchstring$ ) and get all the data, and finally return the rendered ""search.html"" with the rbboks parameter as the result of the query.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier searchstring </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> rbooks = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { searchstring , searchstring , searchstring } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , rbooks ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get the tablename column in the 'table' table according to $table_id$ ) , get the first piece of data and return the query result. If an exception occurs during execution, the exception is printed.","public List searchTable ( JdbcTemplate conn , String table_id ) { try { List tb = conn . query ( "" select tablename from table where table_id= ? "" , new Object [ ] { table_id } , new BeanPropertyRowMapper ( List . class ) ) ; return tb ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get the tablename column in the 'table' table according to $table_id$ ) , get the first piece of data and return the query result. If an exception occurs during execution, the exception is printed.","<met> <mod> public </mod> type_identifier searchTable <for> ( <for> type_identifier conn </for> , <for> type_identifier table_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> tb = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return tb ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement ( based on all columns in the date_parse where the datetime is $datetime$ ) and get all the data, set the assertion that the return result is not an empty list, and then return the data.","public List containPercentsCharacterQuery ( JdbcTemplate conn , String datetime ) { List texts = conn . query ( "" select * from date_parse where datetime= ? "" , new Object [ ] { datetime } , new BeanPropertyRowMapper ( List . class ) ) ; assert texts . size ( ) != 0 ; return texts ; }","Generate syntax code: Use the $conn$ connection to execute the SQL statement ( based on all columns in the date_parse where the datetime is $datetime$ ) and get all the data, set the assertion that the return result is not an empty list, and then return the data.","<met> <mod> public </mod> type_identifier containPercentsCharacterQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier datetime </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datetime } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> texts . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return texts ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the drop_table according to $name_table$ ) , get all the data, and return the query result.","public List dropTable ( JdbcTemplate conn , String name_table ) { List result = conn . query ( "" select * from drop_table where name_table= ? "" , new Object [ ] { name_table } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the drop_table according to $name_table$ ) , get all the data, and return the query result.","<met> <mod> public </mod> type_identifier dropTable <for> ( <for> type_identifier conn </for> , <for> type_identifier name_table </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name_table } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: In for loop, for each item of data in $rows$, use $conn$ to query the name information in the $customer$ table based on that data, and finally add the query results to the list. Finally, all the data stored in list is returned.","public List testSqlite3 ( JdbcTemplate conn , List rows ) { List myname_list = new ArrayList ( ) ; for ( Object row : rows ) { List mynames = conn . query ( "" select name from customer where row= ? "" , new Object [ ] { row } , new BeanPropertyRowMapper ( List . class ) ) ; myname_list . add ( mynames ) ; } return myname_list ; }","Generate syntax code: In for loop, for each item of data in $rows$, use $conn$ to query the name information in the $customer$ table based on that data, and finally add the query results to the list. Finally, all the data stored in list is returned.","<met> <mod> public </mod> type_identifier testSqlite3 <for> ( <for> type_identifier conn </for> , <for> type_identifier rows </for> ) </for> <blo> { <loc> type_identifier <var> myname_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <loc> type_identifier <var> mynames = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { row } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> myname_list . add <arg> ( mynames ) </arg> </met> ; </exp> } </blo> </enh> <ret> return myname_list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the country information in the Aquastat table when mid_year is $year$ ) and get all the data. Store 0th element of each item in the query result into list. Put the list of oth element into the dictionary corresponding to ""country"". Finally, jsonify returns the processed dictionary.","public JSONObject showHdi ( JdbcTemplate conn , String year ) { List results = conn . query ( "" select country from aquastat where mid_year= ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; List countries = new ArrayList ( ) ; List hdi = new ArrayList ( ) ; for ( Object result : results ) { countries . add ( JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ) ; } JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" country "" , countries ) ; return jsonObject ; }","Generate syntax code: Use $conn$ to execute SQL ( query the country information in the Aquastat table when mid_year is $year$ ) and get all the data. Store 0th element of each item in the query result into list. Put the list of oth element into the dictionary corresponding to ""country"". Finally, jsonify returns the processed dictionary.","<met> <mod> public </mod> type_identifier showHdi <for> ( <for> type_identifier conn </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> countries = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> hdi = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> countries . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , countries ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all columns in the new_table_name table ) and get the first piece of data. * Return the query results. If the result appears, it will be returned directly.","public Object dropTable ( JdbcTemplate conn ) { try { List values = conn . query ( "" select * from new_table_name "" , new BeanPropertyRowMapper ( List . class ) ) ; return values . get ( 0 ) ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all columns in the new_table_name table ) and get the first piece of data. * Return the query results. If the result appears, it will be returned directly.","<met> <mod> public </mod> type_identifier dropTable <for> ( <for> type_identifier conn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> values . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL: query username in LoginData where Password is $Password$ and UserType is $UserType$. Execute SQL with $conn$ and get the first data. Finally, return the query results.","public Object searchUser ( JdbcTemplate conn , String Password , String UserType ) { List users = conn . query ( "" select username from LoginData where Password=? and UserType=? "" , new Object [ ] { Password , UserType } , new BeanPropertyRowMapper ( List . class ) ) ; return users . get ( 0 ) ; }","Generate syntax code: Set SQL: query username in LoginData where Password is $Password$ and UserType is $UserType$. Execute SQL with $conn$ and get the first data. Finally, return the query results.","<met> <mod> public </mod> type_identifier searchUser <for> ( <for> type_identifier conn </for> , <for> type_identifier Password </for> , <for> type_identifier UserType </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Password , UserType } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the 'table' column in the $tb$ table based on $col8$ ) . Execute SQL with $conn$ and get all the data, use for loop to traverse each query result, and insert the 0th element of each piece of data into list, and finally return the list.","public List iteritems ( EntityManager conn , Root < Object > tb , String col8 ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tb ) . where ( cb . equal ( tb . get ( "" col8 "" ) , col8 ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; List res = new ArrayList ( ) ; for ( Object row : result ) { Object key = JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ; res . add ( key ) ; } return res ; }","Generate syntax code: Set SQL based on the java expression ( query the 'table' column in the $tb$ table based on $col8$ ) . Execute SQL with $conn$ and get all the data, use for loop to traverse each query result, and insert the 0th element of each piece of data into list, and finally return the list.","<met> <mod> public </mod> type_identifier iteritems <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tb </for> , <for> type_identifier col8 </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tb ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tb . get <arg> ( string_literal ) </arg> </met> , col8 ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <loc> type_identifier <var> key = <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> res . add <arg> ( key ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the weburls table where url is $url$ ) and get all the data, then use the for loop to store the list type for each item of the query result, and finally return the length of the list content.","public int urIsInDatabase ( JdbcTemplate conn , String url ) { List results = conn . query ( "" select * from weburls where url = ? "" , new Object [ ] { url } , new BeanPropertyRowMapper ( List . class ) ) ; return results . size ( ) ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the weburls table where url is $url$ ) and get all the data, then use the for loop to store the list type for each item of the query result, and finally return the length of the list content.","<met> <mod> public </mod> <int> int </int> urIsInDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier url </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { url } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . size <arg> ( ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns of statusCode based on $stateId$ ) , get all the data, and finally return the obtained result.","public List getStateCode ( JdbcTemplate conn , String stateId ) { List res = conn . query ( "" select * from statuscode where stateid = ? "" , new Object [ ] { stateId } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns of statusCode based on $stateId$ ) , get all the data, and finally return the obtained result.","<met> <mod> public </mod> type_identifier getStateCode <for> ( <for> type_identifier conn </for> , <for> type_identifier stateId </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { stateId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query the ID in the POST where the id of blog is $BLOG_ID$ ) , execute the SQL statement with $conn$, and query the for loop iterates through all the query results and print them.","public void postIter ( JdbcTemplate conn , String BLOG_ID ) { List results = conn . query ( "" select id from post where blog_id= ? "" , new Object [ ] { BLOG_ID } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row ) ; } }","Generate syntax code: Set the SQL statement ( query the ID in the POST where the id of blog is $BLOG_ID$ ) , execute the SQL statement with $conn$, and query the for loop iterates through all the query results and print them.","<met> <mod> public </mod> void_type postIter <for> ( <for> type_identifier conn </for> , <for> type_identifier BLOG_ID </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { BLOG_ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $host$ to get the database engine, use orm's sessionmaker to bind $engine$, execute SQL through the Session method ( get all the columns processed by the counting method in the stucco_evolution based on $id$ ) , get all the data, and finally return the query result.","public List testEvolveCompat ( DataSource host , String id ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List rows = engine . query ( "" select count(*) from stucco_evolution where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }","Generate syntax code: Use $host$ to get the database engine, use orm's sessionmaker to bind $engine$, execute SQL through the Session method ( get all the columns processed by the counting method in the stucco_evolution based on $id$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier testEvolveCompat <for> ( <for> type_identifier host </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
Generate origin code: Try to use $conn$ to execute the SQL statement ( select all the columns in the books where isbn is $isbn$ ) and return with all the data. Returns False if an exception occurs.,"public Object selectValue ( JdbcTemplate conn , String isbn ) { try { List results = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try to use $conn$ to execute the SQL statement ( select all the columns in the books where isbn is $isbn$ ) and return with all the data. Returns False if an exception occurs.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL statement（Use the format ( ) function to format the output string and query all columns in the user where the id of user is $user_id$ ) , execute the SQL statement with the $conn$ connection to get all the data and return.","public List getDevtrafficData ( JdbcTemplate conn , String user_id ) { List userexin = conn . query ( "" select * from user where user_id= ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return userexin ; }","Generate syntax code: Set up the SQL statement（Use the format ( ) function to format the output string and query all columns in the user where the id of user is $user_id$ ) , execute the SQL statement with the $conn$ connection to get all the data and return.","<met> <mod> public </mod> type_identifier getDevtrafficData <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> userexin = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return userexin ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through the $conn$ connection, and the content is as follows: Query all year data in the tbook table through $title$, use % operator to match the conditions in the SQL string. Return None if the length of the query result is 0. Finally, return all the query results.","public List api ( JdbcTemplate conn , String title ) { List year = conn . query ( "" select year from tbook where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( year . isEmpty ( ) ) { return null ; } else { return year ; } }","Generate syntax code: Execute the SQL statement through the $conn$ connection, and the content is as follows: Query all year data in the tbook table through $title$, use % operator to match the conditions in the SQL string. Return None if the length of the query result is 0. Finally, return all the query results.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> year = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> year . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return year ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection. Set the SQL statement ( query all the columns in the cars table based on $value$ ) , execute the SQL and get all the data. Set the assertion to determine whether the query result length is equal to 1.","public void testFetchall ( JdbcTemplate conn , String value ) { List rows = conn . query ( "" select * from cars where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) == 1 ; }","Generate syntax code: Get the database engine and establish a connection. Set the SQL statement ( query all the columns in the cars table based on $value$ ) , execute the SQL and get all the data. Set the assertion to determine whether the query result length is equal to 1.","<met> <mod> public </mod> void_type testFetchall <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $DB$. Execute the SQL statement ( query the first name data in the sample_table table based on $id$ ) and return the query result.,"public Object main ( DataSource DB , String id ) { JdbcTemplate connection = new JdbcTemplate ( DB ) ; List outs = connection . query ( "" select name from sample_table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return outs . get ( 0 ) ; }",Generate syntax code: Get the database engine and establish a connection through $DB$. Execute the SQL statement ( query the first name data in the sample_table table based on $id$ ) and return the query result.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier DB </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( DB ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> outs = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> outs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request method of request is POST, use $conn$ to execute SQL ( get the words information in the messages table based on $channel$ ) and get all the data. Use list to separate the results, store the values of all result and print the dealt results. If it is not the POST method, pass $channel$ into the $load_home$ function and return.","public Object messagesInf ( HttpRequest request , JdbcTemplate conn , String channel , String load_home , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List messages_res = conn . query ( "" select words from messages where channel= ? "" , new Object [ ] { channel } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : messages_res ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" values "" ) ) ; } return null ; } else { model . addAttribute ( channel ) ; return load_home ; } }","Generate syntax code: If the request method of request is POST, use $conn$ to execute SQL ( get the words information in the messages table based on $channel$ ) and get all the data. Use list to separate the results, store the values of all result and print the dealt results. If it is not the POST method, pass $channel$ into the $load_home$ function and return.","<met> <mod> public </mod> type_identifier messagesInf <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier channel </for> , <for> type_identifier load_home </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> messages_res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { channel } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : messages_res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( channel ) </arg> </met> ; </exp> <ret> return load_home ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the pokemon_id column in the sightings table where the pokemon_id is $pid$ ) , further use for loop to store the 0th element of each item of the obtained data results as a list type, and then use for loop to judge each number in the range ( 1,152 ) . If it is not in the list content, convert these numbers to the list type and return.","public List getNonexistentPokemon ( JdbcTemplate conn , String pid ) { List list = conn . query ( "" select pokemon_id from sightings where pokemon_id= ? "" , new Object [ ] { pid } , new BeanPropertyRowMapper ( List . class ) ) ; List db_ids = new ArrayList ( ) ; for ( Object r : list ) { db_ids . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } List result = new ArrayList ( ) ; for ( int pokemon_id = 1 ; pokemon_id <= 152 ; pokemon_id ++ ) { for ( Object db_id : db_ids ) { if ( pokemon_id != Integer . parseInt ( db_id . toString ( ) ) ) { result . add ( pokemon_id ) ; } } } return result ; }","Generate syntax code: Use $conn$ to execute SQL ( get the pokemon_id column in the sightings table where the pokemon_id is $pid$ ) , further use for loop to store the 0th element of each item of the obtained data results as a list type, and then use for loop to judge each number in the range ( 1,152 ) . If it is not in the list content, convert these numbers to the list type and return.","<met> <mod> public </mod> type_identifier getNonexistentPokemon <for> ( <for> type_identifier conn </for> , <for> type_identifier pid </for> ) </for> <blo> { <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> db_ids = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : list ) <blo> { <exp> <met> db_ids . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <for> for ( <loc> <int> int </int> <var> pokemon_id = decimal_integer_literal </var> ; </loc> <bin> pokemon_id <= decimal_integer_literal </bin> ; <upd> pokemon_id ++ </upd> ) <blo> { <enh> for ( type_identifier db_id : db_ids ) <blo> { <if_> if <par> ( <bin> pokemon_id != <met> Integer . parseInt <arg> ( <met> db_id . toString <arg> ( ) </arg> </met> ) </arg> </met> </bin> ) </par> <blo> { <exp> <met> result . add <arg> ( pokemon_id ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </enh> } </blo> </for> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Try to use $session$ to connect the database and execute SQL ( get all the columns in the test_users table where user_id is $uid$ ) , get all the data, and return the query results; otherwise, pass it.","public List getUsers ( DataSource session , String uid ) { try { JdbcTemplate engine = new JdbcTemplate ( session ) ; List users = engine . query ( "" select * from test_users where user_id= ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; return users ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $session$ to connect the database and execute SQL ( get all the columns in the test_users table where user_id is $uid$ ) , get all the data, and return the query results; otherwise, pass it.","<met> <mod> public </mod> type_identifier getUsers <for> ( <for> type_identifier session </for> , <for> type_identifier uid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( session ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> users = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return users ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $conn$ connection to query all columns in the sci_mod table with id as $id$ and get all the data. Use for loop iterate through the query results and print them. Return all the query results.,"public List images ( JdbcTemplate conn , String id ) { List irs = conn . query ( "" select * from sci_mod where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : irs ) { System . out . println ( row ) ; } return irs ; }",Generate syntax code: Use $conn$ connection to query all columns in the sci_mod table with id as $id$ and get all the data. Use for loop iterate through the query results and print them. Return all the query results.,"<met> <mod> public </mod> type_identifier images <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> irs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : irs ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return irs ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the books table based on $search$ ) , get the first query result, and return the rendered ""search.html"" page, where the parameter rows is the query result; otherwise, return the rendered ""error.html"" page, where the parameter message is set to ""Sorry"".","public String search ( HttpRequest request , JdbcTemplate conn , String search , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from books where search = ? "" , new Object [ ] { search } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , rows . get ( 0 ) ) ; return "" search.html "" ; } else { return "" error.html "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the books table based on $search$ ) , get the first query result, and return the rendered ""search.html"" page, where the parameter rows is the query result; otherwise, return the rendered ""error.html"" page, where the parameter message is set to ""Sorry"".","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier search </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { search } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $devices$ table based on $controller$ ) . Execute SQL through $conn$, get all the data, and return the rendered ""story.html"" page, where the lista parameter is set to the query result.","public String listaCronologiaControllerWeb ( EntityManager conn , Root < Object > devices , String controller , Model model ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( devices ) . where ( cb . equal ( devices . get ( "" controller "" ) , controller ) ) ; List < Object > recordQuery = conn . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" lista "" , recordQuery ) ; return "" story.html "" ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $devices$ table based on $controller$ ) . Execute SQL through $conn$, get all the data, and return the rendered ""story.html"" page, where the lista parameter is set to the query result.","<met> <mod> public </mod> type_identifier listaCronologiaControllerWeb <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> devices </for> , <for> type_identifier controller </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( devices ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> devices . get <arg> ( string_literal ) </arg> </met> , controller ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recordQuery = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , recordQuery ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the Bars table according to $style$ ) , get all the query results, use for loop to convert each of the query results into dict, store them in list, and return this list.","public List getBars ( JdbcTemplate conn , String style ) { List rs = conn . query ( "" select * from bars where style= ? "" , new Object [ ] { style } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the Bars table according to $style$ ) , get all the query results, use for loop to convert each of the query results into dict, store them in list, and return this list.","<met> <mod> public </mod> type_identifier getBars <for> ( <for> type_identifier conn </for> , <for> type_identifier style </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { style } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$. Try to query all columns in the policy table with p_code as $p_code$, get all data and return all query results. If SQLAlchemyError exception occurs, print the exception message.","public List predictByKnn ( DataSource engine , String p_code ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; try { List info = conn . query ( "" select * from policy where p_code = ? "" , new Object [ ] { p_code } , new BeanPropertyRowMapper ( List . class ) ) ; return info ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Connect to the database through $engine$. Try to query all columns in the policy table with p_code as $p_code$, get all data and return all query results. If SQLAlchemyError exception occurs, print the exception message.","<met> <mod> public </mod> type_identifier predictByKnn <for> ( <for> type_identifier engine </for> , <for> type_identifier p_code </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> info = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { p_code } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return info ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: SETP1: set SQL ( query all the books columns where isbn is $isbn$ ) , execute the SQL statement with $DB$ and get all the query results. If the query result is None, then use jsonify to return ( {""error"": ""Invalid ISBN""}. Otherwise, get the value corresponding to 'id' in the query result. SETP2: execute SQL using $db$ ( query all columns of reviews when the book_id equals the value of 'id' ) and fetch all the data. If the fetched data is not None, the for loop is used to count the rows. The 'title' and 'author' values of the query result in STEP1 are used as the corresponding values for the 'title' and 'author' keywords in the dictionary, respectively. The value of 'review_count' in the dictionary is the result of the query in STEP2. Finally, use jsonify to return the processed dictionary.","public JSONObject selectValue ( JdbcTemplate db , String isbn ) { List book = db . query ( "" select * from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book . isEmpty ( ) ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Invalid ISBN "" ) ; return jsonObject ; } else { String book_id = JSONObject . parseObject ( book . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; List reviews = db . query ( "" select * from reviews where book_id= ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; int count = 0 ; if ( ! reviews . isEmpty ( ) ) { for ( Object review : reviews ) { count += 1 ; } } JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" title "" , JSONObject . parseObject ( book . get ( 0 ) . toString ( ) ) . getString ( "" title "" ) ) ; jsonObject . put ( "" author "" , JSONObject . parseObject ( book . get ( 0 ) . toString ( ) ) . getString ( "" author "" ) ) ; jsonObject . put ( "" review_count "" , count ) ; return jsonObject ; } }","Generate syntax code: SETP1: set SQL ( query all the books columns where isbn is $isbn$ ) , execute the SQL statement with $DB$ and get all the query results. If the query result is None, then use jsonify to return ( {""error"": ""Invalid ISBN""}. Otherwise, get the value corresponding to 'id' in the query result. SETP2: execute SQL using $db$ ( query all columns of reviews when the book_id equals the value of 'id' ) and fetch all the data. If the fetched data is not None, the for loop is used to count the rows. The 'title' and 'author' values of the query result in STEP1 are used as the corresponding values for the 'title' and 'author' keywords in the dictionary, respectively. The value of 'review_count' in the dictionary is the result of the query in STEP2. Finally, use jsonify to return the processed dictionary.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> else <blo> { <loc> type_identifier <var> book_id = <met> <met> JSONObject . parseObject <arg> ( <met> <met> book . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> reviews = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> count = decimal_integer_literal </var> ; </loc> <if_> if <par> ( <una> ! <met> reviews . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <enh> for ( type_identifier review : reviews ) <blo> { <exp> <ass> count += decimal_integer_literal </ass> ; </exp> } </blo> </enh> } </blo> </if_> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> book . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> book . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , count ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the gamecategorymap_id column in the GameCategoryMap table where game_id is $gid$ and category_id is $cid$ ) and get the first row of data. If the result is true, convert the 0th element of the query result to list and return; otherwise, return None.","public Object gamecategorymapId ( JdbcTemplate conn , String gid , String cid ) { List results = conn . query ( "" select gamecategorymap_id from gamecategorymap where game_id=? and category_id=? "" , new Object [ ] { gid , cid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { Object gamecategorymap_id = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; return gamecategorymap_id ; } }","Generate syntax code: Use $conn$ to execute SQL ( get the gamecategorymap_id column in the GameCategoryMap table where game_id is $gid$ and category_id is $cid$ ) and get the first row of data. If the result is true, convert the 0th element of the query result to list and return; otherwise, return None.","<met> <mod> public </mod> type_identifier gamecategorymapId <for> ( <for> type_identifier conn </for> , <for> type_identifier gid </for> , <for> type_identifier cid </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { gid , cid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> gamecategorymap_id = <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return gamecategorymap_id ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to get the database engine. Use sessionmaker ( ) to create a configured DBSession class and bind the database engine through 'bind'. Instantiate DBSession, and then execute the SQL statement: Query all NAMES data in the driver table. Return the query results.","public List init ( DataSource db ) { JdbcTemplate session = new JdbcTemplate ( db ) ; List items = session . query ( "" select NAMES from driver "" , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }","Generate syntax code: Use $db$ to get the database engine. Use sessionmaker ( ) to create a configured DBSession class and bind the database engine through 'bind'. Instantiate DBSession, and then execute the SQL statement: Query all NAMES data in the driver table. Return the query results.","<met> <mod> public </mod> type_identifier init <for> ( <for> type_identifier db </for> ) </for> <blo> { <loc> type_identifier <var> session = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> items = <met> session . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine through $sqlite$. Use the engine to execute SQL ( query all columns in the myengine table based on $activities$ ) and get all the data. Finally, return the query result.","public List testMinimal ( DataSource sqlite , String activities ) { JdbcTemplate e = new JdbcTemplate ( sqlite ) ; List data = e . query ( "" select * from myengine where activities= ? "" , new Object [ ] { activities } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }","Generate syntax code: Create the database engine through $sqlite$. Use the engine to execute SQL ( query all columns in the myengine table based on $activities$ ) and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier testMinimal <for> ( <for> type_identifier sqlite </for> , <for> type_identifier activities </for> ) </for> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( sqlite ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> e . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { activities } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Create a cursor object through $conn$, and execute a SQL through the cursor object: Query all the name in the customer table, print the query results and return them.","public List testSqlite3 ( DataSource conn ) { JdbcTemplate e = new JdbcTemplate ( conn ) ; List data = e . query ( "" select * from myengine where activities= ? "" , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }","Generate syntax code: Create a cursor object through $conn$, and execute a SQL through the cursor object: Query all the name in the customer table, print the query results and return them.","<met> <mod> public </mod> type_identifier testSqlite3 <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> e . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the active_stats table according to $value$ ) , get all the query results, use for loop traverse all obtained query results, insert each piece of data into a list, and return the list.","public List getActiveStats ( JdbcTemplate conn , String value ) { List result_proxy = conn . query ( "" select * from active_stats where value= ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List active_stats_df = new ArrayList ( ) ; for ( Object row : result_proxy ) { active_stats_df . add ( row ) ; } return active_stats_df ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the active_stats table according to $value$ ) , get all the query results, use for loop traverse all obtained query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getActiveStats <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> result_proxy = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> active_stats_df = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result_proxy ) <blo> { <exp> <met> active_stats_df . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return active_stats_df ; </ret> } </blo> </met>"
"Generate origin code: Get database engine by $db_string$, set SQL statement ( query all columns in tb_vendedores table based on $id$ ) , execute SQL and get all the data. Return the query result.","public List selectValue ( DataSource db_string , String id ) { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List vendedores = db . query ( "" select * from tb_vendedores where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return vendedores ; }","Generate syntax code: Get database engine by $db_string$, set SQL statement ( query all columns in tb_vendedores table based on $id$ ) , execute SQL and get all the data. Return the query result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db_string </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> vendedores = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return vendedores ; </ret> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Execute the SQL statement: Query 'name' information in the Beer table, get all the data, store the query results as list and return.","public List getBeersName ( DataSource engine ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select name from beer "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect to the database based on $engine$. Execute the SQL statement: Query 'name' information in the Beer table, get all the data, store the query results as list and return.","<met> <mod> public </mod> type_identifier getBeersName <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: get the connection with $engine$; set SQL: Query the number in the bike_dynamic table based on the $bike_stands$, $last_update$ and $bikes$; execute SQL and get all the data; finally, return the query results. If an exception occurs, the exception information should be printed after ""An error occurred:"".","public List selectValue ( DataSource engine , String bike_stands , String last_update , String bikes ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List bike = conn . query ( "" select number from bike_dynamic where bike_stands=? and last_update=? and bikes=? "" , new Object [ ] { bike_stands , last_update , bikes } , new BeanPropertyRowMapper ( List . class ) ) ; return bike ; } catch ( Exception e ) { System . out . println ( "" An error occurred: "" + e ) ; return null ; } }","Generate syntax code: Try to execute the following code: get the connection with $engine$; set SQL: Query the number in the bike_dynamic table based on the $bike_stands$, $last_update$ and $bikes$; execute SQL and get all the data; finally, return the query results. If an exception occurs, the exception information should be printed after ""An error occurred:"".","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier bike_stands </for> , <for> type_identifier last_update </for> , <for> type_identifier bikes </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> bike = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bike_stands , last_update , bikes } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return bike ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> string_literal + e </bin> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query the username column in the users table based on $password$ ) , get all the query results, and return them. Otherwise, return the rendered ""register.html"" page.","public Object register ( HttpRequest request , JdbcTemplate conn , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select username from users where password= ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return "" register.html "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query the username column in the users table based on $password$ ) , get all the query results, and return them. Otherwise, return the rendered ""register.html"" page.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $engine$ to connect the database, set the SQL statement to: Query all the columns in the sometable table whose id is $id$, execute SQL, get all the information, and set the assertion to determine that the length of the execution result is not 0.","public void selectRecord ( DataSource engine , String summary ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select * from sometable where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; }","Generate syntax code: Use $engine$ to connect the database, set the SQL statement to: Query all the columns in the sometable table whose id is $id$, execute SQL, get all the information, and set the assertion to determine that the length of the execution result is not 0.","<met> <mod> public </mod> void_type selectRecord <for> ( <for> type_identifier engine </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Get the database engine through $url$. Set the SQL statement ( query all columns in the 'testtable' table where id is $id$ ) , execute SQL, get all the data, and return the 0th element of the execution result.","public Object searchDefaultTable ( DataSource url , String id ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List results = engine . query ( "" select * from testtable where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Get the database engine through $url$. Set the SQL statement ( query all columns in the 'testtable' table where id is $id$ ) , execute SQL, get all the data, and return the 0th element of the execution result.","<met> <mod> public </mod> type_identifier searchDefaultTable <for> ( <for> type_identifier url </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute SQL based on the java expression ( get all columns in the $counters$ table with counter_id as $counter_id$ ) and use $conn$ to execute SQL to get all the data. Finally set the assertion that the length of the query result is not 0.,"public void getSource ( EntityManager conn , Root < Object > counters , String counter_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( counters ) . where ( cb . equal ( counters . get ( "" url "" ) , counter_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; assert results . size ( ) != 0 ; }",Generate syntax code: Execute SQL based on the java expression ( get all columns in the $counters$ table with counter_id as $counter_id$ ) and use $conn$ to execute SQL to get all the data. Finally set the assertion that the length of the query result is not 0.,"<met> <mod> public </mod> void_type getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> counters </for> , <for> type_identifier counter_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( counters ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> counters . get <arg> ( string_literal ) </arg> </met> , counter_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all columns in the flights table with id as $flight_id$ and get the first piece of message. If the query result exists, render and return 'success.html'; if Exception occurs, print the exception message.","public String bookFlight ( JdbcTemplate conn , String flight_id ) { try { List rs = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! rs . isEmpty ( ) ) { return "" success.html "" ; } else { return null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to query all columns in the flights table with id as $flight_id$ and get the first piece of message. If the query result exists, render and return 'success.html'; if Exception occurs, print the exception message.","<met> <mod> public </mod> type_identifier bookFlight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> rs . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db$. Execute the SQL statement ( query all the columns in the Alltypes table ) , execute the SQL statement to get the first piece of data, close the database connection, and return the query results after jsonify processing.","public JSONObject getState ( DataSource db ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List res = conn . query ( "" select * from Alltypes "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( res . get ( 0 ) . toString ( ) ) ; }","Generate syntax code: Get the database engine and establish a connection through $db$. Execute the SQL statement ( query all the columns in the Alltypes table ) , execute the SQL statement to get the first piece of data, close the database connection, and return the query results after jsonify processing.","<met> <mod> public </mod> type_identifier getState <for> ( <for> type_identifier db </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $localhost$. Set the SQL statement ( query the user data in the mysql table according to $value$ ) , execute SQL to get all the data, close the database connection, and return the execution result.","public List index ( DataSource localhost , String value ) { JdbcTemplate connection = new JdbcTemplate ( localhost ) ; List results = connection . query ( "" select user from mysql where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Get the database engine and establish a connection through $localhost$. Set the SQL statement ( query the user data in the mysql table according to $value$ ) , execute SQL to get all the data, close the database connection, and return the execution result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier localhost </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( localhost ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Try to set up the SQL statement: Use $db$ to query the table_name data in the 'tables' table, use $session$ to execute the SQL statement and get all the query data. Convert each item of the query results into dict to store it as list and return it. If Exception occurs, print the exception message and finally make sure $session$ is closed.","public List getAllTableIfExists ( JdbcTemplate session , String db ) { try { List out = session . query ( "" select table_name from tables where db = ? "" , new Object [ ] { db } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set up the SQL statement: Use $db$ to query the table_name data in the 'tables' table, use $session$ to execute the SQL statement and get all the query data. Convert each item of the query results into dict to store it as list and return it. If Exception occurs, print the exception message and finally make sure $session$ is closed.","<met> <mod> public </mod> type_identifier getAllTableIfExists <for> ( <for> type_identifier session </for> , <for> type_identifier db </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> out = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up sql ( query the pass_ssid column in the ssid_array table according to $trip_id$ ) , use $conn$ to execute SQL, get all the query results, and return the 0th data of the query results.","public Object getSSIDArray ( JdbcTemplate conn , String trip_id ) { List row = conn . query ( "" select pass_ssid from ssid_array where trip_id= ? "" , new Object [ ] { trip_id } , new BeanPropertyRowMapper ( List . class ) ) ; return row . get ( 0 ) ; }","Generate syntax code: Set up sql ( query the pass_ssid column in the ssid_array table according to $trip_id$ ) , use $conn$ to execute SQL, get all the query results, and return the 0th data of the query results.","<met> <mod> public </mod> type_identifier getSSIDArray <for> ( <for> type_identifier conn </for> , <for> type_identifier trip_id </for> ) </for> <blo> { <loc> type_identifier <var> row = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { trip_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> row . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the user_table according to $dirty$ ) , get all the data, and set the assertion to determine whether the query result length is greater than 0.","public void testIsModified ( JdbcTemplate conn , String dirty ) { List ch = conn . query ( "" select * from user_table where dirty= ? "" , new Object [ ] { dirty } , new BeanPropertyRowMapper ( List . class ) ) ; assert ch . size ( ) > 0 ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the user_table according to $dirty$ ) , get all the data, and set the assertion to determine whether the query result length is greater than 0.","<met> <mod> public </mod> void_type testIsModified <for> ( <for> type_identifier conn </for> , <for> type_identifier dirty </for> ) </for> <blo> { <loc> type_identifier <var> ch = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dirty } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> ch . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Open and read the file ""flights.csv"" with the 'open' statement, use for loop to traverse the read file, and get the value of each destination and duration: Use $conn$ to execute SQL ( query all columns in the flights table according to destination and duration ) , get all the query results, and print them.","public void main ( JdbcTemplate conn ) { String filePath = "" flights.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String destination = sc . nextLine ( ) ; String duration = sc . nextLine ( ) ; List query = conn . query ( "" select * from flights where destination = ? and duration = ? "" , new Object [ ] { destination , duration } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( query ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open and read the file ""flights.csv"" with the 'open' statement, use for loop to traverse the read file, and get the value of each destination and duration: Use $conn$ to execute SQL ( query all columns in the flights table according to destination and duration ) , get all the query results, and print them.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> destination = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> duration = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination , duration } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( query ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement to: query all columns in the one_row table through $name$, use $conn$ connection to execute the SQL statement to get all the data, set the assertion to determine the length of the returned result to 1, set the assertion to determine the length of the 0th element of the returned result to 1""","public void testBasicQuery ( JdbcTemplate conn , String name ) { List rows = conn . query ( "" select * from one_row where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) == 1 ; assert JSONObject . parseArray ( rows . get ( 0 ) . toString ( ) ) . size ( ) == 1 ; }","Generate syntax code: Set the SQL statement to: query all columns in the one_row table through $name$, use $conn$ connection to execute the SQL statement to get all the data, set the assertion to determine the length of the returned result to 1, set the assertion to determine the length of the 0th element of the returned result to 1""","<met> <mod> public </mod> void_type testBasicQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ass> assert <bin> <met> <met> JSONObject . parseArray <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Use $connection_string$ to get the database engine and connect the database, try to execute SQL ( get the data column in the sql table according to $name$ ) , get all the data, return the query results, and finally ensure that the connection is closed.","public List getData ( DataSource connection_string , String name ) { JdbcTemplate conn = new JdbcTemplate ( connection_string ) ; try { List datas = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return datas ; } finally { return null ; } }","Generate syntax code: Use $connection_string$ to get the database engine and connect the database, try to execute SQL ( get the data column in the sql table according to $name$ ) , get all the data, return the query results, and finally ensure that the connection is closed.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier connection_string </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( connection_string ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> datas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return datas ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Use ORM method and $conn$ to execute SQ ( query the col5 column in the $Event$ table according to $col3$ ) , get all the queried data, use for loop to convert each item of the query result into dict, store it in list and return.","public List event ( EntityManager conn , Root < Object > Event , String col3 ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Event ) . where ( cb . equal ( Event . get ( "" col3 "" ) , col3 ) ) ; List < Object > event = conn . createQuery ( cq ) . getResultList ( ) ; return event ; }","Generate syntax code: Use ORM method and $conn$ to execute SQ ( query the col5 column in the $Event$ table according to $col3$ ) , get all the queried data, use for loop to convert each item of the query result into dict, store it in list and return.","<met> <mod> public </mod> type_identifier event <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Event </for> , <for> type_identifier col3 </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Event ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Event . get <arg> ( string_literal ) </arg> </met> , col3 ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> event = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return event ; </ret> } </blo> </met>"
Generate origin code: Connect to the database according to $engine$. Execute the SQL statement in ORM with the contents: get all the data in the $User$ based on $lastname$. Set the length of the result returned by the assertion determination to be 2.,"public void testBulkUpdate ( EntityManager engine , Root < Object > User , String lastname ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" lastname "" ) , lastname ) ) ; List < Object > values = engine . createQuery ( cq ) . getResultList ( ) ; assert values . size ( ) == 2 ; }",Generate syntax code: Connect to the database according to $engine$. Execute the SQL statement in ORM with the contents: get all the data in the $User$ based on $lastname$. Set the length of the result returned by the assertion determination to be 2.,"<met> <mod> public </mod> void_type testBulkUpdate <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier lastname </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , lastname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> values . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: If the request module sends the request as GET, render and return 'login.html'. Otherwise, execute SQL ( query all columns in login where username is $username$ ) using the $conn$ connection and get all the data back to the query.","public Object queryLogin ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List my_login = conn . query ( "" select * from login where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return my_login ; } else { return "" login.html "" ; } }","Generate syntax code: If the request module sends the request as GET, render and return 'login.html'. Otherwise, execute SQL ( query all columns in login where username is $username$ ) using the $conn$ connection and get all the data back to the query.","<met> <mod> public </mod> type_identifier queryLogin <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> my_login = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return my_login ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: SQL is executed with $conn$ ( obtain isbn, title, author, year where isbn is $isbn$, title is $title$, author is $author$, year is $year$ in books ) and all the data in four columns in the books ) and return the result of the query.","public List main ( JdbcTemplate conn , String isbn , String title , String author , String year ) { List res = conn . query ( "" select isbn, title, author, year from books where isbn=? and title=? and author=? and year=? "" , new Object [ ] { isbn , title , author , year } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: SQL is executed with $conn$ ( obtain isbn, title, author, year where isbn is $isbn$, title is $title$, author is $author$, year is $year$ in books ) and all the data in four columns in the books ) and return the result of the query.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title , author , year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL statement using a java expression ( query all information in $Media$ where hash is $hash$ ) and execute the query statement over a $conn$ connection to get all the data. If the query result exists, all query results are returned, otherwise None is returned.","public List < Object > checkIfHashInDb ( EntityManager conn , Root < Object > Media , String hash ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Media ) . where ( cb . equal ( Media . get ( "" hash "" ) , hash ) ) ; List < Object > hash_row = conn . createQuery ( cq ) . getResultList ( ) ; if ( hash_row . isEmpty ( ) ) { return null ; } else { return hash_row ; } }","Generate syntax code: Set up the SQL statement using a java expression ( query all information in $Media$ where hash is $hash$ ) and execute the query statement over a $conn$ connection to get all the data. If the query result exists, all query results are returned, otherwise None is returned.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> checkIfHashInDb <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Media </for> , <for> type_identifier hash </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Media ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Media . get <arg> ( string_literal ) </arg> </met> , hash ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> hash_row = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> hash_row . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return hash_row ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request in a GET way, render and return ""index.html""; otherwise, set SQL ( query all columns in the users table through $user$ ) , execute SQL and get all the data with the $conn$ connection. If the length of the execution result is not 1, render and return ""index.html""; otherwise, render and return ""user.html"", where the user parameter is the execution result.","public Object login ( HttpRequest request , JdbcTemplate conn , String user , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List row = conn . query ( "" select * from users where user = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; if ( row . size ( ) != 1 ) { return "" index.html "" ; } else { model . addAttribute ( "" user "" , row ) ; return "" user.html "" ; } } else { return "" index.html "" ; } }","Generate syntax code: If the request module sends the request in a GET way, render and return ""index.html""; otherwise, set SQL ( query all columns in the users table through $user$ ) , execute SQL and get all the data with the $conn$ connection. If the length of the execution result is not 1, render and return ""index.html""; otherwise, render and return ""user.html"", where the user parameter is the execution result.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> row = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> row . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , row ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the origin column in the flights table according to $destination$ ) , get all the query results, and use for loop traversal to print all the query results.","public void main ( JdbcTemplate conn , String destination ) { List flights = conn . query ( "" select origin from flights where destination= ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } }","Generate syntax code: Execute SQL with $conn$ ( query the origin column in the flights table according to $destination$ ) , get all the query results, and use for loop traversal to print all the query results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( flight ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL: Query the number of id in the users table where USERNAME is $username$ and PASSWORD is $password$ and get the first piece of data. If the query result is not empty, render and return 'index.html'; otherwise, render and return' login.html'.","public String loginAttempt ( JdbcTemplate conn , String username , String password ) { List result = conn . query ( "" select count(id) from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" login.html "" ; } else { return "" index.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL: Query the number of id in the users table where USERNAME is $username$ and PASSWORD is $password$ and get the first piece of data. If the query result is not empty, render and return 'index.html'; otherwise, render and return' login.html'.","<met> <mod> public </mod> type_identifier loginAttempt <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL using $db$ ( query tobs in the Measurement table where date is $date$ ) and get all the data. Use A for loop to store each query result in a list and use jsonify to return the processed list.,"public JSONArray getTobs ( JdbcTemplate db , String date ) { List data = db . query ( "" select tobs from measurement where date= ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object record : data ) { list . add ( record ) ; } return JSONObject . parseArray ( list . toString ( ) ) ; }",Generate syntax code: Execute the SQL using $db$ ( query tobs in the Measurement table where date is $date$ ) and get all the data. Use A for loop to store each query result in a list and use jsonify to return the processed list.,"<met> <mod> public </mod> type_identifier getTobs <for> ( <for> type_identifier db </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier record : data ) <blo> { <exp> <met> list . add <arg> ( record ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> list . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$. Execute the SQL statement: Query all columns in the SIGHTINGS table with 'NAME': $name$ and get all the data. For loop stores every element in the query result in list. Close the database connection, render and return' sightings.html', where the sighting parameter is the list content.","public String getSightings ( DataSource engine , String name , Model model ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List sighting = connection . query ( "" select * from sightings where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List finalList = new ArrayList ( ) ; for ( Object i : sighting ) { finalList . add ( i ) ; } model . addAttribute ( "" sighting "" , finalList ) ; return "" sightings.html "" ; }","Generate syntax code: Connect to the database through $engine$. Execute the SQL statement: Query all columns in the SIGHTINGS table with 'NAME': $name$ and get all the data. For loop stores every element in the query result in list. Close the database connection, render and return' sightings.html', where the sighting parameter is the list content.","<met> <mod> public </mod> type_identifier getSightings <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sighting = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> finalList = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : sighting ) <blo> { <exp> <met> finalList . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> model . addAttribute <arg> ( string_literal , finalList ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL using $db$ ( query token1_id_str in the pde_pool_pairs based on $token_id$ ) and get all the data. Use the for loop to put element 0 for each item in the query result into the list and return.,"public List getToken ( JdbcTemplate db , String token_id ) { List data = db . query ( "" select token1_id_str from pde_pool_pairs where token_id= ? "" , new Object [ ] { token_id } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object i : data ) { result . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return result ; }",Generate syntax code: Execute the SQL using $db$ ( query token1_id_str in the pde_pool_pairs based on $token_id$ ) and get all the data. Use the for loop to put element 0 for each item in the query result into the list and return.,"<met> <mod> public </mod> type_identifier getToken <for> ( <for> type_identifier db </for> , <for> type_identifier token_id </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { token_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : data ) <blo> { <exp> <met> result . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the clientes in table based on $saldo$ ) , get all the data and return the query result.","public List recargaSaldo ( JdbcTemplate conn , String saldo ) { List res = conn . query ( "" select clientes from table where saldo = ? "" , new Object [ ] { saldo } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $conn$ to execute SQL ( get the clientes in table based on $saldo$ ) , get all the data and return the query result.","<met> <mod> public </mod> type_identifier recargaSaldo <for> ( <for> type_identifier conn </for> , <for> type_identifier saldo </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { saldo } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Use $conn$ to query all s_id in the seasons table whose s_time is $s_time$. Use for loop traversal to query and print the results, and return them.","public List allSeasons ( DataSource engine , String s_time ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select s_id from seasons where s_time = ? "" , new Object [ ] { s_time } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object each : res ) { System . out . println ( each ) ; } return res ; }","Generate syntax code: connect to the database according to $engine$. Use $conn$ to query all s_id in the seasons table whose s_time is $s_time$. Use for loop traversal to query and print the results, and return them.","<met> <mod> public </mod> type_identifier allSeasons <for> ( <for> type_identifier engine </for> , <for> type_identifier s_time </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { s_time } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier each : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( each ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the query table according to $id$ ) , use for loop to traverse all the obtained query results, and print each piece of query data.","public void fetchByQuery ( JdbcTemplate conn , String id ) { List fetchQuery = conn . query ( "" select * from query where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object data : fetchQuery ) { System . out . println ( data ) ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the query table according to $id$ ) , use for loop to traverse all the obtained query results, and print each piece of query data.","<met> <mod> public </mod> void_type fetchByQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> fetchQuery = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier data : fetchQuery ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( data ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the number of all columns in the wordlist table where student is $name$, use $conn$ to execute SQL, get all the data, and return the oth element of the execution result.","public Object listStudent ( JdbcTemplate conn , String name ) { List count = conn . query ( "" select count(*) from wordlist where student = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return count . get ( 0 ) ; }","Generate syntax code: Set the SQL statement: Query the number of all columns in the wordlist table where student is $name$, use $conn$ to execute SQL, get all the data, and return the oth element of the execution result.","<met> <mod> public </mod> type_identifier listStudent <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> count = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> count . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Target$ table according to $ids$ ) , and get all the data queried. If the query result is empty, return False; otherwise, return the result of executing the statement.","public List getTargetsByUUID ( EntityManager conn , Root < Object > Target , String ids ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Target ) . where ( cb . equal ( Target . get ( "" ids "" ) , ids ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; if ( values . isEmpty ( ) ) { return null ; } else { return values ; } }","Generate syntax code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Target$ table according to $ids$ ) , and get all the data queried. If the query result is empty, return False; otherwise, return the result of executing the statement.","<met> <mod> public </mod> type_identifier getTargetsByUUID <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Target </for> , <for> type_identifier ids </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Target ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Target . get <arg> ( string_literal ) </arg> </met> , ids ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> values . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return values ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to set up sql ( query all the information in the Checkins table based on $business_id$ and $checkin_date$ ) , use $conn$ to execute SQL to get all the query results and return the query data. Print this exception if an Exception occurs during execution, and finally close the connection if the connection is not empty.","public List tabulateCheckins ( JdbcTemplate conn , String business_id , String checkin_date ) { try { List res = conn . query ( "" select * from Checkins where business_id = ? and checkin_date = ? "" , new Object [ ] { business_id , checkin_date } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set up sql ( query all the information in the Checkins table based on $business_id$ and $checkin_date$ ) , use $conn$ to execute SQL to get all the query results and return the query data. Print this exception if an Exception occurs during execution, and finally close the connection if the connection is not empty.","<met> <mod> public </mod> type_identifier tabulateCheckins <for> ( <for> type_identifier conn </for> , <for> type_identifier business_id </for> , <for> type_identifier checkin_date </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { business_id , checkin_date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the string $flag$ lowercase version is' ture', use $conn$ to execute SQL ( query the first row of data in the TIMESTAMP table based on $CURRENT$ ) and return the data. If the string $flag$ lowercase version is' false', return False.","public Object convertDefaultArg ( JdbcTemplate conn , String CURRENT , String flag ) { if ( flag . equals ( "" true "" ) ) { List sa = conn . query ( "" select * from timestamp where current= ? "" , new Object [ ] { CURRENT } , new BeanPropertyRowMapper ( List . class ) ) ; return sa . get ( 0 ) ; } else if ( flag . equals ( "" false "" ) ) { return false ; } else { return null ; } }","Generate syntax code: If the string $flag$ lowercase version is' ture', use $conn$ to execute SQL ( query the first row of data in the TIMESTAMP table based on $CURRENT$ ) and return the data. If the string $flag$ lowercase version is' false', return False.","<met> <mod> public </mod> type_identifier convertDefaultArg <for> ( <for> type_identifier conn </for> , <for> type_identifier CURRENT </for> , <for> type_identifier flag </for> ) </for> <blo> { <if_> if <par> ( <met> flag . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> sa = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { CURRENT } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> sa . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <if_> if <par> ( <met> flag . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> </if_> } </blo> </met>"
"Generate origin code: Set sql according to the java expression ( query all columns in the $id_ejer_det$ table based on $estado$ ) , use $session$ to execute and get all the data, close the connection, and return the data.","public List < Object > actualizarEstado ( EntityManager session , Root < Object > id_ejer_det , String estado ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( id_ejer_det ) . where ( cb . equal ( id_ejer_det . get ( "" estado "" ) , estado ) ) ; List < Object > jie = session . createQuery ( cq ) . getResultList ( ) ; return jie ; }","Generate syntax code: Set sql according to the java expression ( query all columns in the $id_ejer_det$ table based on $estado$ ) , use $session$ to execute and get all the data, close the connection, and return the data.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> actualizarEstado <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> id_ejer_det </for> , <for> type_identifier estado </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( id_ejer_det ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> id_ejer_det . get <arg> ( string_literal ) </arg> </met> , estado ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> jie = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return jie ; </ret> } </blo> </met>"
"Generate origin code: If invert $username$, return the rendered ""error.html"", then use $conn$ to execute the SQL ( get the email column in the users table based on $username$ ) and get the first piece of data. If the query result is not None, then return the query result.","public Object search ( JdbcTemplate conn , String username ) { if ( username == null ) { return "" error.html "" ; } else { List users = conn . query ( "" select email from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return users . get ( 0 ) ; } } }","Generate syntax code: If invert $username$, return the rendered ""error.html"", then use $conn$ to execute the SQL ( get the email column in the users table based on $username$ ) and get the first piece of data. If the query result is not None, then return the query result.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <bin> username == null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement via $conn$: Query all columns in the usertable table based on $username$, get the first piece of data and return the obtained result.","public Object userLoader ( JdbcTemplate conn , String username ) { List results = conn . query ( "" select * from usertable where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Execute the SQL statement via $conn$: Query all columns in the usertable table based on $username$, get the first piece of data and return the obtained result.","<met> <mod> public </mod> type_identifier userLoader <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect the database through $engine$. Try to set up the SQL statement ( query the 'column' column in the database table according to $table$ ) , execute SQL, get all the data, return the query results, and finally close the connection.","public List getSampleData ( DataSource engine , String table ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; try { List result = connection . query ( "" select column from database where table= ? "" , new Object [ ] { table } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } finally { return null ; } }","Generate syntax code: Connect the database through $engine$. Try to set up the SQL statement ( query the 'column' column in the database table according to $table$ ) , execute SQL, get all the data, return the query results, and finally close the connection.","<met> <mod> public </mod> type_identifier getSampleData <for> ( <for> type_identifier engine </for> , <for> type_identifier table </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get the auther column in the books table based on $isbn$, $title$ and $year$ ) , get the first piece of data, and finally return the query result.","public Object main ( JdbcTemplate db , String isbn , String title , String year ) { List authers = db . query ( "" select auther from books where isbn=? and title=? and year=? "" , new Object [ ] { isbn , title , year } , new BeanPropertyRowMapper ( List . class ) ) ; return authers . get ( 0 ) ; }","Generate syntax code: Use $db$ to execute SQL ( get the auther column in the books table based on $isbn$, $title$ and $year$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> authers = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title , year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> authers . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", otherwise return the rendered ""book.html"", where the book parameter is the query result.","public String book ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the books table based on $isbn$ ) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", otherwise return the rendered ""book.html"", where the book parameter is the query result.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement ( query the first name data in the users based on $email$ ) , set the assertion to determine that the return result is not the empty list, and finally return the queried data.","public List testRawSql ( JdbcTemplate conn , String email ) { List out = conn . query ( "" select name from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; assert out . size ( ) > 0 ; return out ; }","Generate syntax code: Use $conn$ to execute the SQL statement ( query the first name data in the users based on $email$ ) , set the assertion to determine that the return result is not the empty list, and finally return the queried data.","<met> <mod> public </mod> type_identifier testRawSql <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> out = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> out . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return out ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all data in the user column of the books table based on $title$,$author$ and $pub_year$ ) and return the query results. If a ValueError exception occurs during execution, output error.","public List main ( JdbcTemplate conn , String title , String author , String pub_year ) { try { List feel = conn . query ( "" select user from books where title = ? and author = ? and pub_year = ? "" , new Object [ ] { title , author , pub_year } , new BeanPropertyRowMapper ( List . class ) ) ; return feel ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all data in the user column of the books table based on $title$,$author$ and $pub_year$ ) and return the query results. If a ValueError exception occurs during execution, output error.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> , <for> type_identifier pub_year </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> feel = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , author , pub_year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return feel ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $eng$ to connect the database and execute SQL according to the java expression ( get the tab column in the $taglist$ table whose code_no is $code_no$ ) , get all the data, and then use for loop to print each item of the query result.","public void query ( EntityManager eng , Root < Object > taglist , String code_no ) { CriteriaBuilder cb = eng . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( taglist ) . where ( cb . equal ( taglist . get ( "" code_no "" ) , code_no ) ) ; List < Object > rows = eng . createQuery ( cq ) . getResultList ( ) ; for ( Object row : rows ) { System . out . println ( row ) ; } }","Generate syntax code: Use $eng$ to connect the database and execute SQL according to the java expression ( get the tab column in the $taglist$ table whose code_no is $code_no$ ) , get all the data, and then use for loop to print each item of the query result.","<met> <mod> public </mod> void_type query <for> ( <for> type_identifier eng </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> taglist </for> , <for> type_identifier code_no </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> eng . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( taglist ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> taglist . get <arg> ( string_literal ) </arg> </met> , code_no ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> eng . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( query the average rating in the reviews table where isbn is $isbn$ ) and get all the data. The [0][1] element is stored as the value of review_count in the dictionary, the [0][0] element is stored as the value of average_score in the dictionary, and finally return the processed dictionary using jsonify.","public JSONObject api ( JdbcTemplate conn , String isbn ) { List review_info = conn . query ( "" select avg(rating) from reviews where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; Object review_count = JSONObject . parseObject ( review_info . get ( 0 ) . toString ( ) ) . get ( 1 ) ; Object average_score = JSONObject . parseObject ( review_info . get ( 0 ) . toString ( ) ) . get ( 0 ) ; JSONObject json_info = new JSONObject ( ) ; json_info . put ( "" review_count "" , review_count ) ; json_info . put ( "" average_score "" , average_score ) ; return json_info ; }","Generate syntax code: Execute the SQL using $db$ ( query the average rating in the reviews table where isbn is $isbn$ ) and get all the data. The [0][1] element is stored as the value of review_count in the dictionary, the [0][0] element is stored as the value of average_score in the dictionary, and finally return the processed dictionary using jsonify.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> review_info = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> review_count = <met> <met> JSONObject . parseObject <arg> ( <met> <met> review_info . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> average_score = <met> <met> JSONObject . parseObject <arg> ( <met> <met> review_info . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json_info = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json_info . put <arg> ( string_literal , review_count ) </arg> </met> ; </exp> <exp> <met> json_info . put <arg> ( string_literal , average_score ) </arg> </met> ; </exp> <ret> return json_info ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $tbl_user$ table based on the condition that UID is $key$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","public List < Object > getUser ( EntityManager conn , Root < Object > tbl_user , String key ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tbl_user ) . where ( cb . equal ( tbl_user . get ( "" UID "" ) , key ) ) ; List < Object > recs = conn . createQuery ( cq ) . getResultList ( ) ; return recs ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $tbl_user$ table based on the condition that UID is $key$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getUser <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tbl_user </for> , <for> type_identifier key </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tbl_user ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tbl_user . get <arg> ( string_literal ) </arg> </met> , key ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> </met>"
Generate origin code: connect the database according to $engine$. Set the SQL statement: Query the number of movieID in the movies table. Execute SQL to get the 0th element of all the data and return the execution result.,"public List getMoviesCount ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select count(movieID) from movies "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }",Generate syntax code: connect the database according to $engine$. Set the SQL statement: Query the number of movieID in the movies table. Execute SQL to get the 0th element of all the data and return the execution result.,"<met> <mod> public </mod> type_identifier getMoviesCount <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statement: Query the number of cookie_names in the $cookies$ table, execute the SQL via $connection$ to get the first piece of data, print the obtained data and return.","public Object makeQuerySum ( EntityManager connection , Root < Object > cookies ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cookies ) ; List < Object > result = connection . createQuery ( cq ) . getResultList ( ) ; System . out . println ( result . get ( 0 ) ) ; return result . get ( 0 ) ; }","Generate syntax code: Use the java expression to set up the SQL statement: Query the number of cookie_names in the $cookies$ table, execute the SQL via $connection$ to get the first piece of data, print the obtained data and return.","<met> <mod> public </mod> type_identifier makeQuerySum <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cookies </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( cookies ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set up sql ( query the player_id column in the Players table according to $player$ ) , use $conn$ to execute SQL and get all the query results. If the query result is obtained, return the 0th element of article 0; otherwise, return None.","public Object playerId ( JdbcTemplate conn , String player ) { List result = conn . query ( "" select player_id from players where player= ? "" , new Object [ ] { player } , new BeanPropertyRowMapper ( List . class ) ) ; Object player_id = JSONObject . parseObject ( result . get ( 0 ) . toString ( ) ) . get ( 0 ) ; return player_id ; }","Generate syntax code: Set up sql ( query the player_id column in the Players table according to $player$ ) , use $conn$ to execute SQL and get all the query results. If the query result is obtained, return the 0th element of article 0; otherwise, return None.","<met> <mod> public </mod> type_identifier playerId <for> ( <for> type_identifier conn </for> , <for> type_identifier player </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { player } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> player_id = <met> <met> JSONObject . parseObject <arg> ( <met> <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return player_id ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the fullname column in the User table based on $name$ ) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"public List selectValue ( JdbcTemplate conn , String name ) { List results = conn . query ( "" select fullname from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List fullname = new ArrayList ( ) ; for ( Object result : results ) { fullname . add ( result ) ; } return fullname ; }",Generate syntax code: Use $conn$ to execute the SQL ( get the fullname column in the User table based on $name$ ) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> fullname = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> fullname . add <arg> ( result ) </arg> </met> ; </exp> } </blo> </enh> <ret> return fullname ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) and get all the data. If the query result length is equal to 0, output ""fail""; otherwise, use for loop to traverse all the query results and output the name field of each query result.","public void main ( JdbcTemplate conn , String flight_id ) { List passengers = conn . query ( "" select name from passengers where flight_id= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; } else { for ( Object passenger : passengers ) { System . out . println ( JSONObject . parseObject ( passenger . toString ( ) ) . getString ( "" name "" ) ) ; } } }","Generate syntax code: Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) and get all the data. If the query result length is equal to 0, output ""fail""; otherwise, use for loop to traverse all the query results and output the name field of each query result.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> passengers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passengers . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <enh> for ( type_identifier passenger : passengers ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> passenger . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query the creator information in the $channels$ table where channel_name is $channel_name$ ) . Use $conn$ to execute the SQL statement, get all the query results and print them.","public void selectValue ( JdbcTemplate conn , String channel_name ) { List results = conn . query ( "" select creator from channels where channel_name = ? "" , new Object [ ] { channel_name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; }","Generate syntax code: Set the SQL statement ( query the creator information in the $channels$ table where channel_name is $channel_name$ ) . Use $conn$ to execute the SQL statement, get all the query results and print them.","<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier channel_name </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { channel_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the polyline column in the boundary_data table where adcode is $adcode$ ) with $conn$, get all the data, and return the query results.","public List update ( JdbcTemplate conn , String adcode ) { List res = conn . query ( "" select polyline from boundary_data where adcode = ? "" , new Object [ ] { adcode } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute the SQL ( get the polyline column in the boundary_data table where adcode is $adcode$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier update <for> ( <for> type_identifier conn </for> , <for> type_identifier adcode </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { adcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Get the database engine through $AIRFLOW_SQL_ALCHEMY_CONN_KEY$. Execute SQL statement ( query the number of all columns in the dag table with tag as $tag$ ) and get the first piece of data. Return the query results.,"public Object getDagData ( DataSource AIRFLOW_SQL_ALCHEMY_CONN_KEY , String tag ) { JdbcTemplate engine = new JdbcTemplate ( AIRFLOW_SQL_ALCHEMY_CONN_KEY ) ; List data = engine . query ( "" select count(*) from dag where tag = ? "" , new Object [ ] { tag } , new BeanPropertyRowMapper ( List . class ) ) ; return data . get ( 0 ) ; }",Generate syntax code: Get the database engine through $AIRFLOW_SQL_ALCHEMY_CONN_KEY$. Execute SQL statement ( query the number of all columns in the dag table with tag as $tag$ ) and get the first piece of data. Return the query results.,"<met> <mod> public </mod> type_identifier getDagData <for> ( <for> type_identifier AIRFLOW_SQL_ALCHEMY_CONN_KEY </for> , <for> type_identifier tag </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( AIRFLOW_SQL_ALCHEMY_CONN_KEY ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tag } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> data . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the data in the idProduct column of the Product table based on $WName$ and $PCode$ ) , use for loop to traverse each query result, insert the data one by one into the list and return.","public Object updateWebsite ( JdbcTemplate conn , String WName , String PCode ) { List engine = conn . query ( "" select idproduct from product where wname =? and pcode=? "" , new Object [ ] { WName , PCode } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : engine ) { return i ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all the data in the idProduct column of the Product table based on $WName$ and $PCode$ ) , use for loop to traverse each query result, insert the data one by one into the list and return.","<met> <mod> public </mod> type_identifier updateWebsite <for> ( <for> type_identifier conn </for> , <for> type_identifier WName </for> , <for> type_identifier PCode </for> ) </for> <blo> { <loc> type_identifier <var> engine = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { WName , PCode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : engine ) <blo> { <ret> return i ; </ret> } </blo> </enh> } </blo> </met>"
"Generate origin code: Create cursor by $conn$, set SQL ( query all information in user_table table based on $name$ ) , execute SQL and commit operation, print ""Total records of rows updated :"" and 'rowcount' attribute of cursor.","public void selectOperate ( DataSource conn , String name ) { JdbcTemplate cursor = new JdbcTemplate ( conn ) ; List data = cursor . query ( "" select * from user_table where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( "" Total records of rows updated : "" + data . size ( ) ) ; }","Generate syntax code: Create cursor by $conn$, set SQL ( query all information in user_table table based on $name$ ) , execute SQL and commit operation, print ""Total records of rows updated :"" and 'rowcount' attribute of cursor.","<met> <mod> public </mod> void_type selectOperate <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> string_literal + <met> data . size <arg> ( ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: Execute the SQL statement ( query all the columns of the table_name ) with $conn$ and print each item in the query result using the for loop.,"public void sqlite3ViaNames ( JdbcTemplate conn ) { List results = conn . query ( "" select * from table_name "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : results ) { System . out . println ( row ) ; } }",Generate syntax code: Execute the SQL statement ( query all the columns of the table_name ) with $conn$ and print each item in the query result using the for loop.,"<met> <mod> public </mod> void_type sqlite3ViaNames <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use the $conn$ connection to execute SQL ( query the first author data in the books through $bid$ ) , render and return ""book.html"", where the bookInfo parameter is the query result; otherwise, render and return ""error.html"".","public Object bookInfo ( HttpRequest request , JdbcTemplate conn , String bid , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List book_outs = conn . query ( "" select author from books where bid = ? "" , new Object [ ] { bid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" bookInfo "" , book_outs . get ( 0 ) ) ; return "" book.html "" ; } else { return "" error.html "" ; } }","Generate syntax code: If the request module sends the request in a post method, use the $conn$ connection to execute SQL ( query the first author data in the books through $bid$ ) , render and return ""book.html"", where the bookInfo parameter is the query result; otherwise, render and return ""error.html"".","<met> <mod> public </mod> type_identifier bookInfo <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier bid </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> book_outs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> book_outs . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( query the information of name in the books where isbn is $isbn$ ) and get all the data. If the result of the query is None, return Error. Otherwise, return the query as a list.","public Object getBookName ( JdbcTemplate db , String isbn ) { List book_names = db . query ( "" select name from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_names . isEmpty ( ) ) { return "" Error "" ; } else { for ( Object n : book_names ) { return n ; } } }","Generate syntax code: Execute the SQL using $db$ ( query the information of name in the books where isbn is $isbn$ ) and get all the data. If the result of the query is None, return Error. Otherwise, return the query as a list.","<met> <mod> public </mod> type_identifier getBookName <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book_names = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book_names . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <enh> for ( type_identifier n : book_names ) <blo> { <ret> return n ; </ret> } </blo> </enh> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the java expression to execute SQL through $conn$ ( get all columns in the $jUserAttrs$ table with user_id as $uid$ ) . Then use for loop to print each item of the query results.,"public void getUserAttributes ( EntityManager conn , Root < Object > jUserAttrs , String uid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( jUserAttrs ) . where ( cb . equal ( jUserAttrs . get ( "" user_id "" ) , uid ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object row : res ) { System . out . println ( row ) ; } }",Generate syntax code: Use the java expression to execute SQL through $conn$ ( get all columns in the $jUserAttrs$ table with user_id as $uid$ ) . Then use for loop to print each item of the query results.,"<met> <mod> public </mod> void_type getUserAttributes <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> jUserAttrs </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( jUserAttrs ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> jUserAttrs . get <arg> ( string_literal ) </arg> </met> , uid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If $session$ gets the information about logged_in, get the connection through $eng$. Execute SQL ( query all columns in the logs table according to $ip$ ) , get all the data, pass the query result into the logs parameter and return the rendered 'settings.html' page. If the logged_in is not obtained, return the 'login' page through url_for and redirect.","public String settings ( DataSource eng , String ip , HttpSession session , Model model ) { if ( session . getAttribute ( "" logged_in "" ) != null ) { JdbcTemplate conn = new JdbcTemplate ( eng ) ; List result = conn . query ( "" select * from logs where ip= ? "" , new Object [ ] { ip } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" logs "" , result ) ; return "" settings.html "" ; } else { return "" /login "" ; } }","Generate syntax code: If $session$ gets the information about logged_in, get the connection through $eng$. Execute SQL ( query all columns in the logs table according to $ip$ ) , get all the data, pass the query result into the logs parameter and return the rendered 'settings.html' page. If the logged_in is not obtained, return the 'login' page through url_for and redirect.","<met> <mod> public </mod> type_identifier settings <for> ( <for> type_identifier eng </for> , <for> type_identifier ip </for> , <for> type_identifier session </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( eng ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ip } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Set SQL based on the java expression ( query all columns in the $articles_table$ table based on $articleID$ ) . Execute SQL through $conn$ and return the rowcount field of the query result.,"public void getArticlePublication ( EntityManager conn , Root < Object > articles_table , String articleID ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( articles_table ) . where ( cb . equal ( articles_table . get ( "" articleID "" ) , articleID ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( result . size ( ) ) ; }",Generate syntax code: Set SQL based on the java expression ( query all columns in the $articles_table$ table based on $articleID$ ) . Execute SQL through $conn$ and return the rowcount field of the query result.,"<met> <mod> public </mod> void_type getArticlePublication <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> articles_table </for> , <for> type_identifier articleID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( articles_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> articles_table . get <arg> ( string_literal ) </arg> </met> , articleID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> result . size <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: connect to the database according to $lite_engine$. Use the java expression to execute the SQL statement ( query all the id data in the $table$ table based on $name$ ) and return the execution result.,"public List queryTable ( EntityManager lite_engine , Root < Object > table , String name ) { CriteriaBuilder cb = lite_engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" articleID "" ) , name ) ) ; List < Object > rows = lite_engine . createQuery ( cq ) . getResultList ( ) ; return rows ; }",Generate syntax code: connect to the database according to $lite_engine$. Use the java expression to execute the SQL statement ( query all the id data in the $table$ table based on $name$ ) and return the execution result.,"<met> <mod> public </mod> type_identifier queryTable <for> ( <for> type_identifier lite_engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> lite_engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> lite_engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the time column in the $scans$ table based on $date$ ) . Execute SQL through $con$ and get all the data, use for loop to convert each query result to dict, store it as list, and finally return this list.","public List getScan ( EntityManager con , Root < Object > scans , String date ) { CriteriaBuilder cb = con . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( scans ) . where ( cb . equal ( scans . get ( "" date "" ) , date ) ) ; List < Object > res = con . createQuery ( cq ) . getResultList ( ) ; List result_dicts = new ArrayList ( ) ; for ( Object row : res ) { result_dicts . add ( row ) ; } return result_dicts ; }","Generate syntax code: Set SQL based on the java expression ( query the time column in the $scans$ table based on $date$ ) . Execute SQL through $con$ and get all the data, use for loop to convert each query result to dict, store it as list, and finally return this list.","<met> <mod> public </mod> type_identifier getScan <for> ( <for> type_identifier con </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> scans </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> con . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( scans ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> scans . get <arg> ( string_literal ) </arg> </met> , date ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> con . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result_dicts = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> result_dicts . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result_dicts ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all columns in the event table based on $amount$ and $user_id$ ) and get all the data. Use for loop to store each piece of query results in a list. If a SQLAlchemyError exception occurs during execution, print the exception name as a string.","public Object makePledge ( JdbcTemplate conn , String amount , String user_id ) { try { List events = conn . query ( "" select * from event where amount = ? and user_id = ? "" , new Object [ ] { amount , user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return events ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all columns in the event table based on $amount$ and $user_id$ ) and get all the data. Use for loop to store each piece of query results in a list. If a SQLAlchemyError exception occurs during execution, print the exception name as a string.","<met> <mod> public </mod> type_identifier makePledge <for> ( <for> type_identifier conn </for> , <for> type_identifier amount </for> , <for> type_identifier user_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> events = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { amount , user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return events ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all columns in the Class table with id as $id$ and get all the data and return the query result. If an AttributeError exception occurs, use raise to throw the exception and attach the exception message ""must fail"" through the Exception ( ) .","public Object testInheritance ( JdbcTemplate conn , String id ) { try { List numbers = conn . query ( "" select * from class where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return numbers ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to query all columns in the Class table with id as $id$ and get all the data and return the query result. If an AttributeError exception occurs, use raise to throw the exception and attach the exception message ""must fail"" through the Exception ( ) .","<met> <mod> public </mod> type_identifier testInheritance <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> numbers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return numbers ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the query results of all the information in the artist table based on $rarity$ and $layout$ ) , use for loop to insert the data one by one into a list, and return this list.","public List generateAbridgedIndexSet ( JdbcTemplate conn , String rarity , String layout ) { List query = conn . query ( "" select * from artist where rarity=? and layout=? "" , new Object [ ] { rarity , layout } , new BeanPropertyRowMapper ( List . class ) ) ; List new_card_set = new ArrayList ( ) ; for ( Object i : query ) { new_card_set . add ( i ) ; } return new_card_set ; }","Generate syntax code: Use $conn$ to execute SQL ( query all the query results of all the information in the artist table based on $rarity$ and $layout$ ) , use for loop to insert the data one by one into a list, and return this list.","<met> <mod> public </mod> type_identifier generateAbridgedIndexSet <for> ( <for> type_identifier conn </for> , <for> type_identifier rarity </for> , <for> type_identifier layout </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { rarity , layout } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> new_card_set = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> new_card_set . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return new_card_set ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the results where the name of user is $username$ ) with $conn$, get all the data, and return the query results.","public List dashboard ( JdbcTemplate conn , String username ) { List all_results = conn . query ( "" select * from results where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return all_results ; }","Generate syntax code: Execute the SQL ( get all the columns in the results where the name of user is $username$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier dashboard <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> all_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return all_results ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL: Query the title information in the books table where isbn is $isbn$. Use $db$ to execute SQL and get the first data. If the query result is equal to None, then return to the serialized {""error"":""Invalid isbn""}. Otherwise, return to the serialized query result. ""","public JSONObject booksApi ( JdbcTemplate conn , String isbn ) { List book_infos = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_infos . isEmpty ( ) ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Invalid isbn "" ) ; return jsonObject ; } else { return JSONObject . parseObject ( book_infos . get ( 0 ) . toString ( ) ) ; } }","Generate syntax code: Set up SQL: Query the title information in the books table where isbn is $isbn$. Use $db$ to execute SQL and get the first data. If the query result is equal to None, then return to the serialized {""error"":""Invalid isbn""}. Otherwise, return to the serialized query result. ""","<met> <mod> public </mod> type_identifier booksApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book_infos = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book_infos . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> book_infos . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement with $conn$ ( get the book_id column in the book ) , get all the data, and print each item in the query results using the for loop.","public void searchBookId ( JdbcTemplate conn ) { List book_ids = conn . query ( "" select book_id from book "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : book_ids ) { System . out . println ( i ) ; } }","Generate syntax code: Execute the SQL statement with $conn$ ( get the book_id column in the book ) , get all the data, and print each item in the query results using the for loop.","<met> <mod> public </mod> void_type searchBookId <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> book_ids = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : book_ids ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Execute the SQL statement using $conn$ with the following contents: Query all the columns in the database based on $addend1$ and $addend2$ and get all the data. Use for loop to store each element of the query results in the list and return the contents of the list.,"public List testDo ( JdbcTemplate conn , String addend1 , String addend2 ) { List res = conn . query ( "" select * from database where addend1 = ? and addend2 = ? "" , new Object [ ] { addend1 , addend2 } , new BeanPropertyRowMapper ( List . class ) ) ; List res_list = new ArrayList ( ) ; for ( Object row : res ) { res_list . add ( row ) ; } return res_list ; }",Generate syntax code: Execute the SQL statement using $conn$ with the following contents: Query all the columns in the database based on $addend1$ and $addend2$ and get all the data. Use for loop to store each element of the query results in the list and return the contents of the list.,"<met> <mod> public </mod> type_identifier testDo <for> ( <for> type_identifier conn </for> , <for> type_identifier addend1 </for> , <for> type_identifier addend2 </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { addend1 , addend2 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> res_list . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res_list ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL statement through $conn$: Query all columns in the books table based on $title$, $author$ and $year$ and get all the data. Render and return 'list_selections.html', where the selections parameter is the query result.","public String search ( JdbcTemplate conn , String title , String author , String year , Model model ) { List selections = conn . query ( "" select * from books where title = ? and author = ? and year = ? "" , new Object [ ] { title , author , year } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" selections "" , selections ) ; return "" list_selections.html "" ; }","Generate syntax code: Execute SQL statement through $conn$: Query all columns in the books table based on $title$, $author$ and $year$ and get all the data. Render and return 'list_selections.html', where the selections parameter is the query result.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> , <for> type_identifier year </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> selections = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , author , year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , selections ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database according to $session$. Try to execute the SQL statement ( get all the columns in the tooth where typeslice is $typeslice$ ) and get all the data, return all the query results. Return False if an exception occurs.","public Object dbConnect ( DataSource session , String typeslice ) { try { JdbcTemplate conn = new JdbcTemplate ( session ) ; List data = conn . query ( "" select * from tooth where typeslice= ? "" , new Object [ ] { typeslice } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Connect to the database according to $session$. Try to execute the SQL statement ( get all the columns in the tooth where typeslice is $typeslice$ ) and get all the data, return all the query results. Return False if an exception occurs.","<met> <mod> public </mod> type_identifier dbConnect <for> ( <for> type_identifier session </for> , <for> type_identifier typeslice </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( session ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { typeslice } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all columns in the merged_imw table based on $mtr$ ) , get all the data, and return the query results. If an exception occurs, pass directly.","public Object queryPostGres ( JdbcTemplate conn , String mtr ) { try { List res = conn . query ( "" select * from merged_imw where mtr= ? "" , new Object [ ] { mtr } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all columns in the merged_imw table based on $mtr$ ) , get all the data, and return the query results. If an exception occurs, pass directly.","<met> <mod> public </mod> type_identifier queryPostGres <for> ( <for> type_identifier conn </for> , <for> type_identifier mtr </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { mtr } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get the name column in the accounts where the username is $name$ ) and get all the data, then set the assertion query result not equal to the list type.","public void testStrlen ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select name from accounts where username= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; }","Generate syntax code: Execute the SQL with $conn$ ( get the name column in the accounts where the username is $name$ ) and get all the data, then set the assertion query result not equal to the list type.","<met> <mod> public </mod> void_type testStrlen <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db_uri$. Execute the SQL statement ( query all the columns in the database table according to $name$ ) , get all the data, close the connection, and return the query results.","public List tearDown ( DataSource db_uri , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List e = conn . query ( "" select * from database where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return e ; }","Generate syntax code: Get the database engine and establish a connection through $db_uri$. Execute the SQL statement ( query all the columns in the database table according to $name$ ) , get all the data, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier db_uri </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> e = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return e ; </ret> } </blo> </met>"
"Generate origin code: Use the way of a java expression to set SQL ( query the email information in the $users$ table when id is $user_id$ ) . Use $conn$ to execute SQL, return the judgment result that the rowcount attribute of the execution result is equal to 1.","public boolean queryEmail ( EntityManager conn , Root < Object > users , String user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" id "" ) , user_id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res . size ( ) == 1 ; }","Generate syntax code: Use the way of a java expression to set SQL ( query the email information in the $users$ table when id is $user_id$ ) . Use $conn$ to execute SQL, return the judgment result that the rowcount attribute of the execution result is equal to 1.","<met> <mod> public </mod> boolean_type queryEmail <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <bin> <met> res . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ret> } </blo> </met>"
"Generate origin code: Create cursor via $conn$ and execute SQL via cursor: Query all ids in tableName table based on $tab_name$. Print number of rows of query result and close indexer. Commit via $conn$, close the connection and return the results.","public List createUser ( DataSource conn , String tab_name ) { JdbcTemplate cursor = new JdbcTemplate ( conn ) ; List idtext = cursor . query ( "" select id from tablename where tab_name= ? "" , new Object [ ] { tab_name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( idtext . size ( ) ) ; return idtext ; }","Generate syntax code: Create cursor via $conn$ and execute SQL via cursor: Query all ids in tableName table based on $tab_name$. Print number of rows of query result and close indexer. Commit via $conn$, close the connection and return the results.","<met> <mod> public </mod> type_identifier createUser <for> ( <for> type_identifier conn </for> , <for> type_identifier tab_name </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> idtext = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tab_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> idtext . size <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return idtext ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL through $conn$ ( get the title column in the books table based on $isbn$ ) . If the number of rows of the query result is 0, return the rendered error.html. Then get all the query data and finally return the rendered results.html, where the books parameter is all the query data.","public String search ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }","Generate syntax code: Execute the SQL through $conn$ ( get the title column in the books table based on $isbn$ ) . If the number of rows of the query result is 0, return the rendered error.html. Then get all the query data and finally return the rendered results.html, where the books parameter is all the query data.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement via $connection$: Query all columns in the flights table whose 'id' is $flight_id$ and get the first piece of data. If the obtained data is empty, return None;; otherwise, return the obtained data.","public Object flight ( JdbcTemplate connection , String flight_id ) { List flights = connection . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return null ; } else { return flights . get ( 0 ) ; } }","Generate syntax code: Execute the SQL statement via $connection$: Query all columns in the flights table whose 'id' is $flight_id$ and get the first piece of data. If the obtained data is empty, return None;; otherwise, return the obtained data.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier connection </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Get the database engine through $db_algorithms$ and further get the Session object. Execute the SQL statement ( query the engine column in the Sess table according to $maker$ ) and return all the obtained data.,"public List readTableBySql ( DataSource db_algorithms , String maker ) { JdbcTemplate session = new JdbcTemplate ( db_algorithms ) ; List row = session . query ( "" select engine from sess where maker =? "" , new Object [ ] { maker } , new BeanPropertyRowMapper ( List . class ) ) ; return row ; }",Generate syntax code: Get the database engine through $db_algorithms$ and further get the Session object. Execute the SQL statement ( query the engine column in the Sess table according to $maker$ ) and return all the obtained data.,"<met> <mod> public </mod> type_identifier readTableBySql <for> ( <for> type_identifier db_algorithms </for> , <for> type_identifier maker </for> ) </for> <blo> { <loc> type_identifier <var> session = <obj> new type_identifier <arg> ( db_algorithms ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> row = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { maker } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the review_count in the book table based on $average_score$ ) and get the first piece of data. If the query result is None, return the serialized {error: Invalid}. Otherwise, return the query result.","public JSONObject reviewApi ( JdbcTemplate conn , String average_score ) { List reviews = conn . query ( "" select review_count from book where average_score= ? "" , new Object [ ] { average_score } , new BeanPropertyRowMapper ( List . class ) ) ; if ( reviews . isEmpty ( ) ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Invalid "" ) ; return jsonObject ; } else { JSONObject . parseObject ( reviews . get ( 0 ) . toString ( ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the review_count in the book table based on $average_score$ ) and get the first piece of data. If the query result is None, return the serialized {error: Invalid}. Otherwise, return the query result.","<met> <mod> public </mod> type_identifier reviewApi <for> ( <for> type_identifier conn </for> , <for> type_identifier average_score </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { average_score } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> reviews . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> else <blo> { <exp> <met> JSONObject . parseObject <arg> ( <met> <met> reviews . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request method of request is POST, use $conn$ to execute SQL ( query the onename in the books table when id equals $book_id$ ) and get the first piece of data. Return the rendered details.html and pass the query result to the bookone parameter","public String book ( HttpRequest request , JdbcTemplate conn , String book_id , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List bookones = conn . query ( "" select onename from books where id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" bookone "" , bookones . get ( 0 ) ) ; return "" details.html "" ; } else { return null ; } }","Generate syntax code: If the request method of request is POST, use $conn$ to execute SQL ( query the onename in the books table when id equals $book_id$ ) and get the first piece of data. Return the rendered details.html and pass the query result to the bookone parameter","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> bookones = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> bookones . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $baasu$ and execute SQL ( get all the columns in the Temperature_table according to $lat$ ) , get all the data, and finally return the query result.","public List getTemperatures ( DataSource baasu , String lat ) { JdbcTemplate db = new JdbcTemplate ( baasu ) ; List json_temps = db . query ( "" select * from Temperature_table where lat= ? "" , new Object [ ] { lat } , new BeanPropertyRowMapper ( List . class ) ) ; return json_temps ; }","Generate syntax code: Get the database engine through $baasu$ and execute SQL ( get all the columns in the Temperature_table according to $lat$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getTemperatures <for> ( <for> type_identifier baasu </for> , <for> type_identifier lat </for> ) </for> <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( baasu ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> json_temps = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { lat } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return json_temps ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the hours data in the student table through $username$, use the $conn$ connection to execute SQL and get all the data. If the length of the execution result is greater than 0, convert the hours and name of the 0th element of the execution result to str, take the results converted to str type as the corresponding values of hours and name respectively, and use jsonify to return.","public JSONObject getStudentInfo ( JdbcTemplate conn , String username ) { List res = conn . query ( "" select hours from student where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . size ( ) > 0 ) { String hours = JSONObject . parseObject ( res . get ( 0 ) . toString ( ) ) . getString ( "" hours "" ) ; String name = JSONObject . parseObject ( res . get ( 0 ) . toString ( ) ) . getString ( "" name "" ) ; JSONObject results = new JSONObject ( ) ; results . put ( "" hours "" , hours ) ; results . put ( "" name "" , name ) ; return results ; } else { return null ; } }","Generate syntax code: Set the SQL statement: Query the hours data in the student table through $username$, use the $conn$ connection to execute SQL and get all the data. If the length of the execution result is greater than 0, convert the hours and name of the 0th element of the execution result to str, take the results converted to str type as the corresponding values of hours and name respectively, and use jsonify to return.","<met> <mod> public </mod> type_identifier getStudentInfo <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <loc> type_identifier <var> hours = <met> <met> JSONObject . parseObject <arg> ( <met> <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> name = <met> <met> JSONObject . parseObject <arg> ( <met> <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> results . put <arg> ( string_literal , hours ) </arg> </met> ; </exp> <exp> <met> results . put <arg> ( string_literal , name ) </arg> </met> ; </exp> <ret> return results ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the surname column in the $candidates$ table based on $name$ ) . Execute SQL through $conn$, get all the data and return the query results.","public List fillCandidates ( EntityManager conn , Root < Object > candidates , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( candidates ) . where ( cb . equal ( candidates . get ( "" name "" ) , name ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Set SQL based on the java expression ( query the surname column in the $candidates$ table based on $name$ ) . Execute SQL through $conn$, get all the data and return the query results.","<met> <mod> public </mod> type_identifier fillCandidates <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> candidates </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( candidates ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> candidates . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $postgresql_uri$. Execute the SQL statement ( query the ROLE column in the database table according to $PASSWORD$ ) , get all the data, and return the query results.","public List selectDatabase ( DataSource postgresql_uri , String PASSWORD ) { JdbcTemplate engine = new JdbcTemplate ( postgresql_uri ) ; List res = engine . query ( "" select ROLE from database where PASSWORD= ? "" , new Object [ ] { PASSWORD } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine through $postgresql_uri$. Execute the SQL statement ( query the ROLE column in the database table according to $PASSWORD$ ) , get all the data, and return the query results.","<met> <mod> public </mod> type_identifier selectDatabase <for> ( <for> type_identifier postgresql_uri </for> , <for> type_identifier PASSWORD </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( postgresql_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { PASSWORD } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $db$, execute SQL according to the java expression ( query all columns in the $users$ table based on $user_id$ ) , get all the data, close the connection, and return the query results.","public List testRollbackToSubtransaction ( EntityManager db , Root < Object > users , String user_id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" user_id "" ) , user_id ) ) ; List < Object > res = db . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Connect the database with $db$, execute SQL according to the java expression ( query all columns in the $users$ table based on $user_id$ ) , get all the data, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier testRollbackToSubtransaction <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get the name column in the $t$ table where 'variants' is $variants$ ) and get all the data, and finally return the query result.","public List allTests ( EntityManager conn , Root < Object > t , String variants ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( t ) . where ( cb . equal ( t . get ( "" variants "" ) , variants ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get the name column in the $t$ table where 'variants' is $variants$ ) and get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier allTests <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> t </for> , <for> type_identifier variants </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( t ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> t . get <arg> ( string_literal ) </arg> </met> , variants ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If $username$ is None, return to False. Otherwise, use $pg_root_engine$ to get the connection: set the SQL ( query the page information in the database where username is $username$ ) . Execute the SQL using the database connection and get all the data. Close the connection and return each item in the query result as a dict type.","public Object getPg ( DataSource pg_root_engine , String username ) { if ( username == null ) { return false ; } else { JdbcTemplate engine = new JdbcTemplate ( pg_root_engine ) ; List pg = engine . query ( "" select page from database where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return pg ; } }","Generate syntax code: If $username$ is None, return to False. Otherwise, use $pg_root_engine$ to get the connection: set the SQL ( query the page information in the database where username is $username$ ) . Execute the SQL using the database connection and get all the data. Close the connection and return each item in the query result as a dict type.","<met> <mod> public </mod> type_identifier getPg <for> ( <for> type_identifier pg_root_engine </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <bin> username == null_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( pg_root_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> pg = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return pg ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the review_count in the ana_books table based on $isbn$ ) and get the first piece of data. Return Fasle if the query result is equal to None. Otherwise, return the query results.","public Object booksApi ( JdbcTemplate conn , String isbn ) { List review_counts = conn . query ( "" select review_count from ana_books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_counts . isEmpty ( ) ) { return null ; } else { return review_counts . get ( 0 ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the review_count in the ana_books table based on $isbn$ ) and get the first piece of data. Return Fasle if the query result is equal to None. Otherwise, return the query results.","<met> <mod> public </mod> type_identifier booksApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> review_counts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> review_counts . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> review_counts . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement through $sess$: Query all data in the $users$ table where id is $id$. Set the assertion to determine that the length of the query result is greater than 1, and return the query result.","public List testMapped ( EntityManager sess , Root < Object > users , String id ) { CriteriaBuilder cb = sess . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" id "" ) , id ) ) ; List < Object > res = sess . createQuery ( cq ) . getResultList ( ) ; assert res . size ( ) > 1 ; return res ; }","Generate syntax code: Use the java expression to set the SQL statement through $sess$: Query all data in the $users$ table where id is $id$. Set the assertion to determine that the length of the query result is greater than 1, and return the query result.","<met> <mod> public </mod> type_identifier testMapped <for> ( <for> type_identifier sess </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sess . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> sess . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database via $db_connect$ and execute SQL ( query the conments in the table_name table based on $status$ ) , get all the data, and finally return the result.","public List checkForRun ( DataSource db_connect , String status ) { JdbcTemplate conn = new JdbcTemplate ( db_connect ) ; List query = conn . query ( "" select conments from table_name where status= ? "" , new Object [ ] { status } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }","Generate syntax code: Connect to the database via $db_connect$ and execute SQL ( query the conments in the table_name table based on $status$ ) , get all the data, and finally return the result.","<met> <mod> public </mod> type_identifier checkForRun <for> ( <for> type_identifier db_connect </for> , <for> type_identifier status </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { status } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </met>"
Generate origin code: Execute SQL with $conn$ ( get all columns in 'states' based on $tbl$ ) and get all the data. Finally convert each item in the query result into dictionary type and use jsonify to process 'States' and the dictionary content.,"public JSONObject states ( JdbcTemplate conn , String tbl ) { List States = conn . query ( "" select * from states where tbl= ? "" , new Object [ ] { tbl } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" States "" , States ) ; return jsonObject ; }",Generate syntax code: Execute SQL with $conn$ ( get all columns in 'states' based on $tbl$ ) and get all the data. Finally convert each item in the query result into dictionary type and use jsonify to process 'States' and the dictionary content.,"<met> <mod> public </mod> type_identifier states <for> ( <for> type_identifier conn </for> , <for> type_identifier tbl </for> ) </for> <blo> { <loc> type_identifier <var> States = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tbl } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , States ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Use $teng$ to connect to the database in the execute the SQL statement as a java expression: Get the first piece of data in the $table$ table. Set the assertion to determine that the query result converted to list is greater than 0, and return the query results.","public List testSerialColumn ( EntityManager teng , Root < Object > table ) { CriteriaBuilder cb = teng . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) ; List < Object > results = teng . createQuery ( cq ) . getResultList ( ) ; assert results . size ( ) > 0 ; return results ; }","Generate syntax code: Use $teng$ to connect to the database in the execute the SQL statement as a java expression: Get the first piece of data in the $table$ table. Set the assertion to determine that the query result converted to list is greater than 0, and return the query results.","<met> <mod> public </mod> type_identifier testSerialColumn <for> ( <for> type_identifier teng </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> teng . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( table ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> teng . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query the user_name column in the users table based on $user_id$ ) , execute SQL with $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List setupClass ( JdbcTemplate conn , String user_id ) { List results = conn . query ( "" select user_name from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; List user_names = new ArrayList ( ) ; for ( Object result : results ) { user_names . add ( result ) ; } return user_names ; }","Generate syntax code: Set up SQL ( query the user_name column in the users table based on $user_id$ ) , execute SQL with $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier setupClass <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> user_names = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> user_names . add <arg> ( result ) </arg> </met> ; </exp> } </blo> </enh> <ret> return user_names ; </ret> } </blo> </met>"
"Generate origin code: If the request request mode is POST, execute the SQL ( querying all columns in the users table where email is $email$ ) with $conn$ and get all the data. If the query data length is equal to 0, the rendered 'login.html', otherwise, return rendered 'login.html' and pass the query result to the data parameter.","public Object login ( HttpRequest request , JdbcTemplate conn , String email , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List data = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . isEmpty ( ) ) { return "" login.html "" ; } else { model . addAttribute ( "" data "" , data ) ; return "" login.html "" ; } } else { return null ; } }","Generate syntax code: If the request request mode is POST, execute the SQL ( querying all columns in the users table where email is $email$ ) with $conn$ and get all the data. If the query data length is equal to 0, the rendered 'login.html', otherwise, return rendered 'login.html' and pass the query result to the data parameter.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL using $conn$ ( all columns in the RIDERS where the engine is $mock_engine$ ) . Set the assertion that the query result is not an empty list, and finally store element 0 for each item of data in the query result in the list and return it.","public List testSessionScope ( JdbcTemplate conn , String mock_engine ) { List result = conn . query ( "" select * from riders where engine= ? "" , new Object [ ] { mock_engine } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) > 0 ; List list = new ArrayList ( ) ; for ( Object r : result ) { list . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Execute the SQL using $conn$ ( all columns in the RIDERS where the engine is $mock_engine$ ) . Set the assertion that the query result is not an empty list, and finally store element 0 for each item of data in the query result in the list and return it.","<met> <mod> public </mod> type_identifier testSessionScope <for> ( <for> type_identifier conn </for> , <for> type_identifier mock_engine </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { mock_engine } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : result ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the name in the player_master table based on $player_id$ ) and get all the data. Using for loop, each time print the strings concatenated PLAYER_NAME = with the string type of 0th element of each item in the query result.","public void getPlayerName ( JdbcTemplate conn , String player_id ) { List result = conn . query ( "" select name from player_master where player_id= ? "" , new Object [ ] { player_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( "" PLAYER_NAME = "" + JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the name in the player_master table based on $player_id$ ) and get all the data. Using for loop, each time print the strings concatenated PLAYER_NAME = with the string type of 0th element of each item in the query result.","<met> <mod> public </mod> void_type getPlayerName <for> ( <for> type_identifier conn </for> , <for> type_identifier player_id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { player_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> string_literal + <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: connect to the database based on $engine$. Query the the first piece of result in the database table with id as $taskid$. Use for loop iterate through the query results and output the query results using logging.info ( ) .,"public void start ( DataSource engine , String taskid ) { JdbcTemplate cursor = new JdbcTemplate ( engine ) ; List allRows = cursor . query ( "" select result from database where id = ? "" , new Object [ ] { taskid } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : allRows ) { System . out . println ( row ) ; } }",Generate syntax code: connect to the database based on $engine$. Query the the first piece of result in the database table with id as $taskid$. Use for loop iterate through the query results and output the query results using logging.info ( ) .,"<met> <mod> public </mod> void_type start <for> ( <for> type_identifier engine </for> , <for> type_identifier taskid </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> allRows = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { taskid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : allRows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use the cursor method of $db$ to execute SQL ( get all the columns in the DATABASE table according to $name$ ) , get the first piece of data, then ensure that the $db$ connection is closed, and finally return the query result.","public Object getDatabase ( DataSource db , String name ) { JdbcTemplate cursor = new JdbcTemplate ( db ) ; List data = cursor . query ( "" select result from database where id = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return data . get ( 0 ) ; }","Generate syntax code: Use the cursor method of $db$ to execute SQL ( get all the columns in the DATABASE table according to $name$ ) , get the first piece of data, then ensure that the $db$ connection is closed, and finally return the query result.","<met> <mod> public </mod> type_identifier getDatabase <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> data . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $testing$, try to execute SQL ( query all columns in the users table based on $name$ ) , get all the query results, return the query results, and make sure that the connection is closed.","public Object testFlulsh ( DataSource testing , String name ) { JdbcTemplate cursor = new JdbcTemplate ( testing ) ; try { List flulsh = cursor . query ( "" select * from users where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return flulsh ; } finally { return null ; } }","Generate syntax code: Connect the database with $testing$, try to execute SQL ( query all columns in the users table based on $name$ ) , get all the query results, return the query results, and make sure that the connection is closed.","<met> <mod> public </mod> type_identifier testFlulsh <for> ( <for> type_identifier testing </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> flulsh = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return flulsh ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: If use the get method of $session$ to get 'logged_in', use $engine$ to connect to the database. Execute SQL based on the java expression to get all the columns in the $prtnr$ table with 'partner' of $partner$ and get all the data. Return the rendered' useradmin.html', where the query parameter is the query result, otherwise return the rendered 'login.html'.","public String settings ( EntityManager engine , Root < Object > prtnr , String partner , HttpSession session , Model model ) { if ( session . getAttribute ( "" logged_in "" ) != null ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( prtnr ) . where ( cb . equal ( prtnr . get ( "" partner "" ) , partner ) ) ; List < Object > query = engine . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" query "" , query ) ; return "" useradmin.html "" ; } else { return "" login.html "" ; } }","Generate syntax code: If use the get method of $session$ to get 'logged_in', use $engine$ to connect to the database. Execute SQL based on the java expression to get all the columns in the $prtnr$ table with 'partner' of $partner$ and get all the data. Return the rendered' useradmin.html', where the query parameter is the query result, otherwise return the rendered 'login.html'.","<met> <mod> public </mod> type_identifier settings <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> prtnr </for> , <for> type_identifier partner </for> , <for> type_identifier session </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( prtnr ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> prtnr . get <arg> ( string_literal ) </arg> </met> , partner ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , query ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, try to execute SQL ( query the first id in users by $username$ ) through $conn$ connection and return the query results; if there is an exception, throw out through raise.","public Object queryId ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List user_ids = conn . query ( "" select id from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return user_ids . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } } else { return null ; } }","Generate syntax code: If the request module sends the request as post, try to execute SQL ( query the first id in users by $username$ ) through $conn$ connection and return the query results; if there is an exception, throw out through raise.","<met> <mod> public </mod> type_identifier queryId <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> user_ids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> user_ids . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the string format method to set the SQL ( query the tn in the mytable based on $vt$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the query results.","public List queryRow ( JdbcTemplate conn , String vt ) { List res = conn . query ( "" select tn from mytable where vt= ? "" , new Object [ ] { vt } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use the string format method to set the SQL ( query the tn in the mytable based on $vt$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the query results.","<met> <mod> public </mod> type_identifier queryRow <for> ( <for> type_identifier conn </for> , <for> type_identifier vt </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { vt } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement with the java expression ( get the data in $table$ table based on $name$ ) , use the $conn$ connection to execute SQL, get all the data and return.","public List getTableSummary ( EntityManager conn , Root < Object > table , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" name "" ) , name ) ) ; List < Object > data = conn . createQuery ( cq ) . getResultList ( ) ; return data ; }","Generate syntax code: Set the SQL statement with the java expression ( get the data in $table$ table based on $name$ ) , use the $conn$ connection to execute SQL, get all the data and return.","<met> <mod> public </mod> type_identifier getTableSummary <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$: Query all the columns in the books table through $isbn$, get the first piece of data. Return Error if the query result is empty; otherwise, return the query result. *","public Object api ( JdbcTemplate conn , String isbn ) { List book_infos = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_infos . isEmpty ( ) ) { return "" Error "" ; } else { return book_infos . get ( 0 ) ; } }","Generate syntax code: Execute SQL through $conn$: Query all the columns in the books table through $isbn$, get the first piece of data. Return Error if the query result is empty; otherwise, return the query result. *","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book_infos = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book_infos . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> book_infos . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL: Query the first piece of username data in the users table where id is $isbn$ and return the query results. If an exception occurs, render and return error.html.","public Object submitReview ( JdbcTemplate conn , String isbn ) { try { List users = conn . query ( "" select username from users where id = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return users . get ( 0 ) ; } catch ( Exception e ) { return "" error.html "" ; } }","Generate syntax code: Try to use $conn$ to execute SQL: Query the first piece of username data in the users table where id is $isbn$ and return the query results. If an exception occurs, render and return error.html.","<met> <mod> public </mod> type_identifier submitReview <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up SQL ( query the description column in the Kipartman_Parts table based on $name$ ) , execute SQL with $connection$ and get all the query results, use for loop to iterate through all the query results and print each piece of data. Close the connection and return the query result.","public List fetch ( JdbcTemplate connection , String name ) { List descriptions = connection . query ( "" select description from kipartman_parts where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : descriptions ) { System . out . println ( row ) ; } return descriptions ; }","Generate syntax code: Set up SQL ( query the description column in the Kipartman_Parts table based on $name$ ) , execute SQL with $connection$ and get all the query results, use for loop to iterate through all the query results and print each piece of data. Close the connection and return the query result.","<met> <mod> public </mod> type_identifier fetch <for> ( <for> type_identifier connection </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> descriptions = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : descriptions ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return descriptions ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all the columns in the books table with search as $search$ and get all the data. If the query result is not empty list, render and return result.html, where the books parameter is the query results.","public String result ( JdbcTemplate conn , String search , Model model ) { List res = conn . query ( "" select * from books where search = ? "" , new Object [ ] { search } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { model . addAttribute ( "" books "" , res ) ; return "" result.html "" ; } else { return null ; } }","Generate syntax code: Use $conn$ to query all the columns in the books table with search as $search$ and get all the data. If the query result is not empty list, render and return result.html, where the books parameter is the query results.","<met> <mod> public </mod> type_identifier result <for> ( <for> type_identifier conn </for> , <for> type_identifier search </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { search } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement: Get all the columns in the box_data according to $box_id$, execute SQL through the $conn$ connection, get all the data, and return the obtained data.","public List selectTable ( JdbcTemplate conn , String box_id ) { List results = conn . query ( "" select * from box_data where box_id = ? "" , new Object [ ] { box_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set the SQL statement: Get all the columns in the box_data according to $box_id$, execute SQL through the $conn$ connection, get all the data, and return the obtained data.","<met> <mod> public </mod> type_identifier selectTable <for> ( <for> type_identifier conn </for> , <for> type_identifier box_id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { box_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Try to use $url$ to get the database engine and execute the SQL ( get all columns from SCHEMATA where SCHEMA_NAME is $database$ ) and get all the data, return the query result, or return False.","public Object databaseExists ( DataSource url , String database ) { try { JdbcTemplate engine = new JdbcTemplate ( url ) ; List result = engine . query ( "" select * from schemata where schema_name = ? "" , new Object [ ] { database } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use $url$ to get the database engine and execute the SQL ( get all columns from SCHEMATA where SCHEMA_NAME is $database$ ) and get all the data, return the query result, or return False.","<met> <mod> public </mod> type_identifier databaseExists <for> ( <for> type_identifier url </for> , <for> type_identifier database </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { database } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the ORM method and $connection$ to execute SQL ( get all the columns in the $table_schema$ table where Creator is $creator$ ) , get all the data, then make sure that the $connection$ connection is closed, and finally return the query result.","public List getAllData ( EntityManager connection , Root < Object > table_schema , String creator ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_schema ) . where ( cb . equal ( table_schema . get ( "" creator "" ) , creator ) ) ; List < Object > res = connection . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the ORM method and $connection$ to execute SQL ( get all the columns in the $table_schema$ table where Creator is $creator$ ) , get all the data, then make sure that the $connection$ connection is closed, and finally return the query result.","<met> <mod> public </mod> type_identifier getAllData <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_schema </for> , <for> type_identifier creator </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table_schema ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table_schema . get <arg> ( string_literal ) </arg> </met> , creator ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to start a connection. Use java expressions to set SQL ( query the id in the $table$ table when col is $too_old$ ) . Use the connection to execute the SQL and get all the data. Finally, return the query result.","public List queryOldRecs ( EntityManager engine , Root < Object > table , String too_old ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" col "" ) , too_old ) ) ; List < Object > old_recs = engine . createQuery ( cq ) . getResultList ( ) ; return old_recs ; }","Generate syntax code: Use $engine$ to start a connection. Use java expressions to set SQL ( query the id in the $table$ table when col is $too_old$ ) . Use the connection to execute the SQL and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier queryOldRecs <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier too_old </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , too_old ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> old_recs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return old_recs ; </ret> } </blo> </met>"
"Generate origin code: Use the $db_conn$ connection to execute SQL ( query all columns in the imdb_actormovies table through $id$ ) , get all the data, return query results of type list.","public List getactorsMovie ( JdbcTemplate db_conn , String id ) { List db_result = db_conn . query ( "" select * from imdb_actormovies where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }","Generate syntax code: Use the $db_conn$ connection to execute SQL ( query all columns in the imdb_actormovies table through $id$ ) , get all the data, return query results of type list.","<met> <mod> public </mod> type_identifier getactorsMovie <for> ( <for> type_identifier db_conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> db_conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $db$, and the echo parameter is set to False. Try to execute the SQL statement ( query all the columns in the users table according to $number$ ) , get all the data, and return the query results. If an OperationalError exception is caught, return False.","public Object chkDB ( DataSource db , String number ) { try { JdbcTemplate engine = new JdbcTemplate ( db ) ; List result = engine . query ( "" select * from users where number= ? "" , new Object [ ] { number } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Get the database engine through $db$, and the echo parameter is set to False. Try to execute the SQL statement ( query all the columns in the users table according to $number$ ) , get all the data, and return the query results. If an OperationalError exception is caught, return False.","<met> <mod> public </mod> type_identifier chkDB <for> ( <for> type_identifier db </for> , <for> type_identifier number </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { number } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the $directory_uri$ to get database engine, execute SQL according to the java expression ( get the name column in the $sqlite_master$ table whose type is $type$ ) , get all the data, use for loop to store the 0th element of each item of the query result as a list type and return.","public List getNames ( EntityManager directory_uri , Root < Object > sqlite_master , String type ) { CriteriaBuilder cb = directory_uri . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( sqlite_master ) . where ( cb . equal ( sqlite_master . get ( "" type "" ) , type ) ) ; List < Object > names = directory_uri . createQuery ( cq ) . getResultList ( ) ; List got = new ArrayList ( ) ; for ( Object row : names ) { got . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return got ; }","Generate syntax code: Use the $directory_uri$ to get database engine, execute SQL according to the java expression ( get the name column in the $sqlite_master$ table whose type is $type$ ) , get all the data, use for loop to store the 0th element of each item of the query result as a list type and return.","<met> <mod> public </mod> type_identifier getNames <for> ( <for> type_identifier directory_uri </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sqlite_master </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> directory_uri . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( sqlite_master ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> sqlite_master . get <arg> ( string_literal ) </arg> </met> , type ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> names = <met> <met> directory_uri . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> got = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : names ) <blo> { <exp> <met> got . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return got ; </ret> } </blo> </met>"
"Generate origin code: Use the $testing$ to connect the database and execute SQL ( get the foo column in the test table according to $id$ ) , get the first piece of data, and finally return the query result.","public List getFoo ( DataSource testing , String id ) { JdbcTemplate conn = new JdbcTemplate ( testing ) ; List result = conn . query ( "" select foo from test where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use the $testing$ to connect the database and execute SQL ( get the foo column in the test table according to $id$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier getFoo <for> ( <for> type_identifier testing </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $session$ to execute SQL ( query all columns in TABLES when TABLE_SCHEMA equals $database_name$ ) and get all the data. In the for loop, the 0th element of each item of the query result is taken as the corresponding value of 'value' in the dictionary, the 1st element is used as the corresponding value of 'label' in the dictionary, and then add the dictionary to the list. Close $session$ and return the processed list.","public List findTableList ( JdbcTemplate session , String database_name ) { List result = session . query ( "" select * from tables where table_schema = ? "" , new Object [ ] { database_name } , new BeanPropertyRowMapper ( List . class ) ) ; List result_list = new ArrayList ( ) ; for ( Object r : result ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" value "" , JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; jsonObject . put ( "" label "" , JSONObject . parseObject ( r . toString ( ) ) . get ( 1 ) ) ; result_list . add ( jsonObject ) ; } return result_list ; }","Generate syntax code: Use $session$ to execute SQL ( query all columns in TABLES when TABLE_SCHEMA equals $database_name$ ) and get all the data. In the for loop, the 0th element of each item of the query result is taken as the corresponding value of 'value' in the dictionary, the 1st element is used as the corresponding value of 'label' in the dictionary, and then add the dictionary to the list. Close $session$ and return the processed list.","<met> <mod> public </mod> type_identifier findTableList <for> ( <for> type_identifier session </for> , <for> type_identifier database_name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { database_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : result ) <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> result_list . add <arg> ( jsonObject ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result_list ; </ret> } </blo> </met>"
Generate origin code: Try to use $conn$ to execute SQL ( get all columns in query_users table based on $user_id$ ) . Then set assertion to get all data with non-zero length and finally make sure $conn$ connection is closed.,"public void testRollbackOffConn ( JdbcTemplate conn , String user_id ) { try { List result = conn . query ( "" select * from query_users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; } finally { } }",Generate syntax code: Try to use $conn$ to execute SQL ( get all columns in query_users table based on $user_id$ ) . Then set assertion to get all data with non-zero length and finally make sure $conn$ connection is closed.,"<met> <mod> public </mod> void_type testRollbackOffConn <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> } </blo> <fin> finally <blo> { } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Open and read the file books.csv, use for loop to traverse the id and author in the file, use $conn$ to execute SQL ( query all the columns in the books table based on $id$ and $author$ ) , get all the query results, and print them.","public void main ( JdbcTemplate conn ) { String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String id = sc . nextLine ( ) ; String author = sc . nextLine ( ) ; List res = conn . query ( "" select * from books where id=? and author=? "" , new Object [ ] { id , author } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open and read the file books.csv, use for loop to traverse the id and author in the file, use $conn$ to execute SQL ( query all the columns in the books table based on $id$ and $author$ ) , get all the query results, and print them.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> id = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> author = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $e$ to establish the connection, set up the SQL ( query the price column in the cars table based on $carid$ ) , execute the SQL and get all the query result based on $conn$, and return the execution result.","public List selectValue ( DataSource e , String carid ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List prices = conn . query ( "" select price from cars where carid =? "" , new Object [ ] { carid } , new BeanPropertyRowMapper ( List . class ) ) ; return prices ; }","Generate syntax code: Use $e$ to establish the connection, set up the SQL ( query the price column in the cars table based on $carid$ ) , execute the SQL and get all the query result based on $conn$, and return the execution result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier e </for> , <for> type_identifier carid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> prices = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { carid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return prices ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the INFORMATION_SCHEMA where the TABLE_SCHEMA is $schemaname$ and the TABLE_NAME is $tablename$ ) using $conn$ and get all the data. The 0th and 1th elements of each item in the query result are treated as the key and value in the dictionary, and finally the processed dictionary is returned.","public List getTypes ( JdbcTemplate conn , String schemaname , String tablename ) { List res = conn . query ( "" select * from information_schema where table_schema =? and table_name =? "" , new Object [ ] { schemaname , tablename } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object re : res ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( JSONObject . parseObject ( re . toString ( ) ) . get ( 0 ) . toString ( ) , JSONObject . parseObject ( re . toString ( ) ) . get ( 1 ) ) ; list . add ( jsonObject ) ; } return list ; }","Generate syntax code: Execute the SQL ( get all the columns in the INFORMATION_SCHEMA where the TABLE_SCHEMA is $schemaname$ and the TABLE_NAME is $tablename$ ) using $conn$ and get all the data. The 0th and 1th elements of each item in the query result are treated as the key and value in the dictionary, and finally the processed dictionary is returned.","<met> <mod> public </mod> type_identifier getTypes <for> ( <for> type_identifier conn </for> , <for> type_identifier schemaname </for> , <for> type_identifier tablename </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schemaname , tablename } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier re : res ) <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( <met> <met> <met> JSONObject . parseObject <arg> ( <met> re . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> , <met> <met> JSONObject . parseObject <arg> ( <met> re . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> list . add <arg> ( jsonObject ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
Generate origin code: Connect to the database through $conn$ and execute SQL ( query all flight data in flights based on $flight_id$ ) . Use for loop to store the query results into list and return all the query results.,"public List flight ( JdbcTemplate conn , String flight_id ) { List flights = conn . query ( "" select flight from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( Object row : flights ) { res . add ( row ) ; } return res ; }",Generate syntax code: Connect to the database through $conn$ and execute SQL ( query all flight data in flights based on $flight_id$ ) . Use for loop to store the query results into list and return all the query results.,"<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : flights ) <blo> { <exp> <met> res . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query all the information in the $usersTB$ table based on $username$ and $password$ ) and get the first piece of data. If the query data exists, write True to the value corresponding to logged_in in the $session$ dictionary and redirect to '/ todo/page/1', otherwise redirect to '/ login'.","public String selectRes ( EntityManager conn , Root < Object > usersTB , String username , String password , HttpSession session ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( usersTB ) . where ( cb . equal ( usersTB . get ( "" username "" ) , username ) ) ; cq . select ( usersTB ) . where ( cb . equal ( usersTB . get ( "" password "" ) , password ) ) ; List < Object > users = conn . createQuery ( cq ) . getResultList ( ) ; if ( ! users . isEmpty ( ) ) { if ( session . getAttribute ( "" logged_in "" ) != null ) { return "" /todo/page/1 "" ; } else { return "" /login "" ; } } else { return "" /login "" ; } }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query all the information in the $usersTB$ table based on $username$ and $password$ ) and get the first piece of data. If the query data exists, write True to the value corresponding to logged_in in the $session$ dictionary and redirect to '/ todo/page/1', otherwise redirect to '/ login'.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> usersTB </for> , <for> type_identifier username </for> , <for> type_identifier password </for> , <for> type_identifier session </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( usersTB ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> usersTB . get <arg> ( string_literal ) </arg> </met> , username ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( usersTB ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> usersTB . get <arg> ( string_literal ) </arg> </met> , password ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> users . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement via $conn$ ( query 'author' and 'year' in the books table whose isbn is $ID$ ) . If the number of rows of execution results is 0, render and return error.html. Otherwise, render and return results.html, where the books parameter is all the obtained results.","public String search ( JdbcTemplate conn , String ID , Model model ) { List books = conn . query ( "" select author, year from books where isbn = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" results.html "" ; } }","Generate syntax code: Execute the SQL statement via $conn$ ( query 'author' and 'year' in the books table whose isbn is $ID$ ) . If the number of rows of execution results is 0, render and return error.html. Otherwise, render and return results.html, where the books parameter is all the obtained results.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier ID </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the girl information in the users table based on $name_User$ ) and get all the data. If the length of the query result is 0, print no data. Otherwise, use for loop to store the 0th element of each item of the query result and return.","public List getOne ( JdbcTemplate conn , String name_User ) { List texts = conn . query ( "" select girl from users where name_User= ? "" , new Object [ ] { name_User } , new BeanPropertyRowMapper ( List . class ) ) ; if ( texts . isEmpty ( ) ) { System . out . println ( "" no data "" ) ; return null ; } else { List girls = new ArrayList ( ) ; for ( Object i : texts ) { girls . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return girls ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the girl information in the users table based on $name_User$ ) and get all the data. If the length of the query result is 0, print no data. Otherwise, use for loop to store the 0th element of each item of the query result and return.","<met> <mod> public </mod> type_identifier getOne <for> ( <for> type_identifier conn </for> , <for> type_identifier name_User </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name_User } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> texts . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> girls = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : texts ) <blo> { <exp> <met> girls . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return girls ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Initialize the log module, try to use $db_url$ to get the database engine, connect the database, set SQL ( query the table_name column in the STDIN table according to $string_data_io$ ) , execute sql, get all the data, and return the query results. If an exception occurs during execution, output the info log.","public List appendToTable ( DataSource db_url , String string_data_io ) { try { JdbcTemplate connection = new JdbcTemplate ( db_url ) ; List copy_cmd = connection . query ( "" select table_name from stdin where string_data_io= ? "" , new Object [ ] { string_data_io } , new BeanPropertyRowMapper ( List . class ) ) ; return copy_cmd ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Initialize the log module, try to use $db_url$ to get the database engine, connect the database, set SQL ( query the table_name column in the STDIN table according to $string_data_io$ ) , execute sql, get all the data, and return the query results. If an exception occurs during execution, output the info log.","<met> <mod> public </mod> type_identifier appendToTable <for> ( <for> type_identifier db_url </for> , <for> type_identifier string_data_io </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> copy_cmd = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { string_data_io } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return copy_cmd ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL statement: Query all the columns in tb through $name$, using the % operator to match the conditions in the SQL string. Use the $conn$ connection to execute the SQL statement to get all the data and return all the query results.","public List dbEtlByname ( JdbcTemplate conn , String name ) { List res = conn . query ( "" select * from tb where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up the SQL statement: Query all the columns in tb through $name$, using the % operator to match the conditions in the SQL string. Use the $conn$ connection to execute the SQL statement to get all the data and return all the query results.","<met> <mod> public </mod> type_identifier dbEtlByname <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the first row of data in the flights table according to $gh_id$ ) , and if no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page, where the flight parameter is the query result.","public String flight ( JdbcTemplate conn , String gh_id , Model model ) { List flights = conn . query ( "" select * from flights where gh_id = ? "" , new Object [ ] { gh_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" flight "" , flights . get ( 0 ) ) ; return "" flight.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the first row of data in the flights table according to $gh_id$ ) , and if no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page, where the flight parameter is the query result.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier gh_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { gh_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect to the database through $tlengine$, try to execute a SQL: Query the name statistics in the query_users table, get the first piece of data, and return the query results. Finally, close the database connection.","public List testNesting ( DataSource tlengine ) { JdbcTemplate external_connection = new JdbcTemplate ( tlengine ) ; List res = external_connection . query ( "" select count(name) from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect to the database through $tlengine$, try to execute a SQL: Query the name statistics in the query_users table, get the first piece of data, and return the query results. Finally, close the database connection.","<met> <mod> public </mod> type_identifier testNesting <for> ( <for> type_identifier tlengine </for> ) </for> <blo> { <loc> type_identifier <var> external_connection = <obj> new type_identifier <arg> ( tlengine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> external_connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $url$, where the client_encoding parameter is 'utf8'. Query all columns in the person table where name is $name$ and psd is $psd$ through $con$, and get all the data. Use for loop to traverse the query results, print the corresponding values of name and lastname in the query results, and return all the query results.","public List person ( DataSource url , String name , String password ) { JdbcTemplate con = new JdbcTemplate ( url ) ; List infos = con . query ( "" select * from person where name = ? and psd = ? "" , new Object [ ] { name , password } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object info : infos ) { System . out . println ( JSONObject . parseObject ( info . toString ( ) ) . getString ( "" name "" ) ) ; System . out . println ( JSONObject . parseObject ( info . toString ( ) ) . getString ( "" lastname "" ) ) ; } return infos ; }","Generate syntax code: Get the database engine through $url$, where the client_encoding parameter is 'utf8'. Query all columns in the person table where name is $name$ and psd is $psd$ through $con$, and get all the data. Use for loop to traverse the query results, print the corresponding values of name and lastname in the query results, and return all the query results.","<met> <mod> public </mod> type_identifier person <for> ( <for> type_identifier url </for> , <for> type_identifier name </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> infos = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier info : infos ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> info . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> info . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return infos ; </ret> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query the ID in the $User$ table when NAME equals $name$ ) and get the first piece of data. If the query result is not None, return directly. Otherwise, return -1.","public Object load ( EntityManager conn , Root < Object > User , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" name "" ) , name ) ) ; List < Object > restids = conn . createQuery ( cq ) . getResultList ( ) ; if ( restids . isEmpty ( ) ) { return - 1 ; } else { return restids . get ( 0 ) ; } }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query the ID in the $User$ table when NAME equals $name$ ) and get the first piece of data. If the query result is not None, return directly. Otherwise, return -1.","<met> <mod> public </mod> type_identifier load <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> restids = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> restids . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <una> - decimal_integer_literal </una> ; </ret> } </blo> else <blo> { <ret> return <met> restids . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute SQL through the $conn$ connection ( query all columns in the users based on $email$ ) to get the first piece of data and return if the obtained data is not empty.,"public Object validateEmail ( JdbcTemplate conn , String email ) { List users = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return users . get ( 0 ) ; } }",Generate syntax code: Execute SQL through the $conn$ connection ( query all columns in the users based on $email$ ) to get the first piece of data and return if the obtained data is not empty.,"<met> <mod> public </mod> type_identifier validateEmail <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Set the SQL based on a java expression ( get the maximum value in $orders_intern$ where the werkorderID is $werkorderID$ ) . Execute SQL with $conn$ and get all the data. Close $conn$ and return the query results.,"public List getSource ( EntityManager conn , Root < Object > orders_intern , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( orders_intern ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }",Generate syntax code: Set the SQL based on a java expression ( get the maximum value in $orders_intern$ where the werkorderID is $werkorderID$ ) . Execute SQL with $conn$ and get all the data. Close $conn$ and return the query results.,"<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> orders_intern </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( orders_intern ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Use dbsession method of $conn$ to execute the SQL ( get the STGeometryType column in SHAPE based on $name$ ) and get all the data. Finally return the query result.,"public List findGisDatatypeOftable ( JdbcTemplate conn , String name ) { List st_type = conn . query ( "" select stgeometrytype from shape where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return st_type ; }",Generate syntax code: Use dbsession method of $conn$ to execute the SQL ( get the STGeometryType column in SHAPE based on $name$ ) and get all the data. Finally return the query result.,"<met> <mod> public </mod> type_identifier findGisDatatypeOftable <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> st_type = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return st_type ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the books where ratings_count is $ratings_count$ ) with $conn$, get all the data, and finally return the query result content handled by jsonify.","public JSONArray selectRecords ( JdbcTemplate conn , String ratings_count ) { List res = conn . query ( "" select * from books where ratings_count = ? "" , new Object [ ] { ratings_count } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( res . toString ( ) ) ; }","Generate syntax code: Execute the SQL ( get all the columns in the books where ratings_count is $ratings_count$ ) with $conn$, get all the data, and finally return the query result content handled by jsonify.","<met> <mod> public </mod> type_identifier selectRecords <for> ( <for> type_identifier conn </for> , <for> type_identifier ratings_count </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ratings_count } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> res . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( select all columns in the books table where title is $title$ ) with $conn$ and get all the data. Return the rendered search_result.html page, where the results parameter is the query result.","public String selectBooksValue ( JdbcTemplate conn , String title , Model model ) { List book_res = conn . query ( "" select * from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , book_res ) ; return "" search_result.html "" ; }","Generate syntax code: Execute the SQL statement ( select all columns in the books table where title is $title$ ) with $conn$ and get all the data. Return the rendered search_result.html page, where the results parameter is the query result.","<met> <mod> public </mod> type_identifier selectBooksValue <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book_res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book_res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $testing$, execute SQL ( query the user_name column in the users table according to $user_id$ ) , get all the query results, close the connection, and return the query results.","public List testMultipleTwoPhase ( DataSource testing , String user_id ) { JdbcTemplate conn = new JdbcTemplate ( testing ) ; List res = conn . query ( "" select user_name from users where user_id= ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect the database with $testing$, execute SQL ( query the user_name column in the users table according to $user_id$ ) , get all the query results, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier testMultipleTwoPhase <for> ( <for> type_identifier testing </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Experiment with SQL using $conn$ ( query schema_name information in schema where schema_id is $schema_id$ ) , and save element 0 for each item of all the data in the list. If an exception occurs, the exception is thrown based on the specific information of the exception. Finally, return query data.","public List getDatabases ( JdbcTemplate conn , String schema_id ) { List databases = new ArrayList ( ) ; try { List crs = conn . query ( "" select schema_name from schema where schema_id= ? "" , new Object [ ] { schema_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object line : crs ) { databases . add ( JSONObject . parseObject ( line . toString ( ) ) . get ( 0 ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } return databases ; }","Generate syntax code: Experiment with SQL using $conn$ ( query schema_name information in schema where schema_id is $schema_id$ ) , and save element 0 for each item of all the data in the list. If an exception occurs, the exception is thrown based on the specific information of the exception. Finally, return query data.","<met> <mod> public </mod> type_identifier getDatabases <for> ( <for> type_identifier conn </for> , <for> type_identifier schema_id </for> ) </for> <blo> { <loc> type_identifier <var> databases = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> crs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schema_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier line : crs ) <blo> { <exp> <met> databases . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> line . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return databases ; </ret> } </blo> </met>"
"Generate origin code: Try to use $db$ to execute SQL ( get the result column in the meishi_collection table where taskid is $id$ ) and get all the data. Use for loop to store each item in the query result as a list type. If an exception occurs during execution, the exception is printed.","public Object getResult ( JdbcTemplate db , String id ) { try { List rs = db . query ( "" select result from meishi_collection where taskid= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : rs ) { return item ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Try to use $db$ to execute SQL ( get the result column in the meishi_collection table where taskid is $id$ ) and get all the data. Use for loop to store each item in the query result as a list type. If an exception occurs during execution, the exception is printed.","<met> <mod> public </mod> type_identifier getResult <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rs = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : rs ) <blo> { <ret> return item ; </ret> } </blo> </enh> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the number of all columns in the 'table' table according to $value$, and use $conn$ to execute the SQL to get all the data. If the 0th element of the execution result is 0, return True; otherwise, return False.","public boolean singleCount ( JdbcTemplate conn , String value ) { List count = conn . query ( "" select count(*) from table where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; if ( Integer . parseInt ( JSONObject . parseObject ( count . get ( 0 ) . toString ( ) ) . toString ( ) ) == 0 ) { return true ; } else { return false ; } }","Generate syntax code: Set the SQL statement: Query the number of all columns in the 'table' table according to $value$, and use $conn$ to execute the SQL to get all the data. If the 0th element of the execution result is 0, return True; otherwise, return False.","<met> <mod> public </mod> boolean_type singleCount <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> count = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> Integer . parseInt <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> <met> count . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return true ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL statement with $session$ in ORM mode: query for the first password where the name of user is $user_name$ in the $User_bao$. Print query results and return.,"public Object selectRes ( EntityManager session , Root < Object > User_bao , String user_name ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User_bao ) . where ( cb . equal ( User_bao . get ( "" user_name "" ) , user_name ) ) ; List < Object > password_vals = session . createQuery ( cq ) . getResultList ( ) ; System . out . println ( password_vals . get ( 0 ) ) ; return password_vals . get ( 0 ) ; }",Generate syntax code: Execute the SQL statement with $session$ in ORM mode: query for the first password where the name of user is $user_name$ in the $User_bao$. Print query results and return.,"<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User_bao </for> , <for> type_identifier user_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User_bao ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User_bao . get <arg> ( string_literal ) </arg> </met> , user_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> password_vals = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> password_vals . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> password_vals . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database using $engine$. Try to query the columns in the sometable table through $tid$ and get the first data piece of and return the query results. If there is the Exception exception, print the exception message and set the exception manually using raise.","public List testInvalidateOnResults ( DataSource engine , String tid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; try { List result = conn . query ( "" select * from sometable where tid = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Connect to the database using $engine$. Try to query the columns in the sometable table through $tid$ and get the first data piece of and return the query results. If there is the Exception exception, print the exception message and set the exception manually using raise.","<met> <mod> public </mod> type_identifier testInvalidateOnResults <for> ( <for> type_identifier engine </for> , <for> type_identifier tid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db_string$. Execute the SQL statement ( query all the results of the id_cliente column in the locadora table based on $email$, $titulo$ and $id_estoque$ ) , close the connection, and return the query results.","public List taAlugado ( DataSource db_string , String titulo , String email , String id_estoque ) { JdbcTemplate connection = new JdbcTemplate ( db_string ) ; List cliente = connection . query ( "" select id_cliente from locadora where email=? and titulo=? and id_estoque=? "" , new Object [ ] { titulo , email , id_estoque } , new BeanPropertyRowMapper ( List . class ) ) ; return cliente ; }","Generate syntax code: Get the database engine and establish a connection through $db_string$. Execute the SQL statement ( query all the results of the id_cliente column in the locadora table based on $email$, $titulo$ and $id_estoque$ ) , close the connection, and return the query results.","<met> <mod> public </mod> type_identifier taAlugado <for> ( <for> type_identifier db_string </for> , <for> type_identifier titulo </for> , <for> type_identifier email </for> , <for> type_identifier id_estoque </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> cliente = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { titulo , email , id_estoque } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return cliente ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query the entire column in the booktable where the isbn is $isbn$ and get all the data. If the data retrieved is empty, render and return 'error.html'. Otherwise, the rendered book.html is returned and the books parameter is passed as the result of the query.","public String bookPage ( JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select * from booktable where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" books "" , books ) ; return "" book.html "" ; } }","Generate syntax code: Use $conn$ to query the entire column in the booktable where the isbn is $isbn$ and get all the data. If the data retrieved is empty, render and return 'error.html'. Otherwise, the rendered book.html is returned and the books parameter is passed as the result of the query.","<met> <mod> public </mod> type_identifier bookPage <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement: query all columns in the transactions where the id of tx is $tx_id$ and execute the SQL statement to get all the data through the $conn$ connection. The for loop iterates through the query results, which should be printed.","public void queryPage ( JdbcTemplate conn , String tx_id ) { List trans = conn . query ( "" select * from transactions where tx_id= ? "" , new Object [ ] { tx_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : trans ) { System . out . println ( r ) ; } }","Generate syntax code: Set the SQL statement: query all columns in the transactions where the id of tx is $tx_id$ and execute the SQL statement to get all the data through the $conn$ connection. The for loop iterates through the query results, which should be printed.","<met> <mod> public </mod> void_type queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier tx_id </for> ) </for> <blo> { <loc> type_identifier <var> trans = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tx_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : trans ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute the SQL statement using ORM through the $conn$ connection, which query all titles in $books$ based on $author$. Use A for loop to store each element in the query result in a list and return the list content.","public List selectRes ( EntityManager conn , Root < Object > books , String author ) { List booklist = new ArrayList ( ) ; CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( books ) . where ( cb . equal ( books . get ( "" author "" ) , author ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object i : values ) { booklist . add ( i ) ; } return booklist ; }","Generate syntax code: Execute the SQL statement using ORM through the $conn$ connection, which query all titles in $books$ based on $author$. Use A for loop to store each element in the query result in a list and return the list content.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> books </for> , <for> type_identifier author </for> ) </for> <blo> { <loc> type_identifier <var> booklist = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( books ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> books . get <arg> ( string_literal ) </arg> </met> , author ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : values ) <blo> { <exp> <met> booklist . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return booklist ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$, query the data in the $summary$ table where an id is $id$, and execute SQL to get the first piece of data. If the execution result is not empty, convert the execution result to dict and return.","public Object latestStatus ( EntityManager engine , Root < Object > summary , String id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( summary ) . where ( cb . equal ( summary . get ( "" id "" ) , id ) ) ; List < Object > rows = engine . createQuery ( cq ) . getResultList ( ) ; if ( rows . isEmpty ( ) ) { return null ; } else { return rows . get ( 0 ) ; } }","Generate syntax code: Connect to the database through $engine$, query the data in the $summary$ table where an id is $id$, and execute SQL to get the first piece of data. If the execution result is not empty, convert the execution result to dict and return.","<met> <mod> public </mod> type_identifier latestStatus <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> summary </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( summary ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> summary . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $SQLALCHEMY_DATABASE_URI$ and establish a connection. Execute the SQL statement ( query the ip column in the logs table according to $user_agent$ ) , get all the data, and return the query results.","public List logKaydet ( DataSource SQLALCHEMY_DATABASE_URI , String user_agent ) { JdbcTemplate con = new JdbcTemplate ( SQLALCHEMY_DATABASE_URI ) ; List ips = con . query ( "" select ip from logs where user_agent= ? "" , new Object [ ] { user_agent } , new BeanPropertyRowMapper ( List . class ) ) ; return ips ; }","Generate syntax code: Get the database engine through $SQLALCHEMY_DATABASE_URI$ and establish a connection. Execute the SQL statement ( query the ip column in the logs table according to $user_agent$ ) , get all the data, and return the query results.","<met> <mod> public </mod> type_identifier logKaydet <for> ( <for> type_identifier SQLALCHEMY_DATABASE_URI </for> , <for> type_identifier user_agent </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( SQLALCHEMY_DATABASE_URI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ips = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_agent } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ips ; </ret> } </blo> </met>"
"Generate origin code: Create a database engine based on $db_user$. In ORM mode, use the database engine to execute SQL ( query the id in the $Machines$ table based on $group_name$ ) and get all the data. Finally, return the query result.","public List < Object > getCondor ( EntityManager db_user , Root < Object > Machines , String group_name ) { CriteriaBuilder cb = db_user . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Machines ) . where ( cb . equal ( Machines . get ( "" group_name "" ) , group_name ) ) ; List < Object > machine_list = db_user . createQuery ( cq ) . getResultList ( ) ; return machine_list ; }","Generate syntax code: Create a database engine based on $db_user$. In ORM mode, use the database engine to execute SQL ( query the id in the $Machines$ table based on $group_name$ ) and get all the data. Finally, return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getCondor <for> ( <for> type_identifier db_user </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Machines </for> , <for> type_identifier group_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db_user . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Machines ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Machines . get <arg> ( string_literal ) </arg> </met> , group_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> machine_list = <met> <met> db_user . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return machine_list ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the otu_id in the samples table based on $sample_values$ ) and get all the results. Store the 0th element of each item of the query result in list and return with the serialization method.,"public List otuIdValues ( JdbcTemplate conn , String sample_values ) { List results = conn . query ( "" select otu_id from samples where sample_values=? "" , new Object [ ] { sample_values } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray otus = new JSONArray ( ) ; for ( Object item : results ) { otus . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return otus ; }",Generate syntax code: Use $conn$ to execute SQL ( query the otu_id in the samples table based on $sample_values$ ) and get all the results. Store the 0th element of each item of the query result in list and return with the serialization method.,"<met> <mod> public </mod> type_identifier otuIdValues <for> ( <for> type_identifier conn </for> , <for> type_identifier sample_values </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sample_values } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> otus = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : results ) <blo> { <exp> <met> otus . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return otus ; </ret> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Set up SQL ( query name column in 'table' table based on 'id': $tid$ ) , execute SQL and get all the query results, return query results.","public List selectValue ( DataSource engine , String tid ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List names = con . query ( "" select name from table where id = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; }","Generate syntax code: connect to the database based on $engine$. Set up SQL ( query name column in 'table' table based on 'id': $tid$ ) , execute SQL and get all the query results, return query results.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier tid </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> names = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return names ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $db$ ( query all columns in the books table according to $isbn$ ) and get all the query results ( query the review, rating, review_date, username column in the reviews table where book_id is $isbn$ ) , get all the query results, and return the rendered 'books.html' page. The parameter book is the 0th element of the first query result, and 'reviews' is the result of the second query.","public String getOne ( JdbcTemplate db , String isbn , Model model ) { List data = db . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List reviews = db . query ( "" select review, rating, review_date, username from reviews where book_id = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , data . get ( 0 ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" books.html "" ; }","Generate syntax code: Execute SQL with $db$ ( query all columns in the books table according to $isbn$ ) and get all the query results ( query the review, rating, review_date, username column in the reviews table where book_id is $isbn$ ) , get all the query results, and return the rendered 'books.html' page. The parameter book is the 0th element of the first query result, and 'reviews' is the result of the second query.","<met> <mod> public </mod> type_identifier getOne <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> reviews = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> data . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request method is POST, use $conn$ to execute SQL ( query all columns in the users table based on $uname$ ) and get all the query results. If there are query results, return the command redirected to / search. Finally return the 'login.html' page.","public Object login ( HttpRequest request , JdbcTemplate conn , String uname ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List col = conn . query ( "" select * from users where uname= ? "" , new Object [ ] { uname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( col . isEmpty ( ) ) { return "" login.html "" ; } else { return "" /search "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request method is POST, use $conn$ to execute SQL ( query all columns in the users table based on $uname$ ) and get all the query results. If there are query results, return the command redirected to / search. Finally return the 'login.html' page.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier uname </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> col = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> col . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Get the database engine using $db_config$. Use sessionmaker ( ) to create a configured Session class and bind the database engine. Instantiate the Session and execute the SQL statement using ORM method: Query the first piece of data in $Affiliation$ through $id$. Use logging.info ( ) to output the query results and return the query results.,"public List getValue ( EntityManager db_config , Root < Object > Affiliation , String id ) { CriteriaBuilder cb = db_config . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Affiliation ) . where ( cb . equal ( Affiliation . get ( "" id "" ) , id ) ) ; List < Object > values = db_config . createQuery ( cq ) . getResultList ( ) ; System . out . println ( values ) ; return values ; }",Generate syntax code: Get the database engine using $db_config$. Use sessionmaker ( ) to create a configured Session class and bind the database engine. Instantiate the Session and execute the SQL statement using ORM method: Query the first piece of data in $Affiliation$ through $id$. Use logging.info ( ) to output the query results and return the query results.,"<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier db_config </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Affiliation </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db_config . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Affiliation ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Affiliation . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> db_config . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( values ) </arg> </met> ; </exp> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Use the string format method to set the SQL ( query all the columns in the table where table_id is $id$ ) and print the SQL. , takes the connection in $db_engine$ and tries to execute the following code: execute the SQL using the connection and get all the data, print each piece of data using the for loop; close the connection and return the data. If an exception occurs, the exception's details are printed.","public List dbCgetAllDataonnect ( DataSource db_engine , String id ) { try { JdbcTemplate engine = new JdbcTemplate ( db_engine ) ; List result = engine . query ( "" select * from table where table_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } return result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Use the string format method to set the SQL ( query all the columns in the table where table_id is $id$ ) and print the SQL. , takes the connection in $db_engine$ and tries to execute the following code: execute the SQL using the connection and get all the data, print each piece of data using the for loop; close the connection and return the data. If an exception occurs, the exception's details are printed.","<met> <mod> public </mod> type_identifier dbCgetAllDataonnect <for> ( <for> type_identifier db_engine </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the voos table based on $origem$ and $destino$ ) , get all the query results, and use for loop to print each item of the query results.","public void main ( JdbcTemplate conn , String origem , String destino ) { List voos = conn . query ( "" select * from voos where origem=? and destino=? "" , new Object [ ] { origem , destino } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object voo : voos ) { System . out . println ( voo ) ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the voos table based on $origem$ and $destino$ ) , get all the query results, and use for loop to print each item of the query results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier origem </for> , <for> type_identifier destino </for> ) </for> <blo> { <loc> type_identifier <var> voos = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origem , destino } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier voo : voos ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( voo ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If $dataset_id$ has no value, return a dictionary converted to json format where the value of the error key is Need dataset_id.. Try to use $conn$ to execute SQL ( query all the columns in the Dataset table based on $dataset_id$ ) and get all the query results. Use for loop to convert the items field of each query result to dict, and store it in list and return. If an exception is caught, return False converted to json format.","public Object datasetPreview ( JdbcTemplate conn , String dataset_id ) { if ( dataset_id == null ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Need dataset_id "" ) ; return jsonObject ; } else { try { List rows = conn . query ( "" select * from dataset where dataset_id = ? "" , new Object [ ] { dataset_id } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray jsonArray = new JSONArray ( ) ; for ( Object row : rows ) { jsonArray . add ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" items "" ) ) ; } return jsonArray ; } catch ( Exception e ) { return JSONObject . parseObject ( "" False "" ) ; } } }","Generate syntax code: If $dataset_id$ has no value, return a dictionary converted to json format where the value of the error key is Need dataset_id.. Try to use $conn$ to execute SQL ( query all the columns in the Dataset table based on $dataset_id$ ) and get all the query results. Use for loop to convert the items field of each query result to dict, and store it in list and return. If an exception is caught, return False converted to json format.","<met> <mod> public </mod> type_identifier datasetPreview <for> ( <for> type_identifier conn </for> , <for> type_identifier dataset_id </for> ) </for> <blo> { <if_> if <par> ( <bin> dataset_id == null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> else <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dataset_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonArray = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> jsonArray . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return jsonArray ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return <met> JSONObject . parseObject <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> </cat> </try> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up the SQL statement to query all the data in the $product_area$ where name is $name$ using a java expression, execute the query with $conn$ and return all the query results.","public List queryOldRecs ( EntityManager conn , Root < Object > product_area , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( product_area ) . where ( cb . equal ( product_area . get ( "" name "" ) , name ) ) ; List < Object > area = conn . createQuery ( cq ) . getResultList ( ) ; return area ; }","Generate syntax code: Set up the SQL statement to query all the data in the $product_area$ where name is $name$ using a java expression, execute the query with $conn$ and return all the query results.","<met> <mod> public </mod> type_identifier queryOldRecs <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> product_area </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( product_area ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> product_area . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> area = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return area ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db_url$. Execute the SQL statement ( query all the columns in the postgis table according to $geochat$ ) , get all the data, close the connection, and print the query results.","public void create ( DataSource db_url , String geochat ) { JdbcTemplate conn = new JdbcTemplate ( db_url ) ; List cope = conn . query ( "" select * from postgis where geochat = ? "" , new Object [ ] { geochat } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( cope ) ; }","Generate syntax code: Get the database engine and establish a connection through $db_url$. Execute the SQL statement ( query all the columns in the postgis table according to $geochat$ ) , get all the data, close the connection, and print the query results.","<met> <mod> public </mod> void_type create <for> ( <for> type_identifier db_url </for> , <for> type_identifier geochat </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> cope = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { geochat } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( cope ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query all columns in $studentData$ table based on $Username$ ) . Execute the SQL with $conn$ and get the first piece of data, and return the query result.","public Object getFirstFormData ( EntityManager conn , Root < Object > studentData , String Username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( studentData ) . where ( cb . equal ( studentData . get ( "" Username "" ) , Username ) ) ; List < Object > students = conn . createQuery ( cq ) . getResultList ( ) ; return students . get ( 0 ) ; }","Generate syntax code: Set SQL based on the java expression: ( query all columns in $studentData$ table based on $Username$ ) . Execute the SQL with $conn$ and get the first piece of data, and return the query result.","<met> <mod> public </mod> type_identifier getFirstFormData <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> studentData </for> , <for> type_identifier Username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( studentData ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> studentData . get <arg> ( string_literal ) </arg> </met> , Username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> students = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> students . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, then execute the SQL ( get all columns in the spider_jam_post where baseurl is $category$ ) and get the first data, and return the query result.","public Object queryPostsByCategory ( DataSource DB_CONNECT_STRING , String category ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List results = engine . query ( "" select * from spider_jam_post where baseurl= ? "" , new Object [ ] { category } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, then execute the SQL ( get all columns in the spider_jam_post where baseurl is $category$ ) and get the first data, and return the query result.","<met> <mod> public </mod> type_identifier queryPostsByCategory <for> ( <for> type_identifier DB_CONNECT_STRING </for> , <for> type_identifier category </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DB_CONNECT_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { category } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get submitter column in the archive table based on $action_id$ ) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List selectValue ( JdbcTemplate conn , String action_id ) { try { List results = conn . query ( "" select submitter from archive where action_id = ? "" , new Object [ ] { action_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get submitter column in the archive table based on $action_id$ ) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier action_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { action_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $engine$ to connect to the database and execute SQL ( get all columns in the 'concat_table' table based on $value$ ) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List comToPol ( DataSource engine , String value ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List results = conn . query ( "" select * from concat_table where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $engine$ to connect to the database and execute SQL ( get all columns in the 'concat_table' table based on $value$ ) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","<met> <mod> public </mod> type_identifier comToPol <for> ( <for> type_identifier engine </for> , <for> type_identifier value </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use the java expression to set up the SQL statement with the following contents: Query all titles in $codetbl$ through $code_no$. Use the $conn$ connection to execute the SQL to get all the data and print them.,"public Object listOneNote ( EntityManager conn , Root < Object > codetbl , String code_no ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( codetbl ) . where ( cb . equal ( codetbl . get ( "" code_no "" ) , code_no ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( res ) ; }",Generate syntax code: Use the java expression to set up the SQL statement with the following contents: Query all titles in $codetbl$ through $code_no$. Use the $conn$ connection to execute the SQL to get all the data and print them.,"<met> <mod> public </mod> type_identifier listOneNote <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> codetbl </for> , <for> type_identifier code_no </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( codetbl ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> codetbl . get <arg> ( string_literal ) </arg> </met> , code_no ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the origin column in the flight table based on $dest$ and $duration$ ) , get all the query results, and use for loop to print each piece of the query results.","public void main ( JdbcTemplate conn , String dest , String duration ) { List flights = conn . query ( "" select origin from flight where dest=? and duration=? "" , new Object [ ] { dest , duration } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object origin : flights ) { System . out . println ( origin ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the origin column in the flight table based on $dest$ and $duration$ ) , get all the query results, and use for loop to print each piece of the query results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier dest </for> , <for> type_identifier duration </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dest , duration } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier origin : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( origin ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$ ( get the description column in 'places' based on $visited$ ) , get all the data, use for loop to store the 0th element of each item in the query as list type, close the $conn$ connection, and finally use jsonify to process the list content and return.","public JSONArray places ( JdbcTemplate conn , String datum ) { List rows = conn . query ( "" select description from places where visited= ? "" , new Object [ ] { visited } , new BeanPropertyRowMapper ( List . class ) ) ; List places = new ArrayList ( ) ; for ( Object row : rows ) { places . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( places . toString ( ) ) ; }","Generate syntax code: Execute SQL via $conn$ ( get the description column in 'places' based on $visited$ ) , get all the data, use for loop to store the 0th element of each item in the query as list type, close the $conn$ connection, and finally use jsonify to process the list content and return.","<met> <mod> public </mod> type_identifier places <for> ( <for> type_identifier conn </for> , <for> type_identifier datum </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { visited } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> places = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> places . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> places . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $mysql_str$. Set the SQL statement ( query the diamonds column in the ecommerce table based on $invoiceno$ and $stockcode$ ) , execute SQL, get the first piece of data, and return the query result.","public List sendToMysql ( DataSource mysql_str , String invoiceno , String stockcode ) { JdbcTemplate con = new JdbcTemplate ( mysql_str ) ; List dt = con . query ( "" select diamonds from ecommerce where invoiceno = ? and stockcode = ? "" , new Object [ ] { invoiceno , stockcode } , new BeanPropertyRowMapper ( List . class ) ) ; return dt ; }","Generate syntax code: Get the database engine and establish a connection through $mysql_str$. Set the SQL statement ( query the diamonds column in the ecommerce table based on $invoiceno$ and $stockcode$ ) , execute SQL, get the first piece of data, and return the query result.","<met> <mod> public </mod> type_identifier sendToMysql <for> ( <for> type_identifier mysql_str </for> , <for> type_identifier invoiceno </for> , <for> type_identifier stockcode </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( mysql_str ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> dt = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { invoiceno , stockcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return dt ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( query all columns in the combined table ) to get all the data and use jsonify to return the execution result.,"public JSONArray combined ( JdbcTemplate conn ) { List Combined = conn . query ( "" select * from combined "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( Combined . toString ( ) ) ; }",Generate syntax code: Use $conn$ to execute the SQL ( query all columns in the combined table ) to get all the data and use jsonify to return the execution result.,"<met> <mod> public </mod> type_identifier combined <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> Combined = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> Combined . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement : Query the the clause data in the 'table' table with key as $key$. If the number of rows in the query result is 0, return False. Otherwise, return the first piece of data of the query result.","public Object putKv ( JdbcTemplate conn , String key ) { List r = conn . query ( "" select clause from table where key = ? "" , new Object [ ] { key } , new BeanPropertyRowMapper ( List . class ) ) ; if ( r . isEmpty ( ) ) { return false ; } else { return r . get ( 0 ) ; } }","Generate syntax code: Use the $conn$ connection to execute the SQL statement : Query the the clause data in the 'table' table with key as $key$. If the number of rows in the query result is 0, return False. Otherwise, return the first piece of data of the query result.","<met> <mod> public </mod> type_identifier putKv <for> ( <for> type_identifier conn </for> , <for> type_identifier key </for> ) </for> <blo> { <loc> type_identifier <var> r = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { key } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> r . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> r . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use a java expression to set the SQL ( querying the id in $cache$ where namespace is $namespace$ and key is $key$ ) . Execute SQL with $conn$ and get all the data. Return the decision that whether the query result is greater than 0 or not.,"public void findIds ( EntityManager conn , Root < Object > cache , String key , String namespace ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cache ) . where ( cb . equal ( cache . get ( "" key "" ) , key ) ) ; cq . select ( cache ) . where ( cb . equal ( cache . get ( "" namespace "" ) , namespace ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; assert rows . size ( ) > 0 ; }",Generate syntax code: Use a java expression to set the SQL ( querying the id in $cache$ where namespace is $namespace$ and key is $key$ ) . Execute SQL with $conn$ and get all the data. Return the decision that whether the query result is greater than 0 or not.,"<met> <mod> public </mod> void_type findIds <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cache </for> , <for> type_identifier key </for> , <for> type_identifier namespace </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( cache ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cache . get <arg> ( string_literal ) </arg> </met> , key ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( cache ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cache . get <arg> ( string_literal ) </arg> </met> , namespace ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Set the SQL ( query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$ ) , execute the SQL with the $conn$ connection and return the retrieved query results.","public String book ( JdbcTemplate db , String book_isbn , Model model ) { List books = db . query ( "" select isbn, title, auther, year from books where isbn= ? "" , new Object [ ] { book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" bookinfo "" , books . get ( 0 ) ) ; return "" book.html "" ; }","Generate syntax code: Set the SQL ( query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$ ) , execute the SQL with the $conn$ connection and return the retrieved query results.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier db </for> , <for> type_identifier book_isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$ ) , execute the SQL with the $conn$ connection and return the retrieved query results.","public List queryPage ( JdbcTemplate conn , String id ) { List tasks = conn . query ( "" select evdate from frc_customsignals where taskid= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return tasks ; }","Generate syntax code: Set the SQL ( query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$ ) , execute the SQL with the $conn$ connection and return the retrieved query results.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> tasks = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return tasks ; </ret> } </blo> </met>"
"Generate origin code: Use $admin_engine$ to get the database connection and execute SQL ( query all data in the name column of the DATABASE table according to $ROLE$ ) , print the queried data, and close the connection.","public void setupDb ( DataSource admin_engine , String ROLE ) { JdbcTemplate conn = new JdbcTemplate ( admin_engine ) ; List data = conn . query ( "" select name from database where role=? "" , new Object [ ] { ROLE } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( data ) ; }","Generate syntax code: Use $admin_engine$ to get the database connection and execute SQL ( query all data in the name column of the DATABASE table according to $ROLE$ ) , print the queried data, and close the connection.","<met> <mod> public </mod> void_type setupDb <for> ( <for> type_identifier admin_engine </for> , <for> type_identifier ROLE </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( admin_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ROLE } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( data ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Get the database engine using $SQLconfig$ and connect the database using the raw_connection, then execute the SQL ( get all the columns in equity_data where the data of equity is $dataconfig$ ) and get the first data, then close the connection and return the result of the query.","public Object dataPrep ( DataSource SQLconfig , String dataconfig ) { JdbcTemplate conn = new JdbcTemplate ( SQLconfig ) ; List res = conn . query ( "" sselect * from equity_data where equity_data=? "" , new Object [ ] { dataconfig } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Get the database engine using $SQLconfig$ and connect the database using the raw_connection, then execute the SQL ( get all the columns in equity_data where the data of equity is $dataconfig$ ) and get the first data, then close the connection and return the result of the query.","<met> <mod> public </mod> type_identifier dataPrep <for> ( <for> type_identifier SQLconfig </for> , <for> type_identifier dataconfig </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( SQLconfig ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dataconfig } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute SQL via $conn$ ( get all the columns in 'Sells' based on $sell$ ) and get all the data. Convert each item of the query result to dictionary type and return.,"public List getSells ( JdbcTemplate conn , String sell ) { List rs = conn . query ( "" select * from sells where sell=? "" , new Object [ ] { sell } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }",Generate syntax code: Execute SQL via $conn$ ( get all the columns in 'Sells' based on $sell$ ) and get all the data. Convert each item of the query result to dictionary type and return.,"<met> <mod> public </mod> type_identifier getSells <for> ( <for> type_identifier conn </for> , <for> type_identifier sell </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sell } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as 'post', set SQL ( query all columns in the 'users' through $email$ ) , use $conn$ to execute SQL and get all the data. If the execution result is empty, use redirect to return / search; otherwise, render and return login.html.","public String login ( HttpRequest request , JdbcTemplate conn , String email ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List username_data = conn . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( username_data . isEmpty ( ) ) { return "" /search "" ; } else { return "" login.html "" ; } } else { return null ; } }","Generate syntax code: If the request module sends the request as 'post', set SQL ( query all columns in the 'users' through $email$ ) , use $conn$ to execute SQL and get all the data. If the execution result is empty, use redirect to return / search; otherwise, render and return login.html.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> username_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> username_data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute the following code: Use $engine$ to get a database connection; set up the SQL: query the description in the weather_predictions table based on $temp$, $temp_min$, $temp_max$ and $speed$; use the connection to execute the SQL and get all the data and finally return query results. If an exception occurs, print the details of the exception.","public List queryPredicted ( DataSource engine , String temp , String temp_min , String temp_max , String speed ) { try { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List values = connection . query ( "" select description from weather_predictions where temp=? and temp_min=? and temp_max=? and speed=? "" , new Object [ ] { temp , temp_min , temp_max , speed } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to execute the following code: Use $engine$ to get a database connection; set up the SQL: query the description in the weather_predictions table based on $temp$, $temp_min$, $temp_max$ and $speed$; use the connection to execute the SQL and get all the data and finally return query results. If an exception occurs, print the details of the exception.","<met> <mod> public </mod> type_identifier queryPredicted <for> ( <for> type_identifier engine </for> , <for> type_identifier temp </for> , <for> type_identifier temp_min </for> , <for> type_identifier temp_max </for> , <for> type_identifier speed </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> values = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { temp , temp_min , temp_max , speed } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in name_table based on $id_name$ ) and get all the data. Close the connection and return the query results.,"public List dropTable ( JdbcTemplate conn , String id_name ) { List res_go = conn . query ( "" select * from name_table where id_name= ? "" , new Object [ ] { id_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res_go ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in name_table based on $id_name$ ) and get all the data. Close the connection and return the query results.,"<met> <mod> public </mod> type_identifier dropTable <for> ( <for> type_identifier conn </for> , <for> type_identifier id_name </for> ) </for> <blo> { <loc> type_identifier <var> res_go = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res_go ; </ret> } </blo> </met>"
Generate origin code: Set up SQL statements using the java expression: Query all id data in the $TAGS$ table by $tag$. Use $conn$ to execute SQL statements and return query results.,"public List < Object > annotateNote ( EntityManager conn , Root < Object > TAGS , String tag ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( TAGS ) . where ( cb . equal ( TAGS . get ( "" tag "" ) , tag ) ) ; List < Object > information = conn . createQuery ( cq ) . getResultList ( ) ; return information ; }",Generate syntax code: Set up SQL statements using the java expression: Query all id data in the $TAGS$ table by $tag$. Use $conn$ to execute SQL statements and return query results.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> annotateNote <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> TAGS </for> , <for> type_identifier tag </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( TAGS ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> TAGS . get <arg> ( string_literal ) </arg> </met> , tag ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> information = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return information ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL based on the java expression ( get all the columns in the $reviews$ table where isbn is $isbn$ ) and get all the data. If the result of the query data is None, return error: Invalid ISBN processed by jsonify, and finally return the query result.","public Object api ( EntityManager db , Root < Object > reviews , String isbn ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( reviews ) . where ( cb . equal ( reviews . get ( "" isbn "" ) , isbn ) ) ; List < Object > rs = db . createQuery ( cq ) . getResultList ( ) ; if ( rs . isEmpty ( ) ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Invalid ISBN "" ) ; return jsonObject ; } return rs ; }","Generate syntax code: Use $db$ to execute SQL based on the java expression ( get all the columns in the $reviews$ table where isbn is $isbn$ ) and get all the data. If the result of the query data is None, return error: Invalid ISBN processed by jsonify, and finally return the query result.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> reviews </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( reviews ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> reviews . get <arg> ( string_literal ) </arg> </met> , isbn ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </if_> <ret> return rs ; </ret> } </blo> </met>"
Generate origin code: make the connection using $engine$. Execute the SQL statement ( query all columns in the Customer ) and get all the data. Print each item in the query result using a for loop.,"public void search ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }",Generate syntax code: make the connection using $engine$. Execute the SQL statement ( query all columns in the Customer ) and get all the data. Print each item in the query result using a for loop.,"<met> <mod> public </mod> void_type search <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Get the database engine from $uri$ and make the connection. Set SQL ( query all columns in the information_schema where TABLE_SCHEMA is $openstack_citest$ ) , execute SQL to get all the data and return it.","public List testMysqlInnodb ( DataSource uri , String openstack_citest ) { JdbcTemplate engine = new JdbcTemplate ( uri ) ; List results = engine . query ( "" select count(*) from information_schema where table_schema=? "" , new Object [ ] { openstack_citest } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Get the database engine from $uri$ and make the connection. Set SQL ( query all columns in the information_schema where TABLE_SCHEMA is $openstack_citest$ ) , execute SQL to get all the data and return it.","<met> <mod> public </mod> type_identifier testMysqlInnodb <for> ( <for> type_identifier uri </for> , <for> type_identifier openstack_citest </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { openstack_citest } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as GET, uses the $conn$ connection to execute the SQL ( query the first piece of username in the login through $user_id$ ) . Use for loop iterate through all the query results, print the query results. And take the query results as the corresponding value of username in the dictionary, render and return index.html, where the user parameter is the dictionary contents.","public String index ( HttpRequest request , JdbcTemplate conn , String user_id , Model model ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List s = new ArrayList ( ) ; List usernames = conn . query ( "" select username from login where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object username : usernames ) { s . add ( JSONObject . parseObject ( username . toString ( ) ) . getString ( "" username "" ) ) ; } model . addAttribute ( "" users "" , s ) ; return "" index.html "" ; } else { return null ; } }","Generate syntax code: If the request module sends the request as GET, uses the $conn$ connection to execute the SQL ( query the first piece of username in the login through $user_id$ ) . Use for loop iterate through all the query results, print the query results. And take the query results as the corresponding value of username in the dictionary, render and return index.html, where the user parameter is the dictionary contents.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> s = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> usernames = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier username : usernames ) <blo> { <exp> <met> s . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> username . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> model . addAttribute <arg> ( string_literal , s ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Set SQL ( query all the information in the books table based on title $booktitle$ ) . Use $conn$ to execute SQL and return the rendered 'search.html' page with the results parameter being the query result.,"public String selectValue ( JdbcTemplate conn , String booktitle , Model model ) { List results = conn . query ( "" select * from books where title = ? "" , new Object [ ] { booktitle } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" search.thtml "" ; }",Generate syntax code: Set SQL ( query all the information in the books table based on title $booktitle$ ) . Use $conn$ to execute SQL and return the rendered 'search.html' page with the results parameter being the query result.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier booktitle </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { booktitle } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Use the ORM method to execute SQL statement through $conn$ connection: Get all data in $City$ based on $name$. Set assertion to determine that the length of the returned result is not 0. Store the query results as list and return it.,"public Object getValue ( EntityManager conn , Root < Object > City , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( City ) . where ( cb . equal ( City . get ( "" name "" ) , name ) ) ; List < Object > rs = conn . createQuery ( cq ) . getResultList ( ) ; assert rs . size ( ) != 0 ; return rs ; }",Generate syntax code: Use the ORM method to execute SQL statement through $conn$ connection: Get all data in $City$ based on $name$. Set assertion to determine that the length of the returned result is not 0. Store the query results as list and return it.,"<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> City </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( City ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> City . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rs . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $app$. Set the SQL statement with the java expression: Get the data in the $days$ table through $date$. Execute the SQL statement, get all the data, and return the obtained data.","public Object getSource ( EntityManager app , Root < Object > days , String date ) { CriteriaBuilder cb = app . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( days ) . where ( cb . equal ( days . get ( "" date "" ) , date ) ) ; List < Object > days = app . createQuery ( cq ) . getResultList ( ) ; return days ; }","Generate syntax code: Get the database engine through $app$. Set the SQL statement with the java expression: Get the data in the $days$ table through $date$. Execute the SQL statement, get all the data, and return the obtained data.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier app </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> days </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> app . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( days ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> days . get <arg> ( string_literal ) </arg> </met> , date ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> days = <met> <met> app . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return days ; </ret> } </blo> </met>"
"Generate origin code: Try to create a cursor with $conn$, execute SQL ( query the taskid column in the rank_item table based on $result$ ) , use for loop to traverse all the obtained query results, and print the first element of each piece of data. If an Exception occurs during execution, print the exception.","public void start ( JdbcTemplate conn , String result ) { try { List data = conn . query ( "" select taskid from rank_item where result= ? "" , new Object [ ] { result } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object datum : data ) { System . out . println ( JSONObject . parseObject ( datum . toString ( ) ) . get ( 1 ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Try to create a cursor with $conn$, execute SQL ( query the taskid column in the rank_item table based on $result$ ) , use for loop to traverse all the obtained query results, and print the first element of each piece of data. If an Exception occurs during execution, print the exception.","<met> <mod> public </mod> void_type start <for> ( <for> type_identifier conn </for> , <for> type_identifier result </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { result } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier datum : data ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> datum . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the connection using $db_connect$. Set the SQL ( query for all columns in Employee where Employee_Id is $employee_id$ ) and execute the SQL. The keys of the result are executed as keys in the dictionary, each item in the result cursor is executed as a value, and all dict are stored in the list. Finally, return the serialized result of the list.","public JSONArray getEmployee ( JdbcTemplate db_connect , String employee_id ) { List result = db_connect . query ( "" select * from employee where employee_id = ? "" , new Object [ ] { employee_id } , new BeanPropertyRowMapper ( List . class ) ) ; List employees = new ArrayList ( ) ; for ( Object i : result ) { employees . add ( JSONObject . parseObject ( i . toString ( ) ) . getString ( "" keys "" ) ) ; } return JSONObject . parseArray ( employees . toString ( ) ) ; }","Generate syntax code: Get the connection using $db_connect$. Set the SQL ( query for all columns in Employee where Employee_Id is $employee_id$ ) and execute the SQL. The keys of the result are executed as keys in the dictionary, each item in the result cursor is executed as a value, and all dict are stored in the list. Finally, return the serialized result of the list.","<met> <mod> public </mod> type_identifier getEmployee <for> ( <for> type_identifier db_connect </for> , <for> type_identifier employee_id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db_connect . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { employee_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> employees = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : result ) <blo> { <exp> <met> employees . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> employees . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the format string matching method to set sql ( query the lat column in the acceleration table based on $long$ and $time$ ) , execute SQL with $conn$, get all the data, and use for loop to store the query results as list and return.","public List queryAcceleration ( JdbcTemplate conn , String longs , String time ) { List result = conn . query ( "" select lat from acceleration where long=? and time=? "" , new Object [ ] { longs , time } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use the format string matching method to set sql ( query the lat column in the acceleration table based on $long$ and $time$ ) , execute SQL with $conn$, get all the data, and use for loop to store the query results as list and return.","<met> <mod> public </mod> type_identifier queryAcceleration <for> ( <for> type_identifier conn </for> , <for> type_identifier longs </for> , <for> type_identifier time </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { longs , time } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $eng$ to execute SQL ( query all columns in the track_table according to $id$ ) , get all the query results, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","public List testStorageDataBlueprint ( JdbcTemplate eng , String id ) { List data = eng . query ( "" select * from track_table where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert data . size ( ) != 0 ; return data ; }","Generate syntax code: Use $eng$ to execute SQL ( query all columns in the track_table according to $id$ ) , get all the query results, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","<met> <mod> public </mod> type_identifier testStorageDataBlueprint <for> ( <for> type_identifier eng </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> eng . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> data . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL in java ( query all columns in $slivers$ where deleted is $deleted$ and status is $status$ ) , execute the SQL with $conn$ and get all the data. The for loop is used to store the values of the parsed_obj columns for each item in the query result in a list and return.","public List selectValue ( EntityManager conn , Root < Object > slivers , String deleted , String status ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( slivers ) . where ( cb . equal ( slivers . get ( "" deleted "" ) , deleted ) ) ; cq . select ( slivers ) . where ( cb . equal ( slivers . get ( "" status "" ) , status ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; List sl = new ArrayList ( ) ; for ( Object row : results ) { sl . add ( JSONObject . parseObject ( row . toString ( ) ) . getString ( "" parsed_ob "" ) ) ; } return sl ; }","Generate syntax code: Set up the SQL in java ( query all columns in $slivers$ where deleted is $deleted$ and status is $status$ ) , execute the SQL with $conn$ and get all the data. The for loop is used to store the values of the parsed_obj columns for each item in the query result in a list and return.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> slivers </for> , <for> type_identifier deleted </for> , <for> type_identifier status </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( slivers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> slivers . get <arg> ( string_literal ) </arg> </met> , deleted ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( slivers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> slivers . get <arg> ( string_literal ) </arg> </met> , status ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> sl = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> sl . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return sl ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the data table according to $work_ratings_count$ ) and get all the query results. If the query result is empty, return the rendered 404.html page; otherwise, return the rendered api.json, where the parameter api is the query result.","public String api ( JdbcTemplate conn , String work_ratings_count , Model model ) { List data = conn . query ( "" select * from data where work_ratings_count= ? "" , new Object [ ] { work_ratings_count } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . isEmpty ( ) ) { return "" 404.html "" ; } else { model . addAttribute ( "" api "" , data ) ; return "" api.json "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the data table according to $work_ratings_count$ ) and get all the query results. If the query result is empty, return the rendered 404.html page; otherwise, return the rendered api.json, where the parameter api is the query result.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier work_ratings_count </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { work_ratings_count } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine by $PG_URL$, execute the SQL statement ( get eventid in gino_users based on $username$ ) , get all the data, and finally return the result.","public List engine ( DataSource PG_URL , String username ) { JdbcTemplate e = new JdbcTemplate ( PG_URL ) ; List res = e . query ( "" select eventid from gino_users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine by $PG_URL$, execute the SQL statement ( get eventid in gino_users based on $username$ ) , get all the data, and finally return the result.","<met> <mod> public </mod> type_identifier engine <for> ( <for> type_identifier PG_URL </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( PG_URL ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> e . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine through $mysql$ and create a connection based on the engine. Use the connection to execute SQL ( query all columns in the create_database table ) and get all the data. Finally, return the query result directly.","public List mysqlSel ( DataSource mysql ) { JdbcTemplate e = new JdbcTemplate ( mysql ) ; List result_create = e . query ( "" select * from create_database ? "" , new BeanPropertyRowMapper ( List . class ) ) ; return result_create ; }","Generate syntax code: Create the database engine through $mysql$ and create a connection based on the engine. Use the connection to execute SQL ( query all columns in the create_database table ) and get all the data. Finally, return the query result directly.","<met> <mod> public </mod> type_identifier mysqlSel <for> ( <for> type_identifier mysql </for> ) </for> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( mysql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result_create = <met> e . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result_create ; </ret> } </blo> </met>"
"Generate origin code: Use $db1$ to get the database connection. Set the SQL with the java expression ( query the nextid in the $ids$ table based on $for_update$ ) . Execute the SQL and get all the data. Finally, return the query result.","public List idGenerator ( EntityManager db1 , Root < Object > ids , String for_update ) { CriteriaBuilder cb = db1 . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ids ) . where ( cb . equal ( ids . get ( "" for_update "" ) , for_update ) ) ; List < Object > results = db1 . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Use $db1$ to get the database connection. Set the SQL with the java expression ( query the nextid in the $ids$ table based on $for_update$ ) . Execute the SQL and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier idGenerator <for> ( <for> type_identifier db1 </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ids </for> , <for> type_identifier for_update </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db1 . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ids ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ids . get <arg> ( string_literal ) </arg> </met> , for_update ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> db1 . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get all columns in test based on $data$ ) and get all the data, print query result, close $conn$ connection, and finally return query result.","public List task ( JdbcTemplate conn , String data ) { List res = conn . query ( "" select * from test where data= ? "" , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; return res ; }","Generate syntax code: Execute SQL with $conn$ ( get all columns in test based on $data$ ) and get all the data, print query result, close $conn$ connection, and finally return query result.","<met> <mod> public </mod> type_identifier task <for> ( <for> type_identifier conn </for> , <for> type_identifier data </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { data } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Try to set up sql ( query all columns in the $cache$ table according to $namespace$ ) , use $conn$ to execute the java expression to query all data and return the query results. Return False if an IOError, OSError, EOFError exception occurs during execution.","public Object doOpen ( EntityManager conn , Root < Object > cache , String namespace ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cache ) . where ( cb . equal ( cache . get ( "" namespace "" ) , namespace ) ) ; List < Object > stor = conn . createQuery ( cq ) . getResultList ( ) ; return stor ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to set up sql ( query all columns in the $cache$ table according to $namespace$ ) , use $conn$ to execute the java expression to query all data and return the query results. Return False if an IOError, OSError, EOFError exception occurs during execution.","<met> <mod> public </mod> type_identifier doOpen <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cache </for> , <for> type_identifier namespace </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( cache ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cache . get <arg> ( string_literal ) </arg> </met> , namespace ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> stor = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return stor ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use for loop to traverse the execution results of the following code: Execute SQL with $conn$ ( query the password column in the user table based on $usr_name$ ) , get all the query results, store them as list, and finally return.","public List handler ( JdbcTemplate conn , String usr_name ) { List result = new ArrayList ( ) ; List res = conn . query ( "" select password from user where usr_name= ? "" , new Object [ ] { usr_name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : res ) { result . add ( row ) ; } return result ; }","Generate syntax code: Use for loop to traverse the execution results of the following code: Execute SQL with $conn$ ( query the password column in the user table based on $usr_name$ ) , get all the query results, store them as list, and finally return.","<met> <mod> public </mod> type_identifier handler <for> ( <for> type_identifier conn </for> , <for> type_identifier usr_name </for> ) </for> <blo> { <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { usr_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> result . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Open and read the file books.csv and convert the data into a list. Use for loop to iterate through the first data in this list to the end and get the value corresponding to the 'year' field in the database. Set the SQL ( query all columns in the booktable table based on 'year' ) , execute the SQL based on $conn$, get all the data, and return the query result.","public List selectValue ( JdbcTemplate conn ) { List books = new ArrayList ( ) ; String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String year = sc . nextLine ( ) ; books = conn . query ( "" select * from booktable where year = ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } return books ; }","Generate syntax code: Open and read the file books.csv and convert the data into a list. Use for loop to iterate through the first data in this list to the end and get the value corresponding to the 'year' field in the database. Set the SQL ( query all columns in the booktable table based on 'year' ) , execute the SQL based on $conn$, get all the data, and return the query result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> books = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> year = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <exp> <ass> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </ass> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return books ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the flights table with id as $flight_id$ ) and get the first piece of data. Finally return the rendered flight.html, where the flight parameter is the query result.","public String flight ( JdbcTemplate conn , String flight_id , Model model ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights . get ( 0 ) ) ; return "" flight.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the flights table with id as $flight_id$ ) and get the first piece of data. Finally return the rendered flight.html, where the flight parameter is the query result.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database engine using $testing$. Set the SQL ( query all columns for users where the id of user is $user_id$ ) , execute the SQL and get all the data. Close the database connection and return the result of the query.","public List selectValue ( DataSource testing , String user_id ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; List results = connection . query ( "" select * from users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Connect to the database engine using $testing$. Set the SQL ( query all columns for users where the id of user is $user_id$ ) , execute the SQL and get all the data. Close the database connection and return the result of the query.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier testing </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ ) , get all the data, insert the data one by one into a list, close the connection, and return list.","public List main ( JdbcTemplate conn , String isbn ) { List query = conn . query ( "" select * from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List csv = new ArrayList ( ) ; for ( Object i : query ) { csv . add ( i ) ; } return csv ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ ) , get all the data, insert the data one by one into a list, close the connection, and return list.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> csv = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> csv . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return csv ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query all the columns in books where isbn is $isbn$ and return all the data ) . Execute an SQL statement with $conn$ to get all the data, return None if the query result is empty, otherwise return the query result.","public List selectApi ( JdbcTemplate conn , String isbn ) { List book_res = conn . query ( "" select * from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book_res . isEmpty ( ) ) { return null ; } else { return book_res ; } }","Generate syntax code: Set the SQL statement ( query all the columns in books where isbn is $isbn$ and return all the data ) . Execute an SQL statement with $conn$ to get all the data, return None if the query result is empty, otherwise return the query result.","<met> <mod> public </mod> type_identifier selectApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> book_res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book_res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return book_res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $DB_URI$ to get the database engine and execute SQL ( get all the columns in the TABLE based on $FOREIGN_KEY_CHECKS$ ) , get all the data and return the query result. If there is a SQLAlchemyError error, print the error and exit the system.","public List dbConnection ( DataSource DB_URI , String FOREIGN_KEY_CHECKS ) { try { JdbcTemplate connection = new JdbcTemplate ( DB_URI ) ; List res = connection . query ( "" select * from table where foreign_key_checks= ? "" , new Object [ ] { FOREIGN_KEY_CHECKS } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $DB_URI$ to get the database engine and execute SQL ( get all the columns in the TABLE based on $FOREIGN_KEY_CHECKS$ ) , get all the data and return the query result. If there is a SQLAlchemyError error, print the error and exit the system.","<met> <mod> public </mod> type_identifier dbConnection <for> ( <for> type_identifier DB_URI </for> , <for> type_identifier FOREIGN_KEY_CHECKS </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( DB_URI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { FOREIGN_KEY_CHECKS } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use $conn$ to execute SQL ( query all the login_info in the login_table through $user_name$ ) and return all the query results.","public List defav ( HttpRequest request , JdbcTemplate conn , String user_name ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select login_info from login_table where user_name= ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return null ; } }","Generate syntax code: If the request module sends the request in a post method, use $conn$ to execute SQL ( query all the login_info in the login_table through $user_name$ ) and return all the query results.","<met> <mod> public </mod> type_identifier defav <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user_name </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to establish a connection, set up SQL ( query all the information in the mock_calls table based on $id$ ) , use $conn$ to execute SQL and get all the query results, close the connection, and return the query results.","public List selectValue ( DataSource db , String id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List calls = engine . query ( "" select * from mock_calls where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return calls ; }","Generate syntax code: Use $db$ to establish a connection, set up SQL ( query all the information in the mock_calls table based on $id$ ) , use $conn$ to execute SQL and get all the query results, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> calls = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return calls ; </ret> } </blo> </met>"
"Generate origin code: Query all the columns in the books table where 'author' is $author$ through $conn$, get all the data, render and return books.html, where the books parameter is the query result.","public String books ( JdbcTemplate conn , String author , Model model ) { List books = conn . query ( "" select * from mock_calls where id = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" books "" , books ) ; return "" books.html "" ; }","Generate syntax code: Query all the columns in the books table where 'author' is $author$ through $conn$, get all the data, render and return books.html, where the books parameter is the query result.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier conn </for> , <for> type_identifier author </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database, then use the java expression to execute SQL ( get all columns in the $tbl_events$ table with EID as $EID$ ) and get all the data. Further arrange $engine$ and finally return the query results.","public Object editEvent ( EntityManager engine , Root < Object > tbl_events , String EID ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tbl_events ) . where ( cb . equal ( tbl_events . get ( "" EID "" ) , EID ) ) ; List < Object > results = engine . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Use $engine$ to connect to the database, then use the java expression to execute SQL ( get all columns in the $tbl_events$ table with EID as $EID$ ) and get all the data. Further arrange $engine$ and finally return the query results.","<met> <mod> public </mod> type_identifier editEvent <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tbl_events </for> , <for> type_identifier EID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tbl_events ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tbl_events . get <arg> ( string_literal ) </arg> </met> , EID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $engine$ ( get all the columns in the testtable table according to $id$ ) , get the first piece of data, then set the assertion that the length of the query result is 1, and finally return the query result.","public Object testFirst ( JdbcTemplate engine , String id ) { List results = engine . query ( "" select * from testtable where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) == 1 ; return results . get ( 0 ) ; }","Generate syntax code: Execute SQL with $engine$ ( get all the columns in the testtable table according to $id$ ) , get the first piece of data, then set the assertion that the length of the query result is 1, and finally return the query result.","<met> <mod> public </mod> type_identifier testFirst <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine via $db_connection_string$, execute the SQL statement ( get the id column in 'places'based on $suggested_by$ ) , get all the data, and finally return the query result.","public List connect ( DataSource db_connection_string , String suggested_by ) { JdbcTemplate engine = new JdbcTemplate ( db_connection_string ) ; List Session = engine . query ( "" select id from places where suggested_by= ? "" , new Object [ ] { suggested_by } , new BeanPropertyRowMapper ( List . class ) ) ; return Session ; }","Generate syntax code: Get the database engine via $db_connection_string$, execute the SQL statement ( get the id column in 'places'based on $suggested_by$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier connect <for> ( <for> type_identifier db_connection_string </for> , <for> type_identifier suggested_by </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_connection_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> Session = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { suggested_by } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return Session ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the courses table according to $universities$ ) and get all the query results. If the query results are not empty, return the rendered 'all_courses.html' page, where the parameter courses is set to the query results.","public String allCourses ( JdbcTemplate conn , String universities , Model model ) { List courses = conn . query ( "" select * from courses where universities = ? "" , new Object [ ] { universities } , new BeanPropertyRowMapper ( List . class ) ) ; if ( courses . isEmpty ( ) ) { return null ; } else { model . addAttribute ( "" courses "" , courses ) ; return "" all_courses.html "" ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the courses table according to $universities$ ) and get all the query results. If the query results are not empty, return the rendered 'all_courses.html' page, where the parameter courses is set to the query results.","<met> <mod> public </mod> type_identifier allCourses <for> ( <for> type_identifier conn </for> , <for> type_identifier universities </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> courses = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { universities } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> courses . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , courses ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $sql_engine$ to connect the database, execute SQL according to the java expression ( get all the columns in the $ideas_table$ table where idea_id is $id$ ) , get the first piece of data, then convert the 0th element of the query result to list type, and return False if the list content is None.","public boolean findIdea ( EntityManager sql_engine , Root < Object > ideas_table , String id ) { CriteriaBuilder cb = sql_engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ideas_table ) . where ( cb . equal ( ideas_table . get ( "" id "" ) , id ) ) ; List < Object > results = sql_engine . createQuery ( cq ) . getResultList ( ) ; Object idea_info = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; if ( idea_info == null ) { return false ; } else { return true ; } }","Generate syntax code: Use $sql_engine$ to connect the database, execute SQL according to the java expression ( get all the columns in the $ideas_table$ table where idea_id is $id$ ) , get the first piece of data, then convert the 0th element of the query result to list type, and return False if the list content is None.","<met> <mod> public </mod> boolean_type findIdea <for> ( <for> type_identifier sql_engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ideas_table </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sql_engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ideas_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ideas_table . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> sql_engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> idea_info = <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> idea_info == null_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the rank information in the ncbi_nodes table based on $tax_id$ ) , get all the data, convert each item of the query result to a dict type and return. If an exception occurs, return False.","public Object queryPage ( JdbcTemplate conn , String tax_id ) { try { List resrank = conn . query ( "" select rank from ncbi_nodes where tax_id= ? "" , new Object [ ] { tax_id } , new BeanPropertyRowMapper ( List . class ) ) ; return resrank ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the rank information in the ncbi_nodes table based on $tax_id$ ) , get all the data, convert each item of the query result to a dict type and return. If an exception occurs, return False.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier tax_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> resrank = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tax_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return resrank ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get all the columns in the $Zoo$ table where 'Name' is $Name$ ) and get the first row of data. Set the assertion that the length of the query result is greater than 0, and return the query result.","public Object testBaseline6Editing ( EntityManager conn , Root < Object > Zoo , String Name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Zoo ) . where ( cb . equal ( Zoo . get ( "" Name "" ) , Name ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; assert res . size ( ) > 0 ; return res . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get all the columns in the $Zoo$ table where 'Name' is $Name$ ) and get the first row of data. Set the assertion that the length of the query result is greater than 0, and return the query result.","<met> <mod> public </mod> type_identifier testBaseline6Editing <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Zoo </for> , <for> type_identifier Name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Zoo ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Zoo . get <arg> ( string_literal ) </arg> </met> , Name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the SQL statement ( query all the columns in the mat where curso is $curso$ ) with $conn$ and return after getting all the data. If an Exception is thrown, the specific Exception information is printed and False is returned.","public Object listarMateriasNome ( JdbcTemplate conn , String curso ) { try { List mats = conn . query ( "" select * from mat where curso = ? "" , new Object [ ] { curso } , new BeanPropertyRowMapper ( List . class ) ) ; return mats ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Try to execute the SQL statement ( query all the columns in the mat where curso is $curso$ ) with $conn$ and return after getting all the data. If an Exception is thrown, the specific Exception information is printed and False is returned.","<met> <mod> public </mod> type_identifier listarMateriasNome <for> ( <for> type_identifier conn </for> , <for> type_identifier curso </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> mats = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { curso } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return mats ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get all the columns in the Machines_sql where id is $id$ ) to get all the data, disconnect the database, and return the query results.","public List selectMachines ( JdbcTemplate conn , String id ) { List Machines_results = conn . query ( "" select * from machines_sql where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return Machines_results ; }","Generate syntax code: Execute SQL with $conn$ ( get all the columns in the Machines_sql where id is $id$ ) to get all the data, disconnect the database, and return the query results.","<met> <mod> public </mod> type_identifier selectMachines <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> Machines_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return Machines_results ; </ret> } </blo> </met>"
Generate origin code: Experiment with $conn$ to execute SQL ( querying the title information where movieId is $movieId$ in Movie ) and get all the data. Converts each item in the query result to a dict type and return. Return False if an exception occurs.,"public Object getMovie ( JdbcTemplate conn , String movieId ) { try { List res = conn . query ( "" select title from Movie where movieId= ? "" , new Object [ ] { movieId } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }",Generate syntax code: Experiment with $conn$ to execute SQL ( querying the title information where movieId is $movieId$ in Movie ) and get all the data. Converts each item in the query result to a dict type and return. Return False if an exception occurs.,"<met> <mod> public </mod> type_identifier getMovie <for> ( <for> type_identifier conn </for> , <for> type_identifier movieId </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { movieId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $Zoo$ table based on $Name$ ) . Execute SQL through $conn$, get all the data, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","public List < Object > testBaseline6Editing ( EntityManager conn , Root < Object > Zoo , String Name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Zoo ) . where ( cb . equal ( Zoo . get ( "" Name "" ) , Name ) ) ; List < Object > opens = conn . createQuery ( cq ) . getResultList ( ) ; assert opens . size ( ) != 0 ; return opens ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $Zoo$ table based on $Name$ ) . Execute SQL through $conn$, get all the data, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testBaseline6Editing <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Zoo </for> , <for> type_identifier Name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Zoo ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Zoo . get <arg> ( string_literal ) </arg> </met> , Name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> opens = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> opens . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return opens ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the id column in the reviews table where isbn is $isbn$ ) with $conn$ and get all the data, return False if the query result is None, otherwise return the query result.","public Object api ( JdbcTemplate conn , String isbn ) { List info = conn . query ( "" select id from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( info . isEmpty ( ) ) { return false ; } else { return info ; } }","Generate syntax code: Execute the SQL ( get the id column in the reviews table where isbn is $isbn$ ) with $conn$ and get all the data, return False if the query result is None, otherwise return the query result.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> info = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> info . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return info ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Query all the columns in the indicators table through $conn$, get all the data, and return the query results.","public List findProject ( JdbcTemplate conn ) { List results = conn . query ( "" select * from indicators ? "" , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Query all the columns in the indicators table through $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier findProject <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $mytable$ table based on $name$ ) . Execute SQL through $conn$, get all the data, and return the query result.","public List < Object > testSelectWithDictColumn ( EntityManager conn , Root < Object > mytable , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( mytable ) . where ( cb . equal ( mytable . get ( "" name "" ) , name ) ) ; List < Object > yes = conn . createQuery ( cq ) . getResultList ( ) ; return yes ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $mytable$ table based on $name$ ) . Execute SQL through $conn$, get all the data, and return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testSelectWithDictColumn <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> mytable </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( mytable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> mytable . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> yes = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return yes ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to get all 'name' with 'id': $id$ in $Country$ table by the way of ORM, set assertion to determine if the 0th element of the returned result is equal to Germany, and finally return the 0th element.","public Object testCountryId3 ( EntityManager conn , Root < Object > Country , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Country ) . where ( cb . equal ( Country . get ( "" id "" ) , id ) ) ; List < Object > country = conn . createQuery ( cq ) . getResultList ( ) ; assert country . get ( 0 ) . toString ( ) . equals ( "" Germany "" ) ; return country . get ( 0 ) ; }","Generate syntax code: Use $conn$ to get all 'name' with 'id': $id$ in $Country$ table by the way of ORM, set assertion to determine if the 0th element of the returned result is equal to Germany, and finally return the 0th element.","<met> <mod> public </mod> type_identifier testCountryId3 <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Country </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Country ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Country . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> country = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <met> <met> <met> country . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ; </ass> <ret> return <met> country . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the users table based on $email$ ) and get the first row of data. If no results are found, return the rendered error.html page; otherwise, return the query result.","public Object registerUser ( JdbcTemplate conn , String email ) { List users = conn . query ( "" select * from users where email= ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return "" error.html "" ; } else { return users . get ( 0 ) ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the users table based on $email$ ) and get the first row of data. If no results are found, return the rendered error.html page; otherwise, return the query result.","<met> <mod> public </mod> type_identifier registerUser <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement using the $conn$ connection ( get all the meta in user where the name of meta is $name_meta$ ) , store the 0th element of the query result, and return it.","public Object testNoneIsEncodedAsEmptyFict ( JdbcTemplate conn , String name_meta ) { List result = conn . query ( "" select meta from user where name_meta= ? "" , new Object [ ] { name_meta } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = result . get ( 0 ) ; return row ; }","Generate syntax code: Execute the SQL statement using the $conn$ connection ( get all the meta in user where the name of meta is $name_meta$ ) , store the 0th element of the query result, and return it.","<met> <mod> public </mod> type_identifier testNoneIsEncodedAsEmptyFict <for> ( <for> type_identifier conn </for> , <for> type_identifier name_meta </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name_meta } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: Try to set up SQL ( query all the books columns where isbn is $isbn$ ) , execute the SQL statement with $conn$, obtain all the data and return it. If an exception occurs, 'error' is printed.","public Object selectBooks ( JdbcTemplate conn , String isbn ) { try { List result_book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return result_book ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set up SQL ( query all the books columns where isbn is $isbn$ ) , execute the SQL statement with $conn$, obtain all the data and return it. If an exception occurs, 'error' is printed.","<met> <mod> public </mod> type_identifier selectBooks <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> result_book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result_book ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use ORM and by the way of $conn$ to get all the column data in the $tables$ table with 'column': $value_column$. If the data is not empty, return the query result. If an exception occurs during execution, return False.","public Object selectDb ( EntityManager conn , Root < Object > select_db , String value_column ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( select_db ) . where ( cb . equal ( select_db . get ( "" column "" ) , value_column ) ) ; List < Object > kueridb = conn . createQuery ( cq ) . getResultList ( ) ; if ( ! kueridb . isEmpty ( ) ) { return kueridb ; } else { return null ; } } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use ORM and by the way of $conn$ to get all the column data in the $tables$ table with 'column': $value_column$. If the data is not empty, return the query result. If an exception occurs during execution, return False.","<met> <mod> public </mod> type_identifier selectDb <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> select_db </for> , <for> type_identifier value_column </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( select_db ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> select_db . get <arg> ( string_literal ) </arg> </met> , value_column ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> kueridb = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> kueridb . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return kueridb ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Execute the SQL statement ( query all the columns in the Likes ) with $conn$ and get all the data. Convert each item of the query result to a dict and return it as a list.,"public List getLikes ( JdbcTemplate conn ) { List rs = conn . query ( "" select * from likes "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }",Generate syntax code: Execute the SQL statement ( query all the columns in the Likes ) with $conn$ and get all the data. Convert each item of the query result to a dict and return it as a list.,"<met> <mod> public </mod> type_identifier getLikes <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $e$, then execute the SQL ( get the id column in the JPY table ) , further use for loop to store the keywords and subscripts of each item of the query results processed by the cursor method as tuple. Compress the tuple and convert it to the dictionary type. Finally return 'data' and the contents of dictionary.","public List get ( DataSource e ) { JdbcTemplate engine = new JdbcTemplate ( e ) ; List result = engine . query ( "" select id from jpy "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Connect to the database through $e$, then execute the SQL ( get the id column in the JPY table ) , further use for loop to store the keywords and subscripts of each item of the query results processed by the cursor method as tuple. Compress the tuple and convert it to the dictionary type. Finally return 'data' and the contents of dictionary.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Execute the first piece of SQL based on $db$ ( get the reviews column processed by the counting method in the reviews table based on $isbn$ ) and get the first piece of data. Then execute the second piece of SQL through $db$ ( get the rating column in the reviews table based on $isbn$ ) and get all the data. Further use for loop to print the 0th element of the second piece of SQL query result, and then count the number of the 0th element of the second piece of SQL query result. At the end of the for loop, compare the number of the 0th element of the second piece of SQL query result to the number of the 0th element of the first piece of SQL query result and finally return the ratio.","public int api ( JdbcTemplate db , String isbn ) { List review_counts = db . query ( "" select count(review) from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List rating = db . query ( "" select rating from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; int avg_rating = 0 ; for ( Object rate : rating ) { System . out . println ( JSONObject . parseObject ( rate . toString ( ) ) . get ( 0 ) ) ; avg_rating += Integer . parseInt ( JSONObject . parseObject ( rate . toString ( ) ) . get ( 0 ) . toString ( ) ) ; } avg_rating = avg_rating / Integer . parseInt ( JSONObject . parseObject ( review_counts . get ( 0 ) . toString ( ) ) . get ( 0 ) . toString ( ) ) ; return avg_rating ; }","Generate syntax code: Execute the first piece of SQL based on $db$ ( get the reviews column processed by the counting method in the reviews table based on $isbn$ ) and get the first piece of data. Then execute the second piece of SQL through $db$ ( get the rating column in the reviews table based on $isbn$ ) and get all the data. Further use for loop to print the 0th element of the second piece of SQL query result, and then count the number of the 0th element of the second piece of SQL query result. At the end of the for loop, compare the number of the 0th element of the second piece of SQL query result to the number of the 0th element of the first piece of SQL query result and finally return the ratio.","<met> <mod> public </mod> <int> int </int> api <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> review_counts = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> rating = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> avg_rating = decimal_integer_literal </var> ; </loc> <enh> for ( type_identifier rate : rating ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> rate . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <ass> avg_rating += <met> Integer . parseInt <arg> ( <met> <met> <met> JSONObject . parseObject <arg> ( <met> rate . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </ass> ; </exp> } </blo> </enh> <exp> <ass> avg_rating = <bin> avg_rating / <met> Integer . parseInt <arg> ( <met> <met> <met> JSONObject . parseObject <arg> ( <met> <met> review_counts . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </bin> </ass> ; </exp> <ret> return avg_rating ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database via $db$, execute SQL ( get all the columns processed by the counting method in the query_users table based on $user_id$ ) and get all the data. Set the length of the assertion query result to 0, and finally close the connection.","public void testNesting ( DataSource db , String user_id ) { JdbcTemplate connection = new JdbcTemplate ( db ) ; List result = connection . query ( "" select count(*) from query_users where user_id= ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) == 0 ; }","Generate syntax code: Connect to the database via $db$, execute SQL ( get all the columns processed by the counting method in the query_users table based on $user_id$ ) and get all the data. Set the length of the assertion query result to 0, and finally close the connection.","<met> <mod> public </mod> void_type testNesting <for> ( <for> type_identifier db </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get all the columns in the books where isbn is $isbn$ ) and get the first data, return No Such A Book if the query result is None, otherwise return the query result.","public Object api ( JdbcTemplate conn , String isbn ) { List bdatas = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( bdatas . isEmpty ( ) ) { return "" No Such A Book "" ; } else { return bdatas . get ( 0 ) ; } }","Generate syntax code: Execute the SQL with $conn$ ( get all the columns in the books where isbn is $isbn$ ) and get the first data, return No Such A Book if the query result is None, otherwise return the query result.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> bdatas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> bdatas . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> bdatas . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute SQL with $conn$ ( query job_id in the tasks where the index of task is $task_index$ ) and get all the data. Then print and return the query results.,"public List insertKeys ( JdbcTemplate conn , String task_index ) { List jobs = conn . query ( "" select job_id from tasks where task_index= ? "" , new Object [ ] { task_index } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( jobs ) ; return jobs ; }",Generate syntax code: Execute SQL with $conn$ ( query job_id in the tasks where the index of task is $task_index$ ) and get all the data. Then print and return the query results.,"<met> <mod> public </mod> type_identifier insertKeys <for> ( <for> type_identifier conn </for> , <for> type_identifier task_index </for> ) </for> <blo> { <loc> type_identifier <var> jobs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { task_index } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( jobs ) </arg> </met> ; </exp> <ret> return jobs ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all the data in the validISBN column of the books table based on $work_ratings_count$ ) , return the query data if there is a query result; otherwise, return None. If an exception occurs during execution, return False.","public Object bookPage ( JdbcTemplate conn , String work_ratings_count ) { try { List goodreads = conn . query ( "" select validISBN from books where work_ratings_count =? "" , new Object [ ] { work_ratings_count } , new BeanPropertyRowMapper ( List . class ) ) ; if ( goodreads . isEmpty ( ) ) { return null ; } else { return goodreads ; } } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all the data in the validISBN column of the books table based on $work_ratings_count$ ) , return the query data if there is a query result; otherwise, return None. If an exception occurs during execution, return False.","<met> <mod> public </mod> type_identifier bookPage <for> ( <for> type_identifier conn </for> , <for> type_identifier work_ratings_count </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> goodreads = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { work_ratings_count } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> goodreads . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return goodreads ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement as follows: Query the origin column in the flights table through $destination$, use the $conn$ connection to execute SQL, get all the data, convert each item of the query result to dict, store it as list, and return.","public List selectOrigin ( JdbcTemplate conn , String destination ) { List origins = conn . query ( "" select origin from flights where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; return origins ; }","Generate syntax code: Set the SQL statement as follows: Query the origin column in the flights table through $destination$, use the $conn$ connection to execute SQL, get all the data, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier selectOrigin <for> ( <for> type_identifier conn </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> origins = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return origins ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to set up the SQL statement to: Select all the addr in $locati$ based on $trip_name$. Use the $conn$ connection to execute the SQL to get all the data and print them.,"public void apiCall ( EntityManager conn , Root < Object > locati , String trip_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( locati ) . where ( cb . equal ( locati . get ( "" trip_name "" ) , trip_name ) ) ; List < Object > finals = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( finals ) ; }",Generate syntax code: Use the java expression to set up the SQL statement to: Select all the addr in $locati$ based on $trip_name$. Use the $conn$ connection to execute the SQL to get all the data and print them.,"<met> <mod> public </mod> void_type apiCall <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> locati </for> , <for> type_identifier trip_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( locati ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> locati . get <arg> ( string_literal ) </arg> </met> , trip_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> finals = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( finals ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $con$ to execute SQL ( query the equation column in the samples table according to $id$ ) , get all the query results, close the connection, and use for loop to store the 0th element of each article of the query result as list and return.","public List getEquations ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select equation from samples where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : result ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use $con$ to execute SQL ( query the equation column in the samples table according to $id$ ) , get all the query results, close the connection, and use for loop to store the 0th element of each article of the query result as list and return.","<met> <mod> public </mod> type_identifier getEquations <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
Generate origin code: Use $db$ to execute SQL ( get the amount column in the accounts table based on $name$ and $id$ ) and get the first record. Finally return the query result.,"public Object getAmount ( JdbcTemplate db , String name , String id ) { List ams = db . query ( "" select amount from accounts where name=? and id=? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; return ams . get ( 0 ) ; }",Generate syntax code: Use $db$ to execute SQL ( get the amount column in the accounts table based on $name$ and $id$ ) and get the first record. Finally return the query result.,"<met> <mod> public </mod> type_identifier getAmount <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ams = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> ams . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( query all columns in the email table based on $username$ ) , execute the SQL based on $conn$ and get all the query results. Close the connection, use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List getRecords ( JdbcTemplate conn , String username ) { List results = conn . query ( "" select * from email where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; List emails = new ArrayList ( ) ; for ( Object i : results ) { emails . add ( i ) ; } return emails ; }","Generate syntax code: Set up the SQL ( query all columns in the email table based on $username$ ) , execute the SQL based on $conn$ and get all the query results. Close the connection, use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getRecords <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> emails = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> emails . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return emails ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ to query all the columns in the stock table with date as $date$, get all the data, print the query result and return it.","public List setStockTradingDayList ( JdbcTemplate conn , String date ) { List info = conn . query ( "" select * from stock where date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( info ) ; return info ; }","Generate syntax code: Use the $conn$ to query all the columns in the stock table with date as $date$, get all the data, print the query result and return it.","<met> <mod> public </mod> type_identifier setStockTradingDayList <for> ( <for> type_identifier conn </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> info = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( info ) </arg> </met> ; </exp> <ret> return info ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine through $uri$, set the SQL statement: Get the id data in the 'testtable' table according to $name$, execute the SQL statement through the database engine, and set the assertion to determine that the length of the execution result is 2.","public void testKeys ( DataSource uri , String name ) { JdbcTemplate engine = new JdbcTemplate ( uri ) ; List keys = engine . query ( "" select id from testtable where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; assert keys . size ( ) == 2 ; }","Generate syntax code: Create the database engine through $uri$, set the SQL statement: Get the id data in the 'testtable' table according to $name$, execute the SQL statement through the database engine, and set the assertion to determine that the length of the execution result is 2.","<met> <mod> public </mod> void_type testKeys <for> ( <for> type_identifier uri </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> keys = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> keys . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Get the database engine using $connection_string$, execute the SQL ( get all the columns in the table where name is $name$ ) , get all the data, and finally return the query results.","public List getRes ( DataSource connection_string , String name ) { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List res = engine . query ( "" select * from table where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine using $connection_string$, execute the SQL ( get all the columns in the table where name is $name$ ) , get all the data, and finally return the query results.","<met> <mod> public </mod> type_identifier getRes <for> ( <for> type_identifier connection_string </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( connection_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method and the params string matching method to set SQL ( get all the columns in the $Week$ table where week_id is $week_id$ ) , and use $session$ to get the first piece of data. If the query data is not empty, convert it to the value of 'week' key in the dictionary and the json structure, and return.","public JSONObject get ( EntityManager session , Root < Object > Week , String week_id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Week ) . where ( cb . equal ( Week . get ( "" week_id "" ) , week_id ) ) ; List < Object > weeks = session . createQuery ( cq ) . getResultList ( ) ; JSONObject week_json = new JSONObject ( ) ; if ( ! weeks . isEmpty ( ) ) { week_json = JSONObject . parseObject ( weeks . get ( 0 ) . toString ( ) ) ; } return week_json ; }","Generate syntax code: Use the ORM method and the params string matching method to set SQL ( get all the columns in the $Week$ table where week_id is $week_id$ ) , and use $session$ to get the first piece of data. If the query data is not empty, convert it to the value of 'week' key in the dictionary and the json structure, and return.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Week </for> , <for> type_identifier week_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Week ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Week . get <arg> ( string_literal ) </arg> </met> , week_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> weeks = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> week_json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <if_> if <par> ( <una> ! <met> weeks . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <ass> week_json = <met> JSONObject . parseObject <arg> ( <met> <met> weeks . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </ass> ; </exp> } </blo> </if_> <ret> return week_json ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement to: Get all the columns in the books table based on $isbn$, use $conn$ connection to execute the SQL and get the first piece of data. If the obtained result is empty or the query result is an empty list, set the query result to False; otherwise, set the query result to True. Render and return info_book.html, where the info parameter is the query result.","public String queryBook ( JdbcTemplate conn , String isbn , Model model ) { List infos = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; boolean info ; if ( infos . isEmpty ( ) ) { info = false ; } else { info = true ; } model . addAttribute ( "" info "" , info ) ; return "" info_book.html "" ; }","Generate syntax code: Set the SQL statement to: Get all the columns in the books table based on $isbn$, use $conn$ connection to execute the SQL and get the first piece of data. If the obtained result is empty or the query result is an empty list, set the query result to False; otherwise, set the query result to True. Render and return info_book.html, where the info parameter is the query result.","<met> <mod> public </mod> type_identifier queryBook <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> infos = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> boolean_type <var> info </var> ; </loc> <if_> if <par> ( <met> infos . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <ass> info = false </ass> ; </exp> } </blo> else <blo> { <exp> <ass> info = true </ass> ; </exp> } </blo> </if_> <exp> <met> model . addAttribute <arg> ( string_literal , info ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to use the $conn$ connection to execute SQL: To query all the columns in the users table based on $username$ and $password$, get the first piece of data, and return the obtained data. If there is an Exception, use raise to throw an exception based on the error message.","public Object login ( JdbcTemplate conn , String username , String password ) { try { List logs = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; return logs . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use the $conn$ connection to execute SQL: To query all the columns in the users table based on $username$ and $password$, get the first piece of data, and return the obtained data. If there is an Exception, use raise to throw an exception based on the error message.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> logs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> logs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $session$ to execute SQL ( query 'id' in the User table based on $name$ ) and get all the data. Then execute commit method on $session$ and close, and finally return the query result.","public List tellData ( JdbcTemplate session , String name ) { List res = session . query ( "" select id from User where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $session$ to execute SQL ( query 'id' in the User table based on $name$ ) and get all the data. Then execute commit method on $session$ and close, and finally return the query result.","<met> <mod> public </mod> type_identifier tellData <for> ( <for> type_identifier session </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to get the database engine, execute SQL ( get all the columns in the 'Table' table according to $id$ ) , get the first row of data, and finally return the query result.","public Object testFetchone ( DataSource db , String id ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List results = engine . query ( "" select * from Table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Use $db$ to get the database engine, execute SQL ( get all the columns in the 'Table' table according to $id$ ) , get the first row of data, and finally return the query result.","<met> <mod> public </mod> type_identifier testFetchone <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the date in runs table based on $dist$, use the $conn$ connection to execute SQL and get all the data. Use for loop to store the second element of each item in the query result into list and return the list content.","public List index ( JdbcTemplate conn , String dist ) { List result = conn . query ( "" select date from runs where dist = ? "" , new Object [ ] { dist } , new BeanPropertyRowMapper ( List . class ) ) ; List recent_runs = new ArrayList ( ) ; for ( Object row : result ) { recent_runs . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return recent_runs ; }","Generate syntax code: Set the SQL statement: Query the date in runs table based on $dist$, use the $conn$ connection to execute SQL and get all the data. Use for loop to store the second element of each item in the query result into list and return the list content.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier dist </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dist } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> recent_runs = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> recent_runs . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return recent_runs ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $db_connect$, set the SQL statement ( query all the columns in the customers table according to $id$ ) , execute the SQL statement to get all the data, convert each item of the execution result into dict, store it as list, and return the execution result through jsonify.","public JSONArray get ( JdbcTemplate db_connect , String id ) { List result = db_connect . query ( "" select * from customers where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; }","Generate syntax code: Connect to the database through $db_connect$, set the SQL statement ( query all the columns in the customers table according to $id$ ) , execute the SQL statement to get all the data, convert each item of the execution result into dict, store it as list, and return the execution result through jsonify.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier db_connect </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db_connect . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the $engine$ to connect the database, execute SQL according to the java expression ( get the values column in the $regression$ table whose measure_id is $mid$ ) , get all the data, and finally return the query result.","public List < Object > getValues ( EntityManager engine , Root < Object > regression , String mid ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( regression ) . where ( cb . equal ( regression . get ( "" measure_id "" ) , mid ) ) ; List < Object > vs = engine . createQuery ( cq ) . getResultList ( ) ; return vs ; }","Generate syntax code: Use the $engine$ to connect the database, execute SQL according to the java expression ( get the values column in the $regression$ table whose measure_id is $mid$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getValues <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> regression </for> , <for> type_identifier mid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( regression ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> regression . get <arg> ( string_literal ) </arg> </met> , mid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> vs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return vs ; </ret> } </blo> </met>"
"Generate origin code: If username is not empty, use $conn$ to execute SQL ( query all columns in the username table based on $username$ ) , get all the query results, and return the rendered 'login.html' page, where the parameter users is the query result; otherwise, return the rendered 'error.html' page.","public String loginFunc ( JdbcTemplate conn , String username , Model model ) { if ( username == null ) { List users = conn . query ( "" select * from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" users "" , users ) ; return "" login.html "" ; } else { return "" error.html "" ; } }","Generate syntax code: If username is not empty, use $conn$ to execute SQL ( query all columns in the username table based on $username$ ) , get all the query results, and return the rendered 'login.html' page, where the parameter users is the query result; otherwise, return the rendered 'error.html' page.","<met> <mod> public </mod> type_identifier loginFunc <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <bin> username == null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine based on $DB_CONNECT_STRING$, where the max_overflow parameter is 5. Then execute the SQL ( get the profileurl column in the portal_profile table ) and get all the data. Use for loop to print each item of the query results.","public void startRequests ( DataSource DB_CONNECT_STRING ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List profileurls = engine . query ( "" select profileurl from portal_profile "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : profileurls ) { System . out . println ( i ) ; } }","Generate syntax code: Get the database engine based on $DB_CONNECT_STRING$, where the max_overflow parameter is 5. Then execute the SQL ( get the profileurl column in the portal_profile table ) and get all the data. Use for loop to print each item of the query results.","<met> <mod> public </mod> void_type startRequests <for> ( <for> type_identifier DB_CONNECT_STRING </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DB_CONNECT_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> profileurls = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : profileurls ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Use $engine$ to connect to the database and execute SQL based on the java expression ( get all columns in the $RESULT_TABLE$ table with time greater than $start$ and time less than $end$ ) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"public List getStates ( EntityManager engine , Root < Object > RESULT_TABLE , String start , String end ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( RESULT_TABLE ) . where ( cb . between ( RESULT_TABLE . get ( "" time "" ) , start , end ) ) ; List < Object > rows = engine . createQuery ( cq ) . getResultList ( ) ; List ret = new ArrayList ( ) ; for ( Object row : rows ) { ret . add ( row ) ; } return ret ; }",Generate syntax code: Use $engine$ to connect to the database and execute SQL based on the java expression ( get all columns in the $RESULT_TABLE$ table with time greater than $start$ and time less than $end$ ) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"<met> <mod> public </mod> type_identifier getStates <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> RESULT_TABLE </for> , <for> type_identifier start </for> , <for> type_identifier end </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( RESULT_TABLE ) </arg> </met> . where <arg> ( <met> cb . between <arg> ( <met> RESULT_TABLE . get <arg> ( string_literal ) </arg> </met> , start , end ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ret = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> ret . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ret ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to set the SQL statement to get all the question_record in the $question$ table based on $question_id$. Use $conn$ connection to execute the SQL statement and return all the query results.,"public List getQuestion ( EntityManager conn , Root < Object > question , String question_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( question ) . where ( cb . equal ( question . get ( "" url "" ) , question_id ) ) ; List < Object > records = conn . createQuery ( cq ) . getResultList ( ) ; return records ; }",Generate syntax code: Use the java expression to set the SQL statement to get all the question_record in the $question$ table based on $question_id$. Use $conn$ connection to execute the SQL statement and return all the query results.,"<met> <mod> public </mod> type_identifier getQuestion <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> question </for> , <for> type_identifier question_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( question ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> question . get <arg> ( string_literal ) </arg> </met> , question_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> records = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return records ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to execute SQL ( query all columns in the data_dict table according to $LIMIT$ ) , get all the query results, and set assertions to determine whether the query result length is not equal to 0. Use for loop to traverse all the query results obtained with for loop, insert each piece of data into a list, and return the list.","public List search ( JdbcTemplate engine , String LIMIT ) { List result = engine . query ( "" select * from data_dict where limit= ? "" , new Object [ ] { LIMIT } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) != 0 ; List fields_info = new ArrayList ( ) ; for ( Object name : result ) { fields_info . add ( name ) ; } return fields_info ; }","Generate syntax code: Use $engine$ to execute SQL ( query all columns in the data_dict table according to $LIMIT$ ) , get all the query results, and set assertions to determine whether the query result length is not equal to 0. Use for loop to traverse all the query results obtained with for loop, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier engine </for> , <for> type_identifier LIMIT </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { LIMIT } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <loc> type_identifier <var> fields_info = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier name : result ) <blo> { <exp> <met> fields_info . add <arg> ( name ) </arg> </met> ; </exp> } </blo> </enh> <ret> return fields_info ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL statement: Query the id data in t table with 'name': $name$, execute SQL by $conn$ to get all the data, print and return the result of the execution statement.","public List test ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select id from t where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; return result ; }","Generate syntax code: Set up SQL statement: Query the id data in t table with 'name': $name$, execute SQL by $conn$ to get all the data, print and return the result of the execution statement.","<met> <mod> public </mod> type_identifier test <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: If the request method is POST, execute the following code: set SQL ( querying $email$ in users where username is $username$ and password is $password$ ) . Execute SQL with $conn$ and get all the data. If the query result is equal to None, return the rendered 'index.html' and pass the parameter of message into 'fail', otherwise, return to rendered 'search.html'.","public Object singIn ( HttpRequest request , JdbcTemplate conn , String username , String password , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select email from users where username=? and password=? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" fail "" ) ; return "" index.html "" ; } else { return "" search.html "" ; } } else { return null ; } }","Generate syntax code: If the request method is POST, execute the following code: set SQL ( querying $email$ in users where username is $username$ and password is $password$ ) . Execute SQL with $conn$ and get all the data. If the query result is equal to None, return the rendered 'index.html' and pass the parameter of message into 'fail', otherwise, return to rendered 'search.html'.","<met> <mod> public </mod> type_identifier singIn <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( query all columns in the flights ) with $conn$, get all the data, and print it using the for loop.","public void searchFlight ( JdbcTemplate conn ) { List flights = conn . query ( "" select * from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } }","Generate syntax code: Execute the SQL statement ( query all columns in the flights ) with $conn$, get all the data, and print it using the for loop.","<met> <mod> public </mod> void_type searchFlight <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( flight ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set up the SQL using a java expression ( query all the data in $dbname$ where col is $col$ ) , execute the SQL over the $conn$ connection and return the acquired data.","public List < Object > queryTb ( EntityManager conn , Root < Object > dbname , String col ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( dbname ) . where ( cb . equal ( dbname . get ( "" col "" ) , col ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Set up the SQL using a java expression ( query all the data in $dbname$ where col is $col$ ) , execute the SQL over the $conn$ connection and return the acquired data.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryTb <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> dbname </for> , <for> type_identifier col </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( dbname ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> dbname . get <arg> ( string_literal ) </arg> </met> , col ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $url$, where the echo parameter is assigned to False, and establish a connection. Try to execute the SQL statement ( query all the columns in the test_data table according to $DbProp$ ) and get all the data, return the query results, and finally close the connection.","public List dbConnect ( DataSource url , String DbProp ) { try { JdbcTemplate engine = new JdbcTemplate ( url ) ; List kanou = engine . query ( "" select * from test_data where dbprop= ? "" , new Object [ ] { DbProp } , new BeanPropertyRowMapper ( List . class ) ) ; return kanou ; } finally { return null ; } }","Generate syntax code: Get the database engine through $url$, where the echo parameter is assigned to False, and establish a connection. Try to execute the SQL statement ( query all the columns in the test_data table according to $DbProp$ ) and get all the data, return the query results, and finally close the connection.","<met> <mod> public </mod> type_identifier dbConnect <for> ( <for> type_identifier url </for> , <for> type_identifier DbProp </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> kanou = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DbProp } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return kanou ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query all the columns in the yelp_heartbeat table, use $conn$ to execute SQL to get the first piece of data, and return the obtained data.","public List getHeartbeatSerial ( JdbcTemplate conn ) { List result = conn . query ( "" select * from yelp_heartbeat "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set the SQL statement: Query all the columns in the yelp_heartbeat table, use $conn$ to execute SQL to get the first piece of data, and return the obtained data.","<met> <mod> public </mod> type_identifier getHeartbeatSerial <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression set the SQL statement: Query the id data in the $parent_plots$ table based on $plot_name$, use $con$ execute the SQL statement and get all the data. Use for loop to store the 0th element of each item in the query result into list and return the list content.","public List getPlotId ( EntityManager con , Root < Object > parent_plots , String plot_name ) { CriteriaBuilder cb = con . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( parent_plots ) . where ( cb . equal ( parent_plots . get ( "" plot_name "" ) , plot_name ) ) ; List < Object > res = con . createQuery ( cq ) . getResultList ( ) ; List id_l = new ArrayList ( ) ; for ( Object result : res ) { id_l . add ( JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ) ; } return id_l ; }","Generate syntax code: Use the java expression set the SQL statement: Query the id data in the $parent_plots$ table based on $plot_name$, use $con$ execute the SQL statement and get all the data. Use for loop to store the 0th element of each item in the query result into list and return the list content.","<met> <mod> public </mod> type_identifier getPlotId <for> ( <for> type_identifier con </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> parent_plots </for> , <for> type_identifier plot_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> con . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( parent_plots ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> parent_plots . get <arg> ( string_literal ) </arg> </met> , plot_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> con . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> id_l = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : res ) <blo> { <exp> <met> id_l . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return id_l ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $db_connect$, set the SQL ( query all columns in customers based on $name$ ) . Execute the SQL statement to get all the data. Use jsonify to return all the query results.","public JSONArray getInfo ( JdbcTemplate db_connect , String name ) { List result = db_connect . query ( "" select * from table where datum= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; }","Generate syntax code: Connect to the database through $db_connect$, set the SQL ( query all columns in customers based on $name$ ) . Execute the SQL statement to get all the data. Use jsonify to return all the query results.","<met> <mod> public </mod> type_identifier getInfo <for> ( <for> type_identifier db_connect </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db_connect . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $engine$, try to execute SQL ( query all columns in the stderr table based on $traceback$ ) , get all the data, close the database, and return the query data. If an Exception occurs during execution, return False.","public Object worker ( JdbcTemplate engine , String traceback ) { try { List res = engine . query ( "" select * from stderr where traceback= ? "" , new Object [ ] { traceback } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Connect the database with $engine$, try to execute SQL ( query all columns in the stderr table based on $traceback$ ) , get all the data, close the database, and return the query data. If an Exception occurs during execution, return False.","<met> <mod> public </mod> type_identifier worker <for> ( <for> type_identifier engine </for> , <for> type_identifier traceback </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { traceback } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up sql ( query the clothes column in the tablename table based on $phone$ ) , execute SQL with $cur$ and return all the obtained query results.","public List getTable ( JdbcTemplate cur , String phone ) { List res = cur . query ( "" select clothes from tablename where phone= ? "" , new Object [ ] { phone } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up sql ( query the clothes column in the tablename table based on $phone$ ) , execute SQL with $cur$ and return all the obtained query results.","<met> <mod> public </mod> type_identifier getTable <for> ( <for> type_identifier cur </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> cur . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine via $db_url$ ( where the echo parameter is True ) and establish a connection. Try to set up the SQL statement: Query the m_Table table with type $m_type$ for f_table_name data, execute the SQL statement to get all the data and return. If an Exception occurs, use 'raise' to throw an exception based on the error message. Finally, make sure the database connection is closed.","public List updateGeomSridSl ( DataSource db_url , String m_type ) { JdbcTemplate engine = new JdbcTemplate ( db_url ) ; try { List res = engine . query ( "" select f_table_name from m_table where type = ? "" , new Object [ ] { m_type } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } finally { return null ; } }","Generate syntax code: Create the database engine via $db_url$ ( where the echo parameter is True ) and establish a connection. Try to set up the SQL statement: Query the m_Table table with type $m_type$ for f_table_name data, execute the SQL statement to get all the data and return. If an Exception occurs, use 'raise' to throw an exception based on the error message. Finally, make sure the database connection is closed.","<met> <mod> public </mod> type_identifier updateGeomSridSl <for> ( <for> type_identifier db_url </for> , <for> type_identifier m_type </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { m_type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
Generate origin code: use $engine$ to get the database connection. Execute the SQL statement ( get all the columns of the transactions where name is $name$ ) to get all the data and return it directly if the query result is None otherwise every item in the query result is converted to dict and return.,"public List selectValue ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from transactions where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }",Generate syntax code: use $engine$ to get the database connection. Execute the SQL statement ( get all the columns of the transactions where name is $name$ ) to get all the data and return it directly if the query result is None otherwise every item in the query result is converted to dict and return.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the format string matching method to set the SQL ( query the appel column in the services table based on $limit$ ) , use $connection$ to execute the SQL, and get all the data. Return the query results.","public List getServices ( JdbcTemplate connection , String limit ) { List result = connection . query ( "" select appel from services where limit = ? "" , new Object [ ] { limit } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use the format string matching method to set the SQL ( query the appel column in the services table based on $limit$ ) , use $connection$ to execute the SQL, and get all the data. Return the query results.","<met> <mod> public </mod> type_identifier getServices <for> ( <for> type_identifier connection </for> , <for> type_identifier limit </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { limit } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Exception,""Try to use $conn$ to execute SQL ( query the dbapi column in the 'connection' table based on $record$ and $proxy$ ) , get the first piece of data, close the connection, return the query data, and if an exception occurs, trigger and execute Exception.","public Object pingConnection ( JdbcTemplate conn , String record , String proxy ) { try { List cursor = conn . query ( "" select dbapi from connection where record=? and proxy=? "" , new Object [ ] { record , proxy } , new BeanPropertyRowMapper ( List . class ) ) ; return cursor ; } catch ( Exception e ) { return e ; } }","Generate syntax code: Exception,""Try to use $conn$ to execute SQL ( query the dbapi column in the 'connection' table based on $record$ and $proxy$ ) , get the first piece of data, close the connection, return the query data, and if an exception occurs, trigger and execute Exception.","<met> <mod> public </mod> type_identifier pingConnection <for> ( <for> type_identifier conn </for> , <for> type_identifier record </for> , <for> type_identifier proxy </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cursor = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { record , proxy } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return cursor ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return e ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine through $postgresql$, execute the SQL statement ( query the date_part column in the stock_data table according to $date$ ) , get all the data, use for loop to traverse all the query results, insert each piece of data into a list, and convert the list to json and return.","public JSONArray getYears ( DataSource postgresql , String date ) { JdbcTemplate con = new JdbcTemplate ( postgresql ) ; List data = con . query ( "" select date_part from stock_data where date= ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; List newdata = new ArrayList ( ) ; for ( Object x : data ) { newdata . add ( x ) ; } return JSONObject . parseArray ( newdata . toString ( ) ) ; }","Generate syntax code: Get the database engine through $postgresql$, execute the SQL statement ( query the date_part column in the stock_data table according to $date$ ) , get all the data, use for loop to traverse all the query results, insert each piece of data into a list, and convert the list to json and return.","<met> <mod> public </mod> type_identifier getYears <for> ( <for> type_identifier postgresql </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( postgresql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> newdata = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier x : data ) <blo> { <exp> <met> newdata . add <arg> ( x ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> newdata . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set query all columns from the FRC_CUSTOMSIGNALS table to the SQL statement, use the $conn$ to execute the SQL statement to get the first piece of data and return.","public Object getSignals ( JdbcTemplate conn ) { List result_custom_signals = conn . query ( "" select * from frc_customsignals "" , new BeanPropertyRowMapper ( List . class ) ) ; return result_custom_signals . get ( 0 ) ; }","Generate syntax code: Set query all columns from the FRC_CUSTOMSIGNALS table to the SQL statement, use the $conn$ to execute the SQL statement to get the first piece of data and return.","<met> <mod> public </mod> type_identifier getSignals <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result_custom_signals = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> result_custom_signals . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $seafile_db$ to get the database engine. Use sessionmaker ( ) to create a configured DB_Session class and bind the database engine through the 'bind' parameter. Instantiate DB_Session, and then use $conn$ to execute the SQL statement: Query the first piece of repo_id data in RepoOwner through $owner_id$. Use for loop traversal to query the results and return the 0th element.","public void getUserRepo ( DataSource seafile_db , String owner_id ) { JdbcTemplate engine = new JdbcTemplate ( seafile_db ) ; List ret = engine . query ( "" select repo_id from RepoOwner where owner_id = ? "" , new Object [ ] { owner_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object t : ret ) { System . out . println ( JSONObject . parseObject ( t . toString ( ) ) . get ( 0 ) ) ; } }","Generate syntax code: Use $seafile_db$ to get the database engine. Use sessionmaker ( ) to create a configured DB_Session class and bind the database engine through the 'bind' parameter. Instantiate DB_Session, and then use $conn$ to execute the SQL statement: Query the first piece of repo_id data in RepoOwner through $owner_id$. Use for loop traversal to query the results and return the 0th element.","<met> <mod> public </mod> void_type getUserRepo <for> ( <for> type_identifier seafile_db </for> , <for> type_identifier owner_id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( seafile_db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ret = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { owner_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier t : ret ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> t . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $book_title$ table based on $id$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, count the data if there is any, and finally print the count result.","public void querySqlite ( EntityManager conn , Root < Object > book_title , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( book_title ) . where ( cb . equal ( book_title . get ( "" id "" ) , id ) ) ; List < Object > curs = conn . createQuery ( cq ) . getResultList ( ) ; int count = 0 ; for ( Object record : curs ) { count ++ ; } System . out . println ( count ) ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $book_title$ table based on $id$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each query result, count the data if there is any, and finally print the count result.","<met> <mod> public </mod> void_type querySqlite <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> book_title </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( book_title ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> book_title . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> curs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> count = decimal_integer_literal </var> ; </loc> <enh> for ( type_identifier record : curs ) <blo> { <exp> <upd> count ++ </upd> ; </exp> } </blo> </enh> <exp> <met> <fie> System . out </fie> . println <arg> ( count ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $conn_string$. Execute the SQL statement ( query the first piece of data in the USERS table based on $user$ and $passwd$ ) and return the query results.,"public List connectToDatabase ( DataSource conn_string , String user , String passwd ) { JdbcTemplate connection = new JdbcTemplate ( conn_string ) ; List u = connection . query ( "" select * from users where user = ? and passwd = ? "" , new Object [ ] { user , passwd } , new BeanPropertyRowMapper ( List . class ) ) ; return u ; }",Generate syntax code: Get the database engine and establish a connection through $conn_string$. Execute the SQL statement ( query the first piece of data in the USERS table based on $user$ and $passwd$ ) and return the query results.,"<met> <mod> public </mod> type_identifier connectToDatabase <for> ( <for> type_identifier conn_string </for> , <for> type_identifier user </for> , <for> type_identifier passwd </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( conn_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> u = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user , passwd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return u ; </ret> } </blo> </met>"
"Generate origin code: Try to get the database engine and make the connection through $DB_HOST$, use the connection to execute the SQL statement ( select all the columns in the TABLE ) and get all the data. Return after converting the query result to a list using a for loop. Return False if an exception is generated.","public Object search ( DataSource DB_HOST ) { try { JdbcTemplate connection = new JdbcTemplate ( DB_HOST ) ; List result_set = connection . query ( "" select * from table "" , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object item : result_set ) { result . add ( item ) ; } return result ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to get the database engine and make the connection through $DB_HOST$, use the connection to execute the SQL statement ( select all the columns in the TABLE ) and get all the data. Return after converting the query result to a list using a for loop. Return False if an exception is generated.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier DB_HOST </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( DB_HOST ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result_set = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : result_set ) <blo> { <exp> <met> result . add <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL statement: Query all columns from CUSTOMER table, execute SQL via $conn$ to get all the data and return.","public List getAllCustomers ( JdbcTemplate conn ) { List data = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }","Generate syntax code: Set up the SQL statement: Query all columns from CUSTOMER table, execute SQL via $conn$ to get all the data and return.","<met> <mod> public </mod> type_identifier getAllCustomers <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the field column in the 'table' table according to $id$ ) , execute SQL according to $conn$, get all the query results, and return the data.","public List simpleSelect ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select field from table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set SQL ( query the field column in the 'table' table according to $id$ ) , execute SQL according to $conn$, get all the query results, and return the data.","<met> <mod> public </mod> type_identifier simpleSelect <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $call_center$ to get the database engine, where the echo parameter is True. Connect to the database, then execute the SQL ( get all the columns in the technician table based on $tech_id$ ) and get all the data. Finally return the query results.","public List getTechInfoByTechId ( DataSource call_center , String tech_id ) { JdbcTemplate conn = new JdbcTemplate ( call_center ) ; List results = conn . query ( "" select * from technician where tech_id = ? "" , new Object [ ] { tech_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Use $call_center$ to get the database engine, where the echo parameter is True. Connect to the database, then execute the SQL ( get all the columns in the technician table based on $tech_id$ ) and get all the data. Finally return the query results.","<met> <mod> public </mod> type_identifier getTechInfoByTechId <for> ( <for> type_identifier call_center </for> , <for> type_identifier tech_id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( call_center ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tech_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Create the cursor through $conn$, execute the SQL statement: Get all the id, name, lastname data from the users table, return the query results, and finally: Close the cursor and database connection.","public List queryUsuario ( DataSource conn , String tech_id ) { try { JdbcTemplate cur = new JdbcTemplate ( conn ) ; List res = cur . query ( "" select id, name, lastname from users "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }","Generate syntax code: Create the cursor through $conn$, execute the SQL statement: Get all the id, name, lastname data from the users table, return the query results, and finally: Close the cursor and database connection.","<met> <mod> public </mod> type_identifier queryUsuario <for> ( <for> type_identifier conn </for> , <for> type_identifier tech_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cur = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> cur . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Set up the SQL query statement, which contains: Query the statistical values of all columns in the Transactions table according to $transactionID$ and $name$, execute the SQL statement to get the first piece of data, convert each item of the query result into dict, store it as list, and return.","public List getBarTopManu ( DataSource engine , String transactionID , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List rs = conn . query ( "" select count(*) from transactions where transactionid = ? and name = ? "" , new Object [ ] { transactionID , name } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object row : rs ) { results . add ( row ) ; } return results ; }","Generate syntax code: connect to the database according to $engine$. Set up the SQL query statement, which contains: Query the statistical values of all columns in the Transactions table according to $transactionID$ and $name$, execute the SQL statement to get the first piece of data, convert each item of the query result into dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getBarTopManu <for> ( <for> type_identifier engine </for> , <for> type_identifier transactionID </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { transactionID , name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rs ) <blo> { <exp> <met> results . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set up sql ( query all the information in the hff_quote table based on $sito_q$, $area_q$ and $us_q$ ) , use $conn$ to execute SQL, get all the query results, and return them.","public List selectQuoteFromDbSql ( JdbcTemplate conn , String sito_q , String area_q , String us_q ) { List res = conn . query ( "" select * from hff_quote where sito_q=? and area_q=? and us_q=? "" , new Object [ ] { sito_q , area_q , us_q } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up sql ( query all the information in the hff_quote table based on $sito_q$, $area_q$ and $us_q$ ) , use $conn$ to execute SQL, get all the query results, and return them.","<met> <mod> public </mod> type_identifier selectQuoteFromDbSql <for> ( <for> type_identifier conn </for> , <for> type_identifier sito_q </for> , <for> type_identifier area_q </for> , <for> type_identifier us_q </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sito_q , area_q , us_q } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $connects$ ( query the information of name in the department table where id is $id$ ) and get the first data. If the length of the query result is greater than 0, return the query result [0][0] element. Otherwise, return False.","public Object getStudentDept ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select name from department where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . isEmpty ( ) ) { return JSONObject . parseObject ( res . get ( 0 ) . toString ( ) ) . get ( 0 ) ; } else { return false ; } }","Generate syntax code: Execute the SQL using $connects$ ( query the information of name in the department table where id is $id$ ) and get the first data. If the length of the query result is greater than 0, return the query result [0][0] element. Otherwise, return False.","<met> <mod> public </mod> type_identifier getStudentDept <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> res . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $cluster_id$ is not None, execute SQL with $conn$ ( get all the columns in the clusters where the id of cluster is $cluster_id$ ) and get all the data. Print each item in the query result using a for loop.","public void selectValue ( JdbcTemplate conn , String cluster_id ) { if ( cluster_id != null ) { List results = conn . query ( "" select * from clusters where cluster_id = ? "" , new Object [ ] { cluster_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object result : results ) { System . out . println ( result ) ; } } }","Generate syntax code: If $cluster_id$ is not None, execute SQL with $conn$ ( get all the columns in the clusters where the id of cluster is $cluster_id$ ) and get all the data. Print each item in the query result using a for loop.","<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier cluster_id </for> ) </for> <blo> { <if_> if <par> ( <bin> cluster_id != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cluster_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine by $db_string$, try to execute the SQL statement ( get all columns in sistema based on $id_fornecedor$ ) and get all the data. Otherwise return the result as False, and finally return the obtained result.","public Object addCompra ( DataSource db_string , String id_fornecedor ) { JdbcTemplate db = new JdbcTemplate ( db_string ) ; try { List res = db . query ( "" select * from sistema where id_fornecedor= ? "" , new Object [ ] { id_fornecedor } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Get the database engine by $db_string$, try to execute the SQL statement ( get all columns in sistema based on $id_fornecedor$ ) and get all the data. Otherwise return the result as False, and finally return the obtained result.","<met> <mod> public </mod> type_identifier addCompra <for> ( <for> type_identifier db_string </for> , <for> type_identifier id_fornecedor </for> ) </for> <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id_fornecedor } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get the data_year column in the vw_muertes_estado table where muertes_name is $name$ ) , get all the data, return the query result, and print the exception if there is an exception during execution.","public List yearsEp ( JdbcTemplate conn , String name ) { try { List years = conn . query ( "" select data_year from vw_muertes_estado where muertes_name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return years ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get the data_year column in the vw_muertes_estado table where muertes_name is $name$ ) , get all the data, return the query result, and print the exception if there is an exception during execution.","<met> <mod> public </mod> type_identifier yearsEp <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> years = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return years ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the unit_found column in the Otu table based on $found$ ) , get all the query results, use for loop to traverse the query results, insert a list, convert this list to json and return.","public JSONArray otu ( JdbcTemplate conn , String found ) { List tmp = conn . query ( "" select unit_found from otu where found= ? "" , new Object [ ] { found } , new BeanPropertyRowMapper ( List . class ) ) ; List otu_list = new ArrayList ( ) ; for ( Object x : tmp ) { otu_list . add ( x ) ; } return JSONObject . parseArray ( otu_list . toString ( ) ) ; }","Generate syntax code: Execute SQL with $conn$ ( query the unit_found column in the Otu table based on $found$ ) , get all the query results, use for loop to traverse the query results, insert a list, convert this list to json and return.","<met> <mod> public </mod> type_identifier otu <for> ( <for> type_identifier conn </for> , <for> type_identifier found </for> ) </for> <blo> { <loc> type_identifier <var> tmp = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { found } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> otu_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier x : tmp ) <blo> { <exp> <met> otu_list . add <arg> ( x ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> otu_list . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement to: query all the data in the TABLE where one_row is $value$. Execute the SQL statement and get all the data over the $conn$ connection. Use assertions to determine that the length of the query result is greater than 0. Finally, all the data is returned.","public List selectValue ( JdbcTemplate conn , String value ) { List results = conn . query ( "" select * from table where one_row = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) > 0 ; return results ; }","Generate syntax code: Set the SQL statement to: query all the data in the TABLE where one_row is $value$. Execute the SQL statement and get all the data over the $conn$ connection. Use assertions to determine that the length of the query result is greater than 0. Finally, all the data is returned.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Set up the SQL statement ( query the City in the users table based on $Phone$ ) . Execute SQL to get all the data through the $conn$ connection and print it.,"public void readUser ( JdbcTemplate conn , String Phone ) { List exc = conn . query ( "" select city from users where phone= ? "" , new Object [ ] { Phone } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( exc ) ; }",Generate syntax code: Set up the SQL statement ( query the City in the users table based on $Phone$ ) . Execute SQL to get all the data through the $conn$ connection and print it.,"<met> <mod> public </mod> void_type readUser <for> ( <for> type_identifier conn </for> , <for> type_identifier Phone </for> ) </for> <blo> { <loc> type_identifier <var> exc = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( exc ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute the SQL statement ( get all the columns in the gd where isbn is $isbn$ ) and get all the data. Finally, the query results are returned.","public List selectGds ( HttpRequest request , JdbcTemplate conn , String isbn ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List gds = conn . query ( "" select * from gd where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return gds ; } else { return null ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute the SQL statement ( get all the columns in the gd where isbn is $isbn$ ) and get all the data. Finally, the query results are returned.","<met> <mod> public </mod> type_identifier selectGds <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> gds = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return gds ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get all the information in the places where postal_code is $q$, place_name is $q$, and admin_code1 is $q$ ) and get all the data, and finally return the content of the query processed by jsonify.","public JSONArray search ( JdbcTemplate conn , String q ) { List results = conn . query ( "" select * from places where postal_code =? and place_name =? and admin_code1 =? "" , new Object [ ] { q , q , q } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( results . toString ( ) ) ; }","Generate syntax code: Execute the SQL with $conn$ ( get all the information in the places where postal_code is $q$, place_name is $q$, and admin_code1 is $q$ ) and get all the data, and finally return the content of the query processed by jsonify.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> type_identifier q </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { q , q , q } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> results . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: Query all the 'src' in the edges table based on the $tgt$ query src, use for loop traversal to query all the results and return.","public void selectLinks ( JdbcTemplate conn , String tgt ) { List re = conn . query ( "" select src from edges where tgt = ? "" , new Object [ ] { tgt } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : re ) { System . out . println ( i ) ; } }","Generate syntax code: Use $conn$ to execute the SQL statement: Query all the 'src' in the edges table based on the $tgt$ query src, use for loop traversal to query all the results and return.","<met> <mod> public </mod> void_type selectLinks <for> ( <for> type_identifier conn </for> , <for> type_identifier tgt </for> ) </for> <blo> { <loc> type_identifier <var> re = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tgt } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : re ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all the names in the passengers where the id of flight is $flight_id$, render and return 'success.html', where the text parameter is the result of the query. If a ValueError occurs, then render 'error.html', passing in the message parameter is 'Invalid flight number.'","public String book ( JdbcTemplate conn , String flight_id , Model model ) { try { List texts = conn . query ( "" select name from passengers where flight_id= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" texts "" , texts ) ; return "" success.html "" ; } catch ( Exception e ) { model . addAttribute ( "" message "" , "" Invalid flight number. "" ) ; return "" error.html "" ; } }","Generate syntax code: Try to use $conn$ to query all the names in the passengers where the id of flight is $flight_id$, render and return 'success.html', where the text parameter is the result of the query. If a ValueError occurs, then render 'error.html', passing in the message parameter is 'Invalid flight number.'","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , texts ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $session$ to execute SQL according to the java expression ( get the student column in the $student$ table whose student_id is $student_id$ ) and get all the data, then close the $session$ connection and return the query result. If an exception occurs during execution, suspend the exception.","public List < Object > findStudent ( EntityManager session , Root < Object > student , String student_id ) { try { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( student ) . where ( cb . equal ( student . get ( "" student_id "" ) , student_id ) ) ; List < Object > studs = session . createQuery ( cq ) . getResultList ( ) ; return studs ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $session$ to execute SQL according to the java expression ( get the student column in the $student$ table whose student_id is $student_id$ ) and get all the data, then close the $session$ connection and return the query result. If an exception occurs during execution, suspend the exception.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> findStudent <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> student </for> , <for> type_identifier student_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( student ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> student . get <arg> ( string_literal ) </arg> </met> , student_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> studs = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return studs ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Set SQL: Query nextval in the SEQUENCE table where sequence_name is $sequence_name$. Execute the SQL using $db$ and get the first data. Return the result of the query.,"public List searchSeqNextVal ( JdbcTemplate db , String sequence_name ) { List res = db . query ( "" select nextval from SEQUENCE where sequence_name = ? "" , new Object [ ] { sequence_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Set SQL: Query nextval in the SEQUENCE table where sequence_name is $sequence_name$. Execute the SQL using $db$ and get the first data. Return the result of the query.,"<met> <mod> public </mod> type_identifier searchSeqNextVal <for> ( <for> type_identifier db </for> , <for> type_identifier sequence_name </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sequence_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Connect to the database through $engine$ and execute the SQL statement with the following contents: Query all the name in the friends table based on $fid$. Use the dispose ( ) method to close the database and release resources. Convert each item of the query results into dict and store it as list and return it,"public List selectFriend ( DataSource engine , String fid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List val = conn . query ( "" select name from friends where fid = ? "" , new Object [ ] { fid } , new BeanPropertyRowMapper ( List . class ) ) ; return val ; }",Generate syntax code: Connect to the database through $engine$ and execute the SQL statement with the following contents: Query all the name in the friends table based on $fid$. Use the dispose ( ) method to close the database and release resources. Convert each item of the query results into dict and store it as list and return it,"<met> <mod> public </mod> type_identifier selectFriend <for> ( <for> type_identifier engine </for> , <for> type_identifier fid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> val = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { fid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return val ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the city column in the cities table according to $statecode$ ) , get all the query results, use for loop to convert each of the query results to dict, and store them in list. Then convert this list to json, and return.","public JSONArray getMeFilteredCities ( JdbcTemplate conn , String statecode ) { List results = new ArrayList ( ) ; List rows = conn . query ( "" select nextval from SEQUENCE where sequence_name = ? "" , new Object [ ] { statecode } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object city : rows ) { results . add ( city ) ; } return JSONObject . parseArray ( results . toString ( ) ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query the city column in the cities table according to $statecode$ ) , get all the query results, use for loop to convert each of the query results to dict, and store them in list. Then convert this list to json, and return.","<met> <mod> public </mod> type_identifier getMeFilteredCities <for> ( <for> type_identifier conn </for> , <for> type_identifier statecode </for> ) </for> <blo> { <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { statecode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier city : rows ) <blo> { <exp> <met> results . add <arg> ( city ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> results . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Query all the columns in the flights table through $con$, get all the data, and return all the obtained data.","public List flights ( JdbcTemplate con ) { List flights = con . query ( "" select * from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; return flights ; }","Generate syntax code: Query all the columns in the flights table through $con$, get all the data, and return all the obtained data.","<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier con </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return flights ; </ret> } </blo> </met>"
"Generate origin code: Try to use the ORM method and $conn$ to execute SQL ( query all the information in the $User$ table based on the condition that id is $User_id$ ) , get the first piece of queried data, and return the query result. If an Exception is caught, print the exception.","public Object selectRes ( EntityManager conn , Root < Object > User , String User_id ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" User_id "" ) , User_id ) ) ; List < Object > users = conn . createQuery ( cq ) . getResultList ( ) ; return users . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use the ORM method and $conn$ to execute SQL ( query all the information in the $User$ table based on the condition that id is $User_id$ ) , get the first piece of queried data, and return the query result. If an Exception is caught, print the exception.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier User_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , User_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL using a java expression ( query all columns in $tbl_friends$ where friend_uid1 is $UID$ ) . Execute the SQL with $conn$ and get all the data, store the query results as a list type using a for loop, and return.","public Object getFriends ( EntityManager conn , Root < Object > tblFriends , String UID ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tblFriends ) . where ( cb . equal ( tblFriends . get ( "" friend_uid1 "" ) , UID ) ) ; List < Object > friendsInfo = conn . createQuery ( cq ) . getResultList ( ) ; List friendsList = new ArrayList ( ) ; for ( Object friend : friendsInfo ) { friendsList . add ( friend ) ; } return friendsList ; }","Generate syntax code: Set the SQL using a java expression ( query all columns in $tbl_friends$ where friend_uid1 is $UID$ ) . Execute the SQL with $conn$ and get all the data, store the query results as a list type using a for loop, and return.","<met> <mod> public </mod> type_identifier getFriends <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tblFriends </for> , <for> type_identifier UID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tblFriends ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tblFriends . get <arg> ( string_literal ) </arg> </met> , UID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> friendsInfo = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> friendsList = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier friend : friendsInfo ) <blo> { <exp> <met> friendsList . add <arg> ( friend ) </arg> </met> ; </exp> } </blo> </enh> <ret> return friendsList ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query time column in Transactions table based on $transactionID$ ) , use $conn$ to execute SQL and get all query results. Use for loop to convert each query result to dict, store in list and return.","public List selectValue ( JdbcTemplate conn , String transactionID ) { List results = conn . query ( "" select time from transactions where transactionid = ? "" , new Object [ ] { transactionID } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set up SQL ( query time column in Transactions table based on $transactionID$ ) , use $conn$ to execute SQL and get all query results. Use for loop to convert each query result to dict, store in list and return.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier transactionID </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { transactionID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Query all the columns in the books table through $conn$, get all the data, and return all the data obtained.","public List index ( JdbcTemplate conn ) { List books = conn . query ( "" select * from books "" , new BeanPropertyRowMapper ( List . class ) ) ; return books ; }","Generate syntax code: Query all the columns in the books table through $conn$, get all the data, and return all the data obtained.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return books ; </ret> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $psycopg2$. Execute the SQL statement ( query the first 'name' data in the magazijnvoorraad table based on $email$ ) and return the query result.,"public List toonGrafiek ( DataSource psycopg2 , String email ) { JdbcTemplate con = new JdbcTemplate ( psycopg2 ) ; List res = con . query ( "" select name from magazijnvoorraad where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Get the database engine and establish a connection through $psycopg2$. Execute the SQL statement ( query the first 'name' data in the magazijnvoorraad table based on $email$ ) and return the query result.,"<met> <mod> public </mod> type_identifier toonGrafiek <for> ( <for> type_identifier psycopg2 </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( psycopg2 ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement and the content is as follows: Query all columns in $test_table$ based on $pincode$ and fetch all data. Use for loop to store the 0th element of each item in the query result in list. If the length of the query result is greater than 0, then print success. Otherwise, return the contents of list.","public List postLocation ( JdbcTemplate conn , String pincode ) { List res = conn . query ( "" select * from test_table where pincode = ? "" , new Object [ ] { pincode } , new BeanPropertyRowMapper ( List . class ) ) ; List lst = new ArrayList ( ) ; for ( Object r : res ) { lst . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } if ( res . size ( ) > 0 ) { System . out . println ( "" success "" ) ; } return lst ; }","Generate syntax code: Use the $conn$ connection to execute the SQL statement and the content is as follows: Query all columns in $test_table$ based on $pincode$ and fetch all data. Use for loop to store the 0th element of each item in the query result in list. If the length of the query result is greater than 0, then print success. Otherwise, return the contents of list.","<met> <mod> public </mod> type_identifier postLocation <for> ( <for> type_identifier conn </for> , <for> type_identifier pincode </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pincode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> lst = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> lst . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> </if_> <ret> return lst ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement using the $conn$ connection ( according to $Casino$ to get all the Bars in a Barstable ) . Transform each query result into dict store it as a list, and return.","public List queryPage ( JdbcTemplate conn , String Casino ) { List Bars = conn . query ( "" select bar from barstable where casino= ? "" , new Object [ ] { Casino } , new BeanPropertyRowMapper ( List . class ) ) ; return Bars ; }","Generate syntax code: Execute the SQL statement using the $conn$ connection ( according to $Casino$ to get all the Bars in a Barstable ) . Transform each query result into dict store it as a list, and return.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier Casino </for> ) </for> <blo> { <loc> type_identifier <var> Bars = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Casino } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return Bars ; </ret> } </blo> </met>"
"Generate origin code: First set sql ( query the table_name column in the 'table' table based on $old_column_name$ and $new_column_name$ ) , use $conn$ to execute SQL and get all the query results. Return False, if the query results are empty; otherwise, return True.","public boolean renameColumn ( JdbcTemplate conn , String old_column_name , String new_column_name ) { List res = conn . query ( "" select table_name from table where old_column_name = ? and new_column_name = ? "" , new Object [ ] { old_column_name , new_column_name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: First set sql ( query the table_name column in the 'table' table based on $old_column_name$ and $new_column_name$ ) , use $conn$ to execute SQL and get all the query results. Return False, if the query results are empty; otherwise, return True.","<met> <mod> public </mod> boolean_type renameColumn <for> ( <for> type_identifier conn </for> , <for> type_identifier old_column_name </for> , <for> type_identifier new_column_name </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { old_column_name , new_column_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL ( query all the columns in the Products table when the id is $id_orig$ ) with $conn$ and get all the data. Print each element in the query result using a for loop.,"public void selectValue ( JdbcTemplate conn , String id_orig ) { List products_sub = conn . query ( "" select * from products where id = ? "" , new Object [ ] { id_orig } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object sub : products_sub ) { System . out . println ( sub ) ; } }",Generate syntax code: Execute the SQL ( query all the columns in the Products table when the id is $id_orig$ ) with $conn$ and get all the data. Print each element in the query result using a for loop.,"<met> <mod> public </mod> void_type selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier id_orig </for> ) </for> <blo> { <loc> type_identifier <var> products_sub = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id_orig } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier sub : products_sub ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( sub ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If $username$ exists, use $db$ to execute SQL ( query the user information in NOTES where username is $username$ and note is $note$ ) and get all the data. Return the rendered index.html page and pass the query result to the notes parameter.","public String index ( JdbcTemplate db , String note , String username , Model model ) { List notes = db . query ( "" select user from notes where username = ? and note = ? "" , new Object [ ] { note , username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" notes "" , notes ) ; return "" index.html "" ; }","Generate syntax code: If $username$ exists, use $db$ to execute SQL ( query the user information in NOTES where username is $username$ and note is $note$ ) and get all the data. Return the rendered index.html page and pass the query result to the notes parameter.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier db </for> , <for> type_identifier note </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> notes = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { note , username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , notes ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL via $connection$: Query the first author data in the books table based on $ISBN$. If the query result is empty, return None, otherwise render and return error.html.","public String api ( JdbcTemplate db , String ISBN ) { List book = db . query ( "" select author from books where isbn = ? "" , new Object [ ] { ISBN } , new BeanPropertyRowMapper ( List . class ) ) ; if ( book . isEmpty ( ) ) { return null ; } return "" error.html "" ; }","Generate syntax code: Execute SQL via $connection$: Query the first author data in the books table based on $ISBN$. If the query result is empty, return None, otherwise render and return error.html.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier db </for> , <for> type_identifier ISBN </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ISBN } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> book . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, execute SQL through the $conn$ connection ( query all isbn and author in the books through $title$ ) and print the query results. If the length of the query result is less than 1, return False; otherwise, return the query result.","public Object search ( HttpRequest request , JdbcTemplate conn , String title ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List searchResult = conn . query ( "" select isbn, author from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( searchResult . isEmpty ( ) ) { return false ; } else { return searchResult ; } } else { return false ; } }","Generate syntax code: If the request module sends the request in a post method, execute SQL through the $conn$ connection ( query all isbn and author in the books through $title$ ) and print the query results. If the length of the query result is less than 1, return False; otherwise, return the query result.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> searchResult = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> searchResult . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return searchResult ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Create a cursor with $conn$, and use the cursor to execute SQL statement: Query all columns in the user_table table based on $name$, get all the data, and finally print the query results.","public void operate ( JdbcTemplate conn , String name ) { List ope = conn . query ( "" select * from user_table where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( ope ) ; }","Generate syntax code: Create a cursor with $conn$, and use the cursor to execute SQL statement: Query all columns in the user_table table based on $name$, get all the data, and finally print the query results.","<met> <mod> public </mod> void_type operate <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> ope = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( ope ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: Set the SQL statement via the java expression: Query the contents of the $slivers$ table where sliver_urn is $sliver_urn$. Execute SQL via $conn$ to get the first piece of data and return the 0th element of the obtained data.,"public Object getRspec ( EntityManager conn , Root < Object > slivers , String sliver_urn ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( slivers ) . where ( cb . equal ( slivers . get ( "" sliver_urn "" ) , sliver_urn ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Set the SQL statement via the java expression: Query the contents of the $slivers$ table where sliver_urn is $sliver_urn$. Execute SQL via $conn$ to get the first piece of data and return the 0th element of the obtained data.,"<met> <mod> public </mod> type_identifier getRspec <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> slivers </for> , <for> type_identifier sliver_urn </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( slivers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> slivers . get <arg> ( string_literal ) </arg> </met> , sliver_urn ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Step1: use $db$ connection to execute SQL statement: Query all columns in the books table based on $title$, get the first piece of data and get the id in the query results. Step2: use $db$ connection to execute SQL statement: Query all columns in the reviews table where book_id is the obtained id and get all the data. If the query result of step1 is empty, render and return error.html; otherwise, render and return book.html, where the book parameter is the query result of step1 and the reviews parameter is the query result of step2.","public String books ( JdbcTemplate db , String title , Model model ) { List books = db . query ( "" select * from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; String bookId = JSONObject . parseObject ( books . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; List reviews = db . query ( "" select * from reviews where book_id = = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" book.html "" ; } }","Generate syntax code: Step1: use $db$ connection to execute SQL statement: Query all columns in the books table based on $title$, get the first piece of data and get the id in the query results. Step2: use $db$ connection to execute SQL statement: Query all columns in the reviews table where book_id is the obtained id and get all the data. If the query result of step1 is empty, render and return error.html; otherwise, render and return book.html, where the book parameter is the query result of step1 and the reviews parameter is the query result of step2.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier db </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> bookId = <met> <met> JSONObject . parseObject <arg> ( <met> <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> reviews = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( get the flight column in the flights table based on $id$ ) and get all the data, then use for loop to store the 0th element of each item in the query result as list, and finally return the list contents","public List flight ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select flight from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List flights = new ArrayList ( ) ; for ( Object row : results ) { flights . add ( row ) ; } return flights ; }","Generate syntax code: Use $conn$ to execute the SQL ( get the flight column in the flights table based on $id$ ) and get all the data, then use for loop to store the 0th element of each item in the query result as list, and finally return the list contents","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> flights = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> flights . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return flights ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the title column in the books table based on $isbn$ ) and get all the data. Finally return the query results.,"public List main ( JdbcTemplate conn , String isbn ) { List books = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return books ; }",Generate syntax code: Use $conn$ to execute the SQL ( get the title column in the books table based on $isbn$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return books ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the reviews where the id of book is $book_id$ and the id of user is $user_id$ ) with $conn$, get all the data, and return the query results.","public List submitReview ( JdbcTemplate conn , String book_id , String user_id ) { List res = conn . query ( "" select * from reviews where book_id = ? and user_id = ? "" , new Object [ ] { book_id , user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute the SQL ( get all the columns in the reviews where the id of book is $book_id$ and the id of user is $user_id$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier submitReview <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id , user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$ and set the SQL statement, which is as follows: Query 'title' in the movies table, execute SQL to get the first piece of data, set the assertion to judge that the length of the query result is greater than 0, and return the query result.","public Object testSqlalchemyConnectionExecuteMysql ( DataSource engine ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List results = connection . query ( "" select title from movies "" , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) > 0 ; return results . get ( 0 ) ; }","Generate syntax code: Connect to the database through $engine$ and set the SQL statement, which is as follows: Query 'title' in the movies table, execute SQL to get the first piece of data, set the assertion to judge that the length of the query result is greater than 0, and return the query result.","<met> <mod> public </mod> type_identifier testSqlalchemyConnectionExecuteMysql <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$. Try to use the ORM method to execute SQL statement: Query the first piece of data in the $registerTbl$ table using $email$ and return the query result. If Exception occurs, use raise to throw the exception based on the error message. Finally make sure the database is closed.","public Object getValue ( EntityManager engine , Root < Object > registerTbl , String email ) { try { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( registerTbl ) . where ( cb . equal ( registerTbl . get ( "" email "" ) , email ) ) ; List < Object > query = engine . createQuery ( cq ) . getResultList ( ) ; return query . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return e ; } }","Generate syntax code: Connect to the database through $engine$. Try to use the ORM method to execute SQL statement: Query the first piece of data in the $registerTbl$ table using $email$ and return the query result. If Exception occurs, use raise to throw the exception based on the error message. Finally make sure the database is closed.","<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> registerTbl </for> , <for> type_identifier email </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( registerTbl ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> registerTbl . get <arg> ( string_literal ) </arg> </met> , email ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> query . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return e ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Execute the SQL with $conn$ ( query all columns in the reviews table based on $isbn$ ) and get all the query results. Use for loop to store each of the query results into list and return the list. *,"public List getReviewsByIsbn ( JdbcTemplate conn , String isbn ) { List res = conn . query ( "" select * from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List cache = new ArrayList ( ) ; for ( Object rev : res ) { cache . add ( rev ) ; } return cache ; }",Generate syntax code: Execute the SQL with $conn$ ( query all columns in the reviews table based on $isbn$ ) and get all the query results. Use for loop to store each of the query results into list and return the list. *,"<met> <mod> public </mod> type_identifier getReviewsByIsbn <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> cache = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier rev : res ) <blo> { <exp> <met> cache . add <arg> ( rev ) </arg> </met> ; </exp> } </blo> </enh> <ret> return cache ; </ret> } </blo> </met>"
Generate origin code: Use $db_uri$ to get the database engine and execute SQL ( get all columns in sqlite_master table with type as $table$ ) and get all the data. Use for loop to store the 0th element of each item of the query results as list and finally return the contents of list.,"public List testSimple ( DataSource db_uri , String table ) { JdbcTemplate engine = new JdbcTemplate ( db_uri ) ; List res = engine . query ( "" select * from sqlite_master where type = ? "" , new Object [ ] { table } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object row : res ) { list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return list ; }",Generate syntax code: Use $db_uri$ to get the database engine and execute SQL ( get all columns in sqlite_master table with type as $table$ ) and get all the data. Use for loop to store the 0th element of each item of the query results as list and finally return the contents of list.,"<met> <mod> public </mod> type_identifier testSimple <for> ( <for> type_identifier db_uri </for> , <for> type_identifier table </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use $con$ to set up a cursor, execute SQL ( query all columns in the players table according to $factory$ ) , get all the query results, return the rendered profile.html page, and set the query results to the value of the parameter rows.","public String profile ( JdbcTemplate con , String factory , Model model ) { List rows = con . query ( "" select * from players where factory = ? "" , new Object [ ] { factory } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , rows ) ; return "" profile.html "" ; }","Generate syntax code: Use $con$ to set up a cursor, execute SQL ( query all columns in the players table according to $factory$ ) , get all the query results, return the rendered profile.html page, and set the query results to the value of the parameter rows.","<met> <mod> public </mod> type_identifier profile <for> ( <for> type_identifier con </for> , <for> type_identifier factory </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { factory } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , rows ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Set up the SQL using a java expression: query sample_state_id in $event_table$ where sample_id is $sample_id$. Execute SQL with $conn$ and get all the data. Return the [0][0] element in the query result.,"public Object currentState ( EntityManager conn , Root < Object > event_table , String sample_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( event_table ) . where ( cb . equal ( event_table . get ( "" sample_id "" ) , sample_id ) ) ; List < Object > all_states = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( all_states . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Set up the SQL using a java expression: query sample_state_id in $event_table$ where sample_id is $sample_id$. Execute SQL with $conn$ and get all the data. Return the [0][0] element in the query result.,"<met> <mod> public </mod> type_identifier currentState <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> event_table </for> , <for> type_identifier sample_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( event_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> event_table . get <arg> ( string_literal ) </arg> </met> , sample_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> all_states = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> all_states . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the first row of data in the autoload_width column of the autoload table based on $total_per_day$ ) , print the data, and return.","public List insertStudent ( JdbcTemplate conn , String total_per_day ) { List ins = conn . query ( "" select autoload_width from autoload where total_per_day= ? "" , new Object [ ] { total_per_day } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( ins ) ; return ins ; }","Generate syntax code: Use $conn$ to execute SQL ( query the first row of data in the autoload_width column of the autoload table based on $total_per_day$ ) , print the data, and return.","<met> <mod> public </mod> type_identifier insertStudent <for> ( <for> type_identifier conn </for> , <for> type_identifier total_per_day </for> ) </for> <blo> { <loc> type_identifier <var> ins = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { total_per_day } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( ins ) </arg> </met> ; </exp> <ret> return ins ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( select all columns in my_entities where id is $id$ ) in a java expression. Execute the SQL with $conn$ and get all the data, set assertion to determine that the query result length is equal to 2, and return the query result.","public List testDeleteById ( JdbcTemplate conn , String id ) { List entities = conn . query ( "" select * from my_entities where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return entities ; }","Generate syntax code: Set the SQL ( select all columns in my_entities where id is $id$ ) in a java expression. Execute the SQL with $conn$ and get all the data, set assertion to determine that the query result length is equal to 2, and return the query result.","<met> <mod> public </mod> type_identifier testDeleteById <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> entities = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return entities ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( query all columns in the roundtrip table where test_frame is $test_frame$ ) . Execute the SQL with $conn$ and get all the data, then return the query results.","public List getChunksize ( JdbcTemplate conn , String test_frame ) { List res = conn . query ( "" select * from roundtrip where test_frame= ? "" , new Object [ ] { test_frame } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set the SQL ( query all columns in the roundtrip table where test_frame is $test_frame$ ) . Execute the SQL with $conn$ and get all the data, then return the query results.","<met> <mod> public </mod> type_identifier getChunksize <for> ( <for> type_identifier conn </for> , <for> type_identifier test_frame </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { test_frame } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Connect via $engine$. Execute the SQL statement ( select all columns in the coolkids where nick is $nick$ ) and return after getting all the data.,"public List selectCoolkids ( DataSource TimeTable , String nick ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List coolkids = engine . query ( "" select * from coolkids where nick = ? "" , new Object [ ] { nick } , new BeanPropertyRowMapper ( List . class ) ) ; return coolkids ; }",Generate syntax code: Connect via $engine$. Execute the SQL statement ( select all columns in the coolkids where nick is $nick$ ) and return after getting all the data.,"<met> <mod> public </mod> type_identifier selectCoolkids <for> ( <for> type_identifier TimeTable </for> , <for> type_identifier nick </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( TimeTable ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> coolkids = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nick } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return coolkids ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL using a java expression ( query all columns in $pairings$ where the id of search is $search_id$ ) . Execute SQL with $conn$ and get all the data, print and return all the data.","public List getSource ( EntityManager conn , Root < Object > pairings , String search_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( pairings ) . where ( cb . equal ( pairings . get ( "" search_id "" ) , search_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( results ) ; return results ; }","Generate syntax code: Set the SQL using a java expression ( query all columns in $pairings$ where the id of search is $search_id$ ) . Execute SQL with $conn$ and get all the data, print and return all the data.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> pairings </for> , <for> type_identifier search_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( pairings ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> pairings . get <arg> ( string_literal ) </arg> </met> , search_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement ( query all the columns in the events_aggregation_imputed table based on $entity_id$ ) , get all the data, set the assertion to determine that the length of the returned result is not 0, and finally return the query result.","public List testBasicSpacetime ( JdbcTemplate conn , String entity_id ) { List rows = conn . query ( "" select * from events_aggregation_imputed where entity_id = ? "" , new Object [ ] { entity_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) != 0 ; return rows ; }","Generate syntax code: Use $conn$ to execute the SQL statement ( query all the columns in the events_aggregation_imputed table based on $entity_id$ ) , get all the data, set the assertion to determine that the length of the returned result is not 0, and finally return the query result.","<met> <mod> public </mod> type_identifier testBasicSpacetime <for> ( <for> type_identifier conn </for> , <for> type_identifier entity_id </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { entity_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Use the getLogger method to get the log output tool. Try to execute the following code: Set SQL ( query all columns in the table based on $debug$ ) ; record SQL as debug information in the log; use $conn$ to execute SQL and get all the data; return the result if the result exists; otherwise, return empty list. If an SQLAlchemyError exception occurs, use error to log the exception information and throw the exception.","public List execute ( JdbcTemplate conn , String debug ) { try { List rows = conn . query ( "" select * from err where debug = ? "" , new Object [ ] { debug } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! rows . isEmpty ( ) ) { return rows ; } else { return null ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Use the getLogger method to get the log output tool. Try to execute the following code: Set SQL ( query all columns in the table based on $debug$ ) ; record SQL as debug information in the log; use $conn$ to execute SQL and get all the data; return the result if the result exists; otherwise, return empty list. If an SQLAlchemyError exception occurs, use error to log the exception information and throw the exception.","<met> <mod> public </mod> type_identifier execute <for> ( <for> type_identifier conn </for> , <for> type_identifier debug </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { debug } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> rows . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return rows ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL according to the java expression ( query all columns in the $bt$ table based on $devid$ ) , use $conn$ to execute sql and get all the data, and return the data.","public List updateBindTable ( EntityManager conn , Root < Object > bt , String devid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( bt ) . where ( cb . equal ( bt . get ( "" devid "" ) , devid ) ) ; List < Object > ins = conn . createQuery ( cq ) . getResultList ( ) ; return ins ; }","Generate syntax code: Set SQL according to the java expression ( query all columns in the $bt$ table based on $devid$ ) , use $conn$ to execute sql and get all the data, and return the data.","<met> <mod> public </mod> type_identifier updateBindTable <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> bt </for> , <for> type_identifier devid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( bt ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> bt . get <arg> ( string_literal ) </arg> </met> , devid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ins = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return ins ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the message column in the Message where the id of file is $file_id$ ) with $conn$, get all the data, and return the query results.","public List getMessage ( JdbcTemplate conn , String file_id ) { List message_text = conn . query ( "" select message from Message where file_id = ? "" , new Object [ ] { file_id } , new BeanPropertyRowMapper ( List . class ) ) ; return message_text ; }","Generate syntax code: Execute the SQL ( get the message column in the Message where the id of file is $file_id$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier getMessage <for> ( <for> type_identifier conn </for> , <for> type_identifier file_id </for> ) </for> <blo> { <loc> type_identifier <var> message_text = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { file_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return message_text ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $database_uri$. Execute SQL statement ( query all columns in database table with dname as $dname$ ) , get all the data and return the query result.","public List info ( DataSource database_uri , String dname ) { JdbcTemplate engine = new JdbcTemplate ( database_uri ) ; List ot = engine . query ( "" select * from database where dname = ? "" , new Object [ ] { dname } , new BeanPropertyRowMapper ( List . class ) ) ; return ot ; }","Generate syntax code: Get the database engine through $database_uri$. Execute SQL statement ( query all columns in database table with dname as $dname$ ) , get all the data and return the query result.","<met> <mod> public </mod> type_identifier info <for> ( <for> type_identifier database_uri </for> , <for> type_identifier dname </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( database_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ot = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ot ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $connection$. Set up sql ( query the id column in the position table based on $date_time$, $lat$ and $lon$ ) , execute SQL, get all the query results, and return them.","public List expectedSms ( JdbcTemplate connection , String date_time , String lon , String lat ) { List values = connection . query ( "" select id from position where date_time=? and lat=? and lon=? "" , new Object [ ] { date_time , lat , lon } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }","Generate syntax code: connect the database according to $connection$. Set up sql ( query the id column in the position table based on $date_time$, $lat$ and $lon$ ) , execute SQL, get all the query results, and return them.","<met> <mod> public </mod> type_identifier expectedSms <for> ( <for> type_identifier connection </for> , <for> type_identifier date_time </for> , <for> type_identifier lon </for> , <for> type_identifier lat </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date_time , lat , lon } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get all the columns in the review table where name is $user1$ ) and get all the information. If the query result is longer than 0, return the rendered bookpage.html, where the revw parameter is the query result, otherwise return the rendered error.html.","public String finalReview ( JdbcTemplate conn , String user1 , Model model ) { List revw = conn . query ( "" select * from review where name= ? "" , new Object [ ] { user1 } , new BeanPropertyRowMapper ( List . class ) ) ; if ( revw . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" revw "" , revw ) ; return "" bookpage.html "" ; } }","Generate syntax code: Execute the SQL with $conn$ ( get all the columns in the review table where name is $user1$ ) and get all the information. If the query result is longer than 0, return the rendered bookpage.html, where the revw parameter is the query result, otherwise return the rendered error.html.","<met> <mod> public </mod> type_identifier finalReview <for> ( <for> type_identifier conn </for> , <for> type_identifier user1 </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> revw = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user1 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> revw . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , revw ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use sessionmaker ( ) to create a DBSession class ( where the bind parameter is $engine$ database connection ) . Instantiate the Session, and then set the SQL statement: Query all the columns in the jihemei, execute SQL to get all the data, close the database connection, and return all the execution results.","public List getItem ( DataSource engine ) { JdbcTemplate session = new JdbcTemplate ( engine ) ; List items = session . query ( "" select * from jihemei "" , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }","Generate syntax code: Use sessionmaker ( ) to create a DBSession class ( where the bind parameter is $engine$ database connection ) . Instantiate the Session, and then set the SQL statement: Query all the columns in the jihemei, execute SQL to get all the data, close the database connection, and return all the execution results.","<met> <mod> public </mod> type_identifier getItem <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> session = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> items = <met> session . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Set the SQL ( query all fruit data in the table_name where fileds is $fileds$ ) , execute the SQL and return the query results.","public List queryTime ( DataSource engine , String fileds ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List mytime = conn . query ( "" select fruit from table_name where fileds= ? "" , new Object [ ] { fileds } , new BeanPropertyRowMapper ( List . class ) ) ; return mytime ; }","Generate syntax code: connect to the database according to $engine$. Set the SQL ( query all fruit data in the table_name where fileds is $fileds$ ) , execute the SQL and return the query results.","<met> <mod> public </mod> type_identifier queryTime <for> ( <for> type_identifier engine </for> , <for> type_identifier fileds </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> mytime = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { fileds } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return mytime ; </ret> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query all information about $todosTB$ based on $id$ ) and get the first piece of data. Finally, return the rendered 'todo.html' where the todo parameter is the query result.","public List todoQuery ( EntityManager conn , Root < Object > todosTB , String id , Model model ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( todosTB ) . where ( cb . equal ( todosTB . get ( "" id "" ) , id ) ) ; List < Object > todo = conn . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" todo "" , todo ) ; return "" todo.html "" ; }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query all information about $todosTB$ based on $id$ ) and get the first piece of data. Finally, return the rendered 'todo.html' where the todo parameter is the query result.","<met> <mod> public </mod> type_identifier todoQuery <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> todosTB </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( todosTB ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> todosTB . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> todo = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , todo ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to excute the following code: Get the cursor through the $conn$; set SQL ( query all columns in the pg_stat_activity table where user is $user$, host is $host$, port is $port$, password is $password$, and database is $database$ ) ; execute SQL with the cursor and get all the data and return. If an exception occurs, the specific exception information is printed.","public List getConn ( JdbcTemplate conn , String user , String host , String port , String password , String database ) { try { List res = conn . query ( "" select * from pg_stat_activity where user=? and host=? and port=? and password=? and database=? "" , new Object [ ] { user , host , port , password , database } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to excute the following code: Get the cursor through the $conn$; set SQL ( query all columns in the pg_stat_activity table where user is $user$, host is $host$, port is $port$, password is $password$, and database is $database$ ) ; execute SQL with the cursor and get all the data and return. If an exception occurs, the specific exception information is printed.","<met> <mod> public </mod> type_identifier getConn <for> ( <for> type_identifier conn </for> , <for> type_identifier user </for> , <for> type_identifier host </for> , <for> type_identifier port </for> , <for> type_identifier password </for> , <for> type_identifier database </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user , host , port , password , database } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the users table based on $username$ ) and get the first row of data. If the query result is not empty, return the rendered ""register.html"" page; otherwise, return the rendered ""login.html"" page.","public Object register ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List guoes = conn . query ( "" select * from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( guoes . isEmpty ( ) ) { return "" login.html "" ; } else { return "" register.html "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the users table based on $username$ ) and get the first row of data. If the query result is not empty, return the rendered ""register.html"" page; otherwise, return the rendered ""login.html"" page.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> guoes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> guoes . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: connect to the database based on $engine$. Return False if $beer$ is empty. Set SQL statement: Query the manf data with 'name': $beer$ from the beers table and execute the SQL statement to get all the data. Return None if the result of the execution statement is empty; otherwise return the result of the execution statement.,"public List getBeerManufacturers ( DataSource engine , String beer ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select manf from beers where name = ? "" , new Object [ ] { beer } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }",Generate syntax code: connect to the database based on $engine$. Return False if $beer$ is empty. Set SQL statement: Query the manf data with 'name': $beer$ from the beers table and execute the SQL statement to get all the data. Return None if the result of the execution statement is empty; otherwise return the result of the execution statement.,"<met> <mod> public </mod> type_identifier getBeerManufacturers <for> ( <for> type_identifier engine </for> , <for> type_identifier beer </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { beer } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get the word column in the $sanic_polls$ table where 'id' is $id$ ) , get the first row of data, and finally return the query result.","public Object testContainsDoesntCompile ( EntityManager conn , Root < Object > sanic_polls , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( sanic_polls ) . where ( cb . equal ( sanic_polls . get ( "" id "" ) , id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get the word column in the $sanic_polls$ table where 'id' is $id$ ) , get the first row of data, and finally return the query result.","<met> <mod> public </mod> type_identifier testContainsDoesntCompile <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sanic_polls </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( sanic_polls ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> sanic_polls . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the id is not empty, execute the SQL statement: Query all the columns in the userData through $id$, get all the data, make sure that $conn$ is closed, and return the query results.","public List get ( JdbcTemplate conn , String id ) { if ( id != null ) { List information = conn . query ( "" select * from userdata where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return information ; } else { return null ; } }","Generate syntax code: If the id is not empty, execute the SQL statement: Query all the columns in the userData through $id$, get all the data, make sure that $conn$ is closed, and return the query results.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <if_> if <par> ( <bin> id != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> information = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return information ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database through $engine$, then execute the SQL ( get the city column in the drinkers table based on $state$ ) and get all the data. Use for loop to convert each item of the query results into dictionary type and finally return the contents of dictionary.","public List selectValue ( DataSource engine , String state ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select city from drinkers where state =? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: connect to the database through $engine$, then execute the SQL ( get the city column in the drinkers table based on $state$ ) and get all the data. Use for loop to convert each item of the query results into dictionary type and finally return the contents of dictionary.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier state </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { state } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( query the flights_table table for origin information based on $durations$ and $destinations$ ) and get all the data. Use for loop to store the 0th element of each item of the query result in list and return.,"public List selectReader ( JdbcTemplate conn , String durations , String destinations ) { List origin = conn . query ( "" select origin from flights_table where durations=? and destinations=? "" , new Object [ ] { durations , destinations } , new BeanPropertyRowMapper ( List . class ) ) ; List origins = new ArrayList ( ) ; for ( Object i : origin ) { origins . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return origins ; }",Generate syntax code: Use $conn$ to execute the SQL ( query the flights_table table for origin information based on $durations$ and $destinations$ ) and get all the data. Use for loop to store the 0th element of each item of the query result in list and return.,"<met> <mod> public </mod> type_identifier selectReader <for> ( <for> type_identifier conn </for> , <for> type_identifier durations </for> , <for> type_identifier destinations </for> ) </for> <blo> { <loc> type_identifier <var> origin = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { durations , destinations } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> origins = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : origin ) <blo> { <exp> <met> origins . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return origins ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the supporters table based on $nonprofit_id$ ) , get the first row of data, open 'campaigns.json' in a writable manner, and write the query results to the file in json format.","public List dumpCampaignToLocalJson ( JdbcTemplate conn , String nonprofit_id ) { List mons = conn . query ( "" select * from supporters where nonprofit_id= ? "" , new Object [ ] { nonprofit_id } , new BeanPropertyRowMapper ( List . class ) ) ; return mons ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the supporters table based on $nonprofit_id$ ) , get the first row of data, open 'campaigns.json' in a writable manner, and write the query results to the file in json format.","<met> <mod> public </mod> type_identifier dumpCampaignToLocalJson <for> ( <for> type_identifier conn </for> , <for> type_identifier nonprofit_id </for> ) </for> <blo> { <loc> type_identifier <var> mons = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nonprofit_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return mons ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to get the cursor and use the cursor to execute SQL ( query the fips in the base_counts table ) and get all the data. Finally, return the query results.","public List getDist ( JdbcTemplate conn ) { List values = conn . query ( "" select fips from base_counts "" , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }","Generate syntax code: Use $conn$ to get the cursor and use the cursor to execute SQL ( query the fips in the base_counts table ) and get all the data. Finally, return the query results.","<met> <mod> public </mod> type_identifier getDist <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Depending on the java expression, SQL is executed with $conn$ ( to get the column ID and column uid of $uid$ and uid of the $users$ ) , return the first data in the query result.","public Object getUserByUid ( EntityManager conn , Root < Object > users , String uid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" uid "" ) , uid ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result . get ( 0 ) ; }","Generate syntax code: Depending on the java expression, SQL is executed with $conn$ ( to get the column ID and column uid of $uid$ and uid of the $users$ ) , return the first data in the query result.","<met> <mod> public </mod> type_identifier getUserByUid <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , uid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $conn$: Query all the destination, in the mytable table whose factor_name is $factor_name$ and return all the query results.","public List query ( JdbcTemplate conn , String factorName ) { List res = conn . query ( "" select destination from mytable where factor_name= ? "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute the SQL statement through $conn$: Query all the destination, in the mytable table whose factor_name is $factor_name$ and return all the query results.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier conn </for> , <for> type_identifier factorName </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query all the columns in the iris table through $value$, execute SQL to get all the data with the $conn$ connection, use for loop to traverse the execution result and print.","public void printData ( JdbcTemplate conn , String value ) { List result = conn . query ( "" select * from iris where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }","Generate syntax code: Set the SQL statement: Query all the columns in the iris table through $value$, execute SQL to get all the data with the $conn$ connection, use for loop to traverse the execution result and print.","<met> <mod> public </mod> void_type printData <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Execute SQL based on the java expression ( get the counts of all columns in the $sa$ table ) and use $conn$ to execute SQL to get all the data. Finally use for loop to store each item of the query result as list and return it.,"public List < Object > selectUrls ( EntityManager conn , Root < Object > sa ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( sa ) ; List < Object > count = conn . createQuery ( cq ) . getResultList ( ) ; return count ; }",Generate syntax code: Execute SQL based on the java expression ( get the counts of all columns in the $sa$ table ) and use $conn$ to execute SQL to get all the data. Finally use for loop to store each item of the query result as list and return it.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectUrls <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sa </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( sa ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> count = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return count ; </ret> } </blo> </met>"
Generate origin code: Set the SQL statement to: get all columns in the Person table based on $cid$ and $cname$. Execute the SQL statement in for loop using the $conn$ connection to get all the data and store each element of the query result in list. Return the contents of the list.,"public List sqlSelect ( JdbcTemplate conn , String cid , String cname ) { List data = conn . query ( "" select * from person where cid = ? and cname = ? "" , new Object [ ] { cid , cname } , new BeanPropertyRowMapper ( List . class ) ) ; List people = new ArrayList ( ) ; for ( Object row : data ) { people . add ( row ) ; } return people ; }",Generate syntax code: Set the SQL statement to: get all columns in the Person table based on $cid$ and $cname$. Execute the SQL statement in for loop using the $conn$ connection to get all the data and store each element of the query result in list. Return the contents of the list.,"<met> <mod> public </mod> type_identifier sqlSelect <for> ( <for> type_identifier conn </for> , <for> type_identifier cid </for> , <for> type_identifier cname </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cid , cname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> people = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : data ) <blo> { <exp> <met> people . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return people ; </ret> } </blo> </met>"
"Generate origin code: If the request method is POST, use $conn$ to execute SQL ( query all columns in the users table where username is $user_log$ and password is $pass_log$ ) , and get the first row of data. If the query result is empty, print fail and return the rendered login.html page; otherwise, print works and return the rendered main.html page, where the parameter login_details is the query result that returns.","public Object login ( HttpRequest request , JdbcTemplate conn , String user_log , String pass_log , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List login_details = conn . query ( "" select * from users where username=? and password=? "" , new Object [ ] { user_log , pass_log } , new BeanPropertyRowMapper ( List . class ) ) ; if ( login_details . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; return "" login.html "" ; } else { System . out . println ( "" works "" ) ; model . addAttribute ( "" login_details "" , login_details ) ; return "" main.html "" ; } } else { return null ; } }","Generate syntax code: If the request method is POST, use $conn$ to execute SQL ( query all columns in the users table where username is $user_log$ and password is $pass_log$ ) , and get the first row of data. If the query result is empty, print fail and return the rendered login.html page; otherwise, print works and return the rendered main.html page, where the parameter login_details is the query result that returns.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user_log </for> , <for> type_identifier pass_log </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> login_details = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_log , pass_log } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> login_details . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , login_details ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users table based on $userid$ and $email$ ) . If the obtained number of data row is 0, return the rendered success.html, otherwise return the rendered error.html.","public String user ( JdbcTemplate conn , String userid , String email ) { List rec = conn . query ( "" select * from users where userid = ? and email = ? "" , new Object [ ] { userid , email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rec . isEmpty ( ) ) { return "" success.html "" ; } else { return "" error.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users table based on $userid$ and $email$ ) . If the obtained number of data row is 0, return the rendered success.html, otherwise return the rendered error.html.","<met> <mod> public </mod> type_identifier user <for> ( <for> type_identifier conn </for> , <for> type_identifier userid </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> rec = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { userid , email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rec . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement as a java expression: Get all the data in the $tb$ table according to $id$, make sure that $conn$ is closed, and return the query results.","public List < Object > query ( EntityManager conn , Root < Object > tb ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tb ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Execute the SQL statement as a java expression: Get all the data in the $tb$ table according to $id$, make sure that $conn$ is closed, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> query <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tb </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( tb ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to query all columns in the movie_genre table with movieid as $movieid$ and get all the data. Convert the query results into the list and return it.,"public List getgenresMovie ( JdbcTemplate conn , String movieid ) { List db_result = conn . query ( "" select * from movie_genre where movieid =? "" , new Object [ ] { movieid } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }",Generate syntax code: Use $conn$ to query all columns in the movie_genre table with movieid as $movieid$ and get all the data. Convert the query results into the list and return it.,"<met> <mod> public </mod> type_identifier getgenresMovie <for> ( <for> type_identifier conn </for> , <for> type_identifier movieid </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { movieid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, execute the SQL using $conn$ ( get all the users in ideas_table where the title is $title$ and content is $content$ ) . If the query results are empty, 'login_page' is returned using redirect and url_for.","public Object createIdeaPage ( HttpRequest request , JdbcTemplate conn , String title , String content , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_result = conn . query ( "" select user from ideas_table where title=? and content=? "" , new Object [ ] { title , content } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_result . isEmpty ( ) ) { return "" login_page "" ; } else { return null ; } } else { return null ; } }","Generate syntax code: If the request module sends the request as post, execute the SQL using $conn$ ( get all the users in ideas_table where the title is $title$ and content is $content$ ) . If the query results are empty, 'login_page' is returned using redirect and url_for.","<met> <mod> public </mod> type_identifier createIdeaPage <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier content </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user_result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , content } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user_result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the requested method is GET, return the rendered index.html, otherwise use $conn$ to execute the SQL ( get all columns in the books table based on $isbn$ ) and get all the data. Finally return the rendered matches.html, where the matches parameter is the query result.","public Object index ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List matches = conn . query ( "" select * from books where isbn =? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( matches . isEmpty ( ) ) { return "" login_page "" ; } else { model . addAttribute ( "" matches "" , matches ) ; return "" index.html "" ; } } else { return "" login_page "" ; } }","Generate syntax code: If the requested method is GET, return the rendered index.html, otherwise use $conn$ to execute the SQL ( get all columns in the books table based on $isbn$ ) and get all the data. Finally return the rendered matches.html, where the matches parameter is the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> matches = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> matches . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , matches ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $table$ table based on $chrom$ ) . Execute SQL through $conn$, get all the data, and return the query results.","public List < Object > snpsInChromRanges ( EntityManager conn , Root < Object > table , String chrom ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" chrom "" ) , chrom ) ) ; List < Object > snps = conn . createQuery ( cq ) . getResultList ( ) ; return snps ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $table$ table based on $chrom$ ) . Execute SQL through $conn$, get all the data, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> snpsInChromRanges <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier chrom </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , chrom ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> snps = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return snps ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( get the password column in the members table where user_name is $name$ and id is $id$ ) , and use $db$ execute the SQL statement. If the first piece of data obtained is None, return Error; otherwise, return Correct.","public String getPwd ( JdbcTemplate db , String name , String id ) { List rows = db . query ( "" select password from members where user_name=? and id=? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return "" Error "" ; } else { return "" Correct "" ; } }","Generate syntax code: Set SQL ( get the password column in the members table where user_name is $name$ and id is $id$ ) , and use $db$ execute the SQL statement. If the first piece of data obtained is None, return Error; otherwise, return Correct.","<met> <mod> public </mod> type_identifier getPwd <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $queue$. Use the java expression to set up SQL statement ( query all name data in $table$ table based on $taskid$ ) , execute SQL statement, close database connection and return query result.","public List < Object > ackTask ( EntityManager queue , Root < Object > table , String taskid ) { CriteriaBuilder cb = queue . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" taskid "" ) , taskid ) ) ; List < Object > info = queue . createQuery ( cq ) . getResultList ( ) ; return info ; }","Generate syntax code: Get the database engine and establish a connection through $queue$. Use the java expression to set up SQL statement ( query all name data in $table$ table based on $taskid$ ) , execute SQL statement, close database connection and return query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ackTask <for> ( <for> type_identifier queue </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier taskid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> queue . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , taskid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> info = <met> <met> queue . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return info ; </ret> } </blo> </met>"
"Generate origin code: Use $db_connectstring$ to get the database engine. The connection is obtained based on the acquired database engine. Execute SQL: Get all the db_id in mytable through $db_schema$, print the obtained data and return.","public List queryTable ( DataSource db_connectstring , String db_schema ) { JdbcTemplate con = new JdbcTemplate ( TimeTable ) ; List data = con . query ( "" select db_id from mytable where db_schema= ? "" , new Object [ ] { db_schema } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( data ) ; return data ; }","Generate syntax code: Use $db_connectstring$ to get the database engine. The connection is obtained based on the acquired database engine. Execute SQL: Get all the db_id in mytable through $db_schema$, print the obtained data and return.","<met> <mod> public </mod> type_identifier queryTable <for> ( <for> type_identifier db_connectstring </for> , <for> type_identifier db_schema </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( TimeTable ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( data ) </arg> </met> ; </exp> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get the name column in the $Customer$ table with 'id': $bindparam$ ) , get the usage data, and finally return the obtained result.","public List < Object > testCore ( EntityManager conn , Root < Object > Customer , String bindparam ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Customer ) . where ( cb . equal ( Customer . get ( "" id "" ) , bindparam ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get the name column in the $Customer$ table with 'id': $bindparam$ ) , get the usage data, and finally return the obtained result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testCore <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Customer </for> , <for> type_identifier bindparam </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Customer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Customer . get <arg> ( string_literal ) </arg> </met> , bindparam ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the id in the t table based on $x$ and $y$ ) and get the first piece of data. Finally, return the query results directly.","public List testKey ( JdbcTemplate conn , String x , String y ) { List id = conn . query ( "" select id from t where x=? and y=? "" , new Object [ ] { x , y } , new BeanPropertyRowMapper ( List . class ) ) ; return id ; }","Generate syntax code: Use $conn$ to execute SQL ( query the id in the t table based on $x$ and $y$ ) and get the first piece of data. Finally, return the query results directly.","<met> <mod> public </mod> type_identifier testKey <for> ( <for> type_identifier conn </for> , <for> type_identifier x </for> , <for> type_identifier y </for> ) </for> <blo> { <loc> type_identifier <var> id = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { x , y } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return id ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Set up SQL ( query the quantity column in the $Has$ table based on $BillstransactionID$ and $Drinkersname$ ) , execute SQL, get all the query results, convert each item of the query result to dict, store as list and return.","public List queryTable ( DataSource engine , String BillstransactionID , String Drinkersname ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select quantity from has where billstransactionid = ? and drinkersname = ? "" , new Object [ ] { BillstransactionID , Drinkersname } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect the database according to $engine$. Set up SQL ( query the quantity column in the $Has$ table based on $BillstransactionID$ and $Drinkersname$ ) , execute SQL, get all the query results, convert each item of the query result to dict, store as list and return.","<met> <mod> public </mod> type_identifier queryTable <for> ( <for> type_identifier engine </for> , <for> type_identifier BillstransactionID </for> , <for> type_identifier Drinkersname </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { BillstransactionID , Drinkersname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $engine$ and set up the SQL based on the java expression ( query the merged_at column in the $table$ table based on $lab$ and $converted_filename$ ) . Execute SQL, get all the data and return the query results.","public List < Object > markAsMerged ( EntityManager engine , Root < Object > table , String lab , String converted_filename ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" lab "" ) , lab ) ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" converted_filename "" ) , converted_filename ) ) ; List < Object > recs = engine . createQuery ( cq ) . getResultList ( ) ; return recs ; }","Generate syntax code: Connect the database with $engine$ and set up the SQL based on the java expression ( query the merged_at column in the $table$ table based on $lab$ and $converted_filename$ ) . Execute SQL, get all the data and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> markAsMerged <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier lab </for> , <for> type_identifier converted_filename </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , lab ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , converted_filename ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL ( query the $users$ table for addresses by $user_id$ ) , execute the SQL by $conn$ to get all the data. For loop iterates through the execution results and prints them and return the execution results.","public List < Object > test2 ( EntityManager conn , Root < Object > users , String user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" user_id "" ) , user_id ) ) ; List < Object > v = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object row : v ) { System . out . println ( row ) ; } return v ; }","Generate syntax code: Use the java expression to set up the SQL ( query the $users$ table for addresses by $user_id$ ) , execute the SQL by $conn$ to get all the data. For loop iterates through the execution results and prints them and return the execution results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> test2 <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> v = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : v ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return v ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to get the database connection and execute SQL ( query all columns in the clock table based on $documents$ ) , get all the data, insert the data one by one into a list, and print the list.","public void select1 ( DataSource engine , String documents ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List data = con . query ( "" select * from clock where documents= ? "" , new BeanPropertyRowMapper ( List . class ) ) ; List time = new ArrayList ( ) ; for ( Object i : data ) { time . add ( i ) ; } System . out . println ( time ) ; }","Generate syntax code: Use $engine$ to get the database connection and execute SQL ( query all columns in the clock table based on $documents$ ) , get all the data, insert the data one by one into a list, and print the list.","<met> <mod> public </mod> void_type select1 <for> ( <for> type_identifier engine </for> , <for> type_identifier documents </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> time = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : data ) <blo> { <exp> <met> time . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> <fie> System . out </fie> . println <arg> ( time ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Try to use the ORM method and $conn$ to execute SQL ( query all the information in the $UserAccount$ table according to $id$ ) and get all the data. If there is a query result, return the command redirected to '/showUserAccounts'. If an Exception occurs during execution, return the rendered 'error.html' page, where the parameter error is the exception type.","public String editUseraccount ( EntityManager conn , Root < Object > UserAccount , String id , Model model ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( UserAccount ) . where ( cb . equal ( UserAccount . get ( "" id "" ) , id ) ) ; List < Object > session = conn . createQuery ( cq ) . getResultList ( ) ; if ( ! session . isEmpty ( ) ) { return "" /showUserAccounts "" ; } else { return null ; } } catch ( Exception e ) { model . addAttribute ( "" error "" , e ) ; return "" error.html "" ; } }","Generate syntax code: Try to use the ORM method and $conn$ to execute SQL ( query all the information in the $UserAccount$ table according to $id$ ) and get all the data. If there is a query result, return the command redirected to '/showUserAccounts'. If an Exception occurs during execution, return the rendered 'error.html' page, where the parameter error is the exception type.","<met> <mod> public </mod> type_identifier editUseraccount <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> UserAccount </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( UserAccount ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> UserAccount . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> session = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> session . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , e ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the start method of $connection$ to execute SQL according to the java expression ( get all the columns in the $quizy$ table where Pytanie is $pytanie$ ) , get all the data, then use for loop to print each item of the query result, and finally return the query result.","public List < Object > getQuizy ( EntityManager connection , Root < Object > quizy , String pytanie ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( quizy ) . where ( cb . equal ( quizy . get ( "" pytanie "" ) , pytanie ) ) ; List < Object > result = connection . createQuery ( cq ) . getResultList ( ) ; for ( Object line : result ) { System . out . println ( line ) ; } return result ; }","Generate syntax code: Use the start method of $connection$ to execute SQL according to the java expression ( get all the columns in the $quizy$ table where Pytanie is $pytanie$ ) , get all the data, then use for loop to print each item of the query result, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getQuizy <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> quizy </for> , <for> type_identifier pytanie </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( quizy ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> quizy . get <arg> ( string_literal ) </arg> </met> , pytanie ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier line : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( line ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Use $session$ to execute SQL via ORM method: Get all the Teams data in the $Teams$ table with 'ID': $team_id$. Close $session$ and return all the obtained data.,"public List < Object > updateTeamScore ( EntityManager session , Root < Object > Teams , String team_id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Teams ) . where ( cb . equal ( Teams . get ( "" ID "" ) , team_id ) ) ; List < Object > result = session . createQuery ( cq ) . getResultList ( ) ; return result ; }",Generate syntax code: Use $session$ to execute SQL via ORM method: Get all the Teams data in the $Teams$ table with 'ID': $team_id$. Close $session$ and return all the obtained data.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> updateTeamScore <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Teams </for> , <for> type_identifier team_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Teams ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Teams . get <arg> ( string_literal ) </arg> </met> , team_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the sequences column in the $schema$ table based on $sequence_name$ ) . Execute SQL through $connection$, get all the data, and return the queried results.","public List < Object > sequenceExists ( EntityManager connection , Root < Object > schema , String sequence_name ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( schema ) . where ( cb . equal ( schema . get ( "" sequence_name "" ) , sequence_name ) ) ; List < Object > recs = connection . createQuery ( cq ) . getResultList ( ) ; return recs ; }","Generate syntax code: Set SQL based on the java expression ( query the sequences column in the $schema$ table based on $sequence_name$ ) . Execute SQL through $connection$, get all the data, and return the queried results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sequenceExists <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> schema </for> , <for> type_identifier sequence_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( schema ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> schema . get <arg> ( string_literal ) </arg> </met> , sequence_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> </met>"
"Generate origin code: If the request method is GET, execute the SQL using $conn$ ( GET all the columns in the books table where isbn is $isbn$ ) and GET all the data. Return the rendered libros.html page, where the book_detail parameter is the query result.","public Object selectBook ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List isbn_books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book_detail "" , isbn_books ) ; return "" libros.html "" ; } else { return null ; } }","Generate syntax code: If the request method is GET, execute the SQL using $conn$ ( GET all the columns in the books table where isbn is $isbn$ ) and GET all the data. Return the rendered libros.html page, where the book_detail parameter is the query result.","<met> <mod> public </mod> type_identifier selectBook <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> isbn_books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , isbn_books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Create a cursor with $connection$, execute SQL ( query the title column in the call_list table based on $id$ ) , get all the query results, close the connection, and return the query results.","public List getArticle ( JdbcTemplate connection , String id ) { List flash = connection . query ( "" select title from call_list where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return flash ; }","Generate syntax code: Create a cursor with $connection$, execute SQL ( query the title column in the call_list table based on $id$ ) , get all the query results, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier getArticle <for> ( <for> type_identifier connection </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> flash = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return flash ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to get a cursor and execute SQL ( query all columns in the catagory table based on $id$ ) and get all the query results. Use for loop to traverse all the obtained query results, output the 0th element of each piece of data, and return the query results.","public List importCat ( JdbcTemplate conn , String id ) { List cari = conn . query ( "" select * from catagory where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object record : cari ) { System . out . println ( JSONObject . parseObject ( record . toString ( ) ) . get ( 0 ) ) ; } return cari ; }","Generate syntax code: Use $conn$ to get a cursor and execute SQL ( query all columns in the catagory table based on $id$ ) and get all the query results. Use for loop to traverse all the obtained query results, output the 0th element of each piece of data, and return the query results.","<met> <mod> public </mod> type_identifier importCat <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cari = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier record : cari ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> record . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return cari ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in nhdz based on $username$ ) and get all the data, print the query result, and finally return the obtained result.","public List processItem ( JdbcTemplate conn , String username ) { List res = conn . query ( "" select * from nhdz where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; return res ; }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in nhdz based on $username$ ) and get all the data, print the query result, and finally return the obtained result.","<met> <mod> public </mod> type_identifier processItem <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $host$ where the parameter of client_encoding is 'utf8', and establish a connection. Set up sql ( query all columns in the query table based on $postgresql$ and $client$ ) , execute the SQL statement and get all the data, close the connection, and return the oth query data if there is query result; otherwise, return None.","public List executeQuery2 ( DataSource host , String postgresql , String client ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List results = conn . query ( "" select * from query where postgresql = ? and client = ? "" , new Object [ ] { postgresql , client } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }","Generate syntax code: Get the database engine through $host$ where the parameter of client_encoding is 'utf8', and establish a connection. Set up sql ( query all columns in the query table based on $postgresql$ and $client$ ) , execute the SQL statement and get all the data, close the connection, and return the oth query data if there is query result; otherwise, return None.","<met> <mod> public </mod> type_identifier executeQuery2 <for> ( <for> type_identifier host </for> , <for> type_identifier postgresql </for> , <for> type_identifier client </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { postgresql , client } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users table ) . Close the connection after getting all the query results. Finally, return the query result.","public List task ( JdbcTemplate conn ) { List result = conn . query ( "" select * from users "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users table ) . Close the connection after getting all the query results. Finally, return the query result.","<met> <mod> public </mod> type_identifier task <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL using $db$ ( query all the columns in the books table where isbn is $isbn$ ) and get all the data. Print query results. Return 'details.html' after rendering and passes the query result to the book parameter.,"public String detail ( JdbcTemplate db , String isbn , Model model ) { List book = db . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , book ) ; return "" details.html "" ; }",Generate syntax code: Execute the SQL using $db$ ( query all the columns in the books table where isbn is $isbn$ ) and get all the data. Print query results. Return 'details.html' after rendering and passes the query result to the book parameter.,"<met> <mod> public </mod> type_identifier detail <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL with the java expression: Query all the information in the $table$ table when id is $maxid$. Use $conn$ to execute SQL and get all query results. Separate the query results in list, retain the 0th element of each item and return.","public List findApplied ( EntityManager conn , Root < Object > table , String maxid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" id "" ) , maxid ) ) ; List < Object > appli = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object item : appli ) { list . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Set up the SQL with the java expression: Query all the information in the $table$ table when id is $maxid$. Use $conn$ to execute SQL and get all query results. Separate the query results in list, retain the 0th element of each item and return.","<met> <mod> public </mod> type_identifier findApplied <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier maxid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , maxid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> appli = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : appli ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( all columns in imdb_movies are queried where movietitle is $movietitle$ ) , execute SQL with $conn$ to get all the data and convert it to list, and return list-style query results.","public List pertenece ( JdbcTemplate conn , String movietitle ) { List result = conn . query ( "" select * from imdb_movies where movietitle=? "" , new Object [ ] { movietitle } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set up SQL ( all columns in imdb_movies are queried where movietitle is $movietitle$ ) , execute SQL with $conn$ to get all the data and convert it to list, and return list-style query results.","<met> <mod> public </mod> type_identifier pertenece <for> ( <for> type_identifier conn </for> , <for> type_identifier movietitle </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { movietitle } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database using $db$ , execute the SQL statement ( query all FaceVector in the FaceIDStore ) and get all the data. The for loop is used to store the 0th element of each item of the query result as a list and return it.","public List search ( DataSource db ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List results = conn . query ( "" select facevector from faceidstore "" , new BeanPropertyRowMapper ( List . class ) ) ; List face_vector = new ArrayList ( ) ; for ( Object row : results ) { face_vector . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return face_vector ; }","Generate syntax code: Connect to the database using $db$ , execute the SQL statement ( query all FaceVector in the FaceIDStore ) and get all the data. The for loop is used to store the 0th element of each item of the query result as a list and return it.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier db </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> face_vector = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> face_vector . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return face_vector ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in the way of post, then execute SQL via $conn$ ( query 'email' in 'users' via $username$ and $password$ ) to get the first piece of data. If the query result is empty, render and return login.html, otherwise return the query result. If the request module sends the request in a way other than post, render and return login.html.","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select email from users where username=? and password=? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" login.html "" ; } else { return result . get ( 0 ) ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request module sends the request in the way of post, then execute SQL via $conn$ ( query 'email' in 'users' via $username$ and $password$ ) to get the first piece of data. If the query result is empty, render and return login.html, otherwise return the query result. If the request module sends the request in a way other than post, render and return login.html.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL ( query all columns in the flights where flight_id is $id$ ) using $db$ and get the first data. Print each item in the query result using a for loop.,"public void selectTable ( JdbcTemplate db , String id ) { List fs = db . query ( "" select * from flights where flight_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object f : fs ) { System . out . println ( f ) ; } }",Generate syntax code: Execute the SQL ( query all columns in the flights where flight_id is $id$ ) using $db$ and get the first data. Print each item in the query result using a for loop.,"<met> <mod> public </mod> void_type selectTable <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> fs = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier f : fs ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( f ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use the java expression and $connection$ to execute the SQL statement: Query all the data in the $users$ table according to $user_id$, set the assertion to determine that the length of all the data obtained by the query result is not zero, and return the query result.","public List testCommits ( EntityManager connection , Root < Object > users , String user_id ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" user_id "" ) , user_id ) ) ; List < Object > result = connection . createQuery ( cq ) . getResultList ( ) ; assert result . size ( ) != 0 ; return result ; }","Generate syntax code: Use the java expression and $connection$ to execute the SQL statement: Query all the data in the $users$ table according to $user_id$, set the assertion to determine that the length of all the data obtained by the query result is not zero, and return the query result.","<met> <mod> public </mod> type_identifier testCommits <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all the columns in the cons table, get all the data, convert each item of the query result to dict, store it as list, and use jsonify to return.","public JSONObject consumption ( JdbcTemplate conn ) { List Consumption = conn . query ( "" select * from cons "" , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" Consumption "" , Consumption ) ; return jsonObject ; }","Generate syntax code: Use $conn$ to query all the columns in the cons table, get all the data, convert each item of the query result to dict, store it as list, and use jsonify to return.","<met> <mod> public </mod> type_identifier consumption <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> Consumption = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , Consumption ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( querying the author information in the books table where isbn is $isbn$ ) and get the first data. If the result of the query is None, then 'ERROR' is returned; otherwise, the result of the query is returned.","public Object bookAuthors ( JdbcTemplate db , String isbn ) { List author = db . query ( "" select author from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( author . isEmpty ( ) ) { return "" Error "" ; } else { return author ; } }","Generate syntax code: Execute the SQL using $db$ ( querying the author information in the books table where isbn is $isbn$ ) and get the first data. If the result of the query is None, then 'ERROR' is returned; otherwise, the result of the query is returned.","<met> <mod> public </mod> type_identifier bookAuthors <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> author = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> author . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return author ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( query all columns from the genres table ) through $db_conn$ to get all the data, convert the execution result to list and return.","public List getGenres ( JdbcTemplate db_conn ) { List db_result = db_conn . query ( "" select * from genres "" , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }","Generate syntax code: Execute the SQL statement ( query all columns from the genres table ) through $db_conn$ to get all the data, convert the execution result to list and return.","<met> <mod> public </mod> type_identifier getGenres <for> ( <for> type_identifier db_conn </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> db_conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: Set SQL statement: Query date data in wishlist table based on $WISH$, execute SQL statement via $conn$ to get all the data, render and return 'pass.html', where res parameter is all the obtained data.","public String select ( JdbcTemplate conn , String WISH , Model model ) { List res = conn . query ( "" select date from wishlist where wish = ? "" , new Object [ ] { WISH } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" pass.html "" ; }","Generate syntax code: Set SQL statement: Query date data in wishlist table based on $WISH$, execute SQL statement via $conn$ to get all the data, render and return 'pass.html', where res parameter is all the obtained data.","<met> <mod> public </mod> type_identifier select <for> ( <for> type_identifier conn </for> , <for> type_identifier WISH </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { WISH } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Use $con$ to execute the SQL statement ( query all origin in the flights table ) . Use for loop traversal to query the results and print them.,"public void main ( JdbcTemplate con ) { List flights = con . query ( "" select origin from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object flight : flights ) { System . out . println ( flight ) ; } }",Generate syntax code: Use $con$ to execute the SQL statement ( query all origin in the flights table ) . Use for loop traversal to query the results and print them.,"<met> <mod> public </mod> void_type main <for> ( <for> type_identifier con </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( flight ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request method is POST, use $conn$ to execute the SQL statement ( query all columns in BOOKS table based on $isbn$ ) and get the first data. If no result is obtained, return the rendered error.html and finally return the rendered book_details.html, where the book parameter is the query result.","public Object bookDetails ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book_details.html "" ; } } else { return "" error.html "" ; } }","Generate syntax code: If the request method is POST, use $conn$ to execute the SQL statement ( query all columns in BOOKS table based on $isbn$ ) and get the first data. If no result is obtained, return the rendered error.html and finally return the rendered book_details.html, where the book parameter is the query result.","<met> <mod> public </mod> type_identifier bookDetails <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect to the database via $e$, execute the SQL statement ( query all columns in titanic where message is $message$ ) to get all the data and return the query results.","public List get ( DataSource e , String message ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List list = conn . query ( "" select * from titanic where message= ? "" , new Object [ ] { message } , new BeanPropertyRowMapper ( List . class ) ) ; return list ; }","Generate syntax code: Connect to the database via $e$, execute the SQL statement ( query all columns in titanic where message is $message$ ) to get all the data and return the query results.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> , <for> type_identifier message </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> list = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { message } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ connection to execute SQL statement: Query all columns in flights based on $id$ and get all the data. If the query result is not empty, print it, render and return index.html, where the flights parameter is the query result.","public String index ( JdbcTemplate conn , String id , Model model ) { List flights = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! flights . isEmpty ( ) ) { model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; } else { return null ; } }","Generate syntax code: Use $conn$ connection to execute SQL statement: Query all columns in flights based on $id$ and get all the data. If the query result is not empty, print it, render and return index.html, where the flights parameter is the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> flights . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $connection$ to execute SQL ( get all the columns in the tools table where tool_name is $name$ ) , get all the data, then close the $connection$ connection and return the query result. If an exception occurs during execution, return 'fail'.","public Object getTools ( JdbcTemplate connection , String name ) { try { List results = connection . query ( "" select * from tools where tool_name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return "" fail "" ; } }","Generate syntax code: Try to use $connection$ to execute SQL ( get all the columns in the tools table where tool_name is $name$ ) , get all the data, then close the $connection$ connection and return the query result. If an exception occurs during execution, return 'fail'.","<met> <mod> public </mod> type_identifier getTools <for> ( <for> type_identifier connection </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the value column in the Passenger table according to $flight_id$ ) and get all the query results. If there are query results, return the rendered sucess.html page.","public String putDb ( JdbcTemplate conn , String flight_id ) { List passenger = conn . query ( "" select value from passenger where flight_id= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passenger . isEmpty ( ) ) { return null ; } else { return "" sucess.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the value column in the Passenger table according to $flight_id$ ) and get all the query results. If there are query results, return the rendered sucess.html page.","<met> <mod> public </mod> type_identifier putDb <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> passenger = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passenger . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the books table based on $book_id$ ) and get the first row of data. If the query result is empty, redirect to the 'index' page; otherwise, return the rendered book.html page and set the book parameter to the query result.","public String book ( JdbcTemplate conn , String book_id , Model model ) { List books = conn . query ( "" select * from books where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" index "" ; } else { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the books table based on $book_id$ ) and get the first row of data. If the query result is empty, redirect to the 'index' page; otherwise, return the rendered book.html page and set the book parameter to the query result.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $pyhive_test_database$. Try to establish a connection, execute the SQL statement ( query all the columns in the TABLES table based on $one_row$ ) , get all the data, and return the query results. Finally, close all connections.","public List testSwitchDatabase ( DataSource pyhive_test_database , String one_row ) { try { JdbcTemplate connection = new JdbcTemplate ( pyhive_test_database ) ; List res = connection . query ( "" select * from TABLES where one_row= ? "" , new Object [ ] { one_row } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }","Generate syntax code: Get the database engine through $pyhive_test_database$. Try to establish a connection, execute the SQL statement ( query all the columns in the TABLES table based on $one_row$ ) , get all the data, and return the query results. Finally, close all connections.","<met> <mod> public </mod> type_identifier testSwitchDatabase <for> ( <for> type_identifier pyhive_test_database </for> , <for> type_identifier one_row </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( pyhive_test_database ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { one_row } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Create a cursor object through $connection$. Try to use a cursor to execute the SQL statement: Query all the name in table, convert the query result to list and return. Finally, close the cursor.","public List list ( JdbcTemplate connection ) { try { List rval = connection . query ( "" select name from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return rval ; } finally { return null ; } }","Generate syntax code: Create a cursor object through $connection$. Try to use a cursor to execute the SQL statement: Query all the name in table, convert the query result to list and return. Finally, close the cursor.","<met> <mod> public </mod> type_identifier list <for> ( <for> type_identifier connection </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rval = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rval ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the value in $mytable$ based on $username$ ) and get all the data. Finally, return the query result. If a SQLAlchemyError exception occurs, print a specific exception message, exit the program and set the exit code to 1.","public List getPercentile ( JdbcTemplate conn , String username ) { try { List information = conn . query ( "" select value from mytable where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return information ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the value in $mytable$ based on $username$ ) and get all the data. Finally, return the query result. If a SQLAlchemyError exception occurs, print a specific exception message, exit the program and set the exit code to 1.","<met> <mod> public </mod> type_identifier getPercentile <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> information = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return information ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL statement to: Get username data in the users table based on $userid$, use $conn$ connection to execute SQL and get the first piece of username data. If the length of the query result is greater than 0, render and return orders.html; otherwise, render and return my_orders.html, where the item parameter is the query result.","public String myOrders ( JdbcTemplate conn , String userid , Model model ) { List items = conn . query ( "" select username from users where userid = ? "" , new Object [ ] { userid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( items . isEmpty ( ) ) { return "" orders.html "" ; } else { model . addAttribute ( "" item "" , items . get ( 0 ) ) ; return "" my_orders.html "" ; } }","Generate syntax code: Set SQL statement to: Get username data in the users table based on $userid$, use $conn$ connection to execute SQL and get the first piece of username data. If the length of the query result is greater than 0, render and return orders.html; otherwise, render and return my_orders.html, where the item parameter is the query result.","<met> <mod> public </mod> type_identifier myOrders <for> ( <for> type_identifier conn </for> , <for> type_identifier userid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> items = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { userid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> items . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> items . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect to the database through $db$, use the java expression to query all the data in the $tb_name$ table, close the database connection, and return all query results.","public List < Object > testCheck ( EntityManager db , Root < Object > tb_name ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tb_name ) ; List < Object > result = db . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Connect to the database through $db$, use the java expression to query all the data in the $tb_name$ table, close the database connection, and return all query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testCheck <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tb_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( tb_name ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query the user table for the first piece of age with uname as $uname$, print the query result and return it.","public Object queryUser ( JdbcTemplate conn , String uname ) { List ages = conn . query ( "" select age from user where uname = ? "" , new Object [ ] { uname } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( ages . get ( 0 ) ) ; return ages . get ( 0 ) ; }","Generate syntax code: Use $conn$ to query the user table for the first piece of age with uname as $uname$, print the query result and return it.","<met> <mod> public </mod> type_identifier queryUser <for> ( <for> type_identifier conn </for> , <for> type_identifier uname </for> ) </for> <blo> { <loc> type_identifier <var> ages = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> ages . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> ages . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $engine$ to get the connection. Use the java expression to set up SQL ( query the contents of the $bestkrok$ table ) . Use the connection to execute the SQL and get all the data and return the query results.,"public List < Object > randomKrok ( EntityManager engine , Root < Object > bestkrok ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( bestkrok ) ; List < Object > items = engine . createQuery ( cq ) . getResultList ( ) ; return items ; }",Generate syntax code: Use $engine$ to get the connection. Use the java expression to set up SQL ( query the contents of the $bestkrok$ table ) . Use the connection to execute the SQL and get all the data and return the query results.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> randomKrok <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> bestkrok </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( bestkrok ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> items = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query the newsids column in the Model table through $headline$ ) , execute SQL through $conn$, get all the data, and return it.","public List selectNewsid ( JdbcTemplate conn , String headline ) { List results = conn . query ( "" select newsids from model where headline = ? "" , new Object [ ] { headline } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set the SQL statement ( query the newsids column in the Model table through $headline$ ) , execute SQL through $conn$, get all the data, and return it.","<met> <mod> public </mod> type_identifier selectNewsid <for> ( <for> type_identifier conn </for> , <for> type_identifier headline </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { headline } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use the string matching method to set sql ( query the amount of all the information in the exchange_ticker table based on $state$ ) , try to use $conn$ to execute SQL and get the first piece of data, and output this exception if an Exception occurs during execution. Finally, return the 0th character of the 0th piece of data of the query result.","public Object tickerCount ( JdbcTemplate conn , String state ) { Object count = null ; try { List results = conn . query ( "" select count(*) from exchange_ticker where state= ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; count = JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return count ; }","Generate syntax code: Use the string matching method to set sql ( query the amount of all the information in the exchange_ticker table based on $state$ ) , try to use $conn$ to execute SQL and get the first piece of data, and output this exception if an Exception occurs during execution. Finally, return the 0th character of the 0th piece of data of the query result.","<met> <mod> public </mod> type_identifier tickerCount <for> ( <for> type_identifier conn </for> , <for> type_identifier state </for> ) </for> <blo> { <loc> type_identifier <var> count = null_literal </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { state } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <ass> count = <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </ass> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return count ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish the connection through $db$. Execute the SQL statement ( query all columns in the Alltypes where State is $State$ ) and get all the data to convert the query results to DataFrame type. Return all the query results after the to_json method of the DataFrame is processed, where the orient parameter is 'records'.","public JSONObject selectData ( DataSource db , String State ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; List data = conn . query ( "" select * from alltypes where state= ? "" , new Object [ ] { State } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" orient "" , "" records "" ) ; jsonObject . put ( "" data "" , data ) ; return jsonObject ; }","Generate syntax code: Get the database engine and establish the connection through $db$. Execute the SQL statement ( query all columns in the Alltypes where State is $State$ ) and get all the data to convert the query results to DataFrame type. Return all the query results after the to_json method of the DataFrame is processed, where the orient parameter is 'records'.","<met> <mod> public </mod> type_identifier selectData <for> ( <for> type_identifier db </for> , <for> type_identifier State </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { State } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Try to execute SQL with $conn$ ( get the metalinks column in published based on $identifier$ ) and get all the data. Use dumps to process 'MSG' and query result and return. If not, use dumps to process 'MSG':'Gagal unpublish servis CSW!', and finally return the content processed by dumps.","public JSONObject pycswdel ( JdbcTemplate conn , String identifier ) { JSONObject jsonObject = new JSONObject ( ) ; try { List msg = conn . query ( "" select metalinks from published where identifier=? "" , new Object [ ] { identifier } , new BeanPropertyRowMapper ( List . class ) ) ; jsonObject . put ( "" Msg "" , msg ) ; } catch ( Exception e ) { jsonObject . put ( "" Msg "" , "" Gagal unpublish servis CSW! "" ) ; } return jsonObject ; }","Generate syntax code: Try to execute SQL with $conn$ ( get the metalinks column in published based on $identifier$ ) and get all the data. Use dumps to process 'MSG' and query result and return. If not, use dumps to process 'MSG':'Gagal unpublish servis CSW!', and finally return the content processed by dumps.","<met> <mod> public </mod> type_identifier pycswdel <for> ( <for> type_identifier conn </for> , <for> type_identifier identifier </for> ) </for> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> msg = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { identifier } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , msg ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Use $DATABASEURI$ to get the database engine and connect to the database, execute SQL ( get all the columns in the myinsert where name is $name1$ ) and get all the data, and finally return the rendered profile.html with the rows_user parameter as the result of the query.","public String profile ( DataSource DATABASEURI , String name1 , Model model ) { JdbcTemplate con = new JdbcTemplate ( DATABASEURI ) ; List rows_user = con . query ( "" select * from myinsert where name= ? "" , new Object [ ] { name1 } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows_user "" , rows_user ) ; return "" profile.html "" ; }","Generate syntax code: Use $DATABASEURI$ to get the database engine and connect to the database, execute SQL ( get all the columns in the myinsert where name is $name1$ ) and get all the data, and finally return the rendered profile.html with the rows_user parameter as the result of the query.","<met> <mod> public </mod> type_identifier profile <for> ( <for> type_identifier DATABASEURI </for> , <for> type_identifier name1 </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( DATABASEURI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows_user = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name1 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , rows_user ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the java expression ( get the first piece of data in $User$ table based on $email$ ) . If the query result is true, print the query result and return True, and finally return False","public boolean validateLogin ( EntityManager conn , Root < Object > User , String email ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" email "" ) , email ) ) ; List < Object > us = conn . createQuery ( cq ) . getResultList ( ) ; if ( us . isEmpty ( ) ) { return false ; } else { System . out . println ( us . get ( 0 ) ) ; return true ; } }","Generate syntax code: Use $conn$ to execute SQL based on the java expression ( get the first piece of data in $User$ table based on $email$ ) . If the query result is true, print the query result and return True, and finally return False","<met> <mod> public </mod> boolean_type validateLogin <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , email ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> us = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> us . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> us . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all the columns in the flights table where id is $flight_id$, get all the data, and return the execution result. If there is an Exception, print exception message.","public List selectItem ( JdbcTemplate conn , String flight_id ) { try { List res = conn . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to query all the columns in the flights table where id is $flight_id$, get all the data, and return the execution result. If there is an Exception, print exception message.","<met> <mod> public </mod> type_identifier selectItem <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use ORM and $session$ to connect to the database and execute SQL ( query all information in $User$ table based on $id$ ) , and get all the queried data. Set assertion to determine whether the query result length is equal to 1.","public void selectRes ( EntityManager session , Root < Object > User , String id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( User ) . where ( cb . equal ( User . get ( "" id "" ) , id ) ) ; List < Object > rows = session . createQuery ( cq ) . getResultList ( ) ; assert rows . size ( ) == 1 ; }","Generate syntax code: Use ORM and $session$ to connect to the database and execute SQL ( query all information in $User$ table based on $id$ ) , and get all the queried data. Set assertion to determine whether the query result length is equal to 1.","<met> <mod> public </mod> void_type selectRes <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> User </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( User ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> User . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Use $connstr$ to get the database engine and connect to the database, where the echo parameter is True, then execute the SQL ( get the DATABASE in the data_warehouse_admin where name is $name$ ) and get all the data, then make sure the connection is closed, and finally return the query results.","public List selectDb ( DataSource connstr , String name ) { JdbcTemplate engine = new JdbcTemplate ( connstr ) ; List res = engine . query ( "" select DATABASE from data_warehouse_admin where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $connstr$ to get the database engine and connect to the database, where the echo parameter is True, then execute the SQL ( get the DATABASE in the data_warehouse_admin where name is $name$ ) and get all the data, then make sure the connection is closed, and finally return the query results.","<met> <mod> public </mod> type_identifier selectDb <for> ( <for> type_identifier connstr </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( connstr ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in playertable where uid is $uid$ ) , execute SQL with $conn$ connection to get all data, render and return 'transactions.html', where the trans parameter is the result of the query.","public String transac ( JdbcTemplate conn , String uid , Model model ) { List result = conn . query ( "" select * from playertable where uid= ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" trans "" , result ) ; return "" transactions.html "" ; }","Generate syntax code: Set SQL ( query all columns in playertable where uid is $uid$ ) , execute SQL with $conn$ connection to get all data, render and return 'transactions.html', where the trans parameter is the result of the query.","<met> <mod> public </mod> type_identifier transac <for> ( <for> type_identifier conn </for> , <for> type_identifier uid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to execute SQL based on the java expression ( get all columns in the $atable$ table with uname as $uname$ ) and use $conn$ to execute SQL to get all data, then return the query results. If not try then return False.","public Object appUserLogout ( EntityManager conn , Root < Object > atable , String uname ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( atable ) . where ( cb . equal ( atable . get ( "" uname "" ) , uname ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to execute SQL based on the java expression ( get all columns in the $atable$ table with uname as $uname$ ) and use $conn$ to execute SQL to get all data, then return the query results. If not try then return False.","<met> <mod> public </mod> type_identifier appUserLogout <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> atable </for> , <for> type_identifier uname </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( atable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> atable . get <arg> ( string_literal ) </arg> </met> , uname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the rows_1 table according to $id$ ) , get all the query results, set the assertion to determine whether the returned result is equal to the empty set, and finally return the query result","public List testFunctions ( JdbcTemplate conn , String id ) { List stmt = conn . query ( "" select * from rows_1 where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert stmt . size ( ) != 0 ; return stmt ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the rows_1 table according to $id$ ) , get all the query results, set the assertion to determine whether the returned result is equal to the empty set, and finally return the query result","<met> <mod> public </mod> type_identifier testFunctions <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> stmt = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> stmt . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return stmt ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL query statement to: Get all columns in tokens table by $token$ and use $conn$ to execute the SQL statement to get the first piece of data. If the query result is empty, then return None, otherwise return the obtained query result.","public List checkToken ( JdbcTemplate conn , String token ) { List res = conn . query ( "" select * from tokens where token = ? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Set the SQL query statement to: Get all columns in tokens table by $token$ and use $conn$ to execute the SQL statement to get the first piece of data. If the query result is empty, then return None, otherwise return the obtained query result.","<met> <mod> public </mod> type_identifier checkToken <for> ( <for> type_identifier conn </for> , <for> type_identifier token </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { token } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Set the SQL statement: Query the bars table for 'phone'as $phone$license data. Execute the SQL statement, convert each item of the query result into dict, store as list and return.","public List getBars ( DataSource engine , String phone ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select license from bars where phone = ? "" , new Object [ ] { phone } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect to the database based on $engine$. Set the SQL statement: Query the bars table for 'phone'as $phone$license data. Execute the SQL statement, convert each item of the query result into dict, store as list and return.","<met> <mod> public </mod> type_identifier getBars <for> ( <for> type_identifier engine </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) and get all the query results. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page.","public String selectFlight ( JdbcTemplate conn , String flight_id ) { List names_val = conn . query ( "" select name from passengers where flight_id= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( names_val . isEmpty ( ) ) { return "" error.html "" ; } else { return "" flight.html "" ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the name column in the passengers table according to $flight_id$ ) and get all the query results. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page.","<met> <mod> public </mod> type_identifier selectFlight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> names_val = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> names_val . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Create the database engine through $db_string$. Try to execute the SQL statement: Use $id$ to get the name data from the use table, get the first piece of data, and return. If an Exception exception occurs, the exception information is printed.","public Object novoSelecionarAluno ( DataSource db_string , String id ) { try { JdbcTemplate con = new JdbcTemplate ( db_string ) ; List res = con . query ( "" select name from use where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Create the database engine through $db_string$. Try to execute the SQL statement: Use $id$ to get the name data from the use table, get the first piece of data, and return. If an Exception exception occurs, the exception information is printed.","<met> <mod> public </mod> type_identifier novoSelecionarAluno <for> ( <for> type_identifier db_string </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL ( query data in the ins00 table when the id is $value$ ) using $db$ and get the first data. Use the for loop to store element 0 for each item in the query result in a list. Finally, we use the join method to convert the list result into a string and return it.","public JSONArray findText ( JdbcTemplate db , String value ) { List text = db . query ( "" select data from ins00 where id= ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object o : text ) { result . add ( JSONObject . parseObject ( o . toString ( ) . toString ( ) ) . get ( 0 ) ) ; } return JSONObject . parseArray ( result . toString ( ) ) ; }","Generate syntax code: Execute the SQL ( query data in the ins00 table when the id is $value$ ) using $db$ and get the first data. Use the for loop to store element 0 for each item in the query result in a list. Finally, we use the join method to convert the list result into a string and return it.","<met> <mod> public </mod> type_identifier findText <for> ( <for> type_identifier db </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> text = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier o : text ) <blo> { <exp> <met> result . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> <met> o . toString <arg> ( ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in a GET method, render and return 'search.html', where the method parameter is ""get"". If the request module sends the request in a POST method, through the $conn$ connection ( querying all columns in the books table where isbn is $ID$ ) to get all the data, render and return 'search.html', where the results parameter is the execution result and the method parameter is ""post"".","public String searchTemplate ( HttpRequest request , JdbcTemplate conn , String ID , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List results = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; model . addAttribute ( "" method "" , "" post "" ) ; return "" search.html "" ; } else { model . addAttribute ( "" method "" , "" get "" ) ; return "" search.html "" ; } }","Generate syntax code: If the request module sends the request in a GET method, render and return 'search.html', where the method parameter is ""get"". If the request module sends the request in a POST method, through the $conn$ connection ( querying all columns in the books table where isbn is $ID$ ) to get all the data, render and return 'search.html', where the results parameter is the execution result and the method parameter is ""post"".","<met> <mod> public </mod> type_identifier searchTemplate <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier ID </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute SQL with $conn$ and get all the data. Use A for loop to put the query result into a list and use jsonify to return element 0 in the list.,"public JSONObject api ( JdbcTemplate conn , String zcode ) { List query_results = conn . query ( "" select state from zips where zip= ? "" , new Object [ ] { zcode } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object row : query_results ) { results . add ( row ) ; } return JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) ; }",Generate syntax code: Execute SQL with $conn$ and get all the data. Use A for loop to put the query result into a list and use jsonify to return element 0 in the list.,"<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier zcode </for> ) </for> <blo> { <loc> type_identifier <var> query_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zcode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : query_results ) <blo> { <exp> <met> results . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the 'table' table according to $stromsonst$ ) , get the first data, and finally return the last element of the query result.","public Object getLastRow ( JdbcTemplate conn , String stromsonst ) { List rows = conn . query ( "" select * from table where stromsonst= ? "" , new Object [ ] { stromsonst } , new BeanPropertyRowMapper ( List . class ) ) ; Object row = rows . get ( - 1 ) ; return row ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the 'table' table according to $stromsonst$ ) , get the first data, and finally return the last element of the query result.","<met> <mod> public </mod> type_identifier getLastRow <for> ( <for> type_identifier conn </for> , <for> type_identifier stromsonst </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { stromsonst } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> row = <met> rows . get <arg> ( <una> - decimal_integer_literal </una> ) </arg> </met> </var> ; </loc> <ret> return row ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement ( get all the columns in the users table based on $username$ and $password$ ) and get all the data. If the length of the query result is not 0, print the query result; otherwise, return Account does not exist.","public Object user ( JdbcTemplate conn , String username , String password ) { List query = conn . query ( "" select * from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( query . isEmpty ( ) ) { return "" Account does not exist "" ; } else { System . out . println ( query ) ; return query ; } }","Generate syntax code: Use the $conn$ connection to execute the SQL statement ( get all the columns in the users table based on $username$ and $password$ ) and get all the data. If the length of the query result is not 0, print the query result; otherwise, return Account does not exist.","<met> <mod> public </mod> type_identifier user <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> query . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( query ) </arg> </met> ; </exp> <ret> return query ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the pg_database where dbname is $dbname$ ) with $conn$, get all the data, and return the query results.","public List sqlCheckDatabase ( JdbcTemplate conn , String dbname ) { List res = conn . query ( "" select * from pg_database where dbname= ? "" , new Object [ ] { dbname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute the SQL ( get all the columns in the pg_database where dbname is $dbname$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier sqlCheckDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier dbname </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dbname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: In ORM, execute the SQL statement using $conn$ ( query all columns in the $Assignments$ where the name of assi is $assi_name$ ) and get all the information. Close the database connection and return the data from the query.","public List < Object > getSource ( EntityManager conn , Root < Object > Assignments , String assi_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Assignments ) . where ( cb . equal ( Assignments . get ( "" AssName "" ) , assi_name ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: In ORM, execute the SQL statement using $conn$ ( query all columns in the $Assignments$ where the name of assi is $assi_name$ ) and get all the information. Close the database connection and return the data from the query.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Assignments </for> , <for> type_identifier assi_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Assignments ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Assignments . get <arg> ( string_literal ) </arg> </met> , assi_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to get cursor, set SQL ( query all information in table_name table based on $key$ ) , execute SQL and get all the query results. Close the connection and return the query results.","public List searchData ( DataSource engine , String key ) { JdbcTemplate cursor = new JdbcTemplate ( engine ) ; List records = cursor . query ( "" select * from table_name where key = ? "" , new Object [ ] { key } , new BeanPropertyRowMapper ( List . class ) ) ; return records ; }","Generate syntax code: Use $engine$ to get cursor, set SQL ( query all information in table_name table based on $key$ ) , execute SQL and get all the query results. Close the connection and return the query results.","<met> <mod> public </mod> type_identifier searchData <for> ( <for> type_identifier engine </for> , <for> type_identifier key </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> records = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { key } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return records ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the master table according to $cookies$ ) , get all the query results, print and return the 0th element of the query result.","public Object makeQuery ( JdbcTemplate conn , String cookies ) { List results = conn . query ( "" select * from master where cookies = ? "" , new Object [ ] { cookies } , new BeanPropertyRowMapper ( List . class ) ) ; Object first_row = results . get ( 0 ) ; System . out . println ( first_row ) ; return first_row ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the master table according to $cookies$ ) , get all the query results, print and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier makeQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier cookies </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cookies } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> first_row = <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( first_row ) </arg> </met> ; </exp> <ret> return first_row ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database with $engine$. Use a java expression to set the SQL statement ( get all the data in the $view_group$ where yaml is $yaml$ ) , execute the SQL to get all the data and return.","public List < Object > queryOldRecs ( EntityManager engine , Root < Object > view_group , String yaml ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( view_group ) . where ( cb . equal ( view_group . get ( "" yaml "" ) , yaml ) ) ; List < Object > results = engine . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Connect to the database with $engine$. Use a java expression to set the SQL statement ( get all the data in the $view_group$ where yaml is $yaml$ ) , execute the SQL to get all the data and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryOldRecs <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> view_group </for> , <for> type_identifier yaml </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( view_group ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> view_group . get <arg> ( string_literal ) </arg> </met> , yaml ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( get num column in the mytable table based on $id$ ) and get all the data. Finally set assertion that the length of the query results is 1.,"public void selectNum ( JdbcTemplate conn , String id ) { List rows = conn . query ( "" select num from mytable where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) == 1 ; }",Generate syntax code: Use $conn$ to execute SQL ( get num column in the mytable table based on $id$ ) and get all the data. Finally set assertion that the length of the query results is 1.,"<met> <mod> public </mod> void_type selectNum <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
Generate origin code: Use $engine$ to connect to the database. Set up the SQL statement ( query all columns in the transactions table based on $bar$ ) and execute the SQL statement to get all the data. Convert each item of the query result into dict and store it as list and return it.,"public List getLargestSpenders ( DataSource engine , String bar ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from transactions where bar = ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Use $engine$ to connect to the database. Set up the SQL statement ( query all columns in the transactions table based on $bar$ ) and execute the SQL statement to get all the data. Convert each item of the query result into dict and store it as list and return it.,"<met> <mod> public </mod> type_identifier getLargestSpenders <for> ( <for> type_identifier engine </for> , <for> type_identifier bar </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bar } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Open and read the file books.csv, and the isbn, title, in the circular file uses $conn$ to execute SQL ( query all columns in the bookdetails table based on each title and isbn ) , get all the query results and print them.","public List main ( JdbcTemplate conn ) { String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String isbn = sc . nextLine ( ) ; String title = sc . nextLine ( ) ; List res = conn . query ( "" select * from bookdetails where title = ? and isbn = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open and read the file books.csv, and the isbn, title, in the circular file uses $conn$ to execute SQL ( query all columns in the bookdetails table based on each title and isbn ) , get all the query results and print them.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> isbn = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> title = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database and create a cursor object. Execute the SQL statement through the cursor and ORM: Query all the data in the $models$ table according to $ia_uri$, convert each item of the query result to dict, store it as list, and return.","public List < Object > getIndex ( EntityManager engine , Root < Object > models , String ia_uri ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( models ) . where ( cb . equal ( models . get ( "" ia_uri "" ) , ia_uri ) ) ; List < Object > res = engine . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use $engine$ to connect to the database and create a cursor object. Execute the SQL statement through the cursor and ORM: Query all the data in the $models$ table according to $ia_uri$, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getIndex <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> models </for> , <for> type_identifier ia_uri </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( models ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> models . get <arg> ( string_literal ) </arg> </met> , ia_uri ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL ( query all columns in the student where username is $name$ ) using $db$ and get the first data. Return if the query result exists.,"public List getStudent ( JdbcTemplate db , String name ) { List res = db . query ( "" select * from student where username = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }",Generate syntax code: Execute the SQL ( query all columns in the student where username is $name$ ) using $db$ and get the first data. Return if the query result exists.,"<met> <mod> public </mod> type_identifier getStudent <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $session$ to execute SQL ( query the country information in the actions table based on $ID$ ) , get all the data, and close $session$. Store the 0th element of each item in the query result into list, use for loop to print each item of data in list, and finally, return the data in list.","public List country ( JdbcTemplate session , String ID ) { List s = session . query ( "" select country from actions where ID = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; List data = new ArrayList ( ) ; for ( Object o : s ) { data . add ( JSONObject . parseObject ( o . toString ( ) ) . get ( 0 ) ) ; } for ( Object x : data ) { System . out . println ( x ) ; } return data ; }","Generate syntax code: Use $session$ to execute SQL ( query the country information in the actions table based on $ID$ ) , get all the data, and close $session$. Store the 0th element of each item in the query result into list, use for loop to print each item of data in list, and finally, return the data in list.","<met> <mod> public </mod> type_identifier country <for> ( <for> type_identifier session </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> s = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> data = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier o : s ) <blo> { <exp> <met> data . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <enh> for ( type_identifier x : data ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( x ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Use $db_connect$ to get the connection; use the connection to execute SQL ( query all columns in the ticket table ) ; use the keys of the execution result as a key in the dictionary, each item in the result cursor as value, and finally store the dictionary in list; use jsonify to return the processed dictionary. If an exception occurs, return the {'error': fail} that is processed by jsonify.","public Object dbConnect ( DataSource db_connect ) { try { JdbcTemplate engine = new JdbcTemplate ( db_connect ) ; List result = engine . query ( "" select * from ticket "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( result . toString ( ) ) ; } catch ( Exception e ) { JSONObject json = new JSONObject ( ) ; json . put ( "" error "" , "" fail "" ) ; return json ; } }","Generate syntax code: Try to execute the following code: Use $db_connect$ to get the connection; use the connection to execute SQL ( query all columns in the ticket table ) ; use the keys of the execution result as a key in the dictionary, each item in the result cursor as value, and finally store the dictionary in list; use jsonify to return the processed dictionary. If an exception occurs, return the {'error': fail} that is processed by jsonify.","<met> <mod> public </mod> type_identifier dbConnect <for> ( <for> type_identifier db_connect </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return json ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement ( query all the columns in the happiness ) to get all the data, convert each item of the obtained data into dict, store it as list, and use jsonify to return the list content.","public JSONObject happynessIndex ( JdbcTemplate conn , String datum ) { List data = conn . query ( "" select * from happiness "" , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" data "" , data ) ; return jsonObject ; }","Generate syntax code: Use $conn$ to execute the SQL statement ( query all the columns in the happiness ) to get all the data, convert each item of the obtained data into dict, store it as list, and use jsonify to return the list content.","<met> <mod> public </mod> type_identifier happynessIndex <for> ( <for> type_identifier conn </for> , <for> type_identifier datum </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Use $e$ to connect to the database, set the SQL statement to: Query all the columns in the coordinates table with 'id': of $id$, execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","public List selectCoordinates ( DataSource e , String id ) { JdbcTemplate engine = new JdbcTemplate ( e ) ; List result = engine . query ( "" select * from coordinates where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Use $e$ to connect to the database, set the SQL statement to: Query all the columns in the coordinates table with 'id': of $id$, execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier selectCoordinates <for> ( <for> type_identifier e </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: connect to the database through $engine$, execute SQL based on the java expression ( get the type column in the $meteo_table$ table with time greater than $from_time$ ) and get all the data. Finally return the query results.","public List < Object > getRecentDatapoints ( EntityManager engine , Root < Object > meteo_table , String from_time ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( meteo_table ) . where ( cb . equal ( meteo_table . get ( "" time "" ) , from_time ) ) ; List < Object > results = engine . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: connect to the database through $engine$, execute SQL based on the java expression ( get the type column in the $meteo_table$ table with time greater than $from_time$ ) and get all the data. Finally return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getRecentDatapoints <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> meteo_table </for> , <for> type_identifier from_time </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( meteo_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> meteo_table . get <arg> ( string_literal ) </arg> </met> , from_time ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: connect the database based on $engine$, execute the java expression ( query all the columns in the $bar$ table based on $item$ ) , get all the data, convert each item of the query result to dict, store it as list and return.","public List getBestSellingLocations ( EntityManager engine , Root < Object > bar , String item ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( bar ) . where ( cb . equal ( bar . get ( "" item "" ) , item ) ) ; List < Object > quantity = engine . createQuery ( cq ) . getResultList ( ) ; return quantity ; }","Generate syntax code: connect the database based on $engine$, execute the java expression ( query all the columns in the $bar$ table based on $item$ ) , get all the data, convert each item of the query result to dict, store it as list and return.","<met> <mod> public </mod> type_identifier getBestSellingLocations <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> bar </for> , <for> type_identifier item </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( bar ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> bar . get <arg> ( string_literal ) </arg> </met> , item ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> quantity = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return quantity ; </ret> } </blo> </met>"
"Generate origin code: Use $connection$ to execute SQL based on the java expression ( get the count of all the columns in the $genotypes$ table whose vcf_id is $vcf_id$ ) , get the first piece of data, and finally return the query result.","public Object findVcf ( EntityManager connection , Root < Object > genotypes , String vcf_id ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( genotypes ) . where ( cb . equal ( genotypes . get ( "" vcf_id "" ) , vcf_id ) ) ; List < Object > counts = connection . createQuery ( cq ) . getResultList ( ) ; return counts . get ( 0 ) ; }","Generate syntax code: Use $connection$ to execute SQL based on the java expression ( get the count of all the columns in the $genotypes$ table whose vcf_id is $vcf_id$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier findVcf <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> genotypes </for> , <for> type_identifier vcf_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( genotypes ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> genotypes . get <arg> ( string_literal ) </arg> </met> , vcf_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> counts = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> counts . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to set the SQL statement to query the MANAGER_HALL_ID data in manager where MANAGER_ID is $managerid$ and use the% operator to match the conditions in the SQL string. Use $conn$ to execute the SQL statement, get all the data and return all the query results. If an exception occurs, return False.","public Object getId ( JdbcTemplate conn , String managerid ) { try { List hall_all_id = conn . query ( "" select manager_hall_id from manager where manager_id= ? "" , new Object [ ] { managerid } , new BeanPropertyRowMapper ( List . class ) ) ; return hall_all_id ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to set the SQL statement to query the MANAGER_HALL_ID data in manager where MANAGER_ID is $managerid$ and use the% operator to match the conditions in the SQL string. Use $conn$ to execute the SQL statement, get all the data and return all the query results. If an exception occurs, return False.","<met> <mod> public </mod> type_identifier getId <for> ( <for> type_identifier conn </for> , <for> type_identifier managerid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> hall_all_id = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { managerid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return hall_all_id ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Connect to the database according to $engine$. Set the SQL statement ( get the statistics of the ovie_id data from the links table ) , execute the SQL, and get the first piece of data. If the data obtained is not empty, return the query result; otherwise, return 'fail' through logging.error ( ) .","public Object query ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List count = conn . query ( "" select count(ovie_id) from links "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( count . isEmpty ( ) ) { return "" fail "" ; } else { return count ; } }","Generate syntax code: Connect to the database according to $engine$. Set the SQL statement ( get the statistics of the ovie_id data from the links table ) , execute the SQL, and get the first piece of data. If the data obtained is not empty, return the query result; otherwise, return 'fail' through logging.error ( ) .","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> count = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> count . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return count ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $db_string$. Try to execute the SQL statement ( query all the columns in the tb_user table based on $id$ and $nome$ ) , get all the data and use for loop to insert each item of the query result into a list and return. If an Exception is caught, print the exception and return False.","public Object listarProfessoresNome ( DataSource db_string , String id , String nome ) { Object res = null ; try { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List result = db . query ( "" select * from tb_user where id=? and nome=? "" , new Object [ ] { id , nome } , new BeanPropertyRowMapper ( List . class ) ) ; List answer = new ArrayList ( ) ; for ( Object part : result ) { answer . add ( part ) ; } res = answer ; } catch ( Exception e ) { e . printStackTrace ( ) ; res = false ; } return res ; }","Generate syntax code: Get the database engine through $db_string$. Try to execute the SQL statement ( query all the columns in the tb_user table based on $id$ and $nome$ ) , get all the data and use for loop to insert each item of the query result into a list and return. If an Exception is caught, print the exception and return False.","<met> <mod> public </mod> type_identifier listarProfessoresNome <for> ( <for> type_identifier db_string </for> , <for> type_identifier id </for> , <for> type_identifier nome </for> ) </for> <blo> { <loc> type_identifier <var> res = null_literal </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , nome } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> answer = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier part : result ) <blo> { <exp> <met> answer . add <arg> ( part ) </arg> </met> ; </exp> } </blo> </enh> <exp> <ass> res = answer </ass> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <exp> <ass> res = false </ass> ; </exp> } </blo> </cat> </try> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: When user is in $session$, use $conn$ to execute SQL ( query all columns in the pedidos table based on $clienteid$ and $productoid$ ) and get all the data. If the length of the query result is 0, return directly, otherwise return the [0] [0] element of the query result. Print error information if it is not in $session$.","public Object queryFromCarrito ( JdbcTemplate conn , String clienteid , String productoid , HttpSession session ) { if ( session . getAttribute ( "" user "" ) != null ) { List result = conn . query ( "" select * from pedidos where clienteid=? and productoid=? "" , new Object [ ] { clienteid , productoid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return JSONObject . parseObject ( result . get ( 0 ) . toString ( ) ) . get ( 0 ) ; } } else { System . out . println ( "" error "" ) ; return null ; } }","Generate syntax code: When user is in $session$, use $conn$ to execute SQL ( query all columns in the pedidos table based on $clienteid$ and $productoid$ ) and get all the data. If the length of the query result is 0, return directly, otherwise return the [0] [0] element of the query result. Print error information if it is not in $session$.","<met> <mod> public </mod> type_identifier queryFromCarrito <for> ( <for> type_identifier conn </for> , <for> type_identifier clienteid </for> , <for> type_identifier productoid </for> , <for> type_identifier session </for> ) </for> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { clienteid , productoid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $db_cnf$ and establish a connection. Use the java expression to set the SQL statement ( query all the data in the $table$ table according to $id$ ) , execute SQL to get all the data and return.","public List readAllResults ( EntityManager db_cnf , Root < Object > table , String id ) { CriteriaBuilder cb = db_cnf . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" id "" ) , id ) ) ; List < Object > results = db_cnf . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Get the database engine through $db_cnf$ and establish a connection. Use the java expression to set the SQL statement ( query all the data in the $table$ table according to $id$ ) , execute SQL to get all the data and return.","<met> <mod> public </mod> type_identifier readAllResults <for> ( <for> type_identifier db_cnf </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db_cnf . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> db_cnf . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query SQL column in sqlite_master table based on $type$ ) , use $conn$ to execute SQL and get the first piece of data, and return the 0th element of the query result.","public Object getTableSchema ( JdbcTemplate conn , String type ) { List res = conn . query ( "" select sql from sqlite_master where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Set up SQL ( query SQL column in sqlite_master table based on $type$ ) , use $conn$ to execute SQL and get the first piece of data, and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getTableSchema <for> ( <for> type_identifier conn </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $engine$, and the content is as follows: Query all the columns in the 'mytable' table based on $mid$ and get all the data. Set the assertion to determine that the length of the returned result is not 0 and return all query results.","public List testHasTable ( JdbcTemplate engine , String mid ) { List d = engine . query ( "" select * from mytable where mid = ? "" , new Object [ ] { mid } , new BeanPropertyRowMapper ( List . class ) ) ; assert d . size ( ) != 0 ; return d ; }","Generate syntax code: Execute the SQL statement through $engine$, and the content is as follows: Query all the columns in the 'mytable' table based on $mid$ and get all the data. Set the assertion to determine that the length of the returned result is not 0 and return all query results.","<met> <mod> public </mod> type_identifier testHasTable <for> ( <for> type_identifier engine </for> , <for> type_identifier mid </for> ) </for> <blo> { <loc> type_identifier <var> d = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { mid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> d . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return d ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the review information in the reviews table based on $user_id$ and $book_id$ ) and get all the data. Pass in the query result as the review parameter and navigate to the book page through url_for and redirect.,"public Object submitReview ( JdbcTemplate conn , String user_id , String book_id , Model model ) { List review = conn . query ( "" select review from reviews where user_id=? and book_id=? "" , new Object [ ] { user_id , book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" review "" , review ) ; return "" book "" ; }",Generate syntax code: Use $conn$ to execute SQL ( query the review information in the reviews table based on $user_id$ and $book_id$ ) and get all the data. Pass in the query result as the review parameter and navigate to the book page through url_for and redirect.,"<met> <mod> public </mod> type_identifier submitReview <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier book_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> review = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , review ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( query the first title data in books based on $isbn$ ) , render and return 'book_select.html', where the title parameter is the query result.","public Object bookSelect ( JdbcTemplate conn , String isbn , Model model ) { List result = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" title "" , result ) ; return "" book_select.html "" ; }","Generate syntax code: Execute SQL through $conn$ ( query the first title data in books based on $isbn$ ) , render and return 'book_select.html', where the title parameter is the query result.","<met> <mod> public </mod> type_identifier bookSelect <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Set the query statement: Get all the columns in getTopVentas and execute SQL to get all the data through the $db_conn$ connection. Use for loop to store each element in the query result into list and return the list content.,"public List getTop ( JdbcTemplate db_conn ) { List result = db_conn . query ( "" select * from gettopventas "" , new BeanPropertyRowMapper ( List . class ) ) ; List top = new ArrayList ( ) ; for ( Object r : result ) { top . add ( r ) ; } return top ; }",Generate syntax code: Set the query statement: Get all the columns in getTopVentas and execute SQL to get all the data through the $db_conn$ connection. Use for loop to store each element in the query result into list and return the list content.,"<met> <mod> public </mod> type_identifier getTop <for> ( <for> type_identifier db_conn </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> db_conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> top = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : result ) <blo> { <exp> <met> top . add <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> <ret> return top ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the value column in stats_master table based on $id$ ) . Then use for loop to convert each item of the query results into list and finally return the list.,"public List getStatsMaster ( JdbcTemplate conn , String id ) { List result_proxy = conn . query ( "" select value from stats_master where id =? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List a = new ArrayList ( ) ; for ( Object r : result_proxy ) { a . add ( r ) ; } return a ; }",Generate syntax code: Use $conn$ to execute the SQL ( get the value column in stats_master table based on $id$ ) . Then use for loop to convert each item of the query results into list and finally return the list.,"<met> <mod> public </mod> type_identifier getStatsMaster <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result_proxy = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> a = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : result_proxy ) <blo> { <exp> <met> a . add <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> <ret> return a ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through the $conn$ and execute the SQL statement: Query all tablename in the pg_tables table that a schemaname is $public$, store the 0th element of each item of the query result as list and return.","public void postgresqlTable ( DataSource conn , String publics ) { JdbcTemplate connection = new JdbcTemplate ( conn ) ; List table_tup = connection . query ( "" select tablename from pg_tables where schemaname = ? "" , new Object [ ] { publics } , new BeanPropertyRowMapper ( List . class ) ) ; List tables = new ArrayList ( ) ; for ( Object tup : table_tup ) { tables . add ( JSONObject . parseObject ( tup . toString ( ) ) . get ( 0 ) ) ; } System . out . println ( tables ) ; }","Generate syntax code: Connect to the database through the $conn$ and execute the SQL statement: Query all tablename in the pg_tables table that a schemaname is $public$, store the 0th element of each item of the query result as list and return.","<met> <mod> public </mod> void_type postgresqlTable <for> ( <for> type_identifier conn </for> , <for> type_identifier publics </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> table_tup = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { publics } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> tables = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier tup : table_tup ) <blo> { <exp> <met> tables . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> tup . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> <fie> System . out </fie> . println <arg> ( tables ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $e$ to create a database connection and execute SQL ( query all data in the distinct column of the salaries table based on $DEPARTMENT$ ) . Store the 0th element of each item in the query result as list, and return as the value corresponding to departments in the dictionary.","public JSONObject get ( DataSource e , String DEPARTMENT ) { JdbcTemplate connection = new JdbcTemplate ( e ) ; List query = connection . query ( "" select distinct from salaries where DEPARTMENT = ? "" , new Object [ ] { DEPARTMENT } , new BeanPropertyRowMapper ( List . class ) ) ; List tables = new ArrayList ( ) ; for ( Object tup : query ) { tables . add ( JSONObject . parseObject ( tup . toString ( ) ) . get ( 0 ) ) ; } JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" departments "" , tables ) ; return jsonObject ; }","Generate syntax code: Use $e$ to create a database connection and execute SQL ( query all data in the distinct column of the salaries table based on $DEPARTMENT$ ) . Store the 0th element of each item in the query result as list, and return as the value corresponding to departments in the dictionary.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> , <for> type_identifier DEPARTMENT </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DEPARTMENT } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> tables = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier tup : query ) <blo> { <exp> <met> tables . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> tup . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , tables ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Establish the connection to the database through $appEngine$. Execute SQL statement: Query the number of all userName in the user table with id as $userId$, return the 0th element of the query results.","public Object getUserEntry ( DataSource appEngine , String userId ) { JdbcTemplate engine = new JdbcTemplate ( appEngine ) ; List res = engine . query ( "" select count(username) from user where id = ? "" , new Object [ ] { userId } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Establish the connection to the database through $appEngine$. Execute SQL statement: Query the number of all userName in the user table with id as $userId$, return the 0th element of the query results.","<met> <mod> public </mod> type_identifier getUserEntry <for> ( <for> type_identifier appEngine </for> , <for> type_identifier userId </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( appEngine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { userId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the user_id column in the query_users table processed by the count method where name is $name$ ) and get the first data, then close the $Conn$ connection and return the query results.","public List testTransactionClose ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select count(user_id) from query_users where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Execute SQL with $conn$ ( get the user_id column in the query_users table processed by the count method where name is $name$ ) and get the first data, then close the $Conn$ connection and return the query results.","<met> <mod> public </mod> type_identifier testTransactionClose <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Connect the database through $engine$ and use the java expression to execute the SQL statement: Query all the data in the $formulario$ table and return the query results.,"public List table ( EntityManager engine , Root < Object > formulario ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( formulario ) ; List < Object > s = engine . createQuery ( cq ) . getResultList ( ) ; return s ; }",Generate syntax code: Connect the database through $engine$ and use the java expression to execute the SQL statement: Query all the data in the $formulario$ table and return the query results.,"<met> <mod> public </mod> type_identifier table <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> formulario </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( formulario ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> s = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return s ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement ( get all the columns in the books table based on $isbn$ and get the first piece of data. If the query result is empty, return None; if the request module sends the request in a way that renders for post, return book.html, where the book parameter is the query result.","public Object login ( HttpRequest request , JdbcTemplate conn , String isbn , Model model ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return null ; } if ( request . getMethod ( ) . equals ( "" POST "" ) ) { model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; } return null ; }","Generate syntax code: Use $conn$ to execute the SQL statement ( get all the columns in the books table based on $isbn$ and get the first piece of data. If the query result is empty, return None; if the request module sends the request in a way that renders for post, return book.html, where the book parameter is the query result.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
Generate origin code: Set up SQL ( query all columns in orderItem based on $orderId$ ) . Use $conn$ to execute SQL and get all the data. Close the connection and return the query results.,"public List getOrder ( JdbcTemplate conn , String orderId ) { List execResults = conn . query ( "" select * from orderitem where orderid = ? "" , new Object [ ] { orderId } , new BeanPropertyRowMapper ( List . class ) ) ; return execResults ; }",Generate syntax code: Set up SQL ( query all columns in orderItem based on $orderId$ ) . Use $conn$ to execute SQL and get all the data. Close the connection and return the query results.,"<met> <mod> public </mod> type_identifier getOrder <for> ( <for> type_identifier conn </for> , <for> type_identifier orderId </for> ) </for> <blo> { <loc> type_identifier <var> execResults = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orderId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return execResults ; </ret> } </blo> </met>"
"Generate origin code: Use the string matching to set SQL ( query all the information in the cars table based on $id$ ) . Use $conn$ to execute SQL, get all the query results, and return the query results.","public List findById ( JdbcTemplate conn , String id ) { List cars = conn . query ( "" select * from cars where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return cars ; }","Generate syntax code: Use the string matching to set SQL ( query all the information in the cars table based on $id$ ) . Use $conn$ to execute SQL, get all the query results, and return the query results.","<met> <mod> public </mod> type_identifier findById <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cars = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return cars ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in the tablesModel table based on $col$ and $func_length$ ) , execute SQL based on $conn$, get the first piece of data, and return the 0th element of the data.","public Object getNaForAColumn ( JdbcTemplate conn , String col , String func_length ) { List qs = conn . query ( "" select * from tablesModel where col=? and func_length = ? "" , new Object [ ] { col , func_length } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( qs . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Set SQL ( query all columns in the tablesModel table based on $col$ and $func_length$ ) , execute SQL based on $conn$, get the first piece of data, and return the 0th element of the data.","<met> <mod> public </mod> type_identifier getNaForAColumn <for> ( <for> type_identifier conn </for> , <for> type_identifier col </for> , <for> type_identifier func_length </for> ) </for> <blo> { <loc> type_identifier <var> qs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { col , func_length } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> qs . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: connect with the acquisition method of $engine$ execute SQL ( query the sanic_polls column of sanic_polls based on $id$ )  get all the data and finally return the query result.,"public List prepareDb ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select sanic_polls from sanic_polls where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: connect with the acquisition method of $engine$ execute SQL ( query the sanic_polls column of sanic_polls based on $id$ )  get all the data and finally return the query result.,"<met> <mod> public </mod> type_identifier prepareDb <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use for loop to iterate through each element in $items$, set up SQL ( query all the information in the 'table' table based on 'item' which is every piece of the result after iteration ) , use $conn$ to execute the SQL and get all the query results, store the obtained query results in a list, and finally return the list.","public List getMasterData ( JdbcTemplate conn , List items ) { List to_return = new ArrayList ( ) ; for ( Object item : items ) { List results = conn . query ( "" select * from table where item = ? "" , new Object [ ] { item } , new BeanPropertyRowMapper ( List . class ) ) ; to_return . add ( results ) ; } return to_return ; }","Generate syntax code: Use for loop to iterate through each element in $items$, set up SQL ( query all the information in the 'table' table based on 'item' which is every piece of the result after iteration ) , use $conn$ to execute the SQL and get all the query results, store the obtained query results in a list, and finally return the list.","<met> <mod> public </mod> type_identifier getMasterData <for> ( <for> type_identifier conn </for> , <for> type_identifier items </for> ) </for> <blo> { <loc> type_identifier <var> to_return = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : items ) <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { item } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> to_return . add <arg> ( results ) </arg> </met> ; </exp> } </blo> </enh> <ret> return to_return ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query all the columns in the vocabulary table based on $word$ ) and use $conn$ to execute SQL to get the first piece of data. If the execution result exists, it is printed.","public void dictate ( JdbcTemplate conn , String word ) { List vocabulary_rows = conn . query ( "" select * from vocabulary where word = ? "" , new Object [ ] { word } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! vocabulary_rows . isEmpty ( ) ) { System . out . println ( vocabulary_rows . get ( 0 ) ) ; } }","Generate syntax code: Set the SQL statement ( query all the columns in the vocabulary table based on $word$ ) and use $conn$ to execute SQL to get the first piece of data. If the execution result exists, it is printed.","<met> <mod> public </mod> void_type dictate <for> ( <for> type_identifier conn </for> , <for> type_identifier word </for> ) </for> <blo> { <loc> type_identifier <var> vocabulary_rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { word } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> vocabulary_rows . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> vocabulary_rows . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL ( query all columns in the flights where the flight_id is $id$ ) using $db$ and get all the data. Finally, print the query result.","public void flights ( JdbcTemplate db , String id ) { List res = db . query ( "" select * from flights where flight_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }","Generate syntax code: Execute the SQL ( query all columns in the flights where the flight_id is $id$ ) using $db$ and get all the data. Finally, print the query result.","<met> <mod> public </mod> void_type flights <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use java expressions to set SQL ( query the lang_code column in $table$ where id is $id$ ) , execute SQL with $conn$ to get all the data, and return it.","public List queryOldRecs ( EntityManager conn , Root < Object > table , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" id "" ) , id ) ) ; List < Object > task = conn . createQuery ( cq ) . getResultList ( ) ; return task ; }","Generate syntax code: Use java expressions to set SQL ( query the lang_code column in $table$ where id is $id$ ) , execute SQL with $conn$ to get all the data, and return it.","<met> <mod> public </mod> type_identifier queryOldRecs <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> task = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return task ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( get all the columns in the 'table' table based on $value$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result, print it, store each element of the execution result into list and return the list content.","public List printTable ( JdbcTemplate conn , String value ) { List cols = conn . query ( "" select * from table where value =? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List headers = new ArrayList ( ) ; for ( Object col : cols ) { System . out . println ( col ) ; headers . add ( col ) ; } return cols ; }","Generate syntax code: Set the SQL statement ( get all the columns in the 'table' table based on $value$ ) , use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result, print it, store each element of the execution result into list and return the list content.","<met> <mod> public </mod> type_identifier printTable <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> cols = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> headers = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier col : cols ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( col ) </arg> </met> ; </exp> <exp> <met> headers . add <arg> ( col ) </arg> </met> ; </exp> } </blo> </enh> <ret> return cols ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the columns ID, origin, destination, duration in the flights where id is $flight_id$ ) with $conn$ and get all the data. If the length of the query result is 0, print No flights. and return directly to the query result.","public List main ( JdbcTemplate conn , String flight_id ) { List res = conn . query ( "" select id, origin, destination, duration from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { System . out . println ( "" No flights. "" ) ; return null ; } else { return res ; } }","Generate syntax code: Execute the SQL ( get the columns ID, origin, destination, duration in the flights where id is $flight_id$ ) with $conn$ and get all the data. If the length of the query result is 0, print No flights. and return directly to the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( use the format ( ) function to format the output string, query all the columns in the users table through the string $id$ ) , execute SQL to get the first piece of data via the $conn$ connection, convert the execution result to dict and use jsonify to return.","public JSONObject getUserByid ( JdbcTemplate conn , String id ) { List users = conn . query ( "" select * from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( users . get ( 0 ) . toString ( ) ) ; }","Generate syntax code: Set the SQL statement ( use the format ( ) function to format the output string, query all the columns in the users table through the string $id$ ) , execute SQL to get the first piece of data via the $conn$ connection, convert the execution result to dict and use jsonify to return.","<met> <mod> public </mod> type_identifier getUserByid <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Set the SQL ( get the id column in the $TelegramUsers$ where the telegram_user_id is $user_id$ ) under the java expression. Use $conn$ to get all the data and return the query results.,"public List getSource ( EntityManager conn , Root < Object > TelegramUsers , String user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( TelegramUsers ) . where ( cb . equal ( TelegramUsers . get ( "" telegram_user_id "" ) , user_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }",Generate syntax code: Set the SQL ( get the id column in the $TelegramUsers$ where the telegram_user_id is $user_id$ ) under the java expression. Use $conn$ to get all the data and return the query results.,"<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> TelegramUsers </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( TelegramUsers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> TelegramUsers . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Get the database connection from $engine$ and set the SQL ( query all the columns in the Works when the Barsname is equal to $name$ ) . Execute the SQL using the database connection and get all the data. Convert each item in the query result to type dict and return None if the result is empty after processing, otherwise return the query result.","public List findBartendersStartEnd ( DataSource engine , String name ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from works where barsname = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return null ; } else { return results ; } }","Generate syntax code: Get the database connection from $engine$ and set the SQL ( query all the columns in the Works when the Barsname is equal to $name$ ) . Execute the SQL using the database connection and get all the data. Convert each item in the query result to type dict and return None if the result is empty after processing, otherwise return the query result.","<met> <mod> public </mod> type_identifier findBartendersStartEnd <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the method of request is POST, use $conn$ to execute SQL ( query all columns in the users_ba table based on $id$ and $username$ ) and get all the data. If the query result length is not 1, print invalid username and/or password, otherwise redirect to the url of index. If method is not POST, return the rendered login.html page.","public Object loginSle ( HttpRequest request , JdbcTemplate conn , String id , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from users_ba where id=? and username= ? "" , new Object [ ] { id , username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . size ( ) != 1 ) { return "" invalid username and/or password "" ; } else { return "" index "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the method of request is POST, use $conn$ to execute SQL ( query all columns in the users_ba table based on $id$ and $username$ ) and get all the data. If the query result length is not 1, print invalid username and/or password, otherwise redirect to the url of index. If method is not POST, return the rendered login.html page.","<met> <mod> public </mod> type_identifier loginSle <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> rows . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $t_id$ is not empty, try to use $conn$ to query all id data in the resources table that the t_id is $t_id$, make sure that $conn$ is closed, return all query results, and return False in case of an exception.","public Object queryId ( JdbcTemplate conn , String t_id ) { try { List res_ids = conn . query ( "" select id from resources where t_id = ? "" , new Object [ ] { t_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res_ids ; } catch ( Exception e ) { return false ; } }","Generate syntax code: If $t_id$ is not empty, try to use $conn$ to query all id data in the resources table that the t_id is $t_id$, make sure that $conn$ is closed, return all query results, and return False in case of an exception.","<met> <mod> public </mod> type_identifier queryId <for> ( <for> type_identifier conn </for> , <for> type_identifier t_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res_ids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { t_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res_ids ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Set the query statement to: Get all the columns in DUAL based on $type$. Execute the query statement with $engine$ to get all the data. Convert each item of the query results into dict and store it as list and return it.,"public List getUnicode ( JdbcTemplate engine , String type ) { List res = engine . query ( "" select * from dual where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Set the query statement to: Get all the columns in DUAL based on $type$. Execute the query statement with $engine$ to get all the data. Convert each item of the query results into dict and store it as list and return it.,"<met> <mod> public </mod> type_identifier getUnicode <for> ( <for> type_identifier engine </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set SQL: Query the contents of the $books$ table where id is $book_id$ and execute the SQL statement via $conn$ to get all the data. If the execution result is empty, return False; otherwise return True.","public boolean bookExists ( EntityManager conn , Root < Object > books , String book_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( books ) . where ( cb . equal ( books . get ( "" id "" ) , book_id ) ) ; List < Object > rp = conn . createQuery ( cq ) . getResultList ( ) ; if ( rp . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Use the java expression to set SQL: Query the contents of the $books$ table where id is $book_id$ and execute the SQL statement via $conn$ to get all the data. If the execution result is empty, return False; otherwise return True.","<met> <mod> public </mod> boolean_type bookExists <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> books </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( books ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> books . get <arg> ( string_literal ) </arg> </met> , book_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rp = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rp . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database with where engine is $engine$ and execute the SQL（get all the information in the sells where price is $max_price$ and It is $max_price$ ) and get all the data, then use the for loop to convert each item of the query result to a dictionary type. Finally, the dictionary type is returned.","public List filterBeers ( DataSource engine , String max_price ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from sells where price=? and lt= ? "" , new Object [ ] { max_price } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: connect to the database with where engine is $engine$ and execute the SQL（get all the information in the sells where price is $max_price$ and It is $max_price$ ) and get all the data, then use the for loop to convert each item of the query result to a dictionary type. Finally, the dictionary type is returned.","<met> <mod> public </mod> type_identifier filterBeers <for> ( <for> type_identifier engine </for> , <for> type_identifier max_price </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { max_price } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL statement by $conn$: Query all columns in campaigns table and get all the data. If the execution result is empty, return None; otherwise, return all the execution results.","public List getCampaign ( JdbcTemplate conn ) { List result = conn . query ( "" select * from campaigns "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: Execute SQL statement by $conn$: Query all columns in campaigns table and get all the data. If the execution result is empty, return None; otherwise, return all the execution results.","<met> <mod> public </mod> type_identifier getCampaign <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the datname column in the pg_database ) to get all the data, store the 0th element of each item in the query result in a list and return.","public List searchName ( JdbcTemplate conn ) { List names = conn . query ( "" select datname from pg_database "" , new BeanPropertyRowMapper ( List . class ) ) ; List items = new ArrayList ( ) ; for ( Object i : names ) { items . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return items ; }","Generate syntax code: Use $conn$ to execute SQL ( get the datname column in the pg_database ) to get all the data, store the 0th element of each item in the query result in a list and return.","<met> <mod> public </mod> type_identifier searchName <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> items = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : names ) <blo> { <exp> <met> items . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the pedidos table based on $clienteid$ ) and get all the data. Return empty if the length of the query result is 0, and use for loop to add each item in the query result to 'list' and return.","public List getHistorial ( JdbcTemplate conn , String clienteid ) { List result = conn . query ( "" select * from pedidos where clienteid = ? "" , new Object [ ] { clienteid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } List historial = new ArrayList ( ) ; for ( Object auxdic : result ) { historial . add ( auxdic ) ; } return historial ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the pedidos table based on $clienteid$ ) and get all the data. Return empty if the length of the query result is 0, and use for loop to add each item in the query result to 'list' and return.","<met> <mod> public </mod> type_identifier getHistorial <for> ( <for> type_identifier conn </for> , <for> type_identifier clienteid </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { clienteid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <loc> type_identifier <var> historial = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier auxdic : result ) <blo> { <exp> <met> historial . add <arg> ( auxdic ) </arg> </met> ; </exp> } </blo> </enh> <ret> return historial ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( get all columns in the players table based on $id$ ) and get all the data. Then set assertion that the length of query result is greater than 0.,"public void testEngineConnectExecute ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select * from players where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) > 0 ; }",Generate syntax code: Use $conn$ to execute SQL ( get all columns in the players table based on $id$ ) and get all the data. Then set assertion that the length of query result is greater than 0.,"<met> <mod> public </mod> void_type testEngineConnectExecute <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: connect the database through $engine$, execute SQL ( get all the counted columns in the 'table' table where invoicedate is $date$ ) , get all the data, and finally print the query result.","public void getTableNum ( DataSource engine , String date ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List num = connection . query ( "" select count(*) from table where invoicedate= ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( num ) ; }","Generate syntax code: connect the database through $engine$, execute SQL ( get all the counted columns in the 'table' table where invoicedate is $date$ ) , get all the data, and finally print the query result.","<met> <mod> public </mod> void_type getTableNum <for> ( <for> type_identifier engine </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> num = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( num ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Set SQL: To query all columns in the musei table where id is $museo$, use $con$ to execute the SQL statement and return the first piece of data obtained.","public Object findMuseo ( JdbcTemplate con , String museo ) { List res = con . query ( "" select * from musei where id = ? "" , new Object [ ] { museo } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Set SQL: To query all columns in the musei table where id is $museo$, use $con$ to execute the SQL statement and return the first piece of data obtained.","<met> <mod> public </mod> type_identifier findMuseo <for> ( <for> type_identifier con </for> , <for> type_identifier museo </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { museo } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( query all the columns in neihan ) with $conn$, get all the data and return.","public List searchNeihan ( JdbcTemplate conn ) { List neihan_results = conn . query ( "" select * from neihan "" , new BeanPropertyRowMapper ( List . class ) ) ; return neihan_results ; }","Generate syntax code: Execute the SQL statement ( query all the columns in neihan ) with $conn$, get all the data and return.","<met> <mod> public </mod> type_identifier searchNeihan <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> neihan_results = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return neihan_results ; </ret> } </blo> </met>"
"Generate origin code: If $isbn$ exists, use $conn$ to execute SQL ( query all columns in the books table based on $isbn$ ) and get the first piece of data. Use the serialization method to return the title and author properties in the query results; otherwise, return {error: Invalid isbn} with the serialization method.","public JSONObject api ( JdbcTemplate conn , String isbn ) { JSONObject jsonObject = new JSONObject ( ) ; if ( isbn != null ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject book = JSONObject . parseObject ( books . get ( 0 ) . toString ( ) ) ; jsonObject . put ( "" title "" , book . getString ( "" title "" ) ) ; jsonObject . put ( "" author "" , book . getString ( "" author "" ) ) ; } else { jsonObject . put ( "" error "" , "" Invalid isbn "" ) ; } return jsonObject ; }","Generate syntax code: If $isbn$ exists, use $conn$ to execute SQL ( query all columns in the books table based on $isbn$ ) and get the first piece of data. Use the serialization method to return the title and author properties in the query results; otherwise, return {error: Invalid isbn} with the serialization method.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <if_> if <par> ( <bin> isbn != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> book = <met> JSONObject . parseObject <arg> ( <met> <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> book . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> book . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> else <blo> { <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> </if_> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( query all the columns in content_table where title is $title$ ) with $conn$ and get all the data. Return False if the result is None, otherwise the query result is returned.","public Object selectEntry ( JdbcTemplate conn , String title ) { List testrow = conn . query ( "" select * from content_table where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( testrow . isEmpty ( ) ) { return false ; } else { return testrow ; } }","Generate syntax code: Execute the SQL ( query all the columns in content_table where title is $title$ ) with $conn$ and get all the data. Return False if the result is None, otherwise the query result is returned.","<met> <mod> public </mod> type_identifier selectEntry <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> testrow = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> testrow . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return testrow ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the values column in the card table based on $cardType_id$ and $cardType_name$ ) , get the first row of data, and return the data.","public List insertDummyCardType ( JdbcTemplate conn , String cardType_id , String cardType_name ) { List ins = conn . query ( "" select values from card where cardType_id=? and cardType_name= ? "" , new Object [ ] { cardType_id , cardType_name } , new BeanPropertyRowMapper ( List . class ) ) ; return ins ; }","Generate syntax code: Use $conn$ to execute SQL ( query the values column in the card table based on $cardType_id$ and $cardType_name$ ) , get the first row of data, and return the data.","<met> <mod> public </mod> type_identifier insertDummyCardType <for> ( <for> type_identifier conn </for> , <for> type_identifier cardType_id </for> , <for> type_identifier cardType_name </for> ) </for> <blo> { <loc> type_identifier <var> ins = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cardType_id , cardType_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ins ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all information in tbl table based on $value$ ) , execute SQL with $conn$ and get the cursor, use for loop to iterate through the results, convert each piece of data and its 'keys' value into tuple and pack it in zip. Then convert it into dict and insert it into a list, and finally return the list.","public List selectValue ( JdbcTemplate conn , String value ) { List records = conn . query ( "" select * from tbl where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List rs = new ArrayList ( ) ; for ( Object record : records ) { rs . add ( JSONObject . parseObject ( record . toString ( ) ) . getString ( "" keys "" ) ) ; } return rs ; }","Generate syntax code: Set up SQL ( query all information in tbl table based on $value$ ) , execute SQL with $conn$ and get the cursor, use for loop to iterate through the results, convert each piece of data and its 'keys' value into tuple and pack it in zip. Then convert it into dict and insert it into a list, and finally return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> records = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> rs = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier record : records ) <blo> { <exp> <met> rs . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> record . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $teng$, set SQL according to the java expression ( query all columns in the $table$ table based on $doc$ ) , execute SQL, get all the data, and return the 0th element of the 0th query result.","public Object testJsonQuery ( EntityManager teng , Root < Object > table , String doc ) { CriteriaBuilder cb = teng . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" doc "" ) , doc ) ) ; List < Object > results = teng . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: connect the database according to $teng$, set SQL according to the java expression ( query all columns in the $table$ table based on $doc$ ) , execute SQL, get all the data, and return the 0th element of the 0th query result.","<met> <mod> public </mod> type_identifier testJsonQuery <for> ( <for> type_identifier teng </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier doc </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> teng . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , doc ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> teng . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL: query all titles in Books with $isbn$. Execute SQL with $conn$ and get all the data. If the query result is null and return False, otherwise the query result is converted to a list and return.","public Object selectTitle ( JdbcTemplate conn , String isbn ) { List titles = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( titles . isEmpty ( ) ) { return false ; } else { List res = new ArrayList ( ) ; for ( Object item : titles ) { res . add ( item ) ; } return res ; } }","Generate syntax code: Set the SQL: query all titles in Books with $isbn$. Execute SQL with $conn$ and get all the data. If the query result is null and return False, otherwise the query result is converted to a list and return.","<met> <mod> public </mod> type_identifier selectTitle <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> titles = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> titles . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : titles ) <blo> { <exp> <met> res . add <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the req_url_host column of httpreqs2 based on $devid$ ) , get all the data, use for loop to print the 0th element of each item in the query result, and finally return the query result.","public Object getUrls ( JdbcTemplate conn , String devid ) { List res = conn . query ( "" select req_url_host from httpreqs2 where devid = ? "" , new Object [ ] { devid } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return false ; } else { for ( Object r : res ) { System . out . println ( JSONObject . parseObject ( r . toString ( ) ) ) ; } return res ; } }","Generate syntax code: Use $conn$ to execute SQL ( get the req_url_host column of httpreqs2 based on $devid$ ) , get all the data, use for loop to print the 0th element of each item in the query result, and finally return the query result.","<met> <mod> public </mod> type_identifier getUrls <for> ( <for> type_identifier conn </for> , <for> type_identifier devid </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { devid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <enh> for ( type_identifier r : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement ( query the INTO column in the project table according to $telefone$ ) and get the first piece of data. If data is obtained, return True. If an exception is caught, return False.","public boolean getProvider ( DataSource db_string , String telefone ) { boolean res ; JdbcTemplate db = new JdbcTemplate ( db_string ) ; try { List don = db . query ( "" select INTO from project where telefone = ? "" , new Object [ ] { telefone } , new BeanPropertyRowMapper ( List . class ) ) ; res = true ; } catch ( Exception e ) { res = false ; } return res ; }","Generate syntax code: Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement ( query the INTO column in the project table according to $telefone$ ) and get the first piece of data. If data is obtained, return True. If an exception is caught, return False.","<met> <mod> public </mod> boolean_type getProvider <for> ( <for> type_identifier db_string </for> , <for> type_identifier telefone </for> ) </for> <blo> { <loc> boolean_type <var> res </var> ; </loc> <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> don = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { telefone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <ass> res = true </ass> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <ass> res = false </ass> ; </exp> } </blo> </cat> </try> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up sql ( query the name column in the users table according to $scores$ ) , use $conn$ to execute SQL, get all the query results, and return them.","public List testAnyWithOperator ( JdbcTemplate conn , String scores ) { List res = conn . query ( "" select name from users where scores= ? "" , new Object [ ] { scores } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up sql ( query the name column in the users table according to $scores$ ) , use $conn$ to execute SQL, get all the query results, and return them.","<met> <mod> public </mod> type_identifier testAnyWithOperator <for> ( <for> type_identifier conn </for> , <for> type_identifier scores </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { scores } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request method is' POST', use $conn$ to execute SQL ( query all columns in the users table where username is $user$ ) . If get the data, jump to the 'login' page; otherwise, jump to the' home' page and return the rendered 'login.html'.","public Object login ( HttpRequest request , JdbcTemplate conn , String user ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from users where username= ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return "" login "" ; } else { return "" home "" ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request method is' POST', use $conn$ to execute SQL ( query all columns in the users table where username is $user$ ) . If get the data, jump to the 'login' page; otherwise, jump to the' home' page and return the rendered 'login.html'.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL according to the java expression ( get the student_id and progress columns in the $Students$ table whose student_id is $userid$ ) , get the first piece of data, and finally return the progress content processed by jsonify, where the progress parameter is the progress column of the query result.","public Object quizStart ( EntityManager conn , Root < Object > Students , String userid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Students ) . where ( cb . equal ( Students . get ( "" student_id "" ) , userid ) ) ; List < Object > progress = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( progress . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL according to the java expression ( get the student_id and progress columns in the $Students$ table whose student_id is $userid$ ) , get the first piece of data, and finally return the progress content processed by jsonify, where the progress parameter is the progress column of the query result.","<met> <mod> public </mod> type_identifier quizStart <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Students </for> , <for> type_identifier userid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Students ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Students . get <arg> ( string_literal ) </arg> </met> , userid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> progress = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> progress . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Connect to the database with $engine$ and execute SQL ( get all the columns in database based on $DATABASE_NAME$ ) and get all the data. Close the connection and finally return the query result.,"public List tearDown ( DataSource engine , String DATABASE_NAME ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from database where DATABASE_NAME= ? "" , new Object [ ] { DATABASE_NAME } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Connect to the database with $engine$ and execute SQL ( get all the columns in database based on $DATABASE_NAME$ ) and get all the data. Close the connection and finally return the query result.,"<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier engine </for> , <for> type_identifier DATABASE_NAME </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { DATABASE_NAME } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine via $db_host$ and establish a connection, try to use ORM method to execute the SQL statement, get the Fuzzjob column in $models$ table with 'ID': $projId$, get the first piece of data and return. If an exception occurs during execution, print the exception and finally make sure the connection is closed.","public Object getResultOfStatement ( EntityManager db_host , Root < Object > models , String projId ) { try { CriteriaBuilder cb = db_host . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( models ) . where ( cb . equal ( models . get ( "" projId "" ) , projId ) ) ; List < Object > project = db_host . createQuery ( cq ) . getResultList ( ) ; return project ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Get the database engine via $db_host$ and establish a connection, try to use ORM method to execute the SQL statement, get the Fuzzjob column in $models$ table with 'ID': $projId$, get the first piece of data and return. If an exception occurs during execution, print the exception and finally make sure the connection is closed.","<met> <mod> public </mod> type_identifier getResultOfStatement <for> ( <for> type_identifier db_host </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> models </for> , <for> type_identifier projId </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> db_host . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( models ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> models . get <arg> ( string_literal ) </arg> </met> , projId ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> project = <met> <met> db_host . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return project ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $url$ to get the database engine. Set the SQL statement: Query all columns in the pg_database table where datname is $datname$. Try to execute SQL, get all the data, and return True if an execution result exists. If an exception occurs, return False.","public boolean databaseExists ( DataSource url , String datname ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; try { List data = conn . query ( "" select * from pg_database where datname = ? "" , new Object [ ] { datname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . isEmpty ( ) ) { return false ; } else { return true ; } } catch ( Exception e ) { return false ; } }","Generate syntax code: Use $url$ to get the database engine. Set the SQL statement: Query all columns in the pg_database table where datname is $datname$. Try to execute SQL, get all the data, and return True if an execution result exists. If an exception occurs, return False.","<met> <mod> public </mod> boolean_type databaseExists <for> ( <for> type_identifier url </for> , <for> type_identifier datname </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $conn$: Get the first name in the reviews table based on $book_id$. If the query result is empty, render and return ""error.html""; otherwise, use jsonify to return the query result.","public Object api ( JdbcTemplate conn , String book_id ) { List bkouts = conn . query ( "" select name from reviews where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( bkouts . isEmpty ( ) ) { return "" error.html "" ; } else { return JSONObject . parseObject ( bkouts . get ( 0 ) . toString ( ) ) ; } }","Generate syntax code: Execute the SQL statement through $conn$: Get the first name in the reviews table based on $book_id$. If the query result is empty, render and return ""error.html""; otherwise, use jsonify to return the query result.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> bkouts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> bkouts . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> bkouts . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query all columns in BOOKS where id is $id$ ) . Execute the SQL statement with $conn$ and get all the data. If the query result is empty, render and return ""error"". Otherwise render and return ""book_detail.html"", where the parameter book is the result of the query.","public Object book ( JdbcTemplate conn , String id , Model model ) { List books_by_id = conn . query ( "" select * from books where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books_by_id . isEmpty ( ) ) { return "" error "" ; } else { model . addAttribute ( "" book "" , books_by_id ) ; return "" book_detail.html "" ; } }","Generate syntax code: Set the SQL statement ( query all columns in BOOKS where id is $id$ ) . Execute the SQL statement with $conn$ and get all the data. If the query result is empty, render and return ""error"". Otherwise render and return ""book_detail.html"", where the parameter book is the result of the query.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books_by_id = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books_by_id . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , books_by_id ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine where the name of db_engine is $db_engine_name$. Connect to the database based on the acquired database engine. Try to use the connection to execute an SQL statement ( query all year_id with an id of $id$ in the month table ) , print all the data, and set the query state to True. If an exception occurs during SQL execution, the query state is set to False, and finally the query state is returned.","public boolean checkGED ( DataSource db_engine_name , String id ) { boolean go ; try { JdbcTemplate engine = new JdbcTemplate ( db_engine_name ) ; List texts = engine . query ( "" select year_id from month where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( texts ) ; go = true ; } catch ( Exception e ) { go = false ; } return go ; }","Generate syntax code: Get the database engine where the name of db_engine is $db_engine_name$. Connect to the database based on the acquired database engine. Try to use the connection to execute an SQL statement ( query all year_id with an id of $id$ in the month table ) , print all the data, and set the query state to True. If an exception occurs during SQL execution, the query state is set to False, and finally the query state is returned.","<met> <mod> public </mod> boolean_type checkGED <for> ( <for> type_identifier db_engine_name </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> boolean_type <var> go </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_engine_name ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> texts = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( texts ) </arg> </met> ; </exp> <exp> <ass> go = true </ass> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <ass> go = false </ass> ; </exp> } </blo> </cat> </try> <ret> return go ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method to get the database engine through $path$ and further get the Session object. Execute the SQL statement ( query all the columns in the $Story$ table according to $story_id$ ) , get the first piece of data, and return the query results.","public List < Object > selectStory ( EntityManager path , Root < Object > Story , String story_id ) { CriteriaBuilder cb = path . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Story ) . where ( cb . equal ( Story . get ( "" id "" ) , story_id ) ) ; List < Object > story = path . createQuery ( cq ) . getResultList ( ) ; return story ; }","Generate syntax code: Use ORM method to get the database engine through $path$ and further get the Session object. Execute the SQL statement ( query all the columns in the $Story$ table according to $story_id$ ) , get the first piece of data, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectStory <for> ( <for> type_identifier path </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Story </for> , <for> type_identifier story_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> path . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Story ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Story . get <arg> ( string_literal ) </arg> </met> , story_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> story = <met> <met> path . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return story ; </ret> } </blo> </met>"
"Generate origin code: Establish a connection via $engine$. Set up SQL based on the java expression: ( query $studentTbl$ table for isSuspended column based on 'email': $student$ ) . Execute the SQL and get all the data, close the connection and return the query result.","public List < Object > getSource ( EntityManager engine , Root < Object > studentTbl , String student ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( studentTbl ) . where ( cb . equal ( studentTbl . get ( "" student "" ) , student ) ) ; List < Object > judges = engine . createQuery ( cq ) . getResultList ( ) ; return judges ; }","Generate syntax code: Establish a connection via $engine$. Set up SQL based on the java expression: ( query $studentTbl$ table for isSuspended column based on 'email': $student$ ) . Execute the SQL and get all the data, close the connection and return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getSource <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> studentTbl </for> , <for> type_identifier student </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( studentTbl ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> studentTbl . get <arg> ( string_literal ) </arg> </met> , student ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> judges = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return judges ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to set up SQL: To query the updatetime information in the $table$ table based on $taskid$. Use $conn$ to execute SQL and get all the data. Store the 0th data of each item of the query result in list and return.,"public List getRecs ( EntityManager conn , Root < Object > table , String taskid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" taskid "" ) , taskid ) ) ; List < Object > recs_time = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object res : recs_time ) { list . add ( res ) ; } return list ; }",Generate syntax code: Use the java expression to set up SQL: To query the updatetime information in the $table$ table based on $taskid$. Use $conn$ to execute SQL and get all the data. Store the 0th data of each item of the query result in list and return.,"<met> <mod> public </mod> type_identifier getRecs <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier taskid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , taskid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs_time = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier res : recs_time ) <blo> { <exp> <met> list . add <arg> ( res ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( query the data column in the ins00 table according to $lname$ ) and get all the data, use for loop to insert each item of the query result into a list, and return the result with an undelimited string fromat.""","public String readDbData ( DataSource CONN_STRING , String lname ) { JdbcTemplate engine = new JdbcTemplate ( CONN_STRING ) ; List insurances = engine . query ( "" select data from ins00 where lname= ? "" , new Object [ ] { lname } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object ins : insurances ) { results . add ( ins ) ; } return results . toString ( ) ; }","Generate syntax code: Execute the SQL statement ( query the data column in the ins00 table according to $lname$ ) and get all the data, use for loop to insert each item of the query result into a list, and return the result with an undelimited string fromat.""","<met> <mod> public </mod> type_identifier readDbData <for> ( <for> type_identifier CONN_STRING </for> , <for> type_identifier lname </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( CONN_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> insurances = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { lname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier ins : insurances ) <blo> { <exp> <met> results . add <arg> ( ins ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> results . toString <arg> ( ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all columns in the orderdetail table based on $orderid$ ) , execute SQL based on $conn$, get all the query results, and return the data.","public List updateOrderdetail ( JdbcTemplate conn , String orderid ) { List res = conn . query ( "" select * from orderdetail where orderid= ? "" , new Object [ ] { orderid } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up SQL ( query all columns in the orderdetail table based on $orderid$ ) , execute SQL based on $conn$, get all the query results, and return the data.","<met> <mod> public </mod> type_identifier updateOrderdetail <for> ( <for> type_identifier conn </for> , <for> type_identifier orderid </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orderid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Open the ""flights.csv"" file. Use csv to read open files. For each origin information read, use $conn$ to execute the SQL statement ( query the information of the duration in the flights based on the origin ) and print the query results. Finally, close the open file.","public void readerSel ( JdbcTemplate conn ) { String filePath = "" flights.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String origin = sc . nextLine ( ) ; List result = conn . query ( "" select duration from flights where origin= ? "" , new Object [ ] { origin } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open the ""flights.csv"" file. Use csv to read open files. For each origin information read, use $conn$ to execute the SQL statement ( query the information of the duration in the flights based on the origin ) and print the query results. Finally, close the open file.","<met> <mod> public </mod> void_type readerSel <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> origin = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL: Query the password in the users table based on $username$. Loop through the query results and use the $check_password_hash$ function to verify that the password attribute of each element in the loop matches the $password$. If matches, return True, otherwise return False.","public boolean selsectPassword ( JdbcTemplate conn , String username , String password ) { boolean b = false ; List reclist = conn . query ( "" select password from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : reclist ) { if ( JSONObject . parseObject ( i . toString ( ) ) . getString ( "" password "" ) . equals ( password ) ) { b = true ; } else { b = false ; } } return b ; }","Generate syntax code: Use $conn$ to execute SQL: Query the password in the users table based on $username$. Loop through the query results and use the $check_password_hash$ function to verify that the password attribute of each element in the loop matches the $password$. If matches, return True, otherwise return False.","<met> <mod> public </mod> boolean_type selsectPassword <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> boolean_type <var> b = false </var> ; </loc> <loc> type_identifier <var> reclist = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : reclist ) <blo> { <if_> if <par> ( <met> <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> . equals <arg> ( password ) </arg> </met> ) </par> <blo> { <exp> <ass> b = true </ass> ; </exp> } </blo> else <blo> { <exp> <ass> b = false </ass> ; </exp> } </blo> </if_> } </blo> </enh> <ret> return b ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to execute SQL ( get the word column in the $words$ table with id as $pkid$ ) and use $conn$ to execute SQL to get all the data. Finally return the query results.,"public List getSource ( EntityManager conn , Root < Object > words , String pkid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( words ) . where ( cb . equal ( words . get ( "" id "" ) , pkid ) ) ; List < Object > word = conn . createQuery ( cq ) . getResultList ( ) ; return word ; }",Generate syntax code: Use the java expression to execute SQL ( get the word column in the $words$ table with id as $pkid$ ) and use $conn$ to execute SQL to get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> words </for> , <for> type_identifier pkid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( words ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> words . get <arg> ( string_literal ) </arg> </met> , pkid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> word = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return word ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL statement via $conn$: Query the first name data in the sqlite_master table based on $type$. For loop iterates through all query results and prints. Return the 0th element of the query result.,"public Object getCount ( JdbcTemplate conn , String type ) { List res = conn . query ( "" select name from sqlite_master where type= ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object x : res ) { System . out . println ( conn ) ; } return res . get ( 0 ) ; }",Generate syntax code: Execute the SQL statement via $conn$: Query the first name data in the sqlite_master table based on $type$. For loop iterates through all query results and prints. Return the 0th element of the query result.,"<met> <mod> public </mod> type_identifier getCount <for> ( <for> type_identifier conn </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier x : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( conn ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the drop_table table ) . Use for loop to print each item of data in the query results.,"public void ResetTable ( JdbcTemplate conn ) { List res = conn . query ( "" select * from drop_table "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : res ) { System . out . println ( i ) ; } }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the drop_table table ) . Use for loop to print each item of data in the query results.,"<met> <mod> public </mod> void_type ResetTable <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement: Query all the information in the $city_table$ table where city_name is $city_name$ and use $conn$ to execute SQL to get all the information. If the execution result exists, return the execution result, otherwise, return 0.","public Object getSource ( EntityManager conn , Root < Object > city_table , String city_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( city_table ) . where ( cb . equal ( city_table . get ( "" city_name "" ) , city_name ) ) ; List < Object > cities = conn . createQuery ( cq ) . getResultList ( ) ; if ( cities . isEmpty ( ) ) { return 0 ; } else { return cities ; } }","Generate syntax code: Use the java expression to set the SQL statement: Query all the information in the $city_table$ table where city_name is $city_name$ and use $conn$ to execute SQL to get all the information. If the execution result exists, return the execution result, otherwise, return 0.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> city_table </for> , <for> type_identifier city_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( city_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> city_table . get <arg> ( string_literal ) </arg> </met> , city_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cities = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> cities . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> else <blo> { <ret> return cities ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the $con$ connection to execute the SQL statement ( get the first origin and destination in the flights table based on $flight_id$ ) . Return False if the execution result is empty. Use for loop traversal to execute the result and print it.,"public boolean main ( JdbcTemplate conn , String flight_id ) { List flights = conn . query ( "" select origin, destination from flights where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object f : flights ) { System . out . println ( f ) ; } if ( flights . isEmpty ( ) ) { return false ; } else { return true ; } }",Generate syntax code: Use the $con$ connection to execute the SQL statement ( get the first origin and destination in the flights table based on $flight_id$ ) . Return False if the execution result is empty. Use for loop traversal to execute the result and print it.,"<met> <mod> public </mod> boolean_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier f : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( f ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Create the database engine via $connection$. Execute SQL ( query all the id data in the pg_tables table based on $name$ ) . Use for loop to store each element in the query results into 'list' and return the list content.,"public List getId ( DataSource connection , String name ) { JdbcTemplate engine = new JdbcTemplate ( connection ) ; List res = engine . query ( "" select id from pg_tables where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List ret = new ArrayList ( ) ; for ( Object row : res ) { ret . add ( row ) ; } return ret ; }",Generate syntax code: Create the database engine via $connection$. Execute SQL ( query all the id data in the pg_tables table based on $name$ ) . Use for loop to store each element in the query results into 'list' and return the list content.,"<met> <mod> public </mod> type_identifier getId <for> ( <for> type_identifier connection </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( connection ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ret = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> ret . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ret ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL statement using a java expression, which use $id$ to query the address column in the $ico$. Execute an SQL statement with a $conn$ connection to get all the data and return all the query results.","public List < Object > queryOldRecs ( EntityManager conn , Root < Object > ico , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ico ) . where ( cb . equal ( ico . get ( "" id "" ) , id ) ) ; List < Object > recsinf = conn . createQuery ( cq ) . getResultList ( ) ; return recsinf ; }","Generate syntax code: Set up the SQL statement using a java expression, which use $id$ to query the address column in the $ico$. Execute an SQL statement with a $conn$ connection to get all the data and return all the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryOldRecs <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ico </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ico ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ico . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recsinf = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recsinf ; </ret> } </blo> </met>"
"Generate origin code: Use $connection_string$ to get the database engine, try to execute SQL ( get all the columns in the 'table' table where table_id is $tid$ ) and get all the data, return the query results, and print the exception if there is an exception during execution.","public List getTabel ( DataSource connection_string , String tid ) { try { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List ret_data = engine . query ( "" select * from table where table_id = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; return ret_data ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Use $connection_string$ to get the database engine, try to execute SQL ( get all the columns in the 'table' table where table_id is $tid$ ) and get all the data, return the query results, and print the exception if there is an exception during execution.","<met> <mod> public </mod> type_identifier getTabel <for> ( <for> type_identifier connection_string </for> , <for> type_identifier tid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( connection_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ret_data = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ret_data ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL statement with the following contents: Query all columns in the book_reviews table through $book_id$, use $conn$ connection to execute the SQL statement to get all the data. Convert each item of the query results into dict and store it as list and return it.","public List postComment ( JdbcTemplate conn , String book_id ) { List res = conn . query ( "" select * from book_reviews where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up the SQL statement with the following contents: Query all columns in the book_reviews table through $book_id$, use $conn$ connection to execute the SQL statement to get all the data. Convert each item of the query results into dict and store it as list and return it.","<met> <mod> public </mod> type_identifier postComment <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If $type_t$ is not empty, try to use $conn$ to query all names in the sqlite_master where type_t is $type_t$. Return None when a $DBAPIError$ exception occurs.","public List getTableNames ( JdbcTemplate conn , String type_t ) { if ( type_t != null ) { try { List names = conn . query ( "" select name from sqlite_master where type_t=? "" , new Object [ ] { type_t } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; } catch ( Exception e ) { return null ; } } else { return null ; } }","Generate syntax code: If $type_t$ is not empty, try to use $conn$ to query all names in the sqlite_master where type_t is $type_t$. Return None when a $DBAPIError$ exception occurs.","<met> <mod> public </mod> type_identifier getTableNames <for> ( <for> type_identifier conn </for> , <for> type_identifier type_t </for> ) </for> <blo> { <if_> if <par> ( <bin> type_t != null_literal </bin> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type_t } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return names ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to create a cursor object and execute a SQL statement through the cursor object ( query all columns from the customer table ) , get all the data, and print the query results.","public void testSqlite3 ( JdbcTemplate conn ) { List res = conn . query ( "" select * from customer "" , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }","Generate syntax code: Use $conn$ to create a cursor object and execute a SQL statement through the cursor object ( query all columns from the customer table ) , get all the data, and print the query results.","<met> <mod> public </mod> void_type testSqlite3 <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $engine$ to get the connection, and execute SQL based on the connection ( query the fullname information in the users table when name is listed as $name$ ) and get the first piece of data. Finally, print the query results","public void nameInsert ( DataSource engine , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List myfullname = conn . query ( "" select fullname from users where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( myfullname ) ; }","Generate syntax code: Use $engine$ to get the connection, and execute SQL based on the connection ( query the fullname information in the users table when name is listed as $name$ ) and get the first piece of data. Finally, print the query results","<met> <mod> public </mod> void_type nameInsert <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> myfullname = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( myfullname ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Get the database engine by $db_string$. Try to set SQL statement: Get all columns in tb_professor according to $id$, execute SQL to get all the data. If the execution result exists, assign True to res; otherwise, assign False to res. If an Exception occurs, print the exception message and assign False to res. Finally, return res.","public boolean excluirProfessor ( DataSource db_string , String id ) { try { JdbcTemplate db = new JdbcTemplate ( db_string ) ; List results = db . query ( "" select * from tb_professor where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return false ; } else { return true ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Get the database engine by $db_string$. Try to set SQL statement: Get all columns in tb_professor according to $id$, execute SQL to get all the data. If the execution result exists, assign True to res; otherwise, assign False to res. If an Exception occurs, print the exception message and assign False to res. Finally, return res.","<met> <mod> public </mod> boolean_type excluirProfessor <for> ( <for> type_identifier db_string </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> db = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine through $dburi$, where convert_unicode parameter is False and echo parameter is False, execute SQL ( get the greylist_stamp column in the greylist table where greylist_id is $gid$ ) , get all the data, and finally return the query result.","public List main ( DataSource dburi , String gid ) { JdbcTemplate engine = new JdbcTemplate ( dburi ) ; List gstamps = engine . query ( "" select greylist_stamp from greylist where greylist_id= ? "" , new Object [ ] { gid } , new BeanPropertyRowMapper ( List . class ) ) ; return gstamps ; }","Generate syntax code: Get the database engine through $dburi$, where convert_unicode parameter is False and echo parameter is False, execute SQL ( get the greylist_stamp column in the greylist table where greylist_id is $gid$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier dburi </for> , <for> type_identifier gid </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( dburi ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> gstamps = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { gid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return gstamps ; </ret> } </blo> </met>"
"Generate origin code: Use $root_user$ to get the database engine and connect. Set the SQL statement: get all the columns in the database table based on $value$. Try to execute the SQL statement to get all the data, make sure the database connection is closed, and return the execution result. If an Exception occurs, use logging.warn ( ) to return exception information.","public List selectData ( DataSource root_user , String value ) { try { JdbcTemplate engine = new JdbcTemplate ( root_user ) ; List results = engine . query ( "" select * from database where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Use $root_user$ to get the database engine and connect. Set the SQL statement: get all the columns in the database table based on $value$. Try to execute the SQL statement to get all the data, make sure the database connection is closed, and return the execution result. If an Exception occurs, use logging.warn ( ) to return exception information.","<met> <mod> public </mod> type_identifier selectData <for> ( <for> type_identifier root_user </for> , <for> type_identifier value </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( root_user ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the well_id, in the WITS_WELLBORE table through $id$ and use $conn$ to execute SQL to get all the data and return all the data obtained.","public List getWellByWellboreId ( JdbcTemplate conn , String id ) { List res = conn . query ( "" select well_id from wits_wellbore where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set the SQL statement: Query the well_id, in the WITS_WELLBORE table through $id$ and use $conn$ to execute SQL to get all the data and return all the data obtained.","<met> <mod> public </mod> type_identifier getWellByWellboreId <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( get the name column in the tbl table based on $id$ ) , set the assertion to determine that $cursor$ is not closed. Execute the SQL statement through $cursor$. Use for loop to convert each item of data in $cursor$ into list and return it in the case of processing $cursor$.","public List testCursor ( JdbcTemplate cursor , String id ) { List ret = cursor . query ( "" select name from tbl where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return ret ; }","Generate syntax code: Set the SQL ( get the name column in the tbl table based on $id$ ) , set the assertion to determine that $cursor$ is not closed. Execute the SQL statement through $cursor$. Use for loop to convert each item of data in $cursor$ into list and return it in the case of processing $cursor$.","<met> <mod> public </mod> type_identifier testCursor <for> ( <for> type_identifier cursor </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ret = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ret ; </ret> } </blo> </met>"
Generate origin code: Create a database engine via $sql_str$. Execute the SQL statement ( get the alembic in the migrations table according to $url$ ) to get all the data and return the obtained data.,"public List queryDb ( DataSource sql_str , String url ) { JdbcTemplate engine = new JdbcTemplate ( sql_str ) ; List res = engine . query ( "" select alembic from migrations where url= ? "" , new Object [ ] { url } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Create a database engine via $sql_str$. Execute the SQL statement ( get the alembic in the migrations table according to $url$ ) to get all the data and return the obtained data.,"<met> <mod> public </mod> type_identifier queryDb <for> ( <for> type_identifier sql_str </for> , <for> type_identifier url </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( sql_str ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { url } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get the origin table in flights table where is destination $dest$ and duration is $dur$ ) , get all the data, and finally print the query result.","public void main ( JdbcTemplate conn , String dest , String dur ) { List res = conn . query ( "" select origin from flights where destination=? and duration= ? "" , new Object [ ] { dest , dur } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; }","Generate syntax code: Use $conn$ to execute SQL ( get the origin table in flights table where is destination $dest$ and duration is $dur$ ) , get all the data, and finally print the query result.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier dest </for> , <for> type_identifier dur </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dest , dur } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Set sql ( query the info column in the USERS table based on $first$ and $last$ ) , use $conn$ to execute SQL, get all the query results, print the queried information and return.","public List sampleInsert ( JdbcTemplate conn , String first , String last ) { List red = conn . query ( "" select info from USERS where first = ? and last = ? "" , new Object [ ] { first , last } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( red ) ; return red ; }","Generate syntax code: Set sql ( query the info column in the USERS table based on $first$ and $last$ ) , use $conn$ to execute SQL, get all the query results, print the queried information and return.","<met> <mod> public </mod> type_identifier sampleInsert <for> ( <for> type_identifier conn </for> , <for> type_identifier first </for> , <for> type_identifier last </for> ) </for> <blo> { <loc> type_identifier <var> red = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { first , last } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( red ) </arg> </met> ; </exp> <ret> return red ; </ret> } </blo> </met>"
Generate origin code: Try to connect the database through $db_engine$ use string matching to execute SQL ( query the quantity column in the orderdetail table based on the serialized $orderid$ and the serialized $prodid$ corresponding to the prodid field )  convert the query result to list get its length and print. If the length is 0 return None; otherwise use string matching to execute SQL ( query the price column in the products table based on the serialized $prodid$ corresponding to the prod_id field ) and return the query result. If an exception occurs during execution and the connection is not empty close the database connection.,"public List orderDetail ( DataSource db_engine , String orderid , String prodid ) { try { JdbcTemplate db_conn = new JdbcTemplate ( db_engine ) ; List lista = db_conn . query ( "" select quantity from orderdetail where orderid=? and prod_id= ? "" , new Object [ ] { orderid , prodid } , new BeanPropertyRowMapper ( List . class ) ) ; int quant = lista . size ( ) ; if ( quant == 0 ) { return null ; } else { List price = db_conn . query ( "" select price from products where prod_id= ? "" , new Object [ ] { prodid } , new BeanPropertyRowMapper ( List . class ) ) ; return price ; } } catch ( Exception e ) { return null ; } }",Generate syntax code: Try to connect the database through $db_engine$ use string matching to execute SQL ( query the quantity column in the orderdetail table based on the serialized $orderid$ and the serialized $prodid$ corresponding to the prodid field )  convert the query result to list get its length and print. If the length is 0 return None; otherwise use string matching to execute SQL ( query the price column in the products table based on the serialized $prodid$ corresponding to the prod_id field ) and return the query result. If an exception occurs during execution and the connection is not empty close the database connection.,"<met> <mod> public </mod> type_identifier orderDetail <for> ( <for> type_identifier db_engine </for> , <for> type_identifier orderid </for> , <for> type_identifier prodid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> db_conn = <obj> new type_identifier <arg> ( db_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> lista = <met> db_conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orderid , prodid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> quant = <met> lista . size <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> quant == decimal_integer_literal </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> price = <met> db_conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { prodid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return price ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $connection_string$ to create a database engine. Set SQL with the java expression ( when col is $too_old$, query all the id in the $string$ table ) , execute SQL and get all the data. Finally, return the query data.","public List < Object > connectToCloudsqlSqlalchemyBak ( EntityManager connection_string , Root < Object > string , String too_old ) { CriteriaBuilder cb = connection_string . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( string ) . where ( cb . equal ( string . get ( "" col "" ) , too_old ) ) ; List < Object > res = connection_string . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use $connection_string$ to create a database engine. Set SQL with the java expression ( when col is $too_old$, query all the id in the $string$ table ) , execute SQL and get all the data. Finally, return the query data.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> connectToCloudsqlSqlalchemyBak <for> ( <for> type_identifier connection_string </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> string </for> , <for> type_identifier too_old </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection_string . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( string ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> string . get <arg> ( string_literal ) </arg> </met> , too_old ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> connection_string . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the secrets table based on $secret_uuid$ ) and get all the query data, use for loop to traverse all the obtained query results, convert the 0th element of each piece of data into a string and insert it into a list.","public List testActiveSecretNotDeleted ( JdbcTemplate conn , String secret_uuid ) { List results = conn . query ( "" select * from secrets where secret_uuid= ? "" , new Object [ ] { secret_uuid } , new BeanPropertyRowMapper ( List . class ) ) ; List secret_list = new ArrayList ( ) ; for ( Object row : results ) { secret_list . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) . toString ( ) ) ; } return secret_list ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the secrets table based on $secret_uuid$ ) and get all the query data, use for loop to traverse all the obtained query results, convert the 0th element of each piece of data into a string and insert it into a list.","<met> <mod> public </mod> type_identifier testActiveSecretNotDeleted <for> ( <for> type_identifier conn </for> , <for> type_identifier secret_uuid </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { secret_uuid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> secret_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : results ) <blo> { <exp> <met> secret_list . add <arg> ( <met> <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return secret_list ; </ret> } </blo> </met>"
"Generate origin code: Use $tlengine$ to connect to the database, try to execute SQL ( get the user_id column of users based on $user_name$ ) and get all the data. Return the query result and finally ensure that the connection is closed.","public List testmixednesting ( DataSource tlengine , String user_name ) { JdbcTemplate external_connection = new JdbcTemplate ( tlengine ) ; try { List res = external_connection . query ( "" select time from comments where summary = ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } finally { return null ; } }","Generate syntax code: Use $tlengine$ to connect to the database, try to execute SQL ( get the user_id column of users based on $user_name$ ) and get all the data. Return the query result and finally ensure that the connection is closed.","<met> <mod> public </mod> type_identifier testmixednesting <for> ( <for> type_identifier tlengine </for> , <for> type_identifier user_name </for> ) </for> <blo> { <loc> type_identifier <var> external_connection = <obj> new type_identifier <arg> ( tlengine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> external_connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Try to use $SQLALCHEMY_DATABASE_URI$ to get the database engine. Query all the id in the genre table whose genrename is $genrename$ and return the query result. If an exception occurs, throw the exception information through 'raise'.","public List getGenre ( DataSource SQLALCHEMY_DATABASE_URI , String genrename ) { JdbcTemplate external_connection = new JdbcTemplate ( SQLALCHEMY_DATABASE_URI ) ; try { List result = external_connection . query ( "" select id from genre where genrename = ? "" , new Object [ ] { genrename } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $SQLALCHEMY_DATABASE_URI$ to get the database engine. Query all the id in the genre table whose genrename is $genrename$ and return the query result. If an exception occurs, throw the exception information through 'raise'.","<met> <mod> public </mod> type_identifier getGenre <for> ( <for> type_identifier SQLALCHEMY_DATABASE_URI </for> , <for> type_identifier genrename </for> ) </for> <blo> { <loc> type_identifier <var> external_connection = <obj> new type_identifier <arg> ( SQLALCHEMY_DATABASE_URI ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result = <met> external_connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { genrename } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Set the SQL query statement that queries all columns with case $case$ in the my_cards table. Use $conn$ execute the SQL statement to get all the data. Set the assertion to determine that the returned result is not an empty list and return all the query results.,"public List subtype ( JdbcTemplate conn , String cases ) { List item = conn . query ( "" select * from my_cards where case = ? "" , new Object [ ] { cases } , new BeanPropertyRowMapper ( List . class ) ) ; assert item . size ( ) != 0 ; return item ; }",Generate syntax code: Set the SQL query statement that queries all columns with case $case$ in the my_cards table. Use $conn$ execute the SQL statement to get all the data. Set the assertion to determine that the returned result is not an empty list and return all the query results.,"<met> <mod> public </mod> type_identifier subtype <for> ( <for> type_identifier conn </for> , <for> type_identifier cases </for> ) </for> <blo> { <loc> type_identifier <var> item = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cases } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> item . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return item ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine using $host$ and get the connection. Experiment with using conn to execute SQL ( query all the columns in the database based on $root_user$ ) and get the first result. Close the connection and return data. If an exception occurs, logging.warn is used to record 'Fail'.","public List getRootUser ( DataSource host , String root_user ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; try { List user = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { root_user } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } catch ( Exception e ) { System . out . println ( "" Fail "" ) ; return null ; } }","Generate syntax code: Create the database engine using $host$ and get the connection. Experiment with using conn to execute SQL ( query all the columns in the database based on $root_user$ ) and get the first result. Close the connection and return data. If an exception occurs, logging.warn is used to record 'Fail'.","<met> <mod> public </mod> type_identifier getRootUser <for> ( <for> type_identifier host </for> , <for> type_identifier root_user </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { root_user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return user ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get database engine through $SQLALCHEMY_SERVER_URI$, where echo parameter is True. Execute SQL statement ( get the first piece of name data in model table through $mid$ ) and return query result.","public List queryInfo ( DataSource SQLALCHEMY_SERVER_URI , String mid ) { JdbcTemplate conn = new JdbcTemplate ( SQLALCHEMY_SERVER_URI ) ; List ot = conn . query ( "" select name from model where mid = ? "" , new Object [ ] { mid } , new BeanPropertyRowMapper ( List . class ) ) ; return ot ; }","Generate syntax code: Get database engine through $SQLALCHEMY_SERVER_URI$, where echo parameter is True. Execute SQL statement ( get the first piece of name data in model table through $mid$ ) and return query result.","<met> <mod> public </mod> type_identifier queryInfo <for> ( <for> type_identifier SQLALCHEMY_SERVER_URI </for> , <for> type_identifier mid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( SQLALCHEMY_SERVER_URI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ot = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { mid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ot ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query the email column in the userdetails table based on $survey$ ) , execute SQL based on $engine$ and get all the query result. Use for loop to convert each query result to dict, and store it in list and return.","public List getSurvey ( JdbcTemplate engine , String survey ) { List emails = engine . query ( "" select email from userdetails where survey = ? "" , new Object [ ] { survey } , new BeanPropertyRowMapper ( List . class ) ) ; return emails ; }","Generate syntax code: Set up SQL ( query the email column in the userdetails table based on $survey$ ) , execute SQL based on $engine$ and get all the query result. Use for loop to convert each query result to dict, and store it in list and return.","<met> <mod> public </mod> type_identifier getSurvey <for> ( <for> type_identifier engine </for> , <for> type_identifier survey </for> ) </for> <blo> { <loc> type_identifier <var> emails = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { survey } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return emails ; </ret> } </blo> </met>"
"Generate origin code: If the request request method is POST, use $conn$ to execute SQL ( query the password in the users table based on $username$ ) and get the first piece of data. If the query result is not None, return the rendered 'login.html'. Otherwise, return the query results.","public Object login ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_datas = conn . query ( "" select password from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user_datas . isEmpty ( ) ) { return "" login.html "" ; } else { return user_datas . get ( 0 ) ; } } else { return "" login.html "" ; } }","Generate syntax code: If the request request method is POST, use $conn$ to execute SQL ( query the password in the users table based on $username$ ) and get the first piece of data. If the query result is not None, return the rendered 'login.html'. Otherwise, return the query results.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user_datas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user_datas . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> user_datas . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the id in user_dataset when $name$ is $username$ ) and get the first piece of data. When the keyword is id, return the corresponding value in the query result. If an SQLAlchemyError exception occurs, print 'Failed'.","public String importUser ( JdbcTemplate conn , String username ) { try { List rows = conn . query ( "" select id from user_dataset where name= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) . getString ( "" id "" ) ; } catch ( Exception e ) { System . out . println ( "" Failed "" ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the id in user_dataset when $name$ is $username$ ) and get the first piece of data. When the keyword is id, return the corresponding value in the query result. If an SQLAlchemyError exception occurs, print 'Failed'.","<met> <mod> public </mod> type_identifier importUser <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the flights where origin is $origin$, destination is $destination$, and duration is $duration$ ) with $conn$, get all the data, and return the query results.","public List main ( JdbcTemplate conn , String origin , String destination , String duration ) { List res = conn . query ( "" select * from flights where origin=? and destination=? and duration= ? "" , new Object [ ] { origin , destination , duration } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute the SQL ( get all the columns in the flights where origin is $origin$, destination is $destination$, and duration is $duration$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier origin </for> , <for> type_identifier destination </for> , <for> type_identifier duration </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin , destination , duration } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Initialize the log module, try to set SQL ( query all the information in the ts_basic_report table according to $quarter_list$ ) , print the sql statement, use $conn$ to execute sql and get all the data, convert the query results to list. If the list length is less than 1, output the info log, and assign the parameter to ""no data""; otherwise, output the info log, and the parameter is the list length. If an Exception occurs during execution, return the error log and the parameter is ""fail"".","public void getReportList ( JdbcTemplate conn , String quarter_list ) { try { String sql = "" select * from ts_basic_report where quarter_list = ? "" ; System . out . println ( sql ) ; List hava_df_list = conn . query ( sql , new Object [ ] { quarter_list } , new BeanPropertyRowMapper ( List . class ) ) ; int lenth = hava_df_list . size ( ) ; if ( lenth < 1 ) { System . out . println ( "" no data "" ) ; } else { System . out . println ( lenth + "" "" ) ; } } catch ( Exception e ) { System . out . println ( "" fail "" ) ; } }","Generate syntax code: Initialize the log module, try to set SQL ( query all the information in the ts_basic_report table according to $quarter_list$ ) , print the sql statement, use $conn$ to execute sql and get all the data, convert the query results to list. If the list length is less than 1, output the info log, and assign the parameter to ""no data""; otherwise, output the info log, and the parameter is the list length. If an Exception occurs during execution, return the error log and the parameter is ""fail"".","<met> <mod> public </mod> void_type getReportList <for> ( <for> type_identifier conn </for> , <for> type_identifier quarter_list </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( sql ) </arg> </met> ; </exp> <loc> type_identifier <var> hava_df_list = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { quarter_list } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> lenth = <met> hava_df_list . size <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> lenth < decimal_integer_literal </bin> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> lenth + string_literal </bin> ) </arg> </met> ; </exp> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the login column in the USER table based on $id$ ) and get all the data. Then use for loop to store each item of the query results as list and return the contents of the list.,"public List getEvent ( JdbcTemplate conn , String id ) { List logins = conn . query ( "" select login from user where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return logins ; }",Generate syntax code: Use $conn$ to execute the SQL ( get the login column in the USER table based on $id$ ) and get all the data. Then use for loop to store each item of the query results as list and return the contents of the list.,"<met> <mod> public </mod> type_identifier getEvent <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> logins = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return logins ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all the information in the query_users table based on $tlengine$ ) , get the first piece of data, return the query results, and finally close the connection.","public Object testMorerollback0ffConn ( JdbcTemplate conn , String tlengine ) { try { List trans = conn . query ( "" select * from query_users where tlengine = ? "" , new Object [ ] { tlengine } , new BeanPropertyRowMapper ( List . class ) ) ; return trans . get ( 0 ) ; } finally { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all the information in the query_users table based on $tlengine$ ) , get the first piece of data, return the query results, and finally close the connection.","<met> <mod> public </mod> type_identifier testMorerollback0ffConn <for> ( <for> type_identifier conn </for> , <for> type_identifier tlengine </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> trans = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tlengine } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> trans . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement with the following content: Query the number of all columns in stockdata based on $code$ and get all the data and return the query results.,"public void getData ( JdbcTemplate conn , String code ) { List result = conn . query ( "" select count(*) from stockdata where code = ? "" , new Object [ ] { code } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement with the following content: Query the number of all columns in stockdata based on $code$ and get all the data and return the query results.,"<met> <mod> public </mod> void_type getData <for> ( <for> type_identifier conn </for> , <for> type_identifier code </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { code } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Set the SQL statement to get all test_user in the mock_client based on $get_user$, execute the SQL using the $conn$ connection, and return the query results.","public List testUpdateAttributesName ( JdbcTemplate conn , String get_user ) { List myexpected = conn . query ( "" select test_user from mock_client where get_user= ? "" , new Object [ ] { get_user } , new BeanPropertyRowMapper ( List . class ) ) ; return myexpected ; }","Generate syntax code: Set the SQL statement to get all test_user in the mock_client based on $get_user$, execute the SQL using the $conn$ connection, and return the query results.","<met> <mod> public </mod> type_identifier testUpdateAttributesName <for> ( <for> type_identifier conn </for> , <for> type_identifier get_user </for> ) </for> <blo> { <loc> type_identifier <var> myexpected = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { get_user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return myexpected ; </ret> } </blo> </met>"
"Generate origin code: If the request method of request is POST, use redirect and url_for to go to the 'code' page. Otherwise, use $db_file$ to create the database engine and get the connection. Execute the SQL ( query the description in the Course table where courseID is $courseID$ ) and get all the data. Close the connection and return the query results.","public Object editCourse ( HttpRequest request , DataSource db_file , String courseID ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { JdbcTemplate connection = new JdbcTemplate ( db_file ) ; List res = connection . query ( "" select description from course where courseid = ? "" , new Object [ ] { courseID } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return "" code "" ; } }","Generate syntax code: If the request method of request is POST, use redirect and url_for to go to the 'code' page. Otherwise, use $db_file$ to create the database engine and get the connection. Execute the SQL ( query the description in the Course table where courseID is $courseID$ ) and get all the data. Close the connection and return the query results.","<met> <mod> public </mod> type_identifier editCourse <for> ( <for> type_identifier request </for> , <for> type_identifier db_file </for> , <for> type_identifier courseID </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_file ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { courseID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $call_center$. Execute the SQL statement ( query all the columns in the technician table based on $chat_id$ ) , get all the data, use for loop to store the 0th element of each item of the query result into list, and return the list content.","public List getTechInfoByChatId ( DataSource call_center , String chat_id ) { JdbcTemplate conn = new JdbcTemplate ( call_center ) ; List result = conn . query ( "" select * from technician where chat_id = ? "" , new Object [ ] { chat_id } , new BeanPropertyRowMapper ( List . class ) ) ; List res = new ArrayList ( ) ; for ( Object row : result ) { res . add ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return res ; }","Generate syntax code: Get the database engine and establish a connection through $call_center$. Execute the SQL statement ( query all the columns in the technician table based on $chat_id$ ) , get all the data, use for loop to store the 0th element of each item of the query result into list, and return the list content.","<met> <mod> public </mod> type_identifier getTechInfoByChatId <for> ( <for> type_identifier call_center </for> , <for> type_identifier chat_id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( call_center ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { chat_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> res . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, try to set up the SQL ( query all columns in users through $login$ ) , use the $conn$ connection to execute the SQL and get all the data. Convert each item of the query results into dict to store as list and return it. Otherwise, use raise to throw the exception.","public Object login ( HttpRequest request , JdbcTemplate conn , String login ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { List entries = conn . query ( "" select * from users where login = ? "" , new Object [ ] { login } , new BeanPropertyRowMapper ( List . class ) ) ; return entries ; } catch ( Exception e ) { return e ; } } else { return null ; } }","Generate syntax code: If the request module sends the request as post, try to set up the SQL ( query all columns in users through $login$ ) , use the $conn$ connection to execute the SQL and get all the data. Convert each item of the query results into dict to store as list and return it. Otherwise, use raise to throw the exception.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier login </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> entries = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { login } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return entries ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return e ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $url$. Execute the SQL statement ( query the form column in the odkform table according to $project_id$ and $form_id$ ) , get the first result, close all connections, and return the query results.","public Object getFormDetails ( DataSource url , String project_id , String form_id ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List results = engine . query ( "" select form from odkform where project_id=? and form_id= ? "" , new Object [ ] { project_id , form_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Get the database engine and establish a connection through $url$. Execute the SQL statement ( query the form column in the odkform table according to $project_id$ and $form_id$ ) , get the first result, close all connections, and return the query results.","<met> <mod> public </mod> type_identifier getFormDetails <for> ( <for> type_identifier url </for> , <for> type_identifier project_id </for> , <for> type_identifier form_id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { project_id , form_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the user_rev1 based on $subtitle$ ) , get all the data, print the query result, and finally return the rendered ""users.html"", where the users parameter is the query result.","public String registration ( JdbcTemplate conn , String subtitle , Model model ) { List users = conn . query ( "" select * from user_rev1 where subtitle= ? "" , new Object [ ] { subtitle } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( users ) ; model . addAttribute ( "" Users "" , users ) ; return "" users.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the user_rev1 based on $subtitle$ ) , get all the data, print the query result, and finally return the rendered ""users.html"", where the users parameter is the query result.","<met> <mod> public </mod> type_identifier registration <for> ( <for> type_identifier conn </for> , <for> type_identifier subtitle </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { subtitle } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( users ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Establish a connection via $engine$. Set the SQL statement ( query all the columns in the FLOWERS table based on $name$ ) , use connection to execute SQL, close the connection, and return the rendered ""home.html"" page, where the flowers parameter is set to the query result.","public String getFlowers ( DataSource engine , String name , Model model ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List flowers = connection . query ( "" select * from flowers where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flowers "" , flowers ) ; return "" home.html "" ; }","Generate syntax code: Establish a connection via $engine$. Set the SQL statement ( query all the columns in the FLOWERS table based on $name$ ) , use connection to execute SQL, close the connection, and return the rendered ""home.html"" page, where the flowers parameter is set to the query result.","<met> <mod> public </mod> type_identifier getFlowers <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> flowers = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flowers ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Open the books.csv file and read, use for loop traversal to read the content of the file, use $conn$ to execute SQL ( query all 'author' in the books table through pubyear ) and print the results.","public void main ( JdbcTemplate conn ) { String filePath = "" books.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String pubyear = sc . nextLine ( ) ; List res = conn . query ( "" select author from books where pubyear = ? "" , new Object [ ] { pubyear } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open the books.csv file and read, use for loop traversal to read the content of the file, use $conn$ to execute SQL ( query all 'author' in the books table through pubyear ) and print the results.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> pubyear = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { pubyear } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get database engine by $database_uri$ and establish connection, try to execute SQL statement ( get user in USER according to 'PASSWORD': $password$ ) , get all data after execution and return. If an Exception occurs during execution, return the error message ""Error assigning permissions"".","public List createUser ( DataSource database_uri , String password ) { JdbcTemplate conn = new JdbcTemplate ( database_uri ) ; try { List res = conn . query ( "" select user from USER where PASSWORD= ? "" , new Object [ ] { password } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { System . out . println ( "" Error assigning permissions "" ) ; return null ; } }","Generate syntax code: Get database engine by $database_uri$ and establish connection, try to execute SQL statement ( get user in USER according to 'PASSWORD': $password$ ) , get all data after execution and return. If an Exception occurs during execution, return the error message ""Error assigning permissions"".","<met> <mod> public </mod> type_identifier createUser <for> ( <for> type_identifier database_uri </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( database_uri ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine using $greencouriers$ and establish the connection ( where echo parameter is True, encoding parameter is 'utf-8' ) . Try to execute the SQL statement ( query the first piece of name data in the countries table based on $id$ ) . Close the database connection and return the query result. If UnicodeDecodeError exception occurs, use raise to throw an Exception ( ) exception.","public Object countries ( DataSource greencouriers , String id ) { JdbcTemplate conn = new JdbcTemplate ( greencouriers ) ; try { List out = conn . query ( "" select name from countries where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; } catch ( Exception e ) { return e ; } }","Generate syntax code: Get the database engine using $greencouriers$ and establish the connection ( where echo parameter is True, encoding parameter is 'utf-8' ) . Try to execute the SQL statement ( query the first piece of name data in the countries table based on $id$ ) . Close the database connection and return the query result. If UnicodeDecodeError exception occurs, use raise to throw an Exception ( ) exception.","<met> <mod> public </mod> type_identifier countries <for> ( <for> type_identifier greencouriers </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( greencouriers ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> out = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return e ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $session$ ( get all the columns in the target table where id is $uuids$ ) , get all the data, then close the $session$ connection, and finally return the query result.","public List getOgetTargetne ( JdbcTemplate session , String uuids ) { List targets = session . query ( "" select * from target where id = ? "" , new Object [ ] { uuids } , new BeanPropertyRowMapper ( List . class ) ) ; return targets ; }","Generate syntax code: Execute SQL with $session$ ( get all the columns in the target table where id is $uuids$ ) , get all the data, then close the $session$ connection, and finally return the query result.","<met> <mod> public </mod> type_identifier getOgetTargetne <for> ( <for> type_identifier session </for> , <for> type_identifier uuids </for> ) </for> <blo> { <loc> type_identifier <var> targets = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uuids } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return targets ; </ret> } </blo> </met>"
"Generate origin code: Set SQL statement: Query category data from iris table, execute SQL by $conn$ to get all data and return the execution result.","public List getDataframe ( JdbcTemplate conn ) { List result = conn . query ( "" select category from iris "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Set SQL statement: Query category data from iris table, execute SQL by $conn$ to get all data and return the execution result.","<met> <mod> public </mod> type_identifier getDataframe <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Execute SQL through $pgconn$ ( get the maximum value of id column in the 'table' table ) and get the first piece of data. Finally return the 0th element of the query result.,"public Object getPkSequence ( JdbcTemplate pgconn ) { List rs = pgconn . query ( "" select max(id) from tables "" , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseObject ( rs . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Execute SQL through $pgconn$ ( get the maximum value of id column in the 'table' table ) and get the first piece of data. Finally return the 0th element of the query result.,"<met> <mod> public </mod> type_identifier getPkSequence <for> ( <for> type_identifier pgconn </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> pgconn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> rs . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the logins table based on $username$ and $password$ ) , get all the data, and return the query results; otherwise, return the rendered ""login.html"" page.","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from logins where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; } else { return "" login.html "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the logins table based on $username$ and $password$ ) , get all the data, and return the query results; otherwise, return the rendered ""login.html"" page.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up sql ( query all the information in the 'Table' table based on $user_id$, $user_name$ and $extra_data$ ) , use $conn$ to execute SQL, get the first row of data, and return the data.","public Object setupClass ( JdbcTemplate conn , String user_id , String user_name , String extra_data ) { List metadatas = conn . query ( "" select * from table where user_id=? and user_name=? and extra_data= ? "" , new Object [ ] { user_id , user_name , extra_data } , new BeanPropertyRowMapper ( List . class ) ) ; return metadatas . get ( 0 ) ; }","Generate syntax code: Set up sql ( query all the information in the 'Table' table based on $user_id$, $user_name$ and $extra_data$ ) , use $conn$ to execute SQL, get the first row of data, and return the data.","<met> <mod> public </mod> type_identifier setupClass <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier user_name </for> , <for> type_identifier extra_data </for> ) </for> <blo> { <loc> type_identifier <var> metadatas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , user_name , extra_data } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> metadatas . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL ( get all the columns in USER_LIST where UID is $UID$ and LID is $LID$ ) with $conn$, get all the data, then close the $Conn$ connection and return the query results.","public List getUserList ( JdbcTemplate conn , String UID , String LID ) { List res = conn . query ( "" select * from USER_LIST where UID=? and LID= ? "" , new Object [ ] { UID , LID } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Execute SQL ( get all the columns in USER_LIST where UID is $UID$ and LID is $LID$ ) with $conn$, get all the data, then close the $Conn$ connection and return the query results.","<met> <mod> public </mod> type_identifier getUserList <for> ( <for> type_identifier conn </for> , <for> type_identifier UID </for> , <for> type_identifier LID </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { UID , LID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use a java expression to set the SQL statement to get the id column in $table$ where the name is $name$, execute the SQL using the $conn$ connection, and get all the data. Store the 0th element of each item of the query result as a list and return it.","public List getRecs ( EntityManager conn , Root < Object > table , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" name "" ) , name ) ) ; List < Object > recss = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object item : recss ) { list . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use a java expression to set the SQL statement to get the id column in $table$ where the name is $name$, execute the SQL using the $conn$ connection, and get all the data. Store the 0th element of each item of the query result as a list and return it.","<met> <mod> public </mod> type_identifier getRecs <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recss = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : recss ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query the first origin,destination,duration in the fligts table where the id is $f_id$. If the query result is empty, print ""fail"" and return directly; otherwise, return the query result.","public Object main ( JdbcTemplate conn , String f_id ) { List flights = conn . query ( "" select origin,destination,duration from fligts where id = ? "" , new Object [ ] { f_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flights . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; return null ; } else { return flights . get ( 0 ) ; } }","Generate syntax code: Use $conn$ to query the first origin,destination,duration in the fligts table where the id is $f_id$. If the query result is empty, print ""fail"" and return directly; otherwise, return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier f_id </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { f_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flights . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $engine$ to get the connection. Use the connection to execute the SQL ( query all columns in the growth ) and get all the data. Close the connection and return the query results.,"public List queryGrow ( DataSource engine ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List result = connection . query ( "" select * from growth "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }",Generate syntax code: Use $engine$ to get the connection. Use the connection to execute the SQL ( query all columns in the growth ) and get all the data. Close the connection and return the query results.,"<met> <mod> public </mod> type_identifier queryGrow <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement using the $conn$ connection: query all columns in users_again2 where the name of user is $username$ and get the first data. If the query result exists, the query result is returned.","public Object validateUsername ( JdbcTemplate conn , String username ) { List users = conn . query ( "" select * from users_again2 where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users . isEmpty ( ) ) { return null ; } else { return users . get ( 0 ) ; } }","Generate syntax code: Execute the SQL statement using the $conn$ connection: query all columns in users_again2 where the name of user is $username$ and get the first data. If the query result exists, the query result is returned.","<met> <mod> public </mod> type_identifier validateUsername <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute SQL via $conn$ ( get all the columns in the dbkoppelusers based on $dbnr$ ) and get all the data, return the query result, and print the exception if there is an exception.","public List getDBUsers ( JdbcTemplate conn , String dbnr ) { try { List rows = conn . query ( "" select * from dbkoppelusers where dbnr = ? "" , new Object [ ] { dbnr } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to execute SQL via $conn$ ( get all the columns in the dbkoppelusers based on $dbnr$ ) and get all the data, return the query result, and print the exception if there is an exception.","<met> <mod> public </mod> type_identifier getDBUsers <for> ( <for> type_identifier conn </for> , <for> type_identifier dbnr </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dbnr } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query all columns in $slivers$ table based on $deleted$ ) . Execute the SQL with $conn$ and get all the data, use for loop to iterate through each query result and store as a list, and finally return the list.","public List getSource ( EntityManager conn , Root < Object > slivers , String deleted ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( slivers ) . where ( cb . equal ( slivers . get ( "" deleted "" ) , deleted ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; List sliveres = new ArrayList ( ) ; for ( Object i : results ) { sliveres . add ( i ) ; } return sliveres ; }","Generate syntax code: Set SQL based on the java expression: ( query all columns in $slivers$ table based on $deleted$ ) . Execute the SQL with $conn$ and get all the data, use for loop to iterate through each query result and store as a list, and finally return the list.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> slivers </for> , <for> type_identifier deleted </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( slivers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> slivers . get <arg> ( string_literal ) </arg> </met> , deleted ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> sliveres = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> sliveres . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return sliveres ; </ret> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute SQL ( query all the name data in the falcon_portal_test table through $t_id$ ) . Returns the query results.,"public List teardown ( JdbcTemplate conn , String t_id ) { List result = conn . query ( "" select name from falcon_portal_test where t_id = ? "" , new Object [ ] { t_id } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }",Generate syntax code: Use the $conn$ connection to execute SQL ( query all the name data in the falcon_portal_test table through $t_id$ ) . Returns the query results.,"<met> <mod> public </mod> type_identifier teardown <for> ( <for> type_identifier conn </for> , <for> type_identifier t_id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { t_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method to set the SQL statement through $session$: Query all data in the $CommandsOnHost$ table through $id$. If the length of the query result is greater than 0, use for loop to store each element in the query result into list; otherwise, assign -1 to the query result. Make sure $session$ is closed and return the list content.","public Object getIdCommandOnHost ( EntityManager session , Root < Object > CommandsOnHost , String id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( CommandsOnHost ) . where ( cb . equal ( CommandsOnHost . get ( "" id "" ) , id ) ) ; List < Object > query = session . createQuery ( cq ) . getResultList ( ) ; if ( query . isEmpty ( ) ) { return - 1 ; } else { List ret = new ArrayList ( ) ; for ( Object i : query ) { ret . add ( i ) ; } return ret ; } }","Generate syntax code: Use ORM method to set the SQL statement through $session$: Query all data in the $CommandsOnHost$ table through $id$. If the length of the query result is greater than 0, use for loop to store each element in the query result into list; otherwise, assign -1 to the query result. Make sure $session$ is closed and return the list content.","<met> <mod> public </mod> type_identifier getIdCommandOnHost <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> CommandsOnHost </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( CommandsOnHost ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> CommandsOnHost . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> query . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <una> - decimal_integer_literal </una> ; </ret> } </blo> else <blo> { <loc> type_identifier <var> ret = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> ret . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ret ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the isbn column in the books table according to $title$ ) , get all the query results, print them, and return the query results.","public List importData ( JdbcTemplate conn , String title ) { List result = conn . query ( "" select isbn from books where title= ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; return result ; }","Generate syntax code: Execute SQL with $conn$ ( query the isbn column in the books table according to $title$ ) , get all the query results, print them, and return the query results.","<met> <mod> public </mod> type_identifier importData <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $db$, try to execute SQL ( query all columns in the users table according to $user_name$ ) , get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","public List testWithInterface ( DataSource db , String user_name ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; try { List res = engine . query ( "" select * from users where user_name= ? "" , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Connect the database with $db$, try to execute SQL ( query all columns in the users table according to $user_name$ ) , get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","<met> <mod> public </mod> type_identifier testWithInterface <for> ( <for> type_identifier db </for> , <for> type_identifier user_name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query everything in the $shareGroup$ table when FK_users equals $user_id$ and FK_groups equals $group_id$ ) and get the first piece of data. If the query result is not None, return the query result.","public Object getIdCommandOnHost ( EntityManager conn , Root < Object > shareGroup , String group_id , String user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( shareGroup ) . where ( cb . equal ( shareGroup . get ( "" group_id "" ) , group_id ) ) ; cq . select ( shareGroup ) . where ( cb . equal ( shareGroup . get ( "" user_id "" ) , user_id ) ) ; List < Object > share = conn . createQuery ( cq ) . getResultList ( ) ; if ( share . isEmpty ( ) ) { return null ; } else { return share . get ( 0 ) ; } }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query everything in the $shareGroup$ table when FK_users equals $user_id$ and FK_groups equals $group_id$ ) and get the first piece of data. If the query result is not None, return the query result.","<met> <mod> public </mod> type_identifier getIdCommandOnHost <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> shareGroup </for> , <for> type_identifier group_id </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( shareGroup ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> shareGroup . get <arg> ( string_literal ) </arg> </met> , group_id ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( shareGroup ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> shareGroup . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> share = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> share . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> share . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( query all the data in $tbl$ according to $num$ ) , use $conn$ to execute SQL to get all the data, set the assertion to determine that the length of the returned result is 1, and finally return the data.","public Object getSource ( EntityManager conn , Root < Object > tbl , String num ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tbl ) . where ( cb . equal ( tbl . get ( "" num "" ) , num ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; assert rows . size ( ) == 1 ; return rows ; }","Generate syntax code: Set the SQL statement ( query all the data in $tbl$ according to $num$ ) , use $conn$ to execute SQL to get all the data, set the assertion to determine that the length of the returned result is 1, and finally return the data.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tbl </for> , <for> type_identifier num </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tbl ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tbl . get <arg> ( string_literal ) </arg> </met> , num ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database with $engine$. Execute the SQL statement ( query all s_id in the seasons table where id is $id$ ) , and convert each query item into dict and store it as a list and return it.","public List queryPage ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List s_idata = conn . query ( "" select s_id from seasons where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return s_idata ; }","Generate syntax code: Connect to the database with $engine$. Execute the SQL statement ( query all s_id in the seasons table where id is $id$ ) , and convert each query item into dict and store it as a list and return it.","<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> s_idata = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return s_idata ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statemen: Query all the data in the $summary_item$ table with 'summary_id': $id$, use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","public Object getSource ( EntityManager conn , Root < Object > summary_item , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( summary_item ) . where ( cb . equal ( summary_item . get ( "" id "" ) , id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the java expression to set up the SQL statemen: Query all the data in the $summary_item$ table with 'summary_id': $id$, use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> summary_item </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( summary_item ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> summary_item . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: To query all columns from the fname table, and use $conn$ to execute SQL to get all the data and return.","public List test1 ( JdbcTemplate conn ) { List res = conn . query ( "" select * from fname "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set SQL: To query all columns from the fname table, and use $conn$ to execute SQL to get all the data and return.","<met> <mod> public </mod> type_identifier test1 <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement ( Format the output string with the format ( ) function, query the grade data in the acceleration using the string $time_val$ ) , execute the SQL statement with the $conn$ join and get all the data. Then use jsonify to return the query results.","public JSONArray accelerationHour ( JdbcTemplate conn , String time_val ) { List time_data = conn . query ( "" select grade from acceleration where time_val= ? "" , new Object [ ] { time_val } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( time_data . toString ( ) ) ; }","Generate syntax code: Set the SQL statement ( Format the output string with the format ( ) function, query the grade data in the acceleration using the string $time_val$ ) , execute the SQL statement with the $conn$ join and get all the data. Then use jsonify to return the query results.","<met> <mod> public </mod> type_identifier accelerationHour <for> ( <for> type_identifier conn </for> , <for> type_identifier time_val </for> ) </for> <blo> { <loc> type_identifier <var> time_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { time_val } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> time_data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $DSN$ to get the database engine, then connect to the database. Execute SQL based on the java expression to get all the columns in the $Contracts$ table with 'id' of $contract_id$ and get all the data, and finally return the query result.","public List getContractById ( EntityManager DSN , Root < Object > Contracts , String contract_id ) { CriteriaBuilder cb = DSN . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Contracts ) . where ( cb . equal ( Contracts . get ( "" id "" ) , contract_id ) ) ; List < Object > result = DSN . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Use $DSN$ to get the database engine, then connect to the database. Execute SQL based on the java expression to get all the columns in the $Contracts$ table with 'id' of $contract_id$ and get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getContractById <for> ( <for> type_identifier DSN </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Contracts </for> , <for> type_identifier contract_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> DSN . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Contracts ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Contracts . get <arg> ( string_literal ) </arg> </met> , contract_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> DSN . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: Query the number of 'id' in the urls table, execute SQL via $conn$ to get the first piece of data, and return the obtained data.","public Object getUrlCount ( JdbcTemplate conn ) { List res = conn . query ( "" select count(id) from urls "" , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Set SQL: Query the number of 'id' in the urls table, execute SQL via $conn$ to get the first piece of data, and return the obtained data.","<met> <mod> public </mod> type_identifier getUrlCount <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL and get all the data ( get all rows in the query_users ) using $connection$. Close the database connection and return the result of the query.,"public Object searchCount ( JdbcTemplate connection ) { List count = connection . query ( "" select count(*) from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return count ; }",Generate syntax code: Execute the SQL and get all the data ( get all rows in the query_users ) using $connection$. Close the database connection and return the result of the query.,"<met> <mod> public </mod> type_identifier searchCount <for> ( <for> type_identifier connection </for> ) </for> <blo> { <loc> type_identifier <var> count = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return count ; </ret> } </blo> </met>"
"Generate origin code: Use $testing$ to connect the database and execute SQL ( get all the counted columns in the query_users table when user_id is $uid$ ) and get all the data, further set the assertion, the length of the query result is 1, and finally close the connection.","public void dbConnect ( DataSource testing , String uid ) { JdbcTemplate engine = new JdbcTemplate ( testing ) ; List result = engine . query ( "" select count(*) from query_users where user_id= ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; assert result . size ( ) == 1 ; }","Generate syntax code: Use $testing$ to connect the database and execute SQL ( get all the counted columns in the query_users table when user_id is $uid$ ) and get all the data, further set the assertion, the length of the query result is 1, and finally close the connection.","<met> <mod> public </mod> void_type dbConnect <for> ( <for> type_identifier testing </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> result . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Connect the database through $e$ and execute SQL ( query the statel column in the lsstate table according to $lettershop$ ) , get all the query results, print them and return.","public List get ( DataSource e , String lettershop ) { JdbcTemplate engine = new JdbcTemplate ( e ) ; List result = engine . query ( "" select statel from lsstate where lettershop = ? "" , new Object [ ] { lettershop } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result ) ; return result ; }","Generate syntax code: Connect the database through $e$ and execute SQL ( query the statel column in the lsstate table according to $lettershop$ ) , get all the query results, print them and return.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> , <for> type_identifier lettershop </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { lettershop } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: get the database connection based on $engine$. Execute the SQL statement ( query all the columns in the Sells table where price is $price$ ) , get all the data, convert each item of the query result to dict, store it as list, and return the query result.","public List filterBeers ( DataSource engine , String price ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List results = con . query ( "" select * from sells where price = ? "" , new Object [ ] { price } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: get the database connection based on $engine$. Execute the SQL statement ( query all the columns in the Sells table where price is $price$ ) , get all the data, convert each item of the query result to dict, store it as list, and return the query result.","<met> <mod> public </mod> type_identifier filterBeers <for> ( <for> type_identifier engine </for> , <for> type_identifier price </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { price } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the user_id column in the $users$ with where email is $email$ ) using $db$ as a java expression, then convert the query result to a list type, and finally return the list content.","public List keystonIdsFromEmail ( EntityManager db , Root < Object > users , String email ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" email "" ) , email ) ) ; List < Object > results = db . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Execute the SQL ( get the user_id column in the $users$ with where email is $email$ ) using $db$ as a java expression, then convert the query result to a list type, and finally return the list content.","<met> <mod> public </mod> type_identifier keystonIdsFromEmail <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , email ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $studentData$ table based on $Username$ ) . Execute SQL through $conn$, get all the data and return the query results.","public List getReviewWaiver ( EntityManager conn , Root < Object > studentData , String Username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( studentData ) . where ( cb . equal ( studentData . get ( "" Username "" ) , Username ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $studentData$ table based on $Username$ ) . Execute SQL through $conn$, get all the data and return the query results.","<met> <mod> public </mod> type_identifier getReviewWaiver <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> studentData </for> , <for> type_identifier Username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( studentData ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> studentData . get <arg> ( string_literal ) </arg> </met> , Username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method and $conn$ to get all the ip columns in the $RunningTb$ table where type is $type$ and username is $name$, and use for loop to print each item of the query result.","public void getIp ( EntityManager conn , Root < Object > RunningTb , String type , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( RunningTb ) . where ( cb . equal ( RunningTb . get ( "" type "" ) , type ) ) ; cq . select ( RunningTb ) . where ( cb . equal ( RunningTb . get ( "" username "" ) , name ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object item : result ) { System . out . println ( item ) ; } }","Generate syntax code: Use ORM method and $conn$ to get all the ip columns in the $RunningTb$ table where type is $type$ and username is $name$, and use for loop to print each item of the query result.","<met> <mod> public </mod> void_type getIp <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> RunningTb </for> , <for> type_identifier type </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( RunningTb ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> RunningTb . get <arg> ( string_literal ) </arg> </met> , type ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( RunningTb ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> RunningTb . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use $conn$ to execute SQL ( query all the columns in the names table through $aname$, get all the data, and print the query results. Use redirect to return the 'index' spliced by url_for, where the names parameter is the query result.","public String index ( HttpRequest request , JdbcTemplate conn , String aname , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List names = conn . query ( "" select * from names where aname = ? "" , new Object [ ] { aname } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( names ) ; model . addAttribute ( "" names "" , names ) ; return "" index "" ; } else { return null ; } }","Generate syntax code: If the request module sends the request in a post method, use $conn$ to execute SQL ( query all the columns in the names table through $aname$, get all the data, and print the query results. Use redirect to return the 'index' spliced by url_for, where the names parameter is the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier aname </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { aname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( names ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , names ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the passwd column in the ROLE table according to $name$ ) , get all the data, and return the query data. If an exception occurs during execution, return False.","public Object sqlGetUser ( JdbcTemplate conn , String name ) { try { List comando = conn . query ( "" select passwd from role where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return comando ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the passwd column in the ROLE table according to $name$ ) , get all the data, and return the query data. If an exception occurs during execution, return False.","<met> <mod> public </mod> type_identifier sqlGetUser <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> comando = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return comando ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL statement through the $con$ connection, which reads: query the first fighter_id in the fighter table based on the $name$. Use for loop to store each element in the query result into list and return the list content.","public List searchFighter ( JdbcTemplate conn , String name ) { List bucket = new ArrayList ( ) ; List res = conn . query ( "" select fighter_id from fighter where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : res ) { bucket . add ( i ) ; } return bucket ; }","Generate syntax code: Execute the SQL statement through the $con$ connection, which reads: query the first fighter_id in the fighter table based on the $name$. Use for loop to store each element in the query result into list and return the list content.","<met> <mod> public </mod> type_identifier searchFighter <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> bucket = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : res ) <blo> { <exp> <met> bucket . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return bucket ; </ret> } </blo> </met>"
"Generate origin code: Set sql according to the java expression ( query all columns in the $mirco_devices$ table based on $tuid$ ) , use $conn$ to execute sql and get all the data, and return False, if the query result is empty; otherwise, return the query data.","public Object getNewdevice ( EntityManager conn , Root < Object > mirco_devices , String tuid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( mirco_devices ) . where ( cb . equal ( mirco_devices . get ( "" type "" ) , tuid ) ) ; List < Object > s = conn . createQuery ( cq ) . getResultList ( ) ; if ( s . isEmpty ( ) ) { return false ; } else { return s ; } }","Generate syntax code: Set sql according to the java expression ( query all columns in the $mirco_devices$ table based on $tuid$ ) , use $conn$ to execute sql and get all the data, and return False, if the query result is empty; otherwise, return the query data.","<met> <mod> public </mod> type_identifier getNewdevice <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> mirco_devices </for> , <for> type_identifier tuid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( mirco_devices ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> mirco_devices . get <arg> ( string_literal ) </arg> </met> , tuid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> s = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> s . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return s ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the flights based on $index$ ) , get all the data, and finally return the rendered 'index.html', where the flights parameter is the query result.","public String index ( JdbcTemplate conn , String index , Model model ) { List flights = conn . query ( "" select * from flights where index= ? "" , new Object [ ] { index } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the flights based on $index$ ) , get all the data, and finally return the rendered 'index.html', where the flights parameter is the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier index </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { index } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Execute SQL ( query the name column in the beers table according to $manf$ ) , get all the query results, and convert each item of the query result to dict, store it as list, and return.","public List getBeers ( DataSource engine , String manf ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select name from beers where manf= ? "" , new Object [ ] { manf } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect the database according to $engine$. Execute SQL ( query the name column in the beers table according to $manf$ ) , get all the query results, and convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getBeers <for> ( <for> type_identifier engine </for> , <for> type_identifier manf </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { manf } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the imdb_movies table according to $genreid$ ) , get all the data, convert the query results to list and return.","public List getMoviesByGenre ( JdbcTemplate conn , String genreid ) { List db_result = conn . query ( "" select * from imdb_movies where genreid = ? "" , new Object [ ] { genreid } , new BeanPropertyRowMapper ( List . class ) ) ; return db_result ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the imdb_movies table according to $genreid$ ) , get all the data, convert the query results to list and return.","<met> <mod> public </mod> type_identifier getMoviesByGenre <for> ( <for> type_identifier conn </for> , <for> type_identifier genreid </for> ) </for> <blo> { <loc> type_identifier <var> db_result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { genreid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_result ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the columns in the username table according to $autocommit$ ) , get all the data, and output the query results.","public void testMixedTransactionClose ( JdbcTemplate conn , String autocommit ) { List eq = conn . query ( "" select * from username where autocommit = ? "" , new Object [ ] { autocommit } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( eq ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query all the columns in the username table according to $autocommit$ ) , get all the data, and output the query results.","<met> <mod> public </mod> void_type testMixedTransactionClose <for> ( <for> type_identifier conn </for> , <for> type_identifier autocommit </for> ) </for> <blo> { <loc> type_identifier <var> eq = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { autocommit } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( eq ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: Get database engine through $db_string$ and execute SQL ( get all columns in tb_produtos table based on $id$ ) and get all the data. Finally return the query results.,"public List getProdutos ( DataSource db_string , String id ) { JdbcTemplate con = new JdbcTemplate ( db_string ) ; List produtos = con . query ( "" select * from tb_produtos where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return produtos ; }",Generate syntax code: Get database engine through $db_string$ and execute SQL ( get all columns in tb_produtos table based on $id$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier getProdutos <for> ( <for> type_identifier db_string </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> produtos = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return produtos ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement with the java expression: Query the name data in the $users_table$ table based on $age$, execute SQL with the $conn$ connection, get all data, use for loop to traverse all the query results and print them.","public void getSource ( EntityManager conn , Root < Object > users_table , String age ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users_table ) . where ( cb . equal ( users_table . get ( "" age "" ) , age ) ) ; List < Object > names = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object n : names ) { System . out . println ( n ) ; } }","Generate syntax code: Set the SQL statement with the java expression: Query the name data in the $users_table$ table based on $age$, execute SQL with the $conn$ connection, get all data, use for loop to traverse all the query results and print them.","<met> <mod> public </mod> void_type getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users_table </for> , <for> type_identifier age </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users_table . get <arg> ( string_literal ) </arg> </met> , age ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> names = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier n : names ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( n ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement ( query the statistical values of all columns in GEI_DNS_MANUAL based on $domain$ ) and get all the data. Set an assertion to determine that the length of the returned result is greater than 0.,"public void checkExistsDomain ( JdbcTemplate conn , String domain ) { List res = conn . query ( "" select count(*) from gei_dns_manual where domain =? "" , new Object [ ] { domain } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query the statistical values of all columns in GEI_DNS_MANUAL based on $domain$ ) and get all the data. Set an assertion to determine that the length of the returned result is greater than 0.,"<met> <mod> public </mod> void_type checkExistsDomain <for> ( <for> type_identifier conn </for> , <for> type_identifier domain </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { domain } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Try to execute SQL by $conn$ ( get all columns in vw_deaths table based on $data_year$ ) and get all the data. Use DataFrame method to format the query result and convert it to dictionary type, where orient parameter is 'records'. Print the dictionary type content and use jsonify to process the dictionary content and return. If the execution has an exception, print 'Error detected in file' in f format with the parameter being the string format of the exception, and finally ensure that $conn$ is closed.","public JSONObject deathByGender ( JdbcTemplate conn , String data_year ) { try { List res = conn . query ( "" select * from vw_deaths where data_year =? "" , new Object [ ] { data_year } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject df = new JSONObject ( ) ; df . put ( "" records "" , res ) ; System . out . println ( df ) ; return df ; } catch ( Exception e ) { System . out . println ( "" Error detected in file "" + e ) ; return null ; } finally { return null ; } }","Generate syntax code: Try to execute SQL by $conn$ ( get all columns in vw_deaths table based on $data_year$ ) and get all the data. Use DataFrame method to format the query result and convert it to dictionary type, where orient parameter is 'records'. Print the dictionary type content and use jsonify to process the dictionary content and return. If the execution has an exception, print 'Error detected in file' in f format with the parameter being the string format of the exception, and finally ensure that $conn$ is closed.","<met> <mod> public </mod> type_identifier deathByGender <for> ( <for> type_identifier conn </for> , <for> type_identifier data_year </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { data_year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> df = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> df . put <arg> ( string_literal , res ) </arg> </met> ; </exp> <exp> <met> <fie> System . out </fie> . println <arg> ( df ) </arg> </met> ; </exp> <ret> return df ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> string_literal + e </bin> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Use 'with' statement to connect to database based on $conn$begin method. Set SQL based on the java expression: ( query all columns in $users_table$ table based on $name$ ) , execute SQL and get all the query results. Use for loop to convert each item of query results into dict and store as list and return.","public List getSource ( EntityManager conn , Root < Object > users_table , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users_table ) . where ( cb . equal ( users_table . get ( "" name "" ) , name ) ) ; List < Object > users = conn . createQuery ( cq ) . getResultList ( ) ; return users ; }","Generate syntax code: Use 'with' statement to connect to database based on $conn$begin method. Set SQL based on the java expression: ( query all columns in $users_table$ table based on $name$ ) , execute SQL and get all the query results. Use for loop to convert each item of query results into dict and store as list and return.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users_table </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users_table . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return users ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine with $postgresql_uri$, execute the SQL statement ( get all the columns in the owner where asterisk is $asterisk$ ) , get all the data after execution and return.","public List selectOwner ( DataSource postgresql_uri , String asterisk ) { JdbcTemplate engine = new JdbcTemplate ( postgresql_uri ) ; List results = engine . query ( "" select * from owner where asterisk =? "" , new Object [ ] { asterisk } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Get the database engine with $postgresql_uri$, execute the SQL statement ( get all the columns in the owner where asterisk is $asterisk$ ) , get all the data after execution and return.","<met> <mod> public </mod> type_identifier selectOwner <for> ( <for> type_identifier postgresql_uri </for> , <for> type_identifier asterisk </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( postgresql_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { asterisk } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement and the content is as follows: Query the word_id data in the learning table where a user_id is $ID$. Use $conn$ to execute the SQL statement to get all the data, print the query results, and return them.","public List findLearning ( JdbcTemplate conn , String ID ) { List ret_value = conn . query ( "" select word_id from learning where user_id = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( ret_value ) ; return ret_value ; }","Generate syntax code: Set the SQL statement and the content is as follows: Query the word_id data in the learning table where a user_id is $ID$. Use $conn$ to execute the SQL statement to get all the data, print the query results, and return them.","<met> <mod> public </mod> type_identifier findLearning <for> ( <for> type_identifier conn </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> ret_value = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( ret_value ) </arg> </met> ; </exp> <ret> return ret_value ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all usernames in the users where name is $name$. If the length of the query result is 0, render and return 'login.html'. Otherwise, render and return ""signup.html"".","public String signUp ( JdbcTemplate conn , String name ) { List users_data = conn . query ( "" select username from users where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users_data . isEmpty ( ) ) { return "" login.html "" ; } else { return "" signup.html "" ; } }","Generate syntax code: Use $conn$ to query all usernames in the users where name is $name$. If the length of the query result is 0, render and return 'login.html'. Otherwise, render and return ""signup.html"".","<met> <mod> public </mod> type_identifier signUp <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> users_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> users_data . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the $DATABASEURI$ to get the database engine and connect to the database, then execute the SQL ( get all the columns in the players where employees_ssn is $employees_ssn$ ) and get all the data, and finally return the query results.","public List initpSql ( DataSource DATABASEURI , String employees_ssn ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List rows_player = conn . query ( "" select * from players where employees_ssn = ? "" , new Object [ ] { employees_ssn } , new BeanPropertyRowMapper ( List . class ) ) ; return rows_player ; }","Generate syntax code: Use the $DATABASEURI$ to get the database engine and connect to the database, then execute the SQL ( get all the columns in the players where employees_ssn is $employees_ssn$ ) and get all the data, and finally return the query results.","<met> <mod> public </mod> type_identifier initpSql <for> ( <for> type_identifier DATABASEURI </for> , <for> type_identifier employees_ssn </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( DATABASEURI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rows_player = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { employees_ssn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows_player ; </ret> } </blo> </met>"
"Generate origin code: Use $db_connect$ to connect the database and execute SQL ( get all the columns in the employee1 table according to $country$ ) and get all the data. If the length of the query result is 0, return None; otherwise, return the query result.","public List getEmployee ( DataSource db_connect , String country ) { JdbcTemplate conn = new JdbcTemplate ( db_connect ) ; List result = conn . query ( "" select * from employee1 where country= ? "" , new Object [ ] { country } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: Use $db_connect$ to connect the database and execute SQL ( get all the columns in the employee1 table according to $country$ ) and get all the data. If the length of the query result is 0, return None; otherwise, return the query result.","<met> <mod> public </mod> type_identifier getEmployee <for> ( <for> type_identifier db_connect </for> , <for> type_identifier country </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { country } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Execute the SQL statement through $session$: Query all firstname in the user table whose id is $id$. Set the assertion to determine that the length of the query result is greater than 0 and return the query result.,"public List test ( JdbcTemplate session , String id ) { List results = session . query ( "" select firstname from user where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; assert results . size ( ) > 0 ; return results ; }",Generate syntax code: Execute the SQL statement through $session$: Query all firstname in the user table whose id is $id$. Set the assertion to determine that the length of the query result is greater than 0 and return the query result.,"<met> <mod> public </mod> type_identifier test <for> ( <for> type_identifier session </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> results . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use java expressions to set SQL: Query the information in the $fraction$ table based on $experiment_id$. Use $connection$ to execute SQL and get all the data. Finally, return the query results.","public List fetchFractions ( EntityManager connection , Root < Object > fraction , String experiment_id ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( fraction ) . where ( cb . equal ( fraction . get ( "" experiment_id "" ) , experiment_id ) ) ; List < Object > texts = connection . createQuery ( cq ) . getResultList ( ) ; return texts ; }","Generate syntax code: Use java expressions to set SQL: Query the information in the $fraction$ table based on $experiment_id$. Use $connection$ to execute SQL and get all the data. Finally, return the query results.","<met> <mod> public </mod> type_identifier fetchFractions <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> fraction </for> , <for> type_identifier experiment_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( fraction ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> fraction . get <arg> ( string_literal ) </arg> </met> , experiment_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> texts = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return texts ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $BASEWEB$. Execute the SQL statement ( get all the columns in the Offre based on $validation$ ) , get all the data and close the database connection. Use for loop traversal to query the results, print them and returns.","public List newOffer ( DataSource BASEWEB , String validation ) { JdbcTemplate connection = new JdbcTemplate ( BASEWEB ) ; List res = connection . query ( "" select * from Offre where validation= ? "" , new Object [ ] { validation } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object ite : res ) { System . out . println ( ite ) ; } return res ; }","Generate syntax code: Get the database engine and establish a connection through $BASEWEB$. Execute the SQL statement ( get all the columns in the Offre based on $validation$ ) , get all the data and close the database connection. Use for loop traversal to query the results, print them and returns.","<met> <mod> public </mod> type_identifier newOffer <for> ( <for> type_identifier BASEWEB </for> , <for> type_identifier validation </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( BASEWEB ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { validation } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier ite : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( ite ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $url$. Set up the SQL statement ( query all the columns in the Users table according to $username$ ) , execute sql, get all the data, and return the query results.","public List createUser ( DataSource url , String username ) { JdbcTemplate connection = new JdbcTemplate ( url ) ; List res = connection . query ( "" select * from Users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine and establish a connection through $url$. Set up the SQL statement ( query all the columns in the Users table according to $username$ ) , execute sql, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier createUser <for> ( <for> type_identifier url </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database using $testing$, execute the SQL ( get the user_id column in the query_users table that was processed by the counting method ) , get all the data, and finally return the result of the query.","public List testCommit ( DataSource testing ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; List result = connection . query ( "" select count(user_id) from query_users "" , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Connect to the database using $testing$, execute the SQL ( get the user_id column in the query_users table that was processed by the counting method ) , get all the data, and finally return the result of the query.","<met> <mod> public </mod> type_identifier testCommit <for> ( <for> type_identifier testing </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and connect the database through $app$, execute SQL ( get the partner_uni column in the mapping table whose nus_module_1 is $module$ ) , get all the data, and finally return the query result.","public List moduleFilters ( DataSource app , String module ) { JdbcTemplate con = new JdbcTemplate ( app ) ; List unis = con . query ( "" select partner_uni from mapping where nus_module_1= ? "" , new Object [ ] { module } , new BeanPropertyRowMapper ( List . class ) ) ; return unis ; }","Generate syntax code: Get the database engine and connect the database through $app$, execute SQL ( get the partner_uni column in the mapping table whose nus_module_1 is $module$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier moduleFilters <for> ( <for> type_identifier app </for> , <for> type_identifier module </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( app ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> unis = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { module } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return unis ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the flight column in the passengers table based on $name$ ) and get the first piece of data. Return None if the query result is None; otherwise, use for loop to print the name attribute of each item of the query result.","public Object main ( JdbcTemplate conn , String name ) { List passengers = conn . query ( "" select flight from passengers where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { return null ; } System . out . println ( JSONObject . parseObject ( passengers . get ( 0 ) . toString ( ) ) . getString ( "" name "" ) ) ; return passengers . get ( 0 ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query the flight column in the passengers table based on $name$ ) and get the first piece of data. Return None if the query result is None; otherwise, use for loop to print the name attribute of each item of the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> passengers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passengers . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> <met> passengers . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> passengers . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL based on $db$ ( querying the table information in the user_tables where tablename is $tablename$ ) and get the first data. Print and return query results.,"public Object searchTable ( JdbcTemplate db , String tablename ) { List res = db . query ( "" select table from user_tables where tablename = ? "" , new Object [ ] { tablename } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res . get ( 0 ) ) ; return res . get ( 0 ) ; }",Generate syntax code: Execute the SQL based on $db$ ( querying the table information in the user_tables where tablename is $tablename$ ) and get the first data. Print and return query results.,"<met> <mod> public </mod> type_identifier searchTable <for> ( <for> type_identifier db </for> , <for> type_identifier tablename </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tablename } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users table according to $transfer$ ) , get all the data, return the rendered 'transfer.html' page, and pass the 'data' parameter as the returned data.","public Object transfer ( JdbcTemplate conn , String transfer , Model model ) { List data = conn . query ( "" select * from users where transfer= ? "" , new Object [ ] { transfer } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" data "" , data ) ; return "" transfer.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users table according to $transfer$ ) , get all the data, return the rendered 'transfer.html' page, and pass the 'data' parameter as the returned data.","<met> <mod> public </mod> type_identifier transfer <for> ( <for> type_identifier conn </for> , <for> type_identifier transfer </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { transfer } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL according to the java expression ( get the hash_password column that converted to list type in the $reg_user$ table whose userid is $uid$ ) and get the first piece of data. If the request method is ""POST"", return the rendered ""successlogin.html"", where the flight parameter is the 0th element of the query result.","public String lsubmin ( HttpRequest request , EntityManager db , Root < Object > reg_user , String uid , Model model ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( reg_user ) . where ( cb . equal ( reg_user . get ( "" userid "" ) , uid ) ) ; List < Object > flights = db . createQuery ( cq ) . getResultList ( ) ; if ( request . getMethod ( ) . equals ( "" POST "" ) ) { model . addAttribute ( "" flight "" , JSONObject . parseObject ( flights . get ( 0 ) . toString ( ) ) . get ( 0 ) ) ; return "" successlogin.html "" ; } else { return null ; } }","Generate syntax code: Use $db$ to execute SQL according to the java expression ( get the hash_password column that converted to list type in the $reg_user$ table whose userid is $uid$ ) and get the first piece of data. If the request method is ""POST"", return the rendered ""successlogin.html"", where the flight parameter is the 0th element of the query result.","<met> <mod> public </mod> type_identifier lsubmin <for> ( <for> type_identifier request </for> , <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> reg_user </for> , <for> type_identifier uid </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( reg_user ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> reg_user . get <arg> ( string_literal ) </arg> </met> , uid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> flights = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> flights . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect the database according to $eng$. Set SQL according to the java expression ( query all columns in the $cars$ table according to $record_id$ ) , execute sql, get all the query results, and return the 0th element of the query results.","public Object getLast ( EntityManager eng , Root < Object > cars , String record_id ) { CriteriaBuilder cb = eng . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cars ) . where ( cb . equal ( cars . get ( "" record_id "" ) , record_id ) ) ; List < Object > ans = eng . createQuery ( cq ) . getResultList ( ) ; return ans . get ( 0 ) ; }","Generate syntax code: connect the database according to $eng$. Set SQL according to the java expression ( query all columns in the $cars$ table according to $record_id$ ) , execute sql, get all the query results, and return the 0th element of the query results.","<met> <mod> public </mod> type_identifier getLast <for> ( <for> type_identifier eng </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cars </for> , <for> type_identifier record_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> eng . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( cars ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> cars . get <arg> ( string_literal ) </arg> </met> , record_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ans = <met> <met> eng . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> ans . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Get the database engine with $db_conn_string$ and its echo parameter is True. Set the SQL statement using a java expression: look up all ids in the $ctx$ where property is $property$. Execute the SQL and return all the query results.,"public List < Object > queryOldRecs ( EntityManager ctx , Root < Object > db_conn_string , String property ) { CriteriaBuilder cb = ctx . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( db_conn_string ) . where ( cb . equal ( db_conn_string . get ( "" record_id "" ) , property ) ) ; List < Object > recsinf = ctx . createQuery ( cq ) . getResultList ( ) ; return recsinf ; }",Generate syntax code: Get the database engine with $db_conn_string$ and its echo parameter is True. Set the SQL statement using a java expression: look up all ids in the $ctx$ where property is $property$. Execute the SQL and return all the query results.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryOldRecs <for> ( <for> type_identifier ctx </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> db_conn_string </for> , <for> type_identifier property </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> ctx . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( db_conn_string ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> db_conn_string . get <arg> ( string_literal ) </arg> </met> , property ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recsinf = <met> <met> ctx . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recsinf ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up a SQL statement with the following content: Query all id in the $vt$ table based on $vname$, use the $conn$ connection to execute the SQL statement and print the query result.","public void getInfo ( EntityManager conn , Root < Object > vt , String vname ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( vt ) . where ( cb . equal ( vt . get ( "" vname "" ) , vname ) ) ; List < Object > information = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( information ) ; }","Generate syntax code: Use the java expression to set up a SQL statement with the following content: Query all id in the $vt$ table based on $vname$, use the $conn$ connection to execute the SQL statement and print the query result.","<met> <mod> public </mod> void_type getInfo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> vt </for> , <for> type_identifier vname </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( vt ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> vt . get <arg> ( string_literal ) </arg> </met> , vname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> information = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( information ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use the format string matching method to set sql ( query all the information in the pcm_update table according to $each$ ) , connect the database according to the begin method of $engine$, execute SQL, get all the query results, and return them.","public List sqlFunction ( DataSource engine , String each ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select * from pcm_update where each= ? "" , new Object [ ] { each } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use the format string matching method to set sql ( query all the information in the pcm_update table according to $each$ ) , connect the database according to the begin method of $engine$, execute SQL, get all the query results, and return them.","<met> <mod> public </mod> type_identifier sqlFunction <for> ( <for> type_identifier engine </for> , <for> type_identifier each </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { each } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Execute SQL according to the java expression ( query the id column in the $hostnames$ table based on $hostname$ ) . Get all the data and return.,"public void hostnameGetId ( EntityManager conn , Root < Object > hostnames , String hostname ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( hostnames ) . where ( cb . equal ( hostnames . get ( "" hostname "" ) , hostname ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( res ) ; }",Generate syntax code: Execute SQL according to the java expression ( query the id column in the $hostnames$ table based on $hostname$ ) . Get all the data and return.,"<met> <mod> public </mod> void_type hostnameGetId <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> hostnames </for> , <for> type_identifier hostname </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( hostnames ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> hostnames . get <arg> ( string_literal ) </arg> </met> , hostname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
Generate origin code: Execute SQL through $conn$: Query the statistics of all columns in the books table and get the first piece of data. Take out the 0th element of the obtained data. Return the extracted element if the extracted element is not 0.,"public int search ( JdbcTemplate conn ) { List count_values = conn . query ( "" select count(*) from books "" , new BeanPropertyRowMapper ( List . class ) ) ; int count = Integer . parseInt ( JSONObject . parseObject ( count_values . get ( 0 ) . toString ( ) ) . get ( 0 ) . toString ( ) ) ; if ( count != 0 ) { return count ; } else { return 0 ; } }",Generate syntax code: Execute SQL through $conn$: Query the statistics of all columns in the books table and get the first piece of data. Take out the 0th element of the obtained data. Return the extracted element if the extracted element is not 0.,"<met> <mod> public </mod> <int> int </int> search <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> count_values = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <int> int </int> <var> count = <met> Integer . parseInt <arg> ( <met> <met> <met> JSONObject . parseObject <arg> ( <met> <met> count_values . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> count != decimal_integer_literal </bin> ) </par> <blo> { <ret> return count ; </ret> } </blo> else <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the name column in the passengers table where the id of flight is $flight_id$ ) and get all the data. If the query result is None, return rendered ""error.html"" and finally rendered ""flight.html"" with the res parameter being the result of the query.","public String flight ( JdbcTemplate conn , String flight_id , Model model ) { List res = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" res "" , res ) ; return "" flight.html "" ; } }","Generate syntax code: Execute SQL with $conn$ ( get the name column in the passengers table where the id of flight is $flight_id$ ) and get all the data. If the query result is None, return rendered ""error.html"" and finally rendered ""flight.html"" with the res parameter being the result of the query.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $flowdetails$ table based on $parent_uuid$ ) . Execute the SQL through $conn$, get all the data, and use for loop to traverse each query result and print it.","public void flowQueryIter ( EntityManager conn , Root < Object > flowdetails , String parent_uuid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( flowdetails ) . where ( cb . equal ( flowdetails . get ( "" parent_uuid "" ) , parent_uuid ) ) ; List < Object > ens = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object row : ens ) { System . out . println ( row ) ; } }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $flowdetails$ table based on $parent_uuid$ ) . Execute the SQL through $conn$, get all the data, and use for loop to traverse each query result and print it.","<met> <mod> public </mod> void_type flowQueryIter <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> flowdetails </for> , <for> type_identifier parent_uuid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( flowdetails ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> flowdetails . get <arg> ( string_literal ) </arg> </met> , parent_uuid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ens = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : ens ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Connect to the database through $db$. Use the java expression to set up the SQL statement ( get the data information in the $foo$ table based on $moredata$ ) and execute the SQL statement to get all the data. Make sure the database connection is closed and return all the query results. *,"public List getText ( EntityManager db , Root < Object > foo , String moredata ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( foo ) . where ( cb . equal ( foo . get ( "" moredata "" ) , moredata ) ) ; List < Object > res = db . createQuery ( cq ) . getResultList ( ) ; return res ; }",Generate syntax code: Connect to the database through $db$. Use the java expression to set up the SQL statement ( get the data information in the $foo$ table based on $moredata$ ) and execute the SQL statement to get all the data. Make sure the database connection is closed and return all the query results. *,"<met> <mod> public </mod> type_identifier getText <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> foo </for> , <for> type_identifier moredata </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( foo ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> foo . get <arg> ( string_literal ) </arg> </met> , moredata ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Through the $conn$ to get the connection, use ORM method to execute the SQL statement ( the first piece of data in the $Survey$ table is queried according to $question$ ) . If the execution result is not empty, return the execution result; otherwise, return None.","public Object addSurvey ( EntityManager conn , Root < Object > Survey , String question ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Survey ) . where ( cb . equal ( Survey . get ( "" question "" ) , question ) ) ; List < Object > sondages = conn . createQuery ( cq ) . getResultList ( ) ; if ( sondages . isEmpty ( ) ) { return null ; } else { return sondages . get ( 0 ) ; } }","Generate syntax code: Through the $conn$ to get the connection, use ORM method to execute the SQL statement ( the first piece of data in the $Survey$ table is queried according to $question$ ) . If the execution result is not empty, return the execution result; otherwise, return None.","<met> <mod> public </mod> type_identifier addSurvey <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Survey </for> , <for> type_identifier question </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Survey ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Survey . get <arg> ( string_literal ) </arg> </met> , question ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> sondages = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> sondages . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> sondages . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$ ( get server_info's sat_index column based on $state$ ) , get all the data, and finally return the query result.","public List unpackFile ( JdbcTemplate conn , String state ) { List data_query = conn . query ( "" select sat_index from server_info where state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; return data_query ; }","Generate syntax code: Execute SQL via $conn$ ( get server_info's sat_index column based on $state$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier unpackFile <for> ( <for> type_identifier conn </for> , <for> type_identifier state </for> ) </for> <blo> { <loc> type_identifier <var> data_query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { state } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data_query ; </ret> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Execute the SQL statement: Query all drinkerID, name, phone, address, state in the drinkers table. Convert each item of the query result to dict, store as list and return.","public List getDrinkers ( DataSource engine ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select drinkerid, name, phone, address, state from drinkers "" , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect to the database according to $engine$. Execute the SQL statement: Query all drinkerID, name, phone, address, state in the drinkers table. Convert each item of the query result to dict, store as list and return.","<met> <mod> public </mod> type_identifier getDrinkers <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: If $id_technician$ exists, execute the following code: Build the database engine based on $call_center$ and set the echo parameter to True; use the engine to get the connection; execute SQL ( query the status information in the Technician table based on $id_technician$ ) and get the first piece of data. Otherwise, return 'ERROR'.","public Object getStatusTechByTechId ( DataSource call_center , String id_technician ) { if ( id_technician != null ) { JdbcTemplate conn = new JdbcTemplate ( call_center ) ; List status = conn . query ( "" select time from comments where summary = ? "" , new Object [ ] { id_technician } , new BeanPropertyRowMapper ( List . class ) ) ; return status ; } else { return "" ERROR "" ; } }","Generate syntax code: If $id_technician$ exists, execute the following code: Build the database engine based on $call_center$ and set the echo parameter to True; use the engine to get the connection; execute SQL ( query the status information in the Technician table based on $id_technician$ ) and get the first piece of data. Otherwise, return 'ERROR'.","<met> <mod> public </mod> type_identifier getStatusTechByTechId <for> ( <for> type_identifier call_center </for> , <for> type_identifier id_technician </for> ) </for> <blo> { <if_> if <par> ( <bin> id_technician != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( call_center ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> status = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id_technician } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return status ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the Username column in the $References$ table based on the condition that Email is $username$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each item of the query results, store it as list, and finally return the list.","public List getStudents ( EntityManager conn , Root < Object > References , String username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( References ) . where ( cb . equal ( References . get ( "" username "" ) , username ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; List list = new ArrayList ( ) ; for ( Object x : result ) { list . add ( JSONObject . parseObject ( x . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Set SQL based on the java expression ( query the Username column in the $References$ table based on the condition that Email is $username$ ) . Execute SQL with $conn$, get all the data, use for loop to traverse each item of the query results, store it as list, and finally return the list.","<met> <mod> public </mod> type_identifier getStudents <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> References </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( References ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> References . get <arg> ( string_literal ) </arg> </met> , username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier x : result ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> x . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Query all columns in the student table with phone as $phone$ through $conn$ and get the first piece of data. Use the full_name and room attributes of the query result as the corresponding values of student_name and student_room in the dictionary, and return the dictionary.","public JSONObject feesRecord ( JdbcTemplate conn , String phone ) { List results = conn . query ( "" select * from student where phone = ? "" , new Object [ ] { phone } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject res_dict = new JSONObject ( ) ; res_dict . put ( "" student_name "" , JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . getString ( "" full_name "" ) ) ; res_dict . put ( "" student_room "" , JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . getString ( "" room "" ) ) ; return res_dict ; }","Generate syntax code: Query all columns in the student table with phone as $phone$ through $conn$ and get the first piece of data. Use the full_name and room attributes of the query result as the corresponding values of student_name and student_room in the dictionary, and return the dictionary.","<met> <mod> public </mod> type_identifier feesRecord <for> ( <for> type_identifier conn </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res_dict = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> res_dict . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> res_dict . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return res_dict ; </ret> } </blo> </met>"
"Generate origin code: According to the string matching to set sql ( query the length of the id column in the glpi_computers table based on $value$ ) , use $conn$ to execute SQL, get the first piece of data, use for loop to traverse the 0th element of the last data of the query result, and return.","public Object miniComputersCount ( JdbcTemplate conn , String value ) { List res = conn . query ( "" select count(id) from glpi_computers where value= ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; Object result = res . get ( 0 ) ; return JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: According to the string matching to set sql ( query the length of the id column in the glpi_computers table based on $value$ ) , use $conn$ to execute SQL, get the first piece of data, use for loop to traverse the 0th element of the last data of the query result, and return.","<met> <mod> public </mod> type_identifier miniComputersCount <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set SQL statement: Get 'images' in imagesAbout table based on $imageID$, execute SQL to get all the data via $connection$ and return execution result.","public List photoDescription ( JdbcTemplate connection , String imageID ) { List res = connection . query ( "" select images from imagesAbout where imageID = ? "" , new Object [ ] { imageID } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set SQL statement: Get 'images' in imagesAbout table based on $imageID$, execute SQL to get all the data via $connection$ and return execution result.","<met> <mod> public </mod> type_identifier photoDescription <for> ( <for> type_identifier connection </for> , <for> type_identifier imageID </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { imageID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the passed $lname$ is empty, return ""Unavailable"" directly; if the request method is ""POST"", use $conn$ to execute the SQL statement ( query the title in the location table based on $lname$ ) and get all the data, and finally return the query result.","public Object event ( HttpRequest request , JdbcTemplate conn , String lname ) { if ( lname == null ) { return "" Unavailable "" ; } else { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res = conn . query ( "" select title from location where lname= ? "" , new Object [ ] { lname } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } else { return null ; } } }","Generate syntax code: If the passed $lname$ is empty, return ""Unavailable"" directly; if the request method is ""POST"", use $conn$ to execute the SQL statement ( query the title in the location table based on $lname$ ) and get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier event <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier lname </for> ) </for> <blo> { <if_> if <par> ( <bin> lname == null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { lname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL ( get all columns in the users where username is $username$ and password is $password$ ) and get the first data if the method of the request is ""POST"" and return the query result if the result is true otherwise the method of the request is not ""POST"", return the rendered ""login.html"".","public Object login ( HttpRequest request , JdbcTemplate conn , String username , String password ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List check_login_credentials = conn . query ( "" select * from users where username=? and password= ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check_login_credentials . isEmpty ( ) ) { return "" login.html "" ; } else { return check_login_credentials ; } } else { return "" login.html "" ; } }","Generate syntax code: Use $conn$ to execute the SQL ( get all columns in the users where username is $username$ and password is $password$ ) and get the first data if the method of the request is ""POST"" and return the query result if the result is true otherwise the method of the request is not ""POST"", return the rendered ""login.html"".","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> check_login_credentials = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> check_login_credentials . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return check_login_credentials ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL according to the java expression ( get the destination columns in the $flights$ table where origin is $origin$ and duration is $dur$ ) , get all the data, and finally return the query result.","public List main ( EntityManager db , Root < Object > flights , String origin , String dur ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( flights ) . where ( cb . equal ( flights . get ( "" origin "" ) , origin ) ) ; cq . select ( flights ) . where ( cb . equal ( flights . get ( "" dur "" ) , dur ) ) ; List < Object > dest = db . createQuery ( cq ) . getResultList ( ) ; return dest ; }","Generate syntax code: Use $db$ to execute SQL according to the java expression ( get the destination columns in the $flights$ table where origin is $origin$ and duration is $dur$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> flights </for> , <for> type_identifier origin </for> , <for> type_identifier dur </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( flights ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> flights . get <arg> ( string_literal ) </arg> </met> , origin ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( flights ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> flights . get <arg> ( string_literal ) </arg> </met> , dur ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> dest = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return dest ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as a post, execute the SQL statement using $conn$ ( query all columns in books where author is $author$ ) and get all the query results. Return all the data from the query.","public List searchValue ( HttpRequest request , JdbcTemplate conn , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List books_author = conn . query ( "" select * from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return books_author ; } else { return null ; } }","Generate syntax code: If the request module sends the request as a post, execute the SQL statement using $conn$ ( query all columns in books where author is $author$ ) and get all the query results. Return all the data from the query.","<met> <mod> public </mod> type_identifier searchValue <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> books_author = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return books_author ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Create a database engine and establish a connection through $prices$, and execute the SQL statement, which reads: Query all the symbol in the prices table through $exchange$ and return the query results.","public List queryPriceAll ( DataSource prices , String exchange ) { JdbcTemplate conn = new JdbcTemplate ( prices ) ; List res = conn . query ( "" select symbol from prices where exchange= ? "" , new Object [ ] { exchange } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Create a database engine and establish a connection through $prices$, and execute the SQL statement, which reads: Query all the symbol in the prices table through $exchange$ and return the query results.","<met> <mod> public </mod> type_identifier queryPriceAll <for> ( <for> type_identifier prices </for> , <for> type_identifier exchange </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( prices ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { exchange } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through the $con$ connection ( query all columns in the tbl_user table based on $username$ ) . If the number of rows of the query result is greater than or equal to 1, print ""find user"", render and return 'user/message.html'.","public String saveUser ( JdbcTemplate con , String username ) { List users_qry = con . query ( "" select * from tbl_user where username =? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( users_qry . size ( ) > 1 ) { System . out . println ( "" find user "" ) ; return "" user/message.html "" ; } else { return null ; } }","Generate syntax code: Execute the SQL statement through the $con$ connection ( query all columns in the tbl_user table based on $username$ ) . If the number of rows of the query result is greater than or equal to 1, print ""find user"", render and return 'user/message.html'.","<met> <mod> public </mod> type_identifier saveUser <for> ( <for> type_identifier con </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> users_qry = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> users_qry . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $username$ is empty, return the rendered ""log-in.html"" page; otherwise, use $conn$ to execute SQL ( query the id column in the users table based on $username$ ) , get the first row of data, return the rendered ""log-in.html"" page, and set the ids parameter to the query result.","public String loginCheck ( JdbcTemplate conn , String username , Model model ) { if ( username == "" "" ) { return "" log-in.html "" ; } else { List ids = conn . query ( "" select id from users where username =? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" ids "" , ids ) ; return "" log-in.html "" ; } }","Generate syntax code: If $username$ is empty, return the rendered ""log-in.html"" page; otherwise, use $conn$ to execute SQL ( query the id column in the users table based on $username$ ) , get the first row of data, return the rendered ""log-in.html"" page, and set the ids parameter to the query result.","<met> <mod> public </mod> type_identifier loginCheck <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <bin> username == string_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> ids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , ids ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up SQL ( query all columns in the view table based on $value$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String value ) { List results = conn . query ( "" select * from view where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; List views = new ArrayList ( ) ; for ( Object v : results ) { views . add ( v ) ; } return views ; }","Generate syntax code: Set up SQL ( query all columns in the view table based on $value$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> views = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier v : results ) <blo> { <exp> <met> views . add <arg> ( v ) </arg> </met> ; </exp> } </blo> </enh> <ret> return views ; </ret> } </blo> </met>"
"Generate origin code: Use $connection$ to execute SQL ( query the title in the books table based on $isbn$ ) and get the first piece of data. Print the query results, and finally use the jsonify method to return the query results.","public JSONObject getJson ( JdbcTemplate connection , String isbn ) { List rows = connection . query ( "" select title from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( rows . get ( 0 ) ) ; return JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) ; }","Generate syntax code: Use $connection$ to execute SQL ( query the title in the books table based on $isbn$ ) and get the first piece of data. Print the query results, and finally use the jsonify method to return the query results.","<met> <mod> public </mod> type_identifier getJson <for> ( <for> type_identifier connection </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$, and use the java expression to execute SQL: Query all the data in the $t$ table. For loop iterates through the queried data and prints.","public void sqlToIterator ( EntityManager engine , Root < Object > t ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( t ) ; List < Object > result = engine . createQuery ( cq ) . getResultList ( ) ; for ( Object item : result ) { System . out . println ( item ) ; } }","Generate syntax code: Connect to the database through $engine$, and use the java expression to execute SQL: Query all the data in the $t$ table. For loop iterates through the queried data and prints.","<met> <mod> public </mod> void_type sqlToIterator <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> t </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( t ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $locati$ table based on $trip_name$ ) . Execute SQL through $conn$ and get all the data. If there is any data, return the query results.","public List optimize ( EntityManager conn , Root < Object > locati , String trip_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( locati ) . where ( cb . equal ( locati . get ( "" origtrip_namein "" ) , trip_name ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $locati$ table based on $trip_name$ ) . Execute SQL through $conn$ and get all the data. If there is any data, return the query results.","<met> <mod> public </mod> type_identifier optimize <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> locati </for> , <for> type_identifier trip_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( locati ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> locati . get <arg> ( string_literal ) </arg> </met> , trip_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement and the content is as follows: Query the time data in the sala table based on $user_id$. Execute SQL through $conn$, get all the data, render and return 'admin', where the time parameter is the execution result.","public String selectTime ( JdbcTemplate conn , String user_id , Model model ) { List time = conn . query ( "" select time from sala where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" time "" , time ) ; return "" admin "" ; }","Generate syntax code: Set the SQL statement and the content is as follows: Query the time data in the sala table based on $user_id$. Execute SQL through $conn$, get all the data, render and return 'admin', where the time parameter is the execution result.","<met> <mod> public </mod> type_identifier selectTime <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> time = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , time ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the name in the passengers table based on $flight_id$ ) and get all the data. If the query result is None, print ""fail"" and return it directly. Otherwise, use for loop to print the name property of each item in the query result.","public void flight ( JdbcTemplate conn , String flight_id ) { List passengers = conn . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { System . out . println ( "" fail "" ) ; return ; } for ( Object passenger : passengers ) { System . out . println ( JSONObject . parseObject ( passenger . toString ( ) ) . getString ( "" name "" ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the name in the passengers table based on $flight_id$ ) and get all the data. If the query result is None, print ""fail"" and return it directly. Otherwise, use for loop to print the name property of each item in the query result.","<met> <mod> public </mod> void_type flight <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> passengers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passengers . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return ; </ret> } </blo> </if_> <enh> for ( type_identifier passenger : passengers ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> passenger . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Query the first piece of id in the riders table with rname as $rname$ through $conn$. Set the assertion to determine the length of the query results is not 0. Return the query results.,"public List getRider ( JdbcTemplate conn , String rname ) { List riders = conn . query ( "" select id from riders where rname = ? "" , new Object [ ] { rname } , new BeanPropertyRowMapper ( List . class ) ) ; assert riders . size ( ) != 0 ; return riders ; }",Generate syntax code: Query the first piece of id in the riders table with rname as $rname$ through $conn$. Set the assertion to determine the length of the query results is not 0. Return the query results.,"<met> <mod> public </mod> type_identifier getRider <for> ( <for> type_identifier conn </for> , <for> type_identifier rname </for> ) </for> <blo> { <loc> type_identifier <var> riders = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { rname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> riders . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return riders ; </ret> } </blo> </met>"
"Generate origin code: Use the $db_conn$ cursor method to execute SQL ( get the TABLE_NAME column in the INFORMATION_SCHEMA based on $BASE_DB_DATABASE$ ) and get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","public List getTableInfoList ( DataSource db_conn , String BASE_DB_DATABASE ) { JdbcTemplate engine = new JdbcTemplate ( db_conn ) ; List result = engine . query ( "" select table_name from information_schema where BASE_DB_DATABASE= ? "" , new Object [ ] { BASE_DB_DATABASE } , new BeanPropertyRowMapper ( List . class ) ) ; List tableInfoList = new ArrayList ( ) ; for ( Object row : result ) { tableInfoList . add ( row ) ; } return tableInfoList ; }","Generate syntax code: Use the $db_conn$ cursor method to execute SQL ( get the TABLE_NAME column in the INFORMATION_SCHEMA based on $BASE_DB_DATABASE$ ) and get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","<met> <mod> public </mod> type_identifier getTableInfoList <for> ( <for> type_identifier db_conn </for> , <for> type_identifier BASE_DB_DATABASE </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_conn ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { BASE_DB_DATABASE } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> tableInfoList = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> tableInfoList . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return tableInfoList ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $data_base$, initialize the log module, try to execute the SQL statement ( query all the columns in the data_ base table according to $destination$ ) , get all the data, and return the query results. If an Exception is caught, output the error log, and finally close all connections.","public List data ( DataSource data_base , String destination ) { JdbcTemplate engine = new JdbcTemplate ( data_base ) ; try { List rs = engine . query ( "" select * from data_base where destination = ? "" , new Object [ ] { destination } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; } catch ( Exception e ) { System . out . println ( "" error "" ) ; return null ; } finally { return null ; } }","Generate syntax code: Get the database engine through $data_base$, initialize the log module, try to execute the SQL statement ( query all the columns in the data_ base table according to $destination$ ) , get all the data, and return the query results. If an Exception is caught, output the error log, and finally close all connections.","<met> <mod> public </mod> type_identifier data <for> ( <for> type_identifier data_base </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( data_base ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> rs = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
Generate origin code: Execute the SQL statement ( get the amount of data in the table ) with $conn$ and get the first row of data. Return the result of the query.,"public Object searchCount ( JdbcTemplate conn ) { List counts = conn . query ( "" select count(*) from table "" , new BeanPropertyRowMapper ( List . class ) ) ; return counts . get ( 0 ) ; }",Generate syntax code: Execute the SQL statement ( get the amount of data in the table ) with $conn$ and get the first row of data. Return the result of the query.,"<met> <mod> public </mod> type_identifier searchCount <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> counts = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> counts . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the pg_database table based on $datname$ ) and get the first query results. If the query result does not exist, return False. Otherwise, return the query result.","public Object createDatabase ( JdbcTemplate conn , String datname ) { List pg_datas = conn . query ( "" select * from pg_database where datname= ? "" , new Object [ ] { datname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( pg_datas . isEmpty ( ) ) { return false ; } else { return pg_datas . get ( 0 ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the pg_database table based on $datname$ ) and get the first query results. If the query result does not exist, return False. Otherwise, return the query result.","<met> <mod> public </mod> type_identifier createDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier datname </for> ) </for> <blo> { <loc> type_identifier <var> pg_datas = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> pg_datas . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return <met> pg_datas . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Get the database engine through $root$. Use the ORM method to execute the SQL statement ( query all the information in the $table$ table with maps as $maps$ ) and return all the query results.,"public List readSql ( EntityManager root , Root < Object > table , String maps ) { CriteriaBuilder cb = root . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" maps "" ) , maps ) ) ; List < Object > values = root . createQuery ( cq ) . getResultList ( ) ; return values ; }",Generate syntax code: Get the database engine through $root$. Use the ORM method to execute the SQL statement ( query all the information in the $table$ table with maps as $maps$ ) and return all the query results.,"<met> <mod> public </mod> type_identifier readSql <for> ( <for> type_identifier root </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier maps </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> root . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , maps ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> root . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Try to run the following code: Open a connection via $engine$, execute SQL ( query the timestamp in the extra_data table based on $client_ip$ and $server_ip$ ) and get all the data. Use for loop to store the query results as list and return the results. If an exception occurs in the operation, the exception information should be printed.","public List appendExtraData ( DataSource engine , String client_ip , String server_ip ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List timestexts = conn . query ( "" select timestamp from extra_data where client_ip=? and server_ip= ? "" , new Object [ ] { client_ip , server_ip } , new BeanPropertyRowMapper ( List . class ) ) ; List recordtimes = new ArrayList ( ) ; for ( Object i : timestexts ) { recordtimes . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return recordtimes ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to run the following code: Open a connection via $engine$, execute SQL ( query the timestamp in the extra_data table based on $client_ip$ and $server_ip$ ) and get all the data. Use for loop to store the query results as list and return the results. If an exception occurs in the operation, the exception information should be printed.","<met> <mod> public </mod> type_identifier appendExtraData <for> ( <for> type_identifier engine </for> , <for> type_identifier client_ip </for> , <for> type_identifier server_ip </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> timestexts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { client_ip , server_ip } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> recordtimes = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : timestexts ) <blo> { <exp> <met> recordtimes . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return recordtimes ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Set SQL ( query the number of userID columns in the proyecto_SI table based on $ratings$ ) , get all the query results, and return the 0th item of the query results.","public Object getAllUserCount ( DataSource engine , String ratings ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select count(userID) from proyecto_SI where ratings= ? "" , new Object [ ] { ratings } , new BeanPropertyRowMapper ( List . class ) ) ; return result . get ( 0 ) ; }","Generate syntax code: connect the database according to $engine$. Set SQL ( query the number of userID columns in the proyecto_SI table based on $ratings$ ) , get all the query results, and return the 0th item of the query results.","<met> <mod> public </mod> type_identifier getAllUserCount <for> ( <for> type_identifier engine </for> , <for> type_identifier ratings </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ratings } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the obj table based on $nodes$ ) and return all obtained query results.,"public List composeNodeQuery ( JdbcTemplate conn , String nodes ) { List rows = conn . query ( "" select * from obj where nodes= ? "" , new Object [ ] { nodes } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the obj table based on $nodes$ ) and return all obtained query results.,"<met> <mod> public </mod> type_identifier composeNodeQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier nodes </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nodes } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database with $e$, execute the SQL ( get the lettershop column in lsstate where state is $state$ ) , get all the data, and finally return the query results.","public List get ( DataSource e , String state ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List result = conn . query ( "" select lettershop from lsstate where state = ? "" , new Object [ ] { state } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Connect to the database with $e$, execute the SQL ( get the lettershop column in lsstate where state is $state$ ) , get all the data, and finally return the query results.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> , <for> type_identifier state </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { state } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends a request via POST, execute the SQL statement via $conn$ ( query the first user_id in the users table based on $username$ ) and return the query results.","public Object review ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_ids = conn . query ( "" select user_id from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return user_ids . get ( 0 ) ; } else { return null ; } }","Generate syntax code: If the request module sends a request via POST, execute the SQL statement via $conn$ ( query the first user_id in the users table based on $username$ ) and return the query results.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user_ids = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> user_ids . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the number of rows in the query result of using $conn$ to excute SQL ( query the name information in the passengers table based on $flight_id$ ) is equal to 0, render ""error.html"" and input ""No flight with that id"" in the message field. Otherwise, render the 'success.html'.","public String namesPass ( JdbcTemplate conn , String flight_id , Model model ) { List rows = conn . query ( "" select name from passengers where flight_id= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No flight with that id "" ) ; return "" error.html "" ; } else { return "" success.html "" ; } }","Generate syntax code: If the number of rows in the query result of using $conn$ to excute SQL ( query the name information in the passengers table based on $flight_id$ ) is equal to 0, render ""error.html"" and input ""No flight with that id"" in the message field. Otherwise, render the 'success.html'.","<met> <mod> public </mod> type_identifier namesPass <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a conection through $db_file$. Try to execute the SQL statement ( get the cluster_name in the clusters based on $cluster_id$ ) and obtain all the data. Return acquired data. If a DatabaseError exception occurs during execution, the error message ""ERROR in truncate"" should be printed.","public List selectClusterFromDb ( DataSource db_file , String cluster_id ) { JdbcTemplate con = new JdbcTemplate ( db_file ) ; try { List texts = con . query ( "" select cluster_name from clusters where cluster_id= ? "" , new Object [ ] { cluster_id } , new BeanPropertyRowMapper ( List . class ) ) ; return texts ; } catch ( Exception e ) { System . out . println ( "" ERROR in truncate "" ) ; return null ; } }","Generate syntax code: Get the database engine and establish a conection through $db_file$. Try to execute the SQL statement ( get the cluster_name in the clusters based on $cluster_id$ ) and obtain all the data. Return acquired data. If a DatabaseError exception occurs during execution, the error message ""ERROR in truncate"" should be printed.","<met> <mod> public </mod> type_identifier selectClusterFromDb <for> ( <for> type_identifier db_file </for> , <for> type_identifier cluster_id </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( db_file ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> texts = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { cluster_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return texts ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Try to set SQL based on the java expression: ( query all columns in $tattributes$ table based on $name$ ) . Execute SQL with $conn$ and get the first piece of data. Throw KeyError if the query result is empty. Skip if there is an exception with KeyError.,"public Object getAttributeByName ( EntityManager conn , Root < Object > tattributes , String name ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tattributes ) . where ( cb . equal ( tattributes . get ( "" name "" ) , name ) ) ; List < Object > rows = conn . createQuery ( cq ) . getResultList ( ) ; if ( rows . isEmpty ( ) ) { return new KeyException ( ) ; } else { return null ; } } catch ( Exception e ) { return null ; } }",Generate syntax code: Try to set SQL based on the java expression: ( query all columns in $tattributes$ table based on $name$ ) . Execute SQL with $conn$ and get the first piece of data. Throw KeyError if the query result is empty. Skip if there is an exception with KeyError.,"<met> <mod> public </mod> type_identifier getAttributeByName <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tattributes </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tattributes ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tattributes . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use the cursor method of $db$ to execute the SQL ( get the result column in the meishi_material table based on $taskid$ ) and get all the data. Use for loop to print the 0th element of each item of the query results.,"public void start ( DataSource db , String taskid ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List allRows = engine . query ( "" select result from meishi_material where taskid = ? "" , new Object [ ] { taskid } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : allRows ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } }",Generate syntax code: Use the cursor method of $db$ to execute the SQL ( get the result column in the meishi_material table based on $taskid$ ) and get all the data. Use for loop to print the 0th element of each item of the query results.,"<met> <mod> public </mod> void_type start <for> ( <for> type_identifier db </for> , <for> type_identifier taskid </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> allRows = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { taskid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : allRows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Connect to the database through $db_connect$. Execute SQL statement: Query all columns in employee1 table through $last_name$, and get all the data. If the length of the query result is 0, then return ""not_found""; otherwise, use jsonify to return all the query results.","public Object get ( DataSource db_connect , String last_name ) { JdbcTemplate engine = new JdbcTemplate ( db_connect ) ; List result = engine . query ( "" select * from employee1 where last_name = ? "" , new Object [ ] { last_name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return "" not_found "" ; } else { return JSONObject . parseArray ( result . toString ( ) ) ; } }","Generate syntax code: Connect to the database through $db_connect$. Execute SQL statement: Query all columns in employee1 table through $last_name$, and get all the data. If the length of the query result is 0, then return ""not_found""; otherwise, use jsonify to return all the query results.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier db_connect </for> , <for> type_identifier last_name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { last_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseArray <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, then use $conn$ to query all the columns in the photos where the id of file is $file_id$ and get all the information and return all the query results.","public List webhook ( HttpRequest request , JdbcTemplate conn , String file_id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List textsql = conn . query ( "" select * from photos where file_id= ? "" , new Object [ ] { file_id } , new BeanPropertyRowMapper ( List . class ) ) ; return textsql ; } else { return null ; } }","Generate syntax code: If the request module sends the request as post, then use $conn$ to query all the columns in the photos where the id of file is $file_id$ and get all the information and return all the query results.","<met> <mod> public </mod> type_identifier webhook <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier file_id </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> textsql = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { file_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return textsql ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL: query the consumable statistics in the Bills table according to $bar$ and execute the SQL statement to get the first piece of data via the $con$ connection. If the execution result is empty, return None, convert each item of the query result to dict, store it as list and return.","public List topBeers ( JdbcTemplate con , String bar ) { List rs = con . query ( "" select count(consumable) from bills where bar= ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return JSONObject . parseArray ( rs . get ( 0 ) . toString ( ) ) ; } }","Generate syntax code: Set the SQL: query the consumable statistics in the Bills table according to $bar$ and execute the SQL statement to get the first piece of data via the $con$ connection. If the execution result is empty, return None, convert each item of the query result to dict, store it as list and return.","<met> <mod> public </mod> type_identifier topBeers <for> ( <for> type_identifier con </for> , <for> type_identifier bar </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bar } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseArray <arg> ( <met> <met> rs . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get all the columns in the tb table whose table_name is $name$ ) , get all the data, and then use for loop to print each item of the query result.","public void getTb ( JdbcTemplate conn , String name ) { List table = conn . query ( "" select * from tb where table_name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : table ) { System . out . println ( row ) ; } }","Generate syntax code: Execute SQL with $conn$ ( get all the columns in the tb table whose table_name is $name$ ) , get all the data, and then use for loop to print each item of the query result.","<met> <mod> public </mod> void_type getTb <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> table = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : table ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $DATABASEURI$ to get the database engine and connect to the database, then execute SQL ( get username column in the user table based on $id$ ) and get all the data, further close the connection and finally return the query result","public List selectUsername ( DataSource DATABASEURI , String id ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List usernames = conn . query ( "" select username from user where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return usernames ; }","Generate syntax code: Use $DATABASEURI$ to get the database engine and connect to the database, then execute SQL ( get username column in the user table based on $id$ ) and get all the data, further close the connection and finally return the query result","<met> <mod> public </mod> type_identifier selectUsername <for> ( <for> type_identifier DATABASEURI </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( DATABASEURI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> usernames = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return usernames ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get all the columns in the 'table' table where table_name is $name$ ) and get all the data. If the query result is true, return 'True'. If there is a SQLAlchemyError exception during execution, print the exception and return False.","public boolean getRows ( JdbcTemplate conn , String name ) { try { List rows = conn . query ( "" select * from table where table_name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return false ; } else { return true ; } } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get all the columns in the 'table' table where table_name is $name$ ) and get all the data. If the query result is true, return 'True'. If there is a SQLAlchemyError exception during execution, print the exception and return False.","<met> <mod> public </mod> boolean_type getRows <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the % operator to set the SQL ( to query the column in the database where table is $table$ ) . Get the connection using $engine$. Try using the connection to execute the SQL and get all the data and return the result of the query. Finally, make sure the connection is closed. *getSampleData","public List getSampleData ( DataSource engine , String table ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; try { List result = connection . query ( "" select column from database where table= ? "" , new Object [ ] { table } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } finally { return null ; } }","Generate syntax code: Use the % operator to set the SQL ( to query the column in the database where table is $table$ ) . Get the connection using $engine$. Try using the connection to execute the SQL and get all the data and return the result of the query. Finally, make sure the connection is closed. *getSampleData","<met> <mod> public </mod> type_identifier getSampleData <for> ( <for> type_identifier engine </for> , <for> type_identifier table </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Query the first title in the books table with author as $author$ through $conn$. If the query result exists, print the query result and return it.","public Object queryTitle ( JdbcTemplate conn , String author ) { List infos = conn . query ( "" select title from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; if ( infos . isEmpty ( ) ) { return null ; } else { System . out . println ( infos . get ( 0 ) ) ; return infos . get ( 0 ) ; } }","Generate syntax code: Query the first title in the books table with author as $author$ through $conn$. If the query result exists, print the query result and return it.","<met> <mod> public </mod> type_identifier queryTitle <for> ( <for> type_identifier conn </for> , <for> type_identifier author </for> ) </for> <blo> { <loc> type_identifier <var> infos = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> infos . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> infos . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> infos . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $db_uri$. Execute the SQL statement ( query all the columns in the db_uri table based on $uri$ and get the first piece of data. Close the database connection and return the query results.,"public List queryRes ( DataSource db_uri , String uri ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List res = conn . query ( "" select * from db_uri where uri= ? "" , new Object [ ] { uri } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Get the database engine and establish a connection through $db_uri$. Execute the SQL statement ( query all the columns in the db_uri table based on $uri$ and get the first piece of data. Close the database connection and return the query results.,"<met> <mod> public </mod> type_identifier queryRes <for> ( <for> type_identifier db_uri </for> , <for> type_identifier uri </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uri } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement using $conn$ ( query all columns in the books where id is $id$ ) and get all the data. Render and return ""result_detail.html"", where the book parameter is the result of the query.","public String selectBooks ( JdbcTemplate conn , String id , Model model ) { List book = conn . query ( "" select * from books where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , book ) ; return "" result_detail.html "" ; }","Generate syntax code: Execute the SQL statement using $conn$ ( query all columns in the books where id is $id$ ) and get all the data. Render and return ""result_detail.html"", where the book parameter is the result of the query.","<met> <mod> public </mod> type_identifier selectBooks <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database with $engine$, execute the SQL ( get all the columns in the mark where the user is $username$ ) , get all the data, and then use the for loop to store each item of the query result as a list type, further closing the connection, finally, return the list content that jsonify has handled.","public List getExperienceUser ( DataSource engine , String username ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select * from mark where user = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; List returnData = new ArrayList ( ) ; for ( Object row : result ) { returnData . add ( row ) ; } return JSONObject . parseArray ( returnData . toString ( ) ) ; }","Generate syntax code: Connect to the database with $engine$, execute the SQL ( get all the columns in the mark where the user is $username$ ) , get all the data, and then use the for loop to store each item of the query result as a list type, further closing the connection, finally, return the list content that jsonify has handled.","<met> <mod> public </mod> type_identifier getExperienceUser <for> ( <for> type_identifier engine </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> returnData = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> returnData . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> returnData . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Set up SQL: query the fight information in the website table from website where fightid is $fightid$. Use $con$ to execute SQL and get the first data. Return the query result.,"public Object searchFight ( JdbcTemplate con , String fightid ) { List fights = con . query ( "" select fight from website where fightid = ? "" , new Object [ ] { fightid } , new BeanPropertyRowMapper ( List . class ) ) ; return fights . get ( 0 ) ; }",Generate syntax code: Set up SQL: query the fight information in the website table from website where fightid is $fightid$. Use $con$ to execute SQL and get the first data. Return the query result.,"<met> <mod> public </mod> type_identifier searchFight <for> ( <for> type_identifier con </for> , <for> type_identifier fightid </for> ) </for> <blo> { <loc> type_identifier <var> fights = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { fightid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> fights . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Query all name data in the passengers table where flightID is $flightID$ through $conn$, and return None if the query result is empty; otherwise, return the query result.","public List main ( JdbcTemplate conn , String flightID ) { List names = conn . query ( "" select name from passengers where flightid = ? "" , new Object [ ] { flightID } , new BeanPropertyRowMapper ( List . class ) ) ; if ( names . isEmpty ( ) ) { return null ; } else { return names ; } }","Generate syntax code: Query all name data in the passengers table where flightID is $flightID$ through $conn$, and return None if the query result is empty; otherwise, return the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier flightID </for> ) </for> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flightID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> names . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return names ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $session$ to execute the SQL statement: Query all the columns in the auction table based on $item_id$ and $timestamp$, get all the data, make sure that $session$ is closed, convert each item of the query result to dict, store it as list, and return.","public List getKMeansClassify ( JdbcTemplate session , String item_id , String timestamp ) { List ret = session . query ( "" select * from auction where item_id = ? and timestamp = ? "" , new Object [ ] { item_id , timestamp } , new BeanPropertyRowMapper ( List . class ) ) ; return ret ; }","Generate syntax code: Use $session$ to execute the SQL statement: Query all the columns in the auction table based on $item_id$ and $timestamp$, get all the data, make sure that $session$ is closed, convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> type_identifier getKMeansClassify <for> ( <for> type_identifier session </for> , <for> type_identifier item_id </for> , <for> type_identifier timestamp </for> ) </for> <blo> { <loc> type_identifier <var> ret = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { item_id , timestamp } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ret ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the date in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. If the obtained data exists, return it.","public Object book ( JdbcTemplate conn , String isbn ) { List dates = conn . query ( "" select date from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( dates . isEmpty ( ) ) { return null ; } else { return dates . get ( 0 ) ; } }","Generate syntax code: Set the SQL statement: Query the date in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. If the obtained data exists, return it.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> dates = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> dates . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> dates . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the ORM method to execute SQL statement through $session$: Query all data in the $Event$ table based on $id$. Convert the query results to dictionary and return it.,"public Object getValue ( EntityManager session , Root < Object > Event , String id ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Event ) . where ( cb . equal ( Event . get ( "" id "" ) , id ) ) ; List < Object > values = session . createQuery ( cq ) . getResultList ( ) ; return values ; }",Generate syntax code: Use the ORM method to execute SQL statement through $session$: Query all data in the $Event$ table based on $id$. Convert the query results to dictionary and return it.,"<met> <mod> public </mod> type_identifier getValue <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Event </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Event ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Event . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Try to use $postgresql$ to get the DATABASE engine and connect to the DATABASE, then execute the SQL ( get the size columns in the DATABASE where admin is $admin$ ) and get all the data, return the query results, and print the exception if an exception occurs during execution.","public List initDb ( DataSource postgresql , String admin ) { try { JdbcTemplate conn = new JdbcTemplate ( postgresql ) ; List res = conn . query ( "" select size from DATABASE where admin= ? "" , new Object [ ] { admin } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $postgresql$ to get the DATABASE engine and connect to the DATABASE, then execute the SQL ( get the size columns in the DATABASE where admin is $admin$ ) and get all the data, return the query results, and print the exception if an exception occurs during execution.","<met> <mod> public </mod> type_identifier initDb <for> ( <for> type_identifier postgresql </for> , <for> type_identifier admin </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( postgresql ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { admin } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in the BOOKS table based on $Isbn$ ) , use $conn$ to execute SQL to get the first piece of data, render and return ""book.html"", where the book parameter is the execution result.","public String book ( JdbcTemplate conn , String Isbn , Model model ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { Isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , books . get ( 0 ) ) ; return "" book.html "" ; }","Generate syntax code: Set SQL ( query all columns in the BOOKS table based on $Isbn$ ) , use $conn$ to execute SQL to get the first piece of data, render and return ""book.html"", where the book parameter is the execution result.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier Isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Execute SQL through $conn$ ( get name column in the data table with id as $idNumber$ ) and get all data. Finally return the query results.,"public List selectValue ( JdbcTemplate conn , String idNumber ) { List names = conn . query ( "" select name from data where id = ? "" , new Object [ ] { idNumber } , new BeanPropertyRowMapper ( List . class ) ) ; return names ; }",Generate syntax code: Execute SQL through $conn$ ( get name column in the data table with id as $idNumber$ ) and get all data. Finally return the query results.,"<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier idNumber </for> ) </for> <blo> { <loc> type_identifier <var> names = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { idNumber } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return names ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in test_table ) and get all the data. Use for loop to store each item in the query result into list and return.,"public List queryTilelist ( JdbcTemplate conn ) { List the_tuple = conn . query ( "" select * from test_table "" , new BeanPropertyRowMapper ( List . class ) ) ; List querylist = new ArrayList ( ) ; for ( Object tup : the_tuple ) { querylist . add ( tup ) ; } return querylist ; }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in test_table ) and get all the data. Use for loop to store each item in the query result into list and return.,"<met> <mod> public </mod> type_identifier queryTilelist <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> the_tuple = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> querylist = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier tup : the_tuple ) <blo> { <exp> <met> querylist . add <arg> ( tup ) </arg> </met> ; </exp> } </blo> </enh> <ret> return querylist ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL query statement and the content is as follows: Query all the columns in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. Return False, if the acquired data is not empty; otherwise, return True.","public boolean bookApi ( JdbcTemplate conn , String isbn ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Set the SQL query statement and the content is as follows: Query all the columns in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. Return False, if the acquired data is not empty; otherwise, return True.","<met> <mod> public </mod> boolean_type bookApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query stock_name in the stock table ) and get all the data. Close $conn$ and transfer each item of data in the query results to list and return.,"public List queryStock ( JdbcTemplate conn ) { List stock_names = conn . query ( "" select stock_name from stock "" , new BeanPropertyRowMapper ( List . class ) ) ; return stock_names ; }",Generate syntax code: Use $conn$ to execute SQL ( query stock_name in the stock table ) and get all the data. Close $conn$ and transfer each item of data in the query results to list and return.,"<met> <mod> public </mod> type_identifier queryStock <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> stock_names = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return stock_names ; </ret> } </blo> </met>"
"Generate origin code: Using $db$ to connect to the database, try to execute SQL ( get the user_id column in the query_users table processed by the counting method where user_name is $user1$ ) and get all the data, then return the query results, finally ensure that the connection is closed.","public List testBranch ( DataSource db , String user1 ) { JdbcTemplate connection = new JdbcTemplate ( db ) ; try { List res = connection . query ( "" select count(user_id) from query_users where user_name= ? "" , new Object [ ] { user1 } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Using $db$ to connect to the database, try to execute SQL ( get the user_id column in the query_users table processed by the counting method where user_name is $user1$ ) and get all the data, then return the query results, finally ensure that the connection is closed.","<met> <mod> public </mod> type_identifier testBranch <for> ( <for> type_identifier db </for> , <for> type_identifier user1 </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user1 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up SQL ( query movietitle in the imdb_movies where year is $year$ ) , execute SQL with a $conn$ connection, and loop through the query results with a for loop and return.","public Object getMovies ( JdbcTemplate conn , String year ) { List resultproxy = conn . query ( "" select movietitle from imdb_movies where year= ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : resultproxy ) { return r ; } }","Generate syntax code: Set up SQL ( query movietitle in the imdb_movies where year is $year$ ) , execute SQL with a $conn$ connection, and loop through the query results with a for loop and return.","<met> <mod> public </mod> type_identifier getMovies <for> ( <for> type_identifier conn </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> resultproxy = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : resultproxy ) <blo> { <ret> return r ; </ret> } </blo> </enh> } </blo> </met>"
"Generate origin code: Execute SQL ( query address information in personal_info where id is $id$ and birth is $birth$ ) with $conn$ and get all the data. Finally, return the result of the query as a list.","public Object func1 ( JdbcTemplate conn , String id , String birth ) { List addresses = conn . query ( "" select address from personal_info where id=? and birth= ? "" , new Object [ ] { id , birth } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object ad : addresses ) { return ad ; } }","Generate syntax code: Execute SQL ( query address information in personal_info where id is $id$ and birth is $birth$ ) with $conn$ and get all the data. Finally, return the result of the query as a list.","<met> <mod> public </mod> type_identifier func1 <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier birth </for> ) </for> <blo> { <loc> type_identifier <var> addresses = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , birth } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier ad : addresses ) <blo> { <ret> return ad ; </ret> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $db$ to execute SQL ( get the scheduler column in the ModelSetting table according to $key$ ) , get the first piece of data, and return the query result. If an exception occurs during execution, print the exception and return False.","public Object getSetting ( JdbcTemplate db , String key ) { try { List res = db . query ( "" select scheduler from ModelSetting where key= ? "" , new Object [ ] { key } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } }","Generate syntax code: Try to use $db$ to execute SQL ( get the scheduler column in the ModelSetting table according to $key$ ) , get the first piece of data, and return the query result. If an exception occurs during execution, print the exception and return False.","<met> <mod> public </mod> type_identifier getSetting <for> ( <for> type_identifier db </for> , <for> type_identifier key </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { key } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up the SQL ( query the id column in the flight table based on $name$ ) , use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through all the obtained query results, and use the format string matching method to print the 'id' field of each piece of data and $name$.","public List getOne ( JdbcTemplate conn , String datum ) { List rows = conn . query ( "" select * from table where datum= ? "" , new Object [ ] { datum } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }","Generate syntax code: Set up the SQL ( query the id column in the flight table based on $name$ ) , use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through all the obtained query results, and use the format string matching method to print the 'id' field of each piece of data and $name$.","<met> <mod> public </mod> type_identifier getOne <for> ( <for> type_identifier conn </for> , <for> type_identifier datum </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datum } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement ( query the first piece of data in the $Country$ table based on $id$ ) using ORM method through the $conn$ connection, and set the assertion to determine the length of the returned result as 0.","public void testCountryIdNotNull ( EntityManager conn , Root < Object > Country , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Country ) . where ( cb . equal ( Country . get ( "" url "" ) , id ) ) ; List < Object > country_ids = conn . createQuery ( cq ) . getResultList ( ) ; assert country_ids . size ( ) == 0 ; }","Generate syntax code: Execute the SQL statement ( query the first piece of data in the $Country$ table based on $id$ ) using ORM method through the $conn$ connection, and set the assertion to determine the length of the returned result as 0.","<met> <mod> public </mod> void_type testCountryIdNotNull <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Country </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Country ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Country . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> country_ids = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> country_ids . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query the WFREQ column in the samples_metadata table where sampleid is $query_param$ ) , get the first row of data, print the query result, and return the 0th element of the query data.","public Object getWfreq ( JdbcTemplate conn , String query_param ) { List wfreq_data = conn . query ( "" select WFREQ from samples_metadata where sampleid= ? "" , new Object [ ] { query_param } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( wfreq_data . get ( 0 ) ) ; return JSONObject . parseObject ( wfreq_data . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Execute SQL with $conn$ ( query the WFREQ column in the samples_metadata table where sampleid is $query_param$ ) , get the first row of data, print the query result, and return the 0th element of the query data.","<met> <mod> public </mod> type_identifier getWfreq <for> ( <for> type_identifier conn </for> , <for> type_identifier query_param </for> ) </for> <blo> { <loc> type_identifier <var> wfreq_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { query_param } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> wfreq_data . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> wfreq_data . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $pg_connstring$. Execute the SQL statement ( query the first piece of data in the group column of the table table based on $count$ ) , close the connection, and return the query results.","public List dbConnect ( DataSource TimeTable , String summary ) { JdbcTemplate engine = new JdbcTemplate ( TimeTable ) ; List laten = engine . query ( "" select time from comments where summary = ? "" , new Object [ ] { summary } , new BeanPropertyRowMapper ( List . class ) ) ; return laten ; }","Generate syntax code: Get the database engine and establish a connection through $pg_connstring$. Execute the SQL statement ( query the first piece of data in the group column of the table table based on $count$ ) , close the connection, and return the query results.","<met> <mod> public </mod> type_identifier dbConnect <for> ( <for> type_identifier TimeTable </for> , <for> type_identifier summary </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( TimeTable ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> laten = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { summary } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return laten ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $default_engine$, execute SQL ( query all columns in the DATABASE table based on $name$ ) , get all the query results, close the connection, and return the query results.","public List createDatabase ( DataSource default_engine , String name ) { JdbcTemplate engine = new JdbcTemplate ( default_engine ) ; List res = engine . query ( "" select * from DATABASE where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect the database with $default_engine$, execute SQL ( query all columns in the DATABASE table based on $name$ ) , get all the query results, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier createDatabase <for> ( <for> type_identifier default_engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( default_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( query the jobid, jobdesc and companyname columns in the jobs table ) , get all the query results, convert them to list. Execute SQL ( query the userid and username columns in the jobseekers table ) , get all the query results, convert them to list, return the rendered ""admin.html"" page, where the parameter jobs is the result of the first query and users is the result of the second query.","public String show ( JdbcTemplate db , Model model ) { List jobs = db . query ( "" select jobid, jobdesc, companyname from jobs "" , new BeanPropertyRowMapper ( List . class ) ) ; List users = db . query ( "" select userid, username from jobseekers "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" jobs "" , jobs ) ; model . addAttribute ( "" users "" , users ) ; return "" admin.html "" ; }","Generate syntax code: Use $db$ to execute SQL ( query the jobid, jobdesc and companyname columns in the jobs table ) , get all the query results, convert them to list. Execute SQL ( query the userid and username columns in the jobseekers table ) , get all the query results, convert them to list, return the rendered ""admin.html"" page, where the parameter jobs is the result of the first query and users is the result of the second query.","<met> <mod> public </mod> type_identifier show <for> ( <for> type_identifier db </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> jobs = <met> db . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> users = <met> db . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , jobs ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Execute SQL with $conn$ ( get all the columns in the products based on $id$ ) and get all the data. Store each item of the query result as dictionary type and return the dictionary content.,"public List crudesqlalchemySelect ( JdbcTemplate conn , String id ) { List selects = conn . query ( "" select * from products where id =? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List jsonList = new ArrayList ( ) ; for ( Object r : selects ) { jsonList . add ( r ) ; } return jsonList ; }",Generate syntax code: Execute SQL with $conn$ ( get all the columns in the products based on $id$ ) and get all the data. Store each item of the query result as dictionary type and return the dictionary content.,"<met> <mod> public </mod> type_identifier crudesqlalchemySelect <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> selects = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonList = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : selects ) <blo> { <exp> <met> jsonList . add <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> <ret> return jsonList ; </ret> } </blo> </met>"
"Generate origin code: Create a database engine with $DSQLALCHEMY_DATABASE_URI$ and create a connection. Execute SQL: Query Name in users table, get all the data, close the database connection and return the obtained data.","public List usersList ( DataSource DSQLALCHEMY_DATABASE_URI ) { JdbcTemplate engine = new JdbcTemplate ( DSQLALCHEMY_DATABASE_URI ) ; List Users = engine . query ( "" select name from users "" , new BeanPropertyRowMapper ( List . class ) ) ; return Users ; }","Generate syntax code: Create a database engine with $DSQLALCHEMY_DATABASE_URI$ and create a connection. Execute SQL: Query Name in users table, get all the data, close the database connection and return the obtained data.","<met> <mod> public </mod> type_identifier usersList <for> ( <for> type_identifier DSQLALCHEMY_DATABASE_URI </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DSQLALCHEMY_DATABASE_URI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> Users = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return Users ; </ret> } </blo> </met>"
"Generate origin code: If clause exists, then use $conn$ connection to execute SQL statement: get all columns in data based on $clause$, get all data and store query result as list and return it. Otherwise return None.","public Object findAll ( JdbcTemplate conn , String clause ) { if ( clause != null ) { List rs = conn . query ( "" select * from data where clause = ? "" , new Object [ ] { clause } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object item : rs ) { return item ; } } else { return null ; } }","Generate syntax code: If clause exists, then use $conn$ connection to execute SQL statement: get all columns in data based on $clause$, get all data and store query result as list and return it. Otherwise return None.","<met> <mod> public </mod> type_identifier findAll <for> ( <for> type_identifier conn </for> , <for> type_identifier clause </for> ) </for> <blo> { <if_> if <par> ( <bin> clause != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { clause } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : rs ) <blo> { <ret> return item ; </ret> } </blo> </enh> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the requested method is ""POST"", set up the SQL statement, execute the SQL statement ( query all columns in users where the name of user is $username$ ) with $conn$ and get all the data. The render returns ""adminlogin.html"" with the parameter user as the result of the query. Otherwise render and return ""adminlogin.html"".","public String adminLogin ( HttpRequest request , JdbcTemplate conn , String username , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" user "" , user ) ; return "" adminlogin.html "" ; } else { return "" adminlogin.html "" ; } }","Generate syntax code: If the requested method is ""POST"", set up the SQL statement, execute the SQL statement ( query all columns in users where the name of user is $username$ ) with $conn$ and get all the data. The render returns ""adminlogin.html"" with the parameter user as the result of the query. Otherwise render and return ""adminlogin.html"".","<met> <mod> public </mod> type_identifier adminLogin <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , user ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to query all columns in the users where taname is $taname$. Return False if the query result is empty, or True if it is not.","public boolean queryPage ( JdbcTemplate conn , String taname ) { List user = conn . query ( "" select * from users where taname= ? "" , new Object [ ] { taname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Use $conn$ to query all columns in the users where taname is $taname$. Return False if the query result is empty, or True if it is not.","<met> <mod> public </mod> boolean_type queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier taname </for> ) </for> <blo> { <loc> type_identifier <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { taname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the cursor method of $dbapi_connection$, then try to execute SQL ( get all columns in items table based on $item_id$ ) and get all the data, further close the connection and return the query result. If not try then return False directly.","public Object dbApiConnection ( DataSource dbapi_connection , String item_id ) { JdbcTemplate engine = new JdbcTemplate ( dbapi_connection ) ; try { List results = engine . query ( "" select * from items where item_id = ? "" , new Object [ ] { item_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Set the cursor method of $dbapi_connection$, then try to execute SQL ( get all columns in items table based on $item_id$ ) and get all the data, further close the connection and return the query result. If not try then return False directly.","<met> <mod> public </mod> type_identifier dbApiConnection <for> ( <for> type_identifier dbapi_connection </for> , <for> type_identifier item_id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( dbapi_connection ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { item_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Execute the SQL statement ( get all the name and manufacture in the Items according to $type$ ) , convert each item of the query result to dict, store it as list and return.","public List getBeers ( DataSource engine , String type ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select name, manufacture from items where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect to the database according to $engine$. Execute the SQL statement ( get all the name and manufacture in the Items according to $type$ ) , convert each item of the query result to dict, store it as list and return.","<met> <mod> public </mod> type_identifier getBeers <for> ( <for> type_identifier engine </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: If $conId$ is not empty, set the SQL based on the java expression ( query the oneSecBars column in the $equity_contracts$ table based on $conId$ ) . Execute SQL through $conn$, get all the data and return the query results.","public List saveToDb ( EntityManager conn , Root < Object > equity_contracts , String conId ) { if ( conId != null ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( equity_contracts ) . where ( cb . equal ( equity_contracts . get ( "" conId "" ) , conId ) ) ; List < Object > recs = conn . createQuery ( cq ) . getResultList ( ) ; return recs ; } else { return null ; } }","Generate syntax code: If $conId$ is not empty, set the SQL based on the java expression ( query the oneSecBars column in the $equity_contracts$ table based on $conId$ ) . Execute SQL through $conn$, get all the data and return the query results.","<met> <mod> public </mod> type_identifier saveToDb <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> equity_contracts </for> , <for> type_identifier conId </for> ) </for> <blo> { <if_> if <par> ( <bin> conId != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( equity_contracts ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> equity_contracts . get <arg> ( string_literal ) </arg> </met> , conId ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the java expression to set up SQL: To query all the information in the $table_name$ table based on $drop_id$. Use $conn$ to execute SQL and get all the data, and finally return the query results.","public List sqlAlchemy ( EntityManager conn , Root < Object > table_name , String drop_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_name ) . where ( cb . equal ( table_name . get ( "" drop_id "" ) , drop_id ) ) ; List < Object > drop_recs = conn . createQuery ( cq ) . getResultList ( ) ; return drop_recs ; }","Generate syntax code: Use the java expression to set up SQL: To query all the information in the $table_name$ table based on $drop_id$. Use $conn$ to execute SQL and get all the data, and finally return the query results.","<met> <mod> public </mod> type_identifier sqlAlchemy <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_name </for> , <for> type_identifier drop_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table_name ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table_name . get <arg> ( string_literal ) </arg> </met> , drop_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> drop_recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return drop_recs ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement to get all the category_id in the $articles_table$ table based on $year$, use $conn$ connection to execute the SQL and get the data. Store each element of the query result as list and return the contents of the list.","public List getIngetArticlesForRoundupfo ( EntityManager conn , Root < Object > articles_table , String year ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( articles_table ) . where ( cb . equal ( articles_table . get ( "" year "" ) , year ) ) ; List < Object > rp = conn . createQuery ( cq ) . getResultList ( ) ; List articles_for_roundup = new ArrayList ( ) ; for ( Object i : rp ) { articles_for_roundup . add ( i ) ; } return articles_for_roundup ; }","Generate syntax code: Use the java expression to set the SQL statement to get all the category_id in the $articles_table$ table based on $year$, use $conn$ connection to execute the SQL and get the data. Store each element of the query result as list and return the contents of the list.","<met> <mod> public </mod> type_identifier getIngetArticlesForRoundupfo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> articles_table </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( articles_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> articles_table . get <arg> ( string_literal ) </arg> </met> , year ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rp = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> articles_for_roundup = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : rp ) <blo> { <exp> <met> articles_for_roundup . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return articles_for_roundup ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the value column in the metadata where name is $name$ ) with $conn$ and get all the data, return the query result if the query result is true, otherwise return None.","public List get ( JdbcTemplate conn , String name ) { List result = conn . query ( "" select value from metadata where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: Execute the SQL ( get the value column in the metadata where name is $name$ ) with $conn$ and get all the data, return the query result if the query result is true, otherwise return None.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $db$ to execute SQL according to the java expression ( get the nombre column in the $clientes$ table where clienteid is $cid$, email is $email$, and password is $pwd$ ) , get the first piece of data, return the query result, and return False if an exception occurs during execution.","public List finUser ( EntityManager conn , Root < Object > table_name , String drop_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table_name ) . where ( cb . equal ( table_name . get ( "" drop_id "" ) , drop_id ) ) ; List < Object > drop_recs = conn . createQuery ( cq ) . getResultList ( ) ; return drop_recs ; }","Generate syntax code: Try to use $db$ to execute SQL according to the java expression ( get the nombre column in the $clientes$ table where clienteid is $cid$, email is $email$, and password is $pwd$ ) , get the first piece of data, return the query result, and return False if an exception occurs during execution.","<met> <mod> public </mod> type_identifier finUser <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_name </for> , <for> type_identifier drop_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table_name ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table_name . get <arg> ( string_literal ) </arg> </met> , drop_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> drop_recs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return drop_recs ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL statement ( query all the title in the books table based on $author$ ) and return all the query results.,"public List main ( JdbcTemplate conn , String author ) { List res = conn . query ( "" select title from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Use $conn$ to execute the SQL statement ( query all the title in the books table based on $author$ ) and return all the query results.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier author </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( all columns in the passengers table where the flight_code is $flight_id$ ) and get all the data. If the length of the query result is equal to 0, return None. Otherwise,use for loop to print each item of data in the query result.","public List selectPassenger ( JdbcTemplate db , String flight_id ) { List passengers = db . query ( "" select * from passengers where flight_code= ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passengers . isEmpty ( ) ) { return null ; } else { for ( Object passenger : passengers ) { System . out . println ( passenger ) ; } return passengers ; } }","Generate syntax code: Execute the SQL using $db$ ( all columns in the passengers table where the flight_code is $flight_id$ ) and get all the data. If the length of the query result is equal to 0, return None. Otherwise,use for loop to print each item of data in the query result.","<met> <mod> public </mod> type_identifier selectPassenger <for> ( <for> type_identifier db </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> passengers = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> passengers . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <enh> for ( type_identifier passenger : passengers ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( passenger ) </arg> </met> ; </exp> } </blo> </enh> <ret> return passengers ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the request method is GET, use redirect to turn to the ""/login"" page. Otherwise execute the following code: Set SQL ( query all columns in books table based on $isbn$, $title$ and $author$ ) ; use $conn$ to execute SQL and get all data and if query results exist, return directly, otherwise use redirect to ""/"".","public Object search ( HttpRequest request , JdbcTemplate conn , String isbn , String title , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List rows = conn . query ( "" select * from books where isbn =? and title =? and author = ? "" , new Object [ ] { isbn , title , author } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return "" / "" ; } else { return rows ; } } else { return "" /login "" ; } }","Generate syntax code: If the request method is GET, use redirect to turn to the ""/login"" page. Otherwise execute the following code: Set SQL ( query all columns in books table based on $isbn$, $title$ and $author$ ) ; use $conn$ to execute SQL and get all data and if query results exist, return directly, otherwise use redirect to ""/"".","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return rows ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $db$, where the echo parameter is True and establish a connection. Execute the SQL statement ( get the Nombre_de_Places column in the projection based on $ProjectionId$ ) and get all the data. Close the connection and return the 'Place' and query result processed by jsonify.","public JSONObject rerservation ( DataSource db , String ProjectionId ) { JdbcTemplate connection = new JdbcTemplate ( db ) ; List res = connection . query ( "" select Nombre_de_Places from projection where ProjectionId = ? "" , new Object [ ] { ProjectionId } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" Place "" , res ) ; return jsonObject ; }","Generate syntax code: Get the database engine through $db$, where the echo parameter is True and establish a connection. Execute the SQL statement ( get the Nombre_de_Places column in the projection based on $ProjectionId$ ) and get all the data. Close the connection and return the 'Place' and query result processed by jsonify.","<met> <mod> public </mod> type_identifier rerservation <for> ( <for> type_identifier db </for> , <for> type_identifier ProjectionId </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ProjectionId } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the users table according to $wcloud_creator$ ) , get all the query results, and return True if there are query results.","public boolean destroyDb ( JdbcTemplate conn , String wcloud_creator ) { List check = conn . query ( "" select * from users where wcloud_creator= ? "" , new Object [ ] { wcloud_creator } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check . isEmpty ( ) ) { return false ; } else { return true ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the users table according to $wcloud_creator$ ) , get all the query results, and return True if there are query results.","<met> <mod> public </mod> boolean_type destroyDb <for> ( <for> type_identifier conn </for> , <for> type_identifier wcloud_creator </for> ) </for> <blo> { <loc> type_identifier <var> check = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { wcloud_creator } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> check . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return true ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the string format method to set SQL: Query all columns in the USERS table based on $user_id$ and $last_name$. Use $conn$ to execute SQL and get all the data. Finally, return the query results.","public List sampleQuery ( JdbcTemplate conn , String user_id , String last_name ) { List values = conn . query ( "" select * from users where user_id=? and last_name= ? "" , new Object [ ] { user_id , last_name } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }","Generate syntax code: Use the string format method to set SQL: Query all columns in the USERS table based on $user_id$ and $last_name$. Use $conn$ to execute SQL and get all the data. Finally, return the query results.","<met> <mod> public </mod> type_identifier sampleQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier last_name </for> ) </for> <blo> { <loc> type_identifier <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , last_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL statement through the $conn$ connection and the content is as follows: Query all origin and destination information in the flights table. Use for loop to store each element in the query result into list and return the list content.,"public List main ( JdbcTemplate conn ) { List flights = conn . query ( "" select origin, destination from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; List flights_list = new ArrayList ( ) ; for ( Object flight : flights ) { flights_list . add ( flight ) ; } return flights_list ; }",Generate syntax code: Execute the SQL statement through the $conn$ connection and the content is as follows: Query all origin and destination information in the flights table. Use for loop to store each element in the query result into list and return the list content.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> flights_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> flights_list . add <arg> ( flight ) </arg> </met> ; </exp> } </blo> </enh> <ret> return flights_list ; </ret> } </blo> </met>"
Generate origin code: Use $host$ to get the database engine and establish a connection. Execute the SQL statement ( query login in the users table where the name of user is $username$ ) . Print all the information line by line. Make sure the database connection is closed.,"public void func1 ( DataSource host , String username ) { JdbcTemplate connection = new JdbcTemplate ( host ) ; List result = connection . query ( "" select login from users where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } }",Generate syntax code: Use $host$ to get the database engine and establish a connection. Execute the SQL statement ( query login in the users table where the name of user is $username$ ) . Print all the information line by line. Make sure the database connection is closed.,"<met> <mod> public </mod> void_type func1 <for> ( <for> type_identifier host </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Get a connection from the 'connection' pool through $db$, create a cursor object through the connection, and use the java expression to execute the SQL statement through the cursor object: Query all the id data in the $testing$ table and return the query results.","public List testIterable ( EntityManager db , Root < Object > testing ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( testing ) ; List < Object > data = db . createQuery ( cq ) . getResultList ( ) ; List re = new ArrayList ( ) ; for ( Object o : data ) { re . add ( JSONObject . parseObject ( o . toString ( ) ) . getString ( "" id "" ) ) ; } return re ; }","Generate syntax code: Get a connection from the 'connection' pool through $db$, create a cursor object through the connection, and use the java expression to execute the SQL statement through the cursor object: Query all the id data in the $testing$ table and return the query results.","<met> <mod> public </mod> type_identifier testIterable <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testing </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( testing ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> re = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier o : data ) <blo> { <exp> <met> re . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return re ; </ret> } </blo> </met>"
"Generate origin code: Set sql ( query the number of the dist column in the runs table based on $user_id$, $dur_secs$ and $date_now$ ) , use $conn$ to execute SQL, get the first piece of data, and return the query results.","public List index ( JdbcTemplate conn , String user_id , String dur_secs , String date_now ) { List res = conn . query ( "" select count(dist) from runs where user_id=? and dur_secs<? and date_now< ? "" , new Object [ ] { user_id , dur_secs , date_now } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set sql ( query the number of the dist column in the runs table based on $user_id$, $dur_secs$ and $date_now$ ) , use $conn$ to execute SQL, get the first piece of data, and return the query results.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier dur_secs </for> , <for> type_identifier date_now </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , dur_secs , date_now } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Try to use the ORM method to get all the columns in the $Customer$ table with 'id': $id$ via $session$. Then execute the submit method and return the obtained result, otherwise execute the rollback method, and finally make sure the $session$ connection is closed.","public List updateById ( EntityManager session , Root < Object > Customer , String id ) { try { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Customer ) . where ( cb . equal ( Customer . get ( "" id "" ) , id ) ) ; List < Object > res = session . createQuery ( cq ) . getResultList ( ) ; return res ; } catch ( Exception e ) { return null ; } finally { return null ; } }","Generate syntax code: Try to use the ORM method to get all the columns in the $Customer$ table with 'id': $id$ via $session$. Then execute the submit method and return the obtained result, otherwise execute the rollback method, and finally make sure the $session$ connection is closed.","<met> <mod> public </mod> type_identifier updateById <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Customer </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Customer ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Customer . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
Generate origin code: Use java expressions to set SQL ( query the id in the $ranobe_table$ table when title equals $title_name$ ) . Use $conn$ to execute SQL and get the first piece of data. Return 0th elementof the query result.,"public Object queryRanobe ( EntityManager conn , Root < Object > ranobe_table , String title_name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( ranobe_table ) . where ( cb . equal ( ranobe_table . get ( "" title "" ) , title_name ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }",Generate syntax code: Use java expressions to set SQL ( query the id in the $ranobe_table$ table when title equals $title_name$ ) . Use $conn$ to execute SQL and get the first piece of data. Return 0th elementof the query result.,"<met> <mod> public </mod> type_identifier queryRanobe <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> ranobe_table </for> , <for> type_identifier title_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( ranobe_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> ranobe_table . get <arg> ( string_literal ) </arg> </met> , title_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the anons information in the col table based on $anonsid$ ) . Take the keys of the query result as the first element in the tuple, and each item of the query result cursor as the second element in the tuple. Finally, convert each tuple to dict and store in list. Finally, retutn the data in list.","public List selectSamename ( JdbcTemplate conn , String anonsid ) { List res = conn . query ( "" select anons from col where anonsid= ? "" , new Object [ ] { anonsid } , new BeanPropertyRowMapper ( List . class ) ) ; List anonDict = new ArrayList ( ) ; for ( Object o : res ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" keys "" , JSONObject . parseObject ( o . toString ( ) ) . get ( 0 ) ) ; jsonObject . put ( "" tuple "" , JSONObject . parseObject ( o . toString ( ) ) . get ( 1 ) ) ; anonDict . add ( jsonObject ) ; } return anonDict ; }","Generate syntax code: Use $conn$ to execute SQL ( query the anons information in the col table based on $anonsid$ ) . Take the keys of the query result as the first element in the tuple, and each item of the query result cursor as the second element in the tuple. Finally, convert each tuple to dict and store in list. Finally, retutn the data in list.","<met> <mod> public </mod> type_identifier selectSamename <for> ( <for> type_identifier conn </for> , <for> type_identifier anonsid </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { anonsid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> anonDict = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier o : res ) <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> o . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> anonDict . add <arg> ( jsonObject ) </arg> </met> ; </exp> } </blo> </enh> <ret> return anonDict ; </ret> } </blo> </met>"
"Generate origin code: If $name$ exists, use $conn$ to execute the SQL statement ( get all the columns in the USER where name is $name$ ) and get all the data. Finally, all the results are returned. Otherwise ( $name$ does not exist ) return False.","public Object selectUser ( JdbcTemplate conn , String name ) { if ( name != null ) { List results = conn . query ( "" select * from user where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } else { return false ; } }","Generate syntax code: If $name$ exists, use $conn$ to execute the SQL statement ( get all the columns in the USER where name is $name$ ) and get all the data. Finally, all the results are returned. Otherwise ( $name$ does not exist ) return False.","<met> <mod> public </mod> type_identifier selectUser <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <if_> if <par> ( <bin> name != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to connect to the database and create a cursor object with the cursor ( ) method, execute the SQL ( query all the columns in the cars table based on $votes$ ) and get all the data. Use for loop to store each element of the query result in list, and return the list contents.","public List getLeaderboard ( DataSource db , String votes ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; List results = engine . query ( "" select * from cars where votes = ? "" , new Object [ ] { votes } , new BeanPropertyRowMapper ( List . class ) ) ; List returnArray = new ArrayList ( ) ; for ( Object result : results ) { returnArray . add ( result ) ; } return returnArray ; }","Generate syntax code: Use $db$ to connect to the database and create a cursor object with the cursor ( ) method, execute the SQL ( query all the columns in the cars table based on $votes$ ) and get all the data. Use for loop to store each element of the query result in list, and return the list contents.","<met> <mod> public </mod> type_identifier getLeaderboard <for> ( <for> type_identifier db </for> , <for> type_identifier votes </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { votes } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> returnArray = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> returnArray . add <arg> ( result ) </arg> </met> ; </exp> } </blo> </enh> <ret> return returnArray ; </ret> } </blo> </met>"
"Generate origin code: Open the ""spis.csv"" file and read, use for loop on the read file, loop via $conn$ to execute the SQL ( get all the columns in articles based on title, get all the data and print the query result.","public void main ( JdbcTemplate conn ) { String filePath = "" spis.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String title = sc . nextLine ( ) ; List res = conn . query ( "" select * from articles where title= ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open the ""spis.csv"" file and read, use for loop on the read file, loop via $conn$ to execute the SQL ( get all the columns in articles based on title, get all the data and print the query result.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> title = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to connect to the database using the start method of $engine$, execute the SQL ( get all columns in the t_ccs table where the project_id is $p1$, the check_id is $c1$, and color is $green$ ) and get all the data, then return the result of the query if an exception occurs during execution, an exception is thrown on the basis of Error.","public List testCompositePrimaryKey ( DataSource engine , String p1 , String c1 , String green ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; try { List res = conn . query ( "" select * from t_ccs where project_id= ? and check_id=? and color= ? "" , new Object [ ] { p1 , c1 , green } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to connect to the database using the start method of $engine$, execute the SQL ( get all columns in the t_ccs table where the project_id is $p1$, the check_id is $c1$, and color is $green$ ) and get all the data, then return the result of the query if an exception occurs during execution, an exception is thrown on the basis of Error.","<met> <mod> public </mod> type_identifier testCompositePrimaryKey <for> ( <for> type_identifier engine </for> , <for> type_identifier p1 </for> , <for> type_identifier c1 </for> , <for> type_identifier green </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { p1 , c1 , green } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up SQL ( query the reaction column in the reactions table based on $message_id$ ) , use $conn$ to execute SQL, get all the query results, and return the query results.","public List submitVote ( JdbcTemplate conn , String message_id ) { List results = conn . query ( "" select reaction from reactions where message_id = ? "" , new Object [ ] { message_id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set up SQL ( query the reaction column in the reactions table based on $message_id$ ) , use $conn$ to execute SQL, get all the query results, and return the query results.","<met> <mod> public </mod> type_identifier submitVote <for> ( <for> type_identifier conn </for> , <for> type_identifier message_id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { message_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set the query statement to: Get all the columns in jihemei based on $content$, use $conn$ connection to execute SQL to get all the data and return them.","public List searchContent ( JdbcTemplate conn , String content ) { List items = conn . query ( "" select * from jihemei where content = ? "" , new Object [ ] { content } , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }","Generate syntax code: Set the query statement to: Get all the columns in jihemei based on $content$, use $conn$ connection to execute SQL to get all the data and return them.","<met> <mod> public </mod> type_identifier searchContent <for> ( <for> type_identifier conn </for> , <for> type_identifier content </for> ) </for> <blo> { <loc> type_identifier <var> items = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { content } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the manufacturer column in the Consumables table based on $consumable$ ) , use $conn$ to execute SQL and get all the query results. If the query result is empty, return None, otherwise use for loop to convert each piece of the query result to dict, and store it in list, and then return the list.","public List findConsumable ( JdbcTemplate conn , String consumable ) { List rs = conn . query ( "" select manufacturer from consumables where consumable = ? "" , new Object [ ] { consumable } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rs . isEmpty ( ) ) { return null ; } else { return rs ; } }","Generate syntax code: Set SQL ( query the manufacturer column in the Consumables table based on $consumable$ ) , use $conn$ to execute SQL and get all the query results. If the query result is empty, return None, otherwise use for loop to convert each piece of the query result to dict, and store it in list, and then return the list.","<met> <mod> public </mod> type_identifier findConsumable <for> ( <for> type_identifier conn </for> , <for> type_identifier consumable </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { consumable } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rs . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return rs ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db$ to create a cursor object, try to execute SQL ( query the result column in the comic table based on $taskid$ ) , get all the data, and return the query data; if an Exception occurs during execution, the exception is printed.","public List bookPage ( DataSource db , String taskid ) { JdbcTemplate engine = new JdbcTemplate ( db ) ; try { List allRows = engine . query ( "" select result from comic where taskid= ? "" , new Object [ ] { taskid } , new BeanPropertyRowMapper ( List . class ) ) ; return allRows ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Use $db$ to create a cursor object, try to execute SQL ( query the result column in the comic table based on $taskid$ ) , get all the data, and return the query data; if an Exception occurs during execution, the exception is printed.","<met> <mod> public </mod> type_identifier bookPage <for> ( <for> type_identifier db </for> , <for> type_identifier taskid </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> allRows = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { taskid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return allRows ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $cursor$ to execute SQL ( query all columns in pg_enum based on $enumtypid$ ) and get all the data. Close $cursor$ and return the query results as list. If an exception occurs, the specific exception information should be printed.","public List enumeration ( JdbcTemplate cursor , String enumtypid ) { try { List enumera = cursor . query ( "" select * from table where datum= ? "" , new Object [ ] { enumtypid } , new BeanPropertyRowMapper ( List . class ) ) ; return enumera ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $cursor$ to execute SQL ( query all columns in pg_enum based on $enumtypid$ ) and get all the data. Close $cursor$ and return the query results as list. If an exception occurs, the specific exception information should be printed.","<met> <mod> public </mod> type_identifier enumeration <for> ( <for> type_identifier cursor </for> , <for> type_identifier enumtypid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> enumera = <met> cursor . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { enumtypid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return enumera ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $db_uri$ to create the database engine and connect. Execute the SQL statement: query all the screen_name data in the $table$ table and for loop iterates through all the acquired data and prints. Open the test.txt file for write operation, and convert the execution result into a string to write into the file.","public void scrapeUsers ( EntityManager db_uri , Root < Object > table ) { CriteriaBuilder cb = db_uri . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) ; List < Object > rows = db_uri . createQuery ( cq ) . getResultList ( ) ; for ( Object row : rows ) { System . out . println ( row ) ; } try { FileWriter fileWriter = new FileWriter ( "" test.txt "" ) ; fileWriter . write ( rows . toString ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Use $db_uri$ to create the database engine and connect. Execute the SQL statement: query all the screen_name data in the $table$ table and for loop iterates through all the acquired data and prints. Open the test.txt file for write operation, and convert the execution result into a string to write into the file.","<met> <mod> public </mod> void_type scrapeUsers <for> ( <for> type_identifier db_uri </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db_uri . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( table ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> <met> db_uri . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <try> try <blo> { <loc> type_identifier <var> fileWriter = <obj> new type_identifier <arg> ( string_literal ) </arg> </obj> </var> ; </loc> <exp> <met> fileWriter . write <arg> ( <met> rows . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up SQL ( query all the information in the vuelos table based on $id$ ) , use $conn$ to execute SQL and get all the query results, return the rendered ""index.html"" page with the vuelos parameter being the query result.","public String index ( JdbcTemplate conn , String id , Model model ) { List vuelos = conn . query ( "" select * from vuelos where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" vuelos "" , vuelos ) ; return "" index.html "" ; }","Generate syntax code: Set up SQL ( query all the information in the vuelos table based on $id$ ) , use $conn$ to execute SQL and get all the query results, return the rendered ""index.html"" page with the vuelos parameter being the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> vuelos = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , vuelos ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If 'id' is in the cookies of request, use $conn$ to execute SQL ( query all columns in the $queryRecommend$ table when uuid is $id$ ) , get all the data, and return the rendered 'recommend.html', where the parameter result is the query result. If 'id' is not in cookies, use url_for and redirect to jump to 'index'.","public String selectRes ( EntityManager conn , Root < Object > queryRecommend , String id , HttpSession session , Model model ) { if ( session . getAttribute ( "" id "" ) != null ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( queryRecommend ) . where ( cb . equal ( queryRecommend . get ( "" uuid "" ) , id ) ) ; List < Object > values = conn . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" result "" , values ) ; return "" recommend.html "" ; } else { return "" index "" ; } }","Generate syntax code: If 'id' is in the cookies of request, use $conn$ to execute SQL ( query all columns in the $queryRecommend$ table when uuid is $id$ ) , get all the data, and return the rendered 'recommend.html', where the parameter result is the query result. If 'id' is not in cookies, use url_for and redirect to jump to 'index'.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryRecommend </for> , <for> type_identifier id </for> , <for> type_identifier session </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <bin> <met> session . getAttribute <arg> ( string_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( queryRecommend ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> queryRecommend . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , values ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: and $engine$ to connect the database and execute SQL ( get the drinkerName column in the 'D' table where drinkerID is $dID$ ) , get all the data, return None if the query result is None, use for loop to convert each item of the query result to a dictionary type and return.","public List getDrinkerTrans ( DataSource engine , String dID ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List names = con . query ( "" select time from comments where summary = ? "" , new Object [ ] { summdIDary } , new BeanPropertyRowMapper ( List . class ) ) ; if ( names . isEmpty ( ) ) { return null ; } else { return names ; } } public List getDrinkerTrans ( DataSource engine , String dID ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List names = con . query ( "" select time from comments where summary = ? "" , new Object [ ] { summdIDary } , new BeanPropertyRowMapper ( List . class ) ) ; if ( names . isEmpty ( ) ) { return null ; } else { return names ; } }","Generate syntax code: and $engine$ to connect the database and execute SQL ( get the drinkerName column in the 'D' table where drinkerID is $dID$ ) , get all the data, return None if the query result is None, use for loop to convert each item of the query result to a dictionary type and return.","<met> <mod> public </mod> type_identifier getDrinkerTrans <for> ( <for> type_identifier engine </for> , <for> type_identifier dID </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> names = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { summdIDary } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> names . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return names ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the java expression to set up SQL: Query the cookie_name data in the $cookies$ table and execute SQL through $conn$ to get all the data. For loop iterates through all the query results and prints them. Return all the query results.,"public List < Object > queryObject ( EntityManager conn , Root < Object > cookies ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cookies ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object row : res ) { System . out . println ( row ) ; } return res ; }",Generate syntax code: Use the java expression to set up SQL: Query the cookie_name data in the $cookies$ table and execute SQL through $conn$ to get all the data. For loop iterates through all the query results and prints them. Return all the query results.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryObject <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cookies </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( cookies ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Connect the database through $db_connect$, try to set the SQL statement: Get all the columns in the indicados table according to $id$, execute the SQL statement, and get all the data.","public JSONArray getAllIndicados ( DataSource db_connect , String id ) { try { JdbcTemplate engine = new JdbcTemplate ( db_connect ) ; List query = engine . query ( "" select * from indicados where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( query . toString ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Connect the database through $db_connect$, try to set the SQL statement: Get all the columns in the indicados table according to $id$, execute the SQL statement, and get all the data.","<met> <mod> public </mod> type_identifier getAllIndicados <for> ( <for> type_identifier db_connect </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> query . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set SQL ( query the name column in the data table based on restaurant_id = $id$ ) , use $conn$ to execute the SQL. Use for loop to iterate through to get the cursor of the execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Store in a list, and return the list.","public List selectValue ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select name from data where restaurant_id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set SQL ( query the name column in the data table based on restaurant_id = $id$ ) , use $conn$ to execute the SQL. Use for loop to iterate through to get the cursor of the execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Store in a list, and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $testdb$ to get the database engine, execute SQL ( get all the columns in the 'table_1' table when some_field is $field$ ) , get all the data, and finally return the query result.","public List setUP ( DataSource testdb , String field ) { JdbcTemplate engine = new JdbcTemplate ( testdb ) ; List fd = engine . query ( "" select * from table_1 where some_field= ? "" , new Object [ ] { field } , new BeanPropertyRowMapper ( List . class ) ) ; return fd ; }","Generate syntax code: Use $testdb$ to get the database engine, execute SQL ( get all the columns in the 'table_1' table when some_field is $field$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier setUP <for> ( <for> type_identifier testdb </for> , <for> type_identifier field </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( testdb ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> fd = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { field } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return fd ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: query the title data in the books table where isbn is $id$, use $conn$ to execute SQL to get all the data. If the result does not exist, render and return ""error.html""; otherwise, render and return ""results.html"", where the results parameter is the execution result.","public String books ( JdbcTemplate conn , String id , Model model ) { List results = conn . query ( "" select title from books where isbn = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" results "" , results ) ; return "" results.html "" ; } }","Generate syntax code: Set the SQL statement: query the title data in the books table where isbn is $id$, use $conn$ to execute SQL to get all the data. If the result does not exist, render and return ""error.html""; otherwise, render and return ""results.html"", where the results parameter is the execution result.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db_uri$ to get the DATABASE engine and connect to the DATABASE, then execute SQL ( get the price column in the DATABASE where user1 is $user1$ ) and get the first data, further close the connection, and finally return the query results.","public List tearDown ( DataSource db_uri , String user1 ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List res = conn . query ( "" select price from DATABASE where user1= ? "" , new Object [ ] { user1 } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $db_uri$ to get the DATABASE engine and connect to the DATABASE, then execute SQL ( get the price column in the DATABASE where user1 is $user1$ ) and get the first data, further close the connection, and finally return the query results.","<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier db_uri </for> , <for> type_identifier user1 </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user1 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Create a cursor with $db$, try to execute SQL ( query the number of taskid columns in the recipe_relation table based on $taskid$ ) , and get the first piece of data. If an Exception occurs during execution, output the error log and return the 0th element of the query result.","public Object start ( DataSource db , String taskid ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; try { List res = conn . query ( "" select count(taskid) from recipe_relation where taskid=? "" , new Object [ ] { taskid } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Create a cursor with $db$, try to execute SQL ( query the number of taskid columns in the recipe_relation table based on $taskid$ ) , and get the first piece of data. If an Exception occurs during execution, output the error log and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier start <for> ( <for> type_identifier db </for> , <for> type_identifier taskid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { taskid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine via $db_url$, set the 'echo' parameter to True, and further get the Session object. Set up the SQL statement ( query all the columns in the cron_dailyquote table based on $secucode$ ) , execute SQL and get all the data, close the connection, and return the query result.","public List selectValue ( DataSource db_url , String secucode ) { JdbcTemplate session = new JdbcTemplate ( db_url ) ; List results = session . query ( "" select * from cron_dailyquote where secucode = ? "" , new Object [ ] { secucode } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Get the database engine via $db_url$, set the 'echo' parameter to True, and further get the Session object. Set up the SQL statement ( query all the columns in the cron_dailyquote table based on $secucode$ ) , execute SQL and get all the data, close the connection, and return the query result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db_url </for> , <for> type_identifier secucode </for> ) </for> <blo> { <loc> type_identifier <var> session = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { secucode } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to set SQL statement to get ReviewWaiver data in $studentData$ based on $Username$ and use $conn$ connection to execute SQL to get all the data. Return the result in the form of the dictionary.,"public List < Object > getReferences ( EntityManager conn , Root < Object > studentData , String Username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( studentData ) . where ( cb . equal ( studentData . get ( "" Username "" ) , Username ) ) ; List < Object > out = conn . createQuery ( cq ) . getResultList ( ) ; return out ; }",Generate syntax code: Use the java expression to set SQL statement to get ReviewWaiver data in $studentData$ based on $Username$ and use $conn$ connection to execute SQL to get all the data. Return the result in the form of the dictionary.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getReferences <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> studentData </for> , <for> type_identifier Username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( studentData ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> studentData . get <arg> ( string_literal ) </arg> </met> , Username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> out = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> </met>"
"Generate origin code: Use $e$ to connect the database, set the SQL statement: Query the name column in the category table whose id is $id$, execute the SQL statement, get all the data through cursor, store the 0th element of each item of the obtained data as list and return.","public List get ( DataSource e , String id ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List data = conn . query ( "" select name from category where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( Object i : data ) { result . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } return result ; }","Generate syntax code: Use $e$ to connect the database, set the SQL statement: Query the name column in the category table whose id is $id$, execute the SQL statement, get all the data through cursor, store the 0th element of each item of the obtained data as list and return.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : data ) <blo> { <exp> <met> result . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement with the java expression: Query the feature_name in the $probabilities$ table according to $feature_value$, use the $conn$ connection to execute SQL and get all the data. If the data is not empty, print the obtained data.","public void getScore ( EntityManager conn , Root < Object > probabilities , String feature_value ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( probabilities ) . where ( cb . equal ( probabilities . get ( "" feature_value "" ) , feature_value ) ) ; List < Object > row = conn . createQuery ( cq ) . getResultList ( ) ; if ( ! row . isEmpty ( ) ) { System . out . println ( row ) ; } }","Generate syntax code: Set the SQL statement with the java expression: Query the feature_name in the $probabilities$ table according to $feature_value$, use the $conn$ connection to execute SQL and get all the data. If the data is not empty, print the obtained data.","<met> <mod> public </mod> void_type getScore <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> probabilities </for> , <for> type_identifier feature_value </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( probabilities ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> probabilities . get <arg> ( string_literal ) </arg> </met> , feature_value ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> row = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> row . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get the time column in CAPTURE based on $datetime$ ) , get all the data, use for loop to store the 0th element of each item in the query result as string type and return the string content.","public String read ( JdbcTemplate conn , String datetime ) { List rows = conn . query ( "" select time from capture where datetime= ? "" , new Object [ ] { datetime } , new BeanPropertyRowMapper ( List . class ) ) ; String data = null ; for ( Object row : rows ) { data += JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ; } return data ; }","Generate syntax code: Execute the SQL with $conn$ ( get the time column in CAPTURE based on $datetime$ ) , get all the data, use for loop to store the 0th element of each item in the query result as string type and return the string content.","<met> <mod> public </mod> type_identifier read <for> ( <for> type_identifier conn </for> , <for> type_identifier datetime </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { datetime } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> data = null_literal </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <ass> data += <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> </ass> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement: Query the eng_desc data in the $scop_des$ table according to $sccs$, execute the SQL statement through the $conn$ connection, and return the first piece of data obtained from the execution result.","public Object scopDesc ( EntityManager conn , Root < Object > scop_des , String sccs ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( scop_des ) . where ( cb . equal ( scop_des . get ( "" sccs "" ) , sccs ) ) ; List < Object > desc = conn . createQuery ( cq ) . getResultList ( ) ; return desc . get ( 0 ) ; }","Generate syntax code: Use the java expression to set the SQL statement: Query the eng_desc data in the $scop_des$ table according to $sccs$, execute the SQL statement through the $conn$ connection, and return the first piece of data obtained from the execution result.","<met> <mod> public </mod> type_identifier scopDesc <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> scop_des </for> , <for> type_identifier sccs </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( scop_des ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> scop_des . get <arg> ( string_literal ) </arg> </met> , sccs ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> desc = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> desc . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( query all columns in the flights table where the id value is $flight_id$ ) and get the first query result. If no data is obtained, return the rendered 'error.html', where parameter message is ""No such flight."". Otherwise, execute SQL ( query the name column in the passangers table whose value of flight_id is $flight_id$ ) and return the rendered 'flight.html' page, where the parameter flight is the result of the first query and passangers is the result of the second query.","public String flight ( JdbcTemplate db , String flight_id , Model model ) { List flight = db . query ( "" select * from flights where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flight . isEmpty ( ) ) { model . addAttribute ( "" message "" , "" No such flight. "" ) ; return "" error.html "" ; } else { List passangers = db . query ( "" select name from passangers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flight "" , flight . get ( 0 ) ) ; model . addAttribute ( "" passangers "" , passangers ) ; return "" flight.html "" ; } }","Generate syntax code: Use $db$ to execute SQL ( query all columns in the flights table where the id value is $flight_id$ ) and get the first query result. If no data is obtained, return the rendered 'error.html', where parameter message is ""No such flight."". Otherwise, execute SQL ( query the name column in the passangers table whose value of flight_id is $flight_id$ ) and return the rendered 'flight.html' page, where the parameter flight is the result of the first query and passangers is the result of the second query.","<met> <mod> public </mod> type_identifier flight <for> ( <for> type_identifier db </for> , <for> type_identifier flight_id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flight = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> flight . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> passangers = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> flight . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , passangers ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the id column in the users where the name of user is $username$ ) with $conn$ and get the first data, return the query result if it is true.","public List submit ( JdbcTemplate conn , String username ) { List res = conn . query ( "" select id from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Execute the SQL ( get the id column in the users where the name of user is $username$ ) with $conn$ and get the first data, return the query result if it is true.","<met> <mod> public </mod> type_identifier submit <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement: Get the id information in the posts table based on $category$, use $conn$ to execute SQL to get all the information and return.","public List selectPost ( JdbcTemplate conn , String category ) { List results = conn . query ( "" select id from posts where category = ? "" , new Object [ ] { category } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Set the SQL statement: Get the id information in the posts table based on $category$, use $conn$ to execute SQL to get all the information and return.","<met> <mod> public </mod> type_identifier selectPost <for> ( <for> type_identifier conn </for> , <for> type_identifier category </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { category } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL based on $conn$ ( get the name column in the sales table with city as $location$ and saleyear as $date$ ) and get all the data. Finally return the query results.,"public List pullSaleData ( JdbcTemplate conn , String location , String date ) { List response = conn . query ( "" select name from sales where city = ? and saleyear = ? "" , new Object [ ] { location , date } , new BeanPropertyRowMapper ( List . class ) ) ; return response ; }",Generate syntax code: Execute the SQL based on $conn$ ( get the name column in the sales table with city as $location$ and saleyear as $date$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier pullSaleData <for> ( <for> type_identifier conn </for> , <for> type_identifier location </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> response = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { location , date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return response ; </ret> } </blo> </met>"
"Generate origin code: Set sql according to the java expression ( query all columns in the $at$ table based on $uname$ ) , use $conn$ to execute sql and get the first piece of data, close the connection, and return the query results.","public Object checkUserExist ( EntityManager conn , Root < Object > at , String uname ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( at ) . where ( cb . equal ( at . get ( "" uname "" ) , uname ) ) ; List < Object > tmt = conn . createQuery ( cq ) . getResultList ( ) ; return tmt . get ( 0 ) ; }","Generate syntax code: Set sql according to the java expression ( query all columns in the $at$ table based on $uname$ ) , use $conn$ to execute sql and get the first piece of data, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier checkUserExist <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> at </for> , <for> type_identifier uname </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( at ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> at . get <arg> ( string_literal ) </arg> </met> , uname ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> tmt = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> tmt . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in 'table' table based on $ID$ ) and get all the data. Print the query result, store the 0th element of each item in the query result into list and return.","public Object getTableCursor ( JdbcTemplate conn , String ID ) { List cur = conn . query ( "" select * from table where id = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object j : cur ) { list . add ( JSONObject . parseObject ( j . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in 'table' table based on $ID$ ) and get all the data. Print the query result, store the 0th element of each item in the query result into list and return.","<met> <mod> public </mod> type_identifier getTableCursor <for> ( <for> type_identifier conn </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> cur = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier j : cur ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> j . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
Generate origin code: Use the $connection$ connection to execute the SQL statement and the content is as follows: Query all the type in the query_test table and return the query results.,"public List test ( JdbcTemplate connection ) { List res = connection . query ( "" select type from query_test "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Use the $connection$ connection to execute the SQL statement and the content is as follows: Query all the type in the query_test table and return the query results.,"<met> <mod> public </mod> type_identifier test <for> ( <for> type_identifier connection </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as a post, the SQL rendering ( query all the body in the articles where title is $title$ and author is $author$ ) is performed using $connection$ and the 'article.html' is returned, where the form parameter is the result of the query.","public Object addArticle ( HttpRequest request , JdbcTemplate connection , String title , String author , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List res_data = connection . query ( "" select body from articles where title=? and author= ? "" , new Object [ ] { title , author } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" form "" , res_data ) ; return "" article.html "" ; } else { return null ; } }","Generate syntax code: If the request module sends the request as a post, the SQL rendering ( query all the body in the articles where title is $title$ and author is $author$ ) is performed using $connection$ and the 'article.html' is returned, where the form parameter is the result of the query.","<met> <mod> public </mod> type_identifier addArticle <for> ( <for> type_identifier request </for> , <for> type_identifier connection </for> , <for> type_identifier title </for> , <for> type_identifier author </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> res_data = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res_data ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to execute SQL: Query all the columns in the reviews table based on $isbn$, get all the data, and return. If an exception occurs, use redirect to return the 'error' spliced by url_for. Finally, make sure that $db$ is turned off.","public List book ( JdbcTemplate conn , String isbn ) { try { List book = conn . query ( "" select * from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return book ; } catch ( Exception e ) { System . out . println ( "" erroe "" ) ; return null ; } finally { return null ; } }","Generate syntax code: Try to execute SQL: Query all the columns in the reviews table based on $isbn$, get all the data, and return. If an exception occurs, use redirect to return the 'error' spliced by url_for. Finally, make sure that $db$ is turned off.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return book ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query all columns in $audit$ table based on $id$ ) . Execute SQL by $conn$ and get all the data, if query result length is greater than 0, return query result. Otherwise return False.","public Object getSource ( EntityManager conn , Root < Object > audit , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( audit ) . where ( cb . equal ( audit . get ( "" id "" ) , id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; if ( results . isEmpty ( ) ) { return false ; } else { return results ; } }","Generate syntax code: Set SQL based on the java expression: ( query all columns in $audit$ table based on $id$ ) . Execute SQL by $conn$ and get all the data, if query result length is greater than 0, return query result. Otherwise return False.","<met> <mod> public </mod> type_identifier getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> audit </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( audit ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> audit . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement ( query all columns in the TABLE table based on $tablename$ ) and get all the data. Print and return the query results.,"public List checkExistence ( JdbcTemplate conn , String tablename ) { List out = conn . query ( "" select * from table where tablename = ? "" , new Object [ ] { tablename } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( out ) ; return out ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query all columns in the TABLE table based on $tablename$ ) and get all the data. Print and return the query results.,"<met> <mod> public </mod> type_identifier checkExistence <for> ( <for> type_identifier conn </for> , <for> type_identifier tablename </for> ) </for> <blo> { <loc> type_identifier <var> out = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tablename } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( out ) </arg> </met> ; </exp> <ret> return out ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all the information in the reviews table based on $isbn$ ) , get all the data, and return the rendered ""book.html"" page, where the review parameter is set to the query result. If an exception occurs during execution, return None.","public String book ( JdbcTemplate conn , String isbn , Model model ) { try { List review = conn . query ( "" select * from reviews where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" review "" , review ) ; return "" book.html "" ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all the information in the reviews table based on $isbn$ ) , get all the data, and return the rendered ""book.html"" page, where the review parameter is set to the query result. If an exception occurs during execution, return None.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier model </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> review = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , review ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all the columns in the 'table' table where tid is $tid$, get all the data, make sure that $conn$ is turned off, set the assertion to determine that the length of the returned result is 1, and return the query result. If an Exception occurs, return the exception information.","public Object db ( JdbcTemplate conn , String tid ) { try { List value = conn . query ( "" select * from table where tid = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; assert value . size ( ) == 1 ; return value ; } catch ( Exception e ) { return e ; } }","Generate syntax code: Try to use $conn$ to query all the columns in the 'table' table where tid is $tid$, get all the data, make sure that $conn$ is turned off, set the assertion to determine that the length of the returned result is 1, and return the query result. If an Exception occurs, return the exception information.","<met> <mod> public </mod> type_identifier db <for> ( <for> type_identifier conn </for> , <for> type_identifier tid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> value = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> value . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return value ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return e ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up sql ( query all columns in the channeltags table based on $set_index$ ) , execute sql with $conn$ and get the first piece of data, and return the query results.","public Object channelTagDf ( JdbcTemplate conn , String set_index ) { List yes = conn . query ( "" select * from channeltags where set_index= ? "" , new Object [ ] { set_index } , new BeanPropertyRowMapper ( List . class ) ) ; return yes . get ( 0 ) ; }","Generate syntax code: Set up sql ( query all columns in the channeltags table based on $set_index$ ) , execute sql with $conn$ and get the first piece of data, and return the query results.","<met> <mod> public </mod> type_identifier channelTagDf <for> ( <for> type_identifier conn </for> , <for> type_identifier set_index </for> ) </for> <blo> { <loc> type_identifier <var> yes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { set_index } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> yes . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the new_pop_vs_price table according to $Price$ ) , get all the query results, use for loop to traverse all the obtained query results, insert each piece of data into a list, convert the list to json and return.","public JSONArray price ( JdbcTemplate conn , String Price ) { List result = conn . query ( "" select * from new_pop_vs_price where price = ? "" , new Object [ ] { Price } , new BeanPropertyRowMapper ( List . class ) ) ; List all_data = new ArrayList ( ) ; for ( Object row : result ) { all_data . add ( row ) ; } return JSONObject . parseArray ( all_data . toString ( ) ) ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the new_pop_vs_price table according to $Price$ ) , get all the query results, use for loop to traverse all the obtained query results, insert each piece of data into a list, convert the list to json and return.","<met> <mod> public </mod> type_identifier price <for> ( <for> type_identifier conn </for> , <for> type_identifier Price </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Price } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> all_data = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> all_data . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> all_data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Excute the SQL query statement through the $conn$ connection, which reads: Query all the columns in the flight table and get all the data, render and return ""index.html"", where the flights parameter is all the data obtained.","public String index ( JdbcTemplate conn , Model model ) { List flights = conn . query ( "" select * from flight "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flights "" , flights ) ; return "" index.html "" ; }","Generate syntax code: Excute the SQL query statement through the $conn$ connection, which reads: Query all the columns in the flight table and get all the data, render and return ""index.html"", where the flights parameter is all the data obtained.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL according to the java expression ( get all the columns in the $flights$ table whose flight_id is $id$ ) , get all the data, and finally return the rendered ""flights.html"", where the flights parameter is the query result.","public Object flights ( EntityManager db , Root < Object > flights , String id , Model model ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( flights ) . where ( cb . equal ( flights . get ( "" id "" ) , id ) ) ; List < Object > fs = db . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" flights "" , fs ) ; return "" flights.html "" ; }","Generate syntax code: Use $db$ to execute SQL according to the java expression ( get all the columns in the $flights$ table whose flight_id is $id$ ) , get all the data, and finally return the rendered ""flights.html"", where the flights parameter is the query result.","<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> flights </for> , <for> type_identifier id </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( flights ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> flights . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> fs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , fs ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If $keyword_id$ is empty, return $keyword_id$. Set SQL ( get the id column in 'documents' based on $keyword_id$ ) , connect to the database through $engine$ and execute the SQL statement to get all the data. Then make sure the connection is closed, and finally return the query result.","public Object run ( DataSource engine , String keyword_id ) { if ( keyword_id == null ) { return keyword_id ; } else { JdbcTemplate con = new JdbcTemplate ( engine ) ; List res = con . query ( "" select id from documents where keyword_id = ? "" , new Object [ ] { keyword_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } }","Generate syntax code: If $keyword_id$ is empty, return $keyword_id$. Set SQL ( get the id column in 'documents' based on $keyword_id$ ) , connect to the database through $engine$ and execute the SQL statement to get all the data. Then make sure the connection is closed, and finally return the query result.","<met> <mod> public </mod> type_identifier run <for> ( <for> type_identifier engine </for> , <for> type_identifier keyword_id </for> ) </for> <blo> { <if_> if <par> ( <bin> keyword_id == null_literal </bin> ) </par> <blo> { <ret> return keyword_id ; </ret> } </blo> else <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { keyword_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the java expression to set SQL ( get the user_id in the $users$ table based on $user_id$ ) , use $conn$ to execute and get all the data, and finally return the query result.","public List < Object > testNestedSubTransActionCommit ( EntityManager conn , Root < Object > users , String user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" user_id "" ) , user_id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the java expression to set SQL ( get the user_id in the $users$ table based on $user_id$ ) , use $conn$ to execute and get all the data, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testNestedSubTransActionCommit <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the view_item_statistics table based on $date$ and $item_id$ ) , get all the query results, and print them. Use for loop to convert each item of the query result to dict, store it in list, and return the list.","public List getItemStatistic ( JdbcTemplate conn , String date , String item_id ) { List ret = conn . query ( "" select * from view_item_statistic where date=? and item_id= ? "" , new Object [ ] { date , item_id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( ret ) ; return ret ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the view_item_statistics table based on $date$ and $item_id$ ) , get all the query results, and print them. Use for loop to convert each item of the query result to dict, store it in list, and return the list.","<met> <mod> public </mod> type_identifier getItemStatistic <for> ( <for> type_identifier conn </for> , <for> type_identifier date </for> , <for> type_identifier item_id </for> ) </for> <blo> { <loc> type_identifier <var> ret = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date , item_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( ret ) </arg> </met> ; </exp> <ret> return ret ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to execute the SQL statement through the $conn$ connection: Query all the data in the $Model$ table where timestamp is greater than $mydatevar$ and return the query result.,"public List < Object > sync ( EntityManager conn , Root < Object > Model , int mydatevar ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Model ) . where ( cb . gt ( Model . get ( "" timestamp "" ) , mydatevar ) ) ; List < Object > a = conn . createQuery ( cq ) . getResultList ( ) ; return a ; }",Generate syntax code: Use the java expression to execute the SQL statement through the $conn$ connection: Query all the data in the $Model$ table where timestamp is greater than $mydatevar$ and return the query result.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sync <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Model </for> , <for> <int> int </int> mydatevar </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Model ) </arg> </met> . where <arg> ( <met> cb . gt <arg> ( <met> Model . get <arg> ( string_literal ) </arg> </met> , mydatevar ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> a = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return a ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in the one_rows table based on $one_row_id$ ) , execute SQL based on $conn$ and get the first piece of data. Set assertion to determine whether the query result length is equal to 1, and return the data.","public Object selectValue ( JdbcTemplate conn , String one_row_id ) { List one_row = conn . query ( "" select * from one_rows where one_row_id = ? "" , new Object [ ] { one_row_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert one_row . size ( ) == 1 ; return one_row . get ( 0 ) ; }","Generate syntax code: Set SQL ( query all columns in the one_rows table based on $one_row_id$ ) , execute SQL based on $conn$ and get the first piece of data. Set assertion to determine whether the query result length is equal to 1, and return the data.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier one_row_id </for> ) </for> <blo> { <loc> type_identifier <var> one_row = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { one_row_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> one_row . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return <met> one_row . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Execute SQL with $conn$ ( query the num_hh column in the households_temp table according to $zone_id$ ) and return all the obtained data.,"public List deleteHouseholds ( JdbcTemplate conn , String zone_id ) { List data = conn . query ( "" select num_hh from households_temp where zone_id = ? "" , new Object [ ] { zone_id } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }",Generate syntax code: Execute SQL with $conn$ ( query the num_hh column in the households_temp table according to $zone_id$ ) and return all the obtained data.,"<met> <mod> public </mod> type_identifier deleteHouseholds <for> ( <for> type_identifier conn </for> , <for> type_identifier zone_id </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zone_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
Generate origin code: Use java expressions to set up SQL: query the hazards in $tb$ where the type is $haz_type$. Use $conn$ to execute SQL and get all data. Use the for loop to convert the query result into a list and return it.,"public List < Object > getHazardsByType ( EntityManager conn , Root < Object > tb , String haz_type ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( tb ) . where ( cb . equal ( tb . get ( "" type "" ) , haz_type ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; List hazards = new ArrayList ( ) ; for ( Object o : result ) { hazards . add ( o ) ; } return hazards ; }",Generate syntax code: Use java expressions to set up SQL: query the hazards in $tb$ where the type is $haz_type$. Use $conn$ to execute SQL and get all data. Use the for loop to convert the query result into a list and return it.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getHazardsByType <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> tb </for> , <for> type_identifier haz_type </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( tb ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> tb . get <arg> ( string_literal ) </arg> </met> , haz_type ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> hazards = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier o : result ) <blo> { <exp> <met> hazards . add <arg> ( o ) </arg> </met> ; </exp> } </blo> </enh> <ret> return hazards ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query all columns in the $References$ table based on $Username$ ) . Execute SQL through $conn$ and get all the data, set assertions to determine whether the query result length is not equal to 0, and return the query result.","public List < Object > selectThirdForm ( EntityManager conn , Root < Object > References , String Username ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( References ) . where ( cb . equal ( References . get ( "" Username "" ) , Username ) ) ; List < Object > rs = conn . createQuery ( cq ) . getResultList ( ) ; assert rs . size ( ) != 0 ; return rs ; }","Generate syntax code: Set SQL based on the java expression ( query all columns in the $References$ table based on $Username$ ) . Execute SQL through $conn$ and get all the data, set assertions to determine whether the query result length is not equal to 0, and return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectThirdForm <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> References </for> , <for> type_identifier Username </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( References ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> References . get <arg> ( string_literal ) </arg> </met> , Username ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rs . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ; </ass> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $db_uri$ and establish a connection. Set the SQL statement ( query all columns in the computer table according to $name$ ) , execute SQL to get all the data, make sure the database connection is closed, and return the execution result.","public List tearDown ( DataSource db_uri , String name ) { JdbcTemplate conn = new JdbcTemplate ( db_uri ) ; List computers = conn . query ( "" select * from computer where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return computers ; }","Generate syntax code: Get the database engine through $db_uri$ and establish a connection. Set the SQL statement ( query all columns in the computer table according to $name$ ) , execute SQL to get all the data, make sure the database connection is closed, and return the execution result.","<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier db_uri </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> computers = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return computers ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( get the username column in the users where id is $session$ ) and get the first piece of data, then return the rendered ""book_page.html"" with the row parameter as the 0th element of the query result.","public String bookPage ( JdbcTemplate conn , String session , Model model ) { List rows = conn . query ( "" select username from users where id = ? "" , new Object [ ] { session } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" row "" , JSONObject . parseObject ( rows . get ( 0 ) . toString ( ) ) . get ( 0 ) ) ; return "" book_page.html "" ; }","Generate syntax code: Execute SQL with $conn$ ( get the username column in the users where id is $session$ ) and get the first piece of data, then return the rendered ""book_page.html"" with the row parameter as the 0th element of the query result.","<met> <mod> public </mod> type_identifier bookPage <for> ( <for> type_identifier conn </for> , <for> type_identifier session </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { session } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> <met> rows . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method to execute SQL with $conn$ ( query all the information in the $revobj$ table according to $revision$ ) , and use for loop to print the query results one by one.","public void purgeRevision ( EntityManager conn , Root < Object > revobj , String revision ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( revobj ) . where ( cb . equal ( revobj . get ( "" revision "" ) , revision ) ) ; List < Object > items = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object item : items ) { System . out . println ( item ) ; } }","Generate syntax code: Use ORM method to execute SQL with $conn$ ( query all the information in the $revobj$ table according to $revision$ ) , and use for loop to print the query results one by one.","<met> <mod> public </mod> void_type purgeRevision <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> revobj </for> , <for> type_identifier revision </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( revobj ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> revobj . get <arg> ( string_literal ) </arg> </met> , revision ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> items = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : items ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statement: Query the PC_IP in the $pcinfor5$ table, execute the SQL through the $conn$ connection to get all the data, store the 0th element of each item of the query result as list and return.","public List selectDb ( EntityManager conn , Root < Object > pcinfor5 ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( pcinfor5 ) ; List < Object > s = conn . createQuery ( cq ) . getResultList ( ) ; List result = new ArrayList ( ) ; for ( Object item : s ) { result . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return result ; }","Generate syntax code: Use the java expression to set up the SQL statement: Query the PC_IP in the $pcinfor5$ table, execute the SQL through the $conn$ connection to get all the data, store the 0th element of each item of the query result as list and return.","<met> <mod> public </mod> type_identifier selectDb <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> pcinfor5 </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( pcinfor5 ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> s = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : s ) <blo> { <exp> <met> result . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Use $DATABASE_URL$ to create a database engine; set up SQL ( query all the information in the PROJECT_1_USERS table when USER_EMAIL equals $user_email$ and USER_PASSWORD equals $user_psswd$ ) ; execute SQL and get all the data; and finally return the query results. If an exception occurs, the exception information is printed.","public List loginUser ( DataSource DATABASE_URL , String user_email , String user_psswd ) { try { JdbcTemplate engine = new JdbcTemplate ( DATABASE_URL ) ; List user = engine . query ( "" select * from project_1_users where user_email = ? and user_password = ? "" , new Object [ ] { user_email , user_psswd } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to execute the following code: Use $DATABASE_URL$ to create a database engine; set up SQL ( query all the information in the PROJECT_1_USERS table when USER_EMAIL equals $user_email$ and USER_PASSWORD equals $user_psswd$ ) ; execute SQL and get all the data; and finally return the query results. If an exception occurs, the exception information is printed.","<met> <mod> public </mod> type_identifier loginUser <for> ( <for> type_identifier DATABASE_URL </for> , <for> type_identifier user_email </for> , <for> type_identifier user_psswd </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DATABASE_URL ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> user = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_email , user_psswd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return user ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the $db$ to connect to the database, and use the java expression to execute SQL to query the data in the $table$ table, get all the data and return.","public List selectTable ( EntityManager conn , Root < Object > table ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Use the $db$ to connect to the database, and use the java expression to execute SQL to query the data in the $table$ table, get all the data and return.","<met> <mod> public </mod> type_identifier selectTable <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( table ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all columns in the users table based on $username$ and $password$ ) . Use $conn$ to execute SQL and get the first piece of data. If the query result is None, return the rendered ""error.html"".Otherwise, return the rendered ""index.html"" and pass the query result to the user parameter.","public String sign ( JdbcTemplate conn , String username , String password , Model model ) { List user = conn . query ( "" select * from users where username= ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( user . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" user "" , user ) ; return "" index.html "" ; } }","Generate syntax code: Set up SQL ( query all columns in the users table based on $username$ and $password$ ) . Use $conn$ to execute SQL and get the first piece of data. If the query result is None, return the rendered ""error.html"".Otherwise, return the rendered ""index.html"" and pass the query result to the user parameter.","<met> <mod> public </mod> type_identifier sign <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> user . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , user ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to set SQL: Select the user_name data in query_users table according to $user_id$, use $db$ to execute SQL, get the first piece of data, set the assertion to determine that the length of the execution result is 0, close the database connection, and return the execution result. If there is an Exception, print exception message.","public Object selectUser ( DataSource db , String user_id ) { try { JdbcTemplate engine = new JdbcTemplate ( db ) ; List user_names = engine . query ( "" select user_name from query_users where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; assert user_names . size ( ) == 0 ; return user_names . get ( 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to set SQL: Select the user_name data in query_users table according to $user_id$, use $db$ to execute SQL, get the first piece of data, set the assertion to determine that the length of the execution result is 0, close the database connection, and return the execution result. If there is an Exception, print exception message.","<met> <mod> public </mod> type_identifier selectUser <for> ( <for> type_identifier db </for> , <for> type_identifier user_id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> user_names = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> user_names . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ; </ass> <ret> return <met> user_names . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Create a configured Session class with a bind parameter of $engine$ and instantiate it. Use a java expression to set the SQL statement to query all the data in $incremental_record$ by $id$ and execute the SQL statement. The query results are iterated through the for loop, each item of the query results is converted to dict storage, and the converted storage results are printed. Finally, all query results are returned.","public List queryOldRecs ( EntityManager engine , Root < Object > incremental_record , String id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( incremental_record ) . where ( cb . equal ( incremental_record . get ( "" id "" ) , id ) ) ; List < Object > recs = engine . createQuery ( cq ) . getResultList ( ) ; for ( Object item : recs ) { System . out . println ( item ) ; } return recs ; }","Generate syntax code: Create a configured Session class with a bind parameter of $engine$ and instantiate it. Use a java expression to set the SQL statement to query all the data in $incremental_record$ by $id$ and execute the SQL statement. The query results are iterated through the for loop, each item of the query results is converted to dict storage, and the converted storage results are printed. Finally, all query results are returned.","<met> <mod> public </mod> type_identifier queryOldRecs <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> incremental_record </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( incremental_record ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> incremental_record . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier item : recs ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> <ret> return recs ; </ret> } </blo> </met>"
"Generate origin code: If the requested method is 'POST', then use $conn$ to execute the SQL ( get the username column in the users table based on $id$ ) , get all the data and return the query results. Finally return the rendered ""login.html"".","public Object index ( HttpRequest request , JdbcTemplate conn , String id ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List results = conn . query ( "" select username from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return "" login.html "" ; } else { return results ; } } else { return "" login.html "" ; } }","Generate syntax code: If the requested method is 'POST', then use $conn$ to execute the SQL ( get the username column in the users table based on $id$ ) , get all the data and return the query results. Finally return the rendered ""login.html"".","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Connect the database through $db$. Use the java expression to execute the SQL statement ( get the user_id in the $users$ table whose user_name is $name$ ) to get all the data, close the database connection, and return all the query results.","public List get ( EntityManager db , Root < Object > users , String name ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" user_name "" ) , name ) ) ; List < Object > results = db . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Connect the database through $db$. Use the java expression to execute the SQL statement ( get the user_id in the $users$ table whose user_name is $name$ ) to get all the data, close the database connection, and return all the query results.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Use $host$ to get the database engine and establish a connection. Execute the SQL statement ( query all columns in the Room where the ByggUnik is $ByggUnik$ ) to get all the data and return the query results.,"public List intPage ( DataSource host , String ByggUnik ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List rooms = engine . query ( "" select * from room where byggunik= ? "" , new Object [ ] { ByggUnik } , new BeanPropertyRowMapper ( List . class ) ) ; return rooms ; }",Generate syntax code: Use $host$ to get the database engine and establish a connection. Execute the SQL statement ( query all columns in the Room where the ByggUnik is $ByggUnik$ ) to get all the data and return the query results.,"<met> <mod> public </mod> type_identifier intPage <for> ( <for> type_identifier host </for> , <for> type_identifier ByggUnik </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rooms = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ByggUnik } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rooms ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine with $testdb_uri$ and execute the SQL ( query all the id in the pgcrypto table based on $uri$ ) , and return all the query results.","public List query ( DataSource testdb_uri , String uri ) { JdbcTemplate engine = new JdbcTemplate ( testdb_uri ) ; List res = engine . query ( "" select id from pgcrypto where uri= ? "" , new Object [ ] { uri } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Create the database engine with $testdb_uri$ and execute the SQL ( query all the id in the pgcrypto table based on $uri$ ) , and return all the query results.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier testdb_uri </for> , <for> type_identifier uri </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( testdb_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uri } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $app$ and connect the database. Set up SQL ( query all columns in the users table according to $phone$ ) , execute sql, get all the query results, and return the query results.","public List initializeDb ( DataSource app , String phone ) { JdbcTemplate con = new JdbcTemplate ( app ) ; List res = con . query ( "" select * from users where phone= ? "" , new Object [ ] { phone } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine through $app$ and connect the database. Set up SQL ( query all columns in the users table according to $phone$ ) , execute sql, get all the query results, and return the query results.","<met> <mod> public </mod> type_identifier initializeDb <for> ( <for> type_identifier app </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( app ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: connect to the database according to $engine$. Execute SQL ( query the team_name_abbr column in the team table according to $name$ ) , get the first row of data, and return the 0th element of the query result.","public Object getTeamabbr ( DataSource engine , String name ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List res = conn . query ( "" select team_name_abbr from team where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: connect to the database according to $engine$. Execute SQL ( query the team_name_abbr column in the team table according to $name$ ) , get the first row of data, and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getTeamabbr <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use $DATABASE_URL$ to get the database engine and execute the SQL ( get the name column in the test table based on $id$ ) and get all the data, then use for loop to print each item of the query result","public void fetchTest ( DataSource DATABASE_URL , String id ) { JdbcTemplate conn = new JdbcTemplate ( DATABASE_URL ) ; List test_rows = conn . query ( "" select name from test where id =? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : test_rows ) { System . out . println ( row ) ; } }","Generate syntax code: Use $DATABASE_URL$ to get the database engine and execute the SQL ( get the name column in the test table based on $id$ ) and get all the data, then use for loop to print each item of the query result","<met> <mod> public </mod> void_type fetchTest <for> ( <for> type_identifier DATABASE_URL </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( DATABASE_URL ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> test_rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : test_rows ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", set SQL ( query the title column in the posts table based on $category$ ) , use $conn$ to execute SQL, get all the query results and return. Otherwise, return the rendered 'updateTable.html' page.","public Object selectTable ( HttpRequest request , JdbcTemplate conn , String category ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List titles = conn . query ( "" select title from posts where category = ? "" , new Object [ ] { category } , new BeanPropertyRowMapper ( List . class ) ) ; return titles ; } else { return "" updateTable.html "" ; } }","Generate syntax code: If the request method is ""POST"", set SQL ( query the title column in the posts table based on $category$ ) , use $conn$ to execute SQL, get all the query results and return. Otherwise, return the rendered 'updateTable.html' page.","<met> <mod> public </mod> type_identifier selectTable <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier category </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> titles = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { category } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return titles ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $pg_connstring$ to get the database engine and connect the database, then execute SQL ( get the number of numunits column in the orderlines table where nodeid is $id$, totalprice is $price$ and YEAR is $year$ ) , get all the data, then close the connection, and finally return the query statement.","public List searchNumunits ( DataSource pg_connstring , String id , String price , String year ) { JdbcTemplate conn = new JdbcTemplate ( pg_connstring ) ; List nums = conn . query ( "" select count(numunits) from orderlines where nodeid=? and totalprice=? and YEAR=? "" , new Object [ ] { id , price , year } , new BeanPropertyRowMapper ( List . class ) ) ; return nums ; }","Generate syntax code: Use $pg_connstring$ to get the database engine and connect the database, then execute SQL ( get the number of numunits column in the orderlines table where nodeid is $id$, totalprice is $price$ and YEAR is $year$ ) , get all the data, then close the connection, and finally return the query statement.","<met> <mod> public </mod> type_identifier searchNumunits <for> ( <for> type_identifier pg_connstring </for> , <for> type_identifier id </for> , <for> type_identifier price </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( pg_connstring ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> nums = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , price , year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return nums ; </ret> } </blo> </met>"
"Generate origin code: If $user$ is not empty, set SQL based on the java expression: ( query all columns in the $user_table$ table based on $user$ ) . Execute SQL through $conn$ to get all the query results, and use for loop to traverse the query results, assign the 0th element to the value of the dictionary ""user"" key, assign the first element to the value of the ""sensor"" key, insert the dictionary containing the two key values into a list one by one, and return the list.","public List listAssociations ( EntityManager conn , Root < Object > user_table , String user ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( user_table ) . where ( cb . equal ( user_table . get ( "" user "" ) , user ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; List toReturn = new ArrayList ( ) ; for ( Object result : results ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" user "" , JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ) ; jsonObject . put ( "" sensor "" , JSONObject . parseObject ( result . toString ( ) ) . get ( 1 ) ) ; toReturn . add ( jsonObject ) ; } return results ; }","Generate syntax code: If $user$ is not empty, set SQL based on the java expression: ( query all columns in the $user_table$ table based on $user$ ) . Execute SQL through $conn$ to get all the query results, and use for loop to traverse the query results, assign the 0th element to the value of the dictionary ""user"" key, assign the first element to the value of the ""sensor"" key, insert the dictionary containing the two key values into a list one by one, and return the list.","<met> <mod> public </mod> type_identifier listAssociations <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> user_table </for> , <for> type_identifier user </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( user_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> user_table . get <arg> ( string_literal ) </arg> </met> , user ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> toReturn = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> toReturn . add <arg> ( jsonObject ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> </met>"
Generate origin code: Get the database engine and establish a connection through $db_url$. Execute the SQL statement ( query all the blog_content data in the BLOG table according to $blog_id$ ) and ensure that the database connection is closed and return the query result.,"public List getQuery ( DataSource db_url , String blog_id ) { JdbcTemplate conn = new JdbcTemplate ( db_url ) ; List items = conn . query ( "" select blog_content from BLOG where blog_id = ? "" , new Object [ ] { blog_id } , new BeanPropertyRowMapper ( List . class ) ) ; return items ; }",Generate syntax code: Get the database engine and establish a connection through $db_url$. Execute the SQL statement ( query all the blog_content data in the BLOG table according to $blog_id$ ) and ensure that the database connection is closed and return the query result.,"<met> <mod> public </mod> type_identifier getQuery <for> ( <for> type_identifier db_url </for> , <for> type_identifier blog_id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> items = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { blog_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return items ; </ret> } </blo> </met>"
"Generate origin code: Get the value of the parameter named book_id in the form. Use $conn$ to query all the columns in the books table with id as $id$ and get all the data, render and return ""review.html"", where the book_id parameter is the obtained book_id value and the book parameter is the query result.","public String review ( JdbcTemplate conn , Model model , HttpRequest request ) { String book_id = request . getMethodValue ( ) ; List book = conn . query ( "" select * from books where id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book_id "" , book_id ) ; model . addAttribute ( "" book "" , book ) ; return "" review.html "" ; }","Generate syntax code: Get the value of the parameter named book_id in the form. Use $conn$ to query all the columns in the books table with id as $id$ and get all the data, render and return ""review.html"", where the book_id parameter is the obtained book_id value and the book parameter is the query result.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> , <for> type_identifier request </for> ) </for> <blo> { <loc> type_identifier <var> book_id = <met> request . getMethodValue <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book_id ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table according to $sunny$ ) , get all the query results, output the query results, and return the rendered ""flights.html"" page, where the parameter sunny_val is set to the query results.","public String flightsFunc ( JdbcTemplate conn , String sunny , Model model ) { List sunny_val = conn . query ( "" select * from flights where sunny= ? "" , new Object [ ] { sunny } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( sunny_val ) ; model . addAttribute ( "" sunny_val "" , sunny_val ) ; return "" flights.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table according to $sunny$ ) , get all the query results, output the query results, and return the rendered ""flights.html"" page, where the parameter sunny_val is set to the query results.","<met> <mod> public </mod> type_identifier flightsFunc <for> ( <for> type_identifier conn </for> , <for> type_identifier sunny </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> sunny_val = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sunny } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( sunny_val ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , sunny_val ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL statement using $conn$ with the following contents: Query all name information in grp based on $username$ and $domain$. Use for loop to store each element of the query result in the list and return the contents of the list.,"public List getOne ( JdbcTemplate conn , String username , String domain ) { List res = conn . query ( "" select name from grp where username = ? and domain = ? "" , new Object [ ] { username , domain } , new BeanPropertyRowMapper ( List . class ) ) ; List res_list = new ArrayList ( ) ; for ( Object row : res ) { res_list . add ( row ) ; } return res_list ; }",Generate syntax code: Execute the SQL statement using $conn$ with the following contents: Query all name information in grp based on $username$ and $domain$. Use for loop to store each element of the query result in the list and return the contents of the list.,"<met> <mod> public </mod> type_identifier getOne <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier domain </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , domain } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> res_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <exp> <met> res_list . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res_list ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the columns in the zones_all_distances_in_order table based on $orig_zone$ ) , get all the data, use for loop to insert the query data one by one into a list and return this list.","public List getNearest5Zones ( JdbcTemplate conn , String orig_zone ) { List result = conn . query ( "" select * from zones_all_distances_in_order where orig_zone = ? "" , new Object [ ] { orig_zone } , new BeanPropertyRowMapper ( List . class ) ) ; List lst = new ArrayList ( ) ; for ( Object row : result ) { lst . add ( row ) ; } return lst ; }","Generate syntax code: Use $conn$ to execute SQL ( query all the columns in the zones_all_distances_in_order table based on $orig_zone$ ) , get all the data, use for loop to insert the query data one by one into a list and return this list.","<met> <mod> public </mod> type_identifier getNearest5Zones <for> ( <for> type_identifier conn </for> , <for> type_identifier orig_zone </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { orig_zone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> lst = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> lst . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return lst ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database using $db_connect$, execute the SQL ( get all the columns in the customers where firstName is $firstName$, lastName is $lastName$, company is $company$, country is $country$, and email is $email$ ) , get the first data, and return the query result.","public List put ( DataSource db_connect , String firstName , String lastName , String company , String country , String email ) { JdbcTemplate conn = new JdbcTemplate ( db_connect ) ; List res = conn . query ( "" select * from customers where firstName=? and lastName=? and company=? and country=? and email=? "" , new Object [ ] { firstName , lastName , company , country , email } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect to the database using $db_connect$, execute the SQL ( get all the columns in the customers where firstName is $firstName$, lastName is $lastName$, company is $company$, country is $country$, and email is $email$ ) , get the first data, and return the query result.","<met> <mod> public </mod> type_identifier put <for> ( <for> type_identifier db_connect </for> , <for> type_identifier firstName </for> , <for> type_identifier lastName </for> , <for> type_identifier company </for> , <for> type_identifier country </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { firstName , lastName , company , country , email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement with the following contents: Query the column in users through $uid$ and get the first piece of data. Return the query result.,"public List queryName ( JdbcTemplate conn , String uid ) { List userres = conn . query ( "" select * from users where id = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; return userres ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement with the following contents: Query the column in users through $uid$ and get the first piece of data. Return the query result.,"<met> <mod> public </mod> type_identifier queryName <for> ( <for> type_identifier conn </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> type_identifier <var> userres = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return userres ; </ret> } </blo> </met>"
Generate origin code: Get the database engine through $DB_DOMAIN$ and establish the connection. Execute SQL statement ( get all columns in database based on $new_db_name$ ) and fetch all data. Make sure database is closed and return all fetched data.,"public List selecTestDb ( DataSource DB_DOMAIN , String new_db_name ) { JdbcTemplate conn = new JdbcTemplate ( DB_DOMAIN ) ; List out = conn . query ( "" select * from database where new_db_name = ? "" , new Object [ ] { new_db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return out ; }",Generate syntax code: Get the database engine through $DB_DOMAIN$ and establish the connection. Execute SQL statement ( get all columns in database based on $new_db_name$ ) and fetch all data. Make sure database is closed and return all fetched data.,"<met> <mod> public </mod> type_identifier selecTestDb <for> ( <for> type_identifier DB_DOMAIN </for> , <for> type_identifier new_db_name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( DB_DOMAIN ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> out = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { new_db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return out ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to execute the SQL statement via $conn$: Query the cookie_name in the $cookies$ table and get the first piece of data, print the obtained data and return.","public List makeQueryOrdering ( EntityManager conn , Root < Object > cookies ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( cookies ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( res ) ; return res ; }","Generate syntax code: Use the java expression to execute the SQL statement via $conn$: Query the cookie_name in the $cookies$ table and get the first piece of data, print the obtained data and return.","<met> <mod> public </mod> type_identifier makeQueryOrdering <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> cookies </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( cookies ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( get all the columns in the books table based on $title$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and store it as a list type. If it is not a list type, return the rendered ""alert.html"", and finally return the rendered ""book.html"", where answer is the list content; otherwise, return the rendered ""index.html"".","public Object index ( HttpRequest request , JdbcTemplate conn , String title , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List result = conn . query ( "" select * from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; List answer = new ArrayList ( ) ; if ( result . isEmpty ( ) ) { return "" alert.html "" ; } else { model . addAttribute ( "" answer "" , answer ) ; return "" book.html "" ; } } else { return "" index.html "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( get all the columns in the books table based on $title$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and store it as a list type. If it is not a list type, return the rendered ""alert.html"", and finally return the rendered ""book.html"", where answer is the list content; otherwise, return the rendered ""index.html"".","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> answer = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , answer ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $experiment_id$ is None, return False, otherwise use $conn$ to execute the SQL statement ( select the $cols$ column in the $modification$ where the id of experiment is $experiment_id$ ) and return after getting all the data.","public Object selectValue ( EntityManager conn , Root < Object > modification , String experiment_id ) { if ( experiment_id == null ) { return false ; } else { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( modification ) . where ( cb . equal ( modification . get ( "" experiment_id "" ) , experiment_id ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } }","Generate syntax code: If $experiment_id$ is None, return False, otherwise use $conn$ to execute the SQL statement ( select the $cols$ column in the $modification$ where the id of experiment is $experiment_id$ ) and return after getting all the data.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> modification </for> , <for> type_identifier experiment_id </for> ) </for> <blo> { <if_> if <par> ( <bin> experiment_id == null_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( modification ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> modification . get <arg> ( string_literal ) </arg> </met> , experiment_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$: Query all columns in the sci_mod table and get all the data. For loop iterates through all query results, prints the 0th element by row and returns the 0th element of all query results.","public Object query ( JdbcTemplate conn ) { List data = conn . query ( "" select * from sci_mod "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : data ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } return data . get ( 0 ) ; }","Generate syntax code: Execute SQL via $conn$: Query all columns in the sci_mod table and get all the data. For loop iterates through all query results, prints the 0th element by row and returns the 0th element of all query results.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> data = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : data ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> data . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Set the SQL statement: Query all columns in the reviews table with signup_id of $signup_id$. Execute the SQL statement with $conn$ to get all the data. Convert each item of the query result into dict and store as list and return.,"public List api ( JdbcTemplate conn , String signup_id ) { List res = conn . query ( "" select * from reviews where signup_id = ? "" , new Object [ ] { signup_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Set the SQL statement: Query all columns in the reviews table with signup_id of $signup_id$. Execute the SQL statement with $conn$ to get all the data. Convert each item of the query result into dict and store as list and return.,"<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier signup_id </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { signup_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the reviewtext column in the reviews table based on $book_id$ and $rating$ ) , get all the query results, return the rendered ""book.html"" page, and set the parameter reviews as the query result.","public String booksWithId ( JdbcTemplate conn , String book_id , String rating , Model model ) { List reviews = conn . query ( "" select reviewtext from reviews where book_id = : book_id and rating = ? "" , new Object [ ] { book_id , rating } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" book.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query the reviewtext column in the reviews table based on $book_id$ and $rating$ ) , get all the query results, return the rendered ""book.html"" page, and set the parameter reviews as the query result.","<met> <mod> public </mod> type_identifier booksWithId <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier rating </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id , rating } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query the information column in the users table based on the condition that username is $user$ ) , get the first row of data, and return the query results; otherwise, redirect to the 'index' page.","public Object query_login ( HttpRequest request , JdbcTemplate conn , String user ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List user_infs = conn . query ( "" select information from users where username = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return user_infs . get ( 0 ) ; } else { return "" index "" ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query the information column in the users table based on the condition that username is $user$ ) , get the first row of data, and return the query results; otherwise, redirect to the 'index' page.","<met> <mod> public </mod> type_identifier query_login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier user </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user_infs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> user_infs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$. Execute the SQL statement with the following contents: Query the first piece of name in the t1 table based on $type$. If the query result is empty, return None; otherwise return the query results in the form of the dictionary.","public List findBeer ( DataSource engine , String type ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List result = con . query ( "" select name from t1 where type = ? "" , new Object [ ] { type } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result ; } }","Generate syntax code: connect to the database based on $engine$. Execute the SQL statement with the following contents: Query the first piece of name in the t1 table based on $type$. If the query result is empty, return None; otherwise return the query results in the form of the dictionary.","<met> <mod> public </mod> type_identifier findBeer <for> ( <for> type_identifier engine </for> , <for> type_identifier type </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> result . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement ( query all the data in the $Model$ table based on $ticker_id$ ) , and use $conn$ to execute SQL to get all the data and return.","public List < Object > func3 ( EntityManager conn , Root < Object > Model , String ticker_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Model ) . where ( cb . equal ( Model . get ( "" ticker_id "" ) , ticker_id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: Use the java expression to set the SQL statement ( query all the data in the $Model$ table based on $ticker_id$ ) , and use $conn$ to execute SQL to get all the data and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> func3 <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Model </for> , <for> type_identifier ticker_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Model ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Model . get <arg> ( string_literal ) </arg> </met> , ticker_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Query all the columns in the books table where the isbn is $isbn$ through $conn$, and get the first piece of data. If the query result is empty, return ""error"" through jsonify, and its content is ""Invalid isbn""; otherwise, return the query result through jsonify.","public JSONObject apiBookInfo ( JdbcTemplate conn , String isbn ) { List books = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" error "" , "" Invalid isbn "" ) ; return jsonObject ; } else { return JSONObject . parseObject ( books . get ( 0 ) . toString ( ) ) ; } }","Generate syntax code: Query all the columns in the books table where the isbn is $isbn$ through $conn$, and get the first piece of data. If the query result is empty, return ""error"" through jsonify, and its content is ""Invalid isbn""; otherwise, return the query result through jsonify.","<met> <mod> public </mod> type_identifier apiBookInfo <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return jsonObject ; </ret> } </blo> else <blo> { <ret> return <met> JSONObject . parseObject <arg> ( <met> <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to query the first review_count in the books table whose isbn is $isbn$. Return ""error"" if there is no query result; otherwise, return the query result.","public Object bookApi ( JdbcTemplate conn , String isbn ) { List books = conn . query ( "" select review_count from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; if ( books . isEmpty ( ) ) { return "" error "" ; } else { return books . get ( 0 ) ; } }","Generate syntax code: Use $conn$ to query the first review_count in the books table whose isbn is $isbn$. Return ""error"" if there is no query result; otherwise, return the query result.","<met> <mod> public </mod> type_identifier bookApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> books . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ connection to execute SQL ( query all columns in reviews by $user_id$ and $isbn$ ) and get all data, return all query results.","public List getReview ( JdbcTemplate conn , String user_id , String isbn ) { List reviews = conn . query ( "" select * from reviews where user_id = ? and isbn = ? "" , new Object [ ] { user_id , isbn } , new BeanPropertyRowMapper ( List . class ) ) ; return reviews ; }","Generate syntax code: Use $conn$ connection to execute SQL ( query all columns in reviews by $user_id$ and $isbn$ ) and get all data, return all query results.","<met> <mod> public </mod> type_identifier getReview <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id , isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return reviews ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ connection: Query all columns in the user table with $username$ and $password$ and get the first piece of data. If there is no query result, use raise to throw the exception with ""Error"" message; otherwise return the query result.","public String user ( JdbcTemplate conn , String username , String password ) { List < String > results = conn . query ( "" select * from user where username = ?and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( results . isEmpty ( ) ) { return "" Error "" ; } else { return results . get ( 0 ) ; } }","Generate syntax code: Execute SQL through $conn$ connection: Query all columns in the user table with $username$ and $password$ and get the first piece of data. If there is no query result, use raise to throw the exception with ""Error"" message; otherwise return the query result.","<met> <mod> public </mod> type_identifier user <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> results . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query the pwd information in the bt table based on $devid$ ) and return the execution result. If an exception occurs, pass directly. Finally, close the connection.","public List bindTable ( JdbcTemplate conn , String devid ) { try { List pwds = conn . query ( "" select pwd from bt where devid= ? "" , new Object [ ] { devid } , new BeanPropertyRowMapper ( List . class ) ) ; return pwds ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query the pwd information in the bt table based on $devid$ ) and return the execution result. If an exception occurs, pass directly. Finally, close the connection.","<met> <mod> public </mod> type_identifier bindTable <for> ( <for> type_identifier conn </for> , <for> type_identifier devid </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> pwds = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { devid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return pwds ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Open and read the file ""flights.csv"", loop the 'origin' and 'destination' in the file, use $conn$ to execute the SQL ( query the duration column in the flights table based on 'origin' and 'destination' of each piece ) , get all the query results and print.","public void main ( JdbcTemplate conn ) { String filePath = "" flights.csv "" ; try ( Scanner sc = new Scanner ( new FileReader ( filePath ) ) ) { while ( sc . hasNextLine ( ) ) { String origin = sc . nextLine ( ) ; String destination = sc . nextLine ( ) ; List time = conn . query ( "" select duration from flights where origin = ? and destination = ? "" , new Object [ ] { origin , destination } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( time ) ; } } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Open and read the file ""flights.csv"", loop the 'origin' and 'destination' in the file, use $conn$ to execute the SQL ( query the duration column in the flights table based on 'origin' and 'destination' of each piece ) , get all the query results and print.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> filePath = string_literal </var> ; </loc> <try> try <res> ( <res> type_identifier sc = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( filePath ) </arg> </obj> ) </arg> </obj> </res> ) </res> <blo> { <whi> while <par> ( <met> sc . hasNextLine <arg> ( ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> origin = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> destination = <met> sc . nextLine <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> time = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { origin , destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( time ) </arg> </met> ; </exp> } </blo> </whi> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: Query all sampleid data in the Samples_metadata table. If the query result length in list is 1, return the query result; otherwise, use for loop to store every element in the query result intolist, use jsonify to process list content and return.","public List names ( JdbcTemplate conn ) { List new_name_list = new ArrayList ( ) ; List name_list = conn . query ( "" select sampleid from samples_metadata "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( name_list . size ( ) == 1 ) { return name_list ; } else { for ( Object name : name_list ) { new_name_list . add ( name ) ; } return JSONObject . parseArray ( new_name_list . toString ( ) ) ; } }","Generate syntax code: Use $conn$ to execute the SQL statement: Query all sampleid data in the Samples_metadata table. If the query result length in list is 1, return the query result; otherwise, use for loop to store every element in the query result intolist, use jsonify to process list content and return.","<met> <mod> public </mod> type_identifier names <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> new_name_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> name_list = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> name_list . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return name_list ; </ret> } </blo> else <blo> { <enh> for ( type_identifier name : name_list ) <blo> { <exp> <met> new_name_list . add <arg> ( name ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> new_name_list . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $admin_uri$ to get the database engine and connect to the database, then execute the SQL ( get all the columns in the database table where $database='transit'$ is $database='transit'$ and $owner='transit'$ is $owner='transit'$ ) and get all the data, and finally return the query results.","public List createDatabase ( DataSource admin_uri , String owner , String database ) { JdbcTemplate conn = new JdbcTemplate ( admin_uri ) ; List res = conn . query ( "" select * from database where database=? and owner= ? "" , new Object [ ] { owner , database } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $admin_uri$ to get the database engine and connect to the database, then execute the SQL ( get all the columns in the database table where $database='transit'$ is $database='transit'$ and $owner='transit'$ is $owner='transit'$ ) and get all the data, and finally return the query results.","<met> <mod> public </mod> type_identifier createDatabase <for> ( <for> type_identifier admin_uri </for> , <for> type_identifier owner </for> , <for> type_identifier database </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( admin_uri ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { owner , database } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Execute the SQL statement ( query all the columns in the Bars table according to $bar_id$ ) , get all the data, use for loop to convert each item of the query results to dict, store it in list and return.","public List getBars ( DataSource engine , String bar_id ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List rs = con . query ( "" select * from bars where bar_id= ? "" , new Object [ ] { bar_id } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: connect the database according to $engine$. Execute the SQL statement ( query all the columns in the Bars table according to $bar_id$ ) , get all the data, use for loop to convert each item of the query results to dict, store it in list and return.","<met> <mod> public </mod> type_identifier getBars <for> ( <for> type_identifier engine </for> , <for> type_identifier bar_id </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> rs = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bar_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
Generate origin code: Get the database engine ( the echo parameter is False ) through $databaseUrl$ and establish a connection. Execute the SQL statement ( query all the location data in the earthquake table based on $name$ ) and return the query results.,"public List getData ( DataSource databaseUrl , String name ) { JdbcTemplate conn = new JdbcTemplate ( databaseUrl ) ; List res = conn . query ( "" select location from earthquake where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }",Generate syntax code: Get the database engine ( the echo parameter is False ) through $databaseUrl$ and establish a connection. Execute the SQL statement ( query all the location data in the earthquake table based on $name$ ) and return the query results.,"<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier databaseUrl </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( databaseUrl ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the origin data in the flights table with 'destination': $des$, and use $conn$ to execute the SQL statement to get all the data. For loop iterates through the execution result and prints.","public void selectOrigin ( JdbcTemplate conn , String des ) { List res = conn . query ( "" select origin from flights where destination = ? "" , new Object [ ] { des } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : res ) { System . out . println ( r ) ; } }","Generate syntax code: Set the SQL statement: Query the origin data in the flights table with 'destination': $des$, and use $conn$ to execute the SQL statement to get all the data. For loop iterates through the execution result and prints.","<met> <mod> public </mod> void_type selectOrigin <for> ( <for> type_identifier conn </for> , <for> type_identifier des </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { des } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( r ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the reviewbooks table based on $avg_rating$ and $message$ ) , get all the query results. Return the query results if there is query data; otherwise, return False.","public Object books ( HttpRequest request , JdbcTemplate conn , String avg_rating , String message ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List check = conn . query ( "" select * from reviewbooks where avg_rating=? and message= ? "" , new Object [ ] { avg_rating , message } , new BeanPropertyRowMapper ( List . class ) ) ; if ( check . isEmpty ( ) ) { return false ; } else { return check ; } } else { return false ; } }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute SQL ( query all columns in the reviewbooks table based on $avg_rating$ and $message$ ) , get all the query results. Return the query results if there is query data; otherwise, return False.","<met> <mod> public </mod> type_identifier books <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier avg_rating </for> , <for> type_identifier message </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> check = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { avg_rating , message } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> check . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return check ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $databasePath$ to get the database engine and connect to the database, where the echo parameter is True, execute SQL ( get the week column intableh where id is $id$ ) , get the first data, and return the query result.","public Object select ( DataSource databasePath , String id ) { JdbcTemplate connection = new JdbcTemplate ( databasePath ) ; List results = connection . query ( "" select week from tableh where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return results . get ( 0 ) ; }","Generate syntax code: Use $databasePath$ to get the database engine and connect to the database, where the echo parameter is True, execute SQL ( get the week column intableh where id is $id$ ) , get the first data, and return the query result.","<met> <mod> public </mod> type_identifier select <for> ( <for> type_identifier databasePath </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( databasePath ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: connect to the database based on $engine$, query all columns in the users table based on $email$ and get all the data. Store the query results as list. If the length of list is 0, then return False; otherwise return the list.","public Object selectSignin ( DataSource engine , String email ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List im = con . query ( "" select * from users where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; List l = new ArrayList ( ) ; for ( Object item : im ) { l . add ( item ) ; } if ( l . size ( ) == 0 ) { return false ; } else { return l ; } }","Generate syntax code: connect to the database based on $engine$, query all columns in the users table based on $email$ and get all the data. Store the query results as list. If the length of list is 0, then return False; otherwise return the list.","<met> <mod> public </mod> type_identifier selectSignin <for> ( <for> type_identifier engine </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> im = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> l = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : im ) <blo> { <exp> <met> l . add <arg> ( item ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <bin> <met> l . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return l ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $engine$ to get the connection and set the SQL with the java expression ( query all columns in $parameters$ table based on $id$ ) . Use the acquired connection to execute the SQL and get all the data. Finally, return the query result.","public List < Object > dnsEdit ( EntityManager engine , Root < Object > parameters , String id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( parameters ) . where ( cb . equal ( parameters . get ( "" id "" ) , id ) ) ; List < Object > result = engine . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Use $engine$ to get the connection and set the SQL with the java expression ( query all columns in $parameters$ table based on $id$ ) . Use the acquired connection to execute the SQL and get all the data. Finally, return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> dnsEdit <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> parameters </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( parameters ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> parameters . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement via with $engine$ ( query all columns in the us_healthcare table ) to get all the data. Use for loop to iterate through the query results. Assign the 0th and 1st element of each item in the query to 'year_cost' and 'per_cap_cost' respectively, and store them in 'list'. Use jsonify to process the list content and return it.","public JSONArray healthcareCost ( JdbcTemplate engine ) { List healthcareData = engine . query ( "" select * from us_healthcare "" , new BeanPropertyRowMapper ( List . class ) ) ; List returnData = new ArrayList ( ) ; for ( Object row : healthcareData ) { JSONObject jsonObject = new JSONObject ( ) ; jsonObject . put ( "" year_cost "" , JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; jsonObject . put ( "" per_cap_cost "" , JSONObject . parseObject ( row . toString ( ) ) . get ( 1 ) ) ; returnData . add ( jsonObject ) ; } return JSONObject . parseArray ( returnData . toString ( ) ) ; }","Generate syntax code: Execute the SQL statement via with $engine$ ( query all columns in the us_healthcare table ) to get all the data. Use for loop to iterate through the query results. Assign the 0th and 1st element of each item in the query to 'year_cost' and 'per_cap_cost' respectively, and store them in 'list'. Use jsonify to process the list content and return it.","<met> <mod> public </mod> type_identifier healthcareCost <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> healthcareData = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> returnData = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : healthcareData ) <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> returnData . add <arg> ( jsonObject ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <met> JSONObject . parseArray <arg> ( <met> returnData . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine via $host$, execute the SQL statement ( get all the columns in the ROLE based on $dirk_gently$ ) , get all the data, and finally return the obtained result.","public List teardownModule ( DataSource host , String dirk_gently ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List res = engine . query ( "" select * from ROLE where dirk_gently= ? "" , new Object [ ] { dirk_gently } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine via $host$, execute the SQL statement ( get all the columns in the ROLE based on $dirk_gently$ ) , get all the data, and finally return the obtained result.","<met> <mod> public </mod> type_identifier teardownModule <for> ( <for> type_identifier host </for> , <for> type_identifier dirk_gently </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dirk_gently } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the date column in the books where the name of user is $username$ ) with $conn$ and get all the data, return the query results if they are true.","public List main ( JdbcTemplate conn , String username ) { List res = conn . query ( "" select date from books where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Execute the SQL ( get the date column in the books where the name of user is $username$ ) with $conn$ and get all the data, return the query results if they are true.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: get all the columns from the messfee table, get all the data, render and return 'transaction.html', where the result parameter is the query result.","public String transaction ( JdbcTemplate conn , Model model ) { List result = conn . query ( "" select * from messfee "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" result "" , result ) ; return "" transaction.html "" ; }","Generate syntax code: Use $conn$ to execute the SQL statement: get all the columns from the messfee table, get all the data, render and return 'transaction.html', where the result parameter is the query result.","<met> <mod> public </mod> type_identifier transaction <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to use the java expression to Set up SQL: Query all value in the $meta$ table with key as $key$, use $conn$ connection to execute SQL statement to get data and return query results. If ValueError exception occurs, print the exception message.","public List < Object > getInfo ( EntityManager conn , Root < Object > meta , String key ) { try { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( meta ) . where ( cb . equal ( meta . get ( "" key "" ) , key ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use the java expression to Set up SQL: Query all value in the $meta$ table with key as $key$, use $conn$ connection to execute SQL statement to get data and return query results. If ValueError exception occurs, print the exception message.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getInfo <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> meta </for> , <for> type_identifier key </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( meta ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> meta . get <arg> ( string_literal ) </arg> </met> , key ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine through $url$ and set the echo parameter to True. Set sql ( query the values column in the zoo table based on $critter$, $count$ and $damages$ ) , execute SQL, get the first piece of data, and return the query results.","public Object makeDbtable ( DataSource url , String critter , String count , String damages ) { JdbcTemplate engine = new JdbcTemplate ( url ) ; List res = engine . query ( "" select values from zoo where critter = ? and count = ? and damages = ? "" , new Object [ ] { critter , count , damages } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Get the database engine through $url$ and set the echo parameter to True. Set sql ( query the values column in the zoo table based on $critter$, $count$ and $damages$ ) , execute SQL, get the first piece of data, and return the query results.","<met> <mod> public </mod> type_identifier makeDbtable <for> ( <for> type_identifier url </for> , <for> type_identifier critter </for> , <for> type_identifier count </for> , <for> type_identifier damages </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { critter , count , damages } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( get all the columns in the TABLE where value is $value$ ) to get all the data and return. If Exception Exception Exception occurs during execution, pass directly.","public List selectValue ( JdbcTemplate conn , String value ) { try { List results = conn . query ( "" select * from table where value = ? "" , new Object [ ] { value } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( get all the columns in the TABLE where value is $value$ ) to get all the data and return. If Exception Exception Exception occurs during execution, pass directly.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier value </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { value } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the school table where username is $user_log$ ) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""flight.html"" page, where the parameter flight is the query result that returns.","public String login ( JdbcTemplate conn , String user_log , Model model ) { List schools = conn . query ( "" select * from school where username= ? "" , new Object [ ] { user_log } , new BeanPropertyRowMapper ( List . class ) ) ; if ( schools . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" flight "" , schools . get ( 0 ) ) ; return "" flight.html "" ; } }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the school table where username is $user_log$ ) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""flight.html"" page, where the parameter flight is the query result that returns.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier conn </for> , <for> type_identifier user_log </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> schools = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_log } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> schools . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , <met> schools . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If the username exists, the subsequent code is executed. Set the SQL ( query for password information in the User table when the Username is $username$ ) , execute the SQL using $db$ and get the first data. If the result of the query is None, the rendered 'error.html' is returned. Otherwise, return the rendered ""success.html"".","public String login ( JdbcTemplate db , String username ) { if ( username == null ) { return "" error.html "" ; } else { List valid = db . query ( "" select password from user where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( valid . isEmpty ( ) ) { return "" error.html "" ; } else { return "" success.html "" ; } } }","Generate syntax code: If the username exists, the subsequent code is executed. Set the SQL ( query for password information in the User table when the Username is $username$ ) , execute the SQL using $db$ and get the first data. If the result of the query is None, the rendered 'error.html' is returned. Otherwise, return the rendered ""success.html"".","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier db </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <bin> username == null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> valid = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> valid . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get geoguide_id column in dataset based on $idr$ ) and get all the data, finally store the 0th element of each item of query result as list and return.","public List getPointsIdInIdr ( JdbcTemplate conn , String idr ) { List cursor = conn . query ( "" select geoguide_id from dataset where idr = ? "" , new Object [ ] { idr } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object r : cursor ) { list . add ( JSONObject . parseObject ( r . toString ( ) ) . get ( 0 ) ) ; } return list ; }","Generate syntax code: Use $conn$ to execute SQL ( get geoguide_id column in dataset based on $idr$ ) and get all the data, finally store the 0th element of each item of query result as list and return.","<met> <mod> public </mod> type_identifier getPointsIdInIdr <for> ( <for> type_identifier conn </for> , <for> type_identifier idr </for> ) </for> <blo> { <loc> type_identifier <var> cursor = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { idr } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : cursor ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: Use $sqlEngine$ to connect to the database and execute the SQL statement: Query the title data in the redditWeightTable table based on $username$, convert all acquired data to DataFrame type and return it.","public List loadData ( DataSource sqlEngine , String username ) { JdbcTemplate con = new JdbcTemplate ( sqlEngine ) ; List df = con . query ( "" select title from redditweighttable where username= ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return df ; }","Generate syntax code: Use $sqlEngine$ to connect to the database and execute the SQL statement: Query the title data in the redditWeightTable table based on $username$, convert all acquired data to DataFrame type and return it.","<met> <mod> public </mod> type_identifier loadData <for> ( <for> type_identifier sqlEngine </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( sqlEngine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> df = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return df ; </ret> } </blo> </met>"
"Generate origin code: Use $connection$ to get a cursor, execute SQL ( query the password column in the users table based on $username$ and $phone$ ) , get all the query results, close the connection, and return the query results.","public List adminAccount ( JdbcTemplate connection , String username , String phone ) { List account = connection . query ( "" select password from users where username=? and phone= ? "" , new Object [ ] { username , phone } , new BeanPropertyRowMapper ( List . class ) ) ; return account ; }","Generate syntax code: Use $connection$ to get a cursor, execute SQL ( query the password column in the users table based on $username$ and $phone$ ) , get all the query results, close the connection, and return the query results.","<met> <mod> public </mod> type_identifier adminAccount <for> ( <for> type_identifier connection </for> , <for> type_identifier username </for> , <for> type_identifier phone </for> ) </for> <blo> { <loc> type_identifier <var> account = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , phone } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return account ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( query the first piece of data of all the information in the books table based on $isbn$ ) as the value of the parameter book; use $db$ to execute SQL ( query the first row of data in the reviews table based on $isbn$ and $review_user$ ) as the value of the parameter exist_review, and return the rendered 'result.html' page, where the parameters are book and exist_review.","public String review ( JdbcTemplate db , String isbn , String review_user , Model model ) { List books = db . query ( "" select * from books where isbn= ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List exist_reviews = db . query ( "" select * from reviews where isbn=? and review_user= ? "" , new Object [ ] { isbn , review_user } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , books . get ( 0 ) ) ; model . addAttribute ( "" exist_review "" , exist_reviews . get ( 0 ) ) ; return "" result.html "" ; }","Generate syntax code: Use $db$ to execute SQL ( query the first piece of data of all the information in the books table based on $isbn$ ) as the value of the parameter book; use $db$ to execute SQL ( query the first row of data in the reviews table based on $isbn$ and $review_user$ ) as the value of the parameter exist_review, and return the rendered 'result.html' page, where the parameters are book and exist_review.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier db </for> , <for> type_identifier isbn </for> , <for> type_identifier review_user </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> books = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> exist_reviews = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , review_user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> books . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , <met> exist_reviews . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Set SQL in java expressions: Query bar in $test$ table based on $id$. Use $conn$ to execute SQL and get all data. Finally return the query results.,"public List < Object > testComputed ( EntityManager conn , Root < Object > test , String id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( test ) . where ( cb . equal ( test . get ( "" id "" ) , id ) ) ; List < Object > bars = conn . createQuery ( cq ) . getResultList ( ) ; return bars ; }",Generate syntax code: Set SQL in java expressions: Query bar in $test$ table based on $id$. Use $conn$ to execute SQL and get all data. Finally return the query results.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testComputed <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> test </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( test ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> test . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> bars = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return bars ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query the webpage data in the Website table ) , execute SQL to get all the data through the $connection$ connection, and return the obtained data.","public List insertWebsite ( JdbcTemplate connection ) { List res = connection . query ( "" select webpage from Website "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set up SQL ( query the webpage data in the Website table ) , execute SQL to get all the data through the $connection$ connection, and return the obtained data.","<met> <mod> public </mod> type_identifier insertWebsite <for> ( <for> type_identifier connection </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", set SQL ( query all the information in the users table based on $username$ ) . Use $conn$ to execute SQL, get the first piece of data, and return the query result. Otherwise, return the rendered ""register.html"" page.","public Object selectValue ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List users = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; return users . get ( 0 ) ; } else { return "" register.html "" ; } }","Generate syntax code: If the request method is ""POST"", set SQL ( query all the information in the users table based on $username$ ) . Use $conn$ to execute SQL, get the first piece of data, and return the query result. Otherwise, return the rendered ""register.html"" page.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> users . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: connect to the database through $engine$, then use the ORM method to get the counts of all the columns in the $table$ table and get all the data. Finally return the result obtained by the SQL statement.","public List < Object > getCount ( EntityManager engine , Root < Object > table ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) ; List < Object > r = engine . createQuery ( cq ) . getResultList ( ) ; return r ; }","Generate syntax code: connect to the database through $engine$, then use the ORM method to get the counts of all the columns in the $table$ table and get all the data. Finally return the result obtained by the SQL statement.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getCount <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( table ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> r = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return r ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the pearlin column in the flights table according to $nation$ ) , get the first query result, output the data, and return the rendered 'index.html' page, where the parameter flights is the query result.","public String index ( JdbcTemplate conn , String nation , Model model ) { List results = conn . query ( "" select pearlin from flights where nation = ? "" , new Object [ ] { nation } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; model . addAttribute ( "" flights "" , results ) ; return "" index.html "" ; }","Generate syntax code: Use $conn$ to execute SQL ( query the pearlin column in the flights table according to $nation$ ) , get the first query result, output the data, and return the rendered 'index.html' page, where the parameter flights is the query result.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier nation </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nation } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request method is 'GET', render and return ""index.html"". If the request method is ""POST"", then use $conn$ to execute the SQL statement ( query all the columns in the books where isbn is $isbn$ and title is $title$ ) , get all the data, render and return ""search.html"" with the rows parameter as the result of the query.","public Object selectValue ( HttpRequest request , JdbcTemplate conn , String isbn , String title , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List results = conn . query ( "" select * from books where isbn =? and title = ? "" , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , results ) ; return "" search.html "" ; } else { return "" index.html "" ; } }","Generate syntax code: If the request method is 'GET', render and return ""index.html"". If the request method is ""POST"", then use $conn$ to execute the SQL statement ( query all the columns in the books where isbn is $isbn$ and title is $title$ ) , get all the data, render and return ""search.html"" with the rows parameter as the result of the query.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Establish a connection through $e$. Execute the SQL statement ( query the date column in the JPY table according to $user$ ) and get all the data. Use for loop to convert each item of the query result into dict, and store it in list, and return the list.","public List get ( DataSource e , String user ) { JdbcTemplate engine = new JdbcTemplate ( e ) ; List query = engine . query ( "" select date from JPY where user= ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return query ; }","Generate syntax code: Establish a connection through $e$. Execute the SQL statement ( query the date column in the JPY table according to $user$ ) and get all the data. Use for loop to convert each item of the query result into dict, and store it in list, and return the list.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier e </for> , <for> type_identifier user </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return query ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine using $address$. Start a connection based on the database engine obtained. Then query all player_headshot in the players table where name is $name$, and print all query results row by row through the for loop.","public void getPlayerImage ( DataSource address , String name ) { JdbcTemplate conn = new JdbcTemplate ( address ) ; List headshot = conn . query ( "" select player_headshot from players where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : headshot ) { System . out . println ( row ) ; } }","Generate syntax code: Get the database engine using $address$. Start a connection based on the database engine obtained. Then query all player_headshot in the players table where name is $name$, and print all query results row by row through the for loop.","<met> <mod> public </mod> void_type getPlayerImage <for> ( <for> type_identifier address </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( address ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> headshot = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : headshot ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $conn$ connection to execute SQL statement: Query all columns in the meishi_collection table through $id$ and get all the data. Output the query results using logging.info ( ) , store the 0th element of each item of the query results as list and return it. If Exception occurs, output the exception message through logging.error ( ) .","public List selectValue ( JdbcTemplate conn , String id ) { List allRows = conn . query ( "" select * from meishi_collection where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; try { List list = new ArrayList ( ) ; for ( Object item : allRows ) { list . add ( JSONObject . parseObject ( item . toString ( ) ) . get ( 0 ) ) ; } return list ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use $conn$ connection to execute SQL statement: Query all columns in the meishi_collection table through $id$ and get all the data. Output the query results using logging.info ( ) , store the 0th element of each item of the query results as list and return it. If Exception occurs, output the exception message through logging.error ( ) .","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> allRows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier item : allRows ) <blo> { <exp> <met> list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> item . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the java expression to set the SQL statement to get all the id in $users_table$ based on $name$ , execute the SQL and get the data through $connection$ connection, and make sure the database connection is closed. If no data is fetched, return None; otherwise return all results in dict form.","public List < Object > getUser ( EntityManager connection , Root < Object > users_table , String name ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users_table ) . where ( cb . equal ( users_table . get ( "" name "" ) , name ) ) ; List < Object > found = connection . createQuery ( cq ) . getResultList ( ) ; if ( found . isEmpty ( ) ) { return null ; } else { return found ; } }","Generate syntax code: Use the java expression to set the SQL statement to get all the id in $users_table$ based on $name$ , execute the SQL and get the data through $connection$ connection, and make sure the database connection is closed. If no data is fetched, return None; otherwise return all results in dict form.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getUser <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users_table </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users_table . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> found = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> found . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return found ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the crows information in the series table based on $name$ ) , get all the data and print the query results.","public void test ( JdbcTemplate conn , String name ) { List yang = conn . query ( "" select crows from series where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( yang ) ; }","Generate syntax code: Use $conn$ to execute SQL ( query the crows information in the series table based on $name$ ) , get all the data and print the query results.","<met> <mod> public </mod> void_type test <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> yang = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( yang ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Connect to the database through $db_engine$, set the SQL statement: Query all the columns in the customers table based on $username$ and $password$, and execute the SQL statement to get the first piece of data. If the query result is empty, return None; otherwise return the query result.","public List getCustomer ( DataSource db_engine , String username , String password ) { JdbcTemplate engine = new JdbcTemplate ( db_engine ) ; List res = engine . query ( "" select * from customers where username=? and password= ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Connect to the database through $db_engine$, set the SQL statement: Query all the columns in the customers table based on $username$ and $password$, and execute the SQL statement to get the first piece of data. If the query result is empty, return None; otherwise return the query result.","<met> <mod> public </mod> type_identifier getCustomer <for> ( <for> type_identifier db_engine </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up the SQL ( query the ticker_name column in the forecast table based on $future_date$ ) , execute the SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List saveForecast ( JdbcTemplate conn , String future_date ) { List results = conn . query ( "" select ticker_name from forecast where future_date = ? "" , new Object [ ] { future_date } , new BeanPropertyRowMapper ( List . class ) ) ; List names = new ArrayList ( ) ; for ( Object i : results ) { names . add ( i ) ; } return names ; }","Generate syntax code: Set up the SQL ( query the ticker_name column in the forecast table based on $future_date$ ) , execute the SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier saveForecast <for> ( <for> type_identifier conn </for> , <for> type_identifier future_date </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { future_date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> names = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> names . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return names ; </ret> } </blo> </met>"
"Generate origin code: create a database connection based on $engine$. Try to execute the following code: Use, connect and execute SQL ( query the result data in the result_dict table based on $status$ ) and get all the data. Set up a new dictionary, and store ""SUCCESS"" in the corresponding value of status in the dictionary. Store the 0th element of all query results in list. If an exception occurs, the exception information should be printed and the ""FAIL"" should be stored in the corresponding value of status in the dictionary. Finally, return the new dictionary and the generated list data.","public JSONObject executeSimple ( DataSource engine , String status ) { JSONObject jsonObject = new JSONObject ( ) ; List results = new ArrayList ( ) ; try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List texts = conn . query ( "" select result from result_dict where status= ? "" , new Object [ ] { status } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : texts ) { results . add ( JSONObject . parseObject ( i . toString ( ) ) . get ( 0 ) ) ; } jsonObject . put ( "" status "" , "" SUCCESS "" ) ; jsonObject . put ( "" results "" , results ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; jsonObject . put ( "" status "" , "" SUCCESS "" ) ; jsonObject . put ( "" results "" , results ) ; } return jsonObject ; }","Generate syntax code: create a database connection based on $engine$. Try to execute the following code: Use, connect and execute SQL ( query the result data in the result_dict table based on $status$ ) and get all the data. Set up a new dictionary, and store ""SUCCESS"" in the corresponding value of status in the dictionary. Store the 0th element of all query results in list. If an exception occurs, the exception information should be printed and the ""FAIL"" should be stored in the corresponding value of status in the dictionary. Finally, return the new dictionary and the generated list data.","<met> <mod> public </mod> type_identifier executeSimple <for> ( <for> type_identifier engine </for> , <for> type_identifier status </for> ) </for> <blo> { <loc> type_identifier <var> jsonObject = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { status } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : texts ) <blo> { <exp> <met> results . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , results ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <exp> <met> jsonObject . put <arg> ( string_literal , results ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return jsonObject ; </ret> } </blo> </met>"
"Generate origin code: Create the database engine from the $DATABASEURI$ and get the connection.Execute the SQL ( query all columns in the players table where ssn is $ssn$ ) according to $conn$ and get all the data. Return the rendered ""listplayer.html"" and passe query result to the rows parameter.","public String listPlayer ( DataSource DATABASEURI , String ssn , Model model ) { JdbcTemplate conn = new JdbcTemplate ( DATABASEURI ) ; List player = conn . query ( "" select * from players where ssn = ? "" , new Object [ ] { ssn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" rows "" , player ) ; return "" listplayer.html "" ; }","Generate syntax code: Create the database engine from the $DATABASEURI$ and get the connection.Execute the SQL ( query all columns in the players table where ssn is $ssn$ ) according to $conn$ and get all the data. Return the rendered ""listplayer.html"" and passe query result to the rows parameter.","<met> <mod> public </mod> type_identifier listPlayer <for> ( <for> type_identifier DATABASEURI </for> , <for> type_identifier ssn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( DATABASEURI ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> player = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ssn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , player ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement, which contains the following contents: Query the job data in the zhilian table whose company is $company$, use the $session$ connection to execute the SQL statement,get all the data, and print all the obtained data.","public void processItem ( JdbcTemplate session , String company ) { List results = session . query ( "" select job from zhilian where company =? "" , new Object [ ] { company } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; }","Generate syntax code: Set the SQL statement, which contains the following contents: Query the job data in the zhilian table whose company is $company$, use the $session$ connection to execute the SQL statement,get all the data, and print all the obtained data.","<met> <mod> public </mod> void_type processItem <for> ( <for> type_identifier session </for> , <for> type_identifier company </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { company } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all the columns in the secrets where id is $id$ ) and get all the data, then use the for loop to convert the tenth element of each item in the query result into a string type to be stored as a list, and then return the list content.","public List testSoft ( JdbcTemplate conn , String id ) { List results = conn . query ( "" select * from secrets where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List secret_list = new ArrayList ( ) ; for ( Object result : results ) { secret_list . add ( JSONObject . parseObject ( result . toString ( ) ) . get ( 0 ) ) ; } return secret_list ; }","Generate syntax code: Use $conn$ to execute SQL ( get all the columns in the secrets where id is $id$ ) and get all the data, then use the for loop to convert the tenth element of each item in the query result into a string type to be stored as a list, and then return the list content.","<met> <mod> public </mod> type_identifier testSoft <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> secret_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : results ) <blo> { <exp> <met> secret_list . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> result . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return secret_list ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the column_name and column_type in the table_name where name is $name1$ ) with $conn$ and get all the data, and return the query results if they are true.","public List addColumnIfNotExist ( JdbcTemplate conn , String name1 ) { List res = conn . query ( "" select column_name, column_type from table_name where name= ? "" , new Object [ ] { name1 } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res ; } }","Generate syntax code: Execute the SQL ( get the column_name and column_type in the table_name where name is $name1$ ) with $conn$ and get all the data, and return the query results if they are true.","<met> <mod> public </mod> type_identifier addColumnIfNotExist <for> ( <for> type_identifier conn </for> , <for> type_identifier name1 </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name1 } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return res ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement ( get the unique_id data in the ic_user table according to $email$ ) , execute the SQL statement to get all the data through the $con$ connection, and return None iif there is no execution result. Otherwise, return the 0th element of the execution result.","public Object getUserIdFromEmail ( JdbcTemplate conn , String email ) { List res = conn . query ( "" select unique_id from ic_user where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return null ; } else { return res . get ( 0 ) ; } }","Generate syntax code: Set the SQL statement ( get the unique_id data in the ic_user table according to $email$ ) , execute the SQL statement to get all the data through the $con$ connection, and return None iif there is no execution result. Otherwise, return the 0th element of the execution result.","<met> <mod> public </mod> type_identifier getUserIdFromEmail <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, execute SQL ( get the id column in the jam_post table where url is $url$, username is $uname$, and keyword is $word$ ) , get all the data, and finally return the query result.","public List getPostid ( DataSource DB_CONNECT_STRING , String url , String uname , String word ) { JdbcTemplate engine = new JdbcTemplate ( DB_CONNECT_STRING ) ; List pid = engine . query ( "" select id from jam_post where url=? and username=? and keyword= ? "" , new Object [ ] { url , uname , word } , new BeanPropertyRowMapper ( List . class ) ) ; return pid ; }","Generate syntax code: Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, execute SQL ( get the id column in the jam_post table where url is $url$, username is $uname$, and keyword is $word$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getPostid <for> ( <for> type_identifier DB_CONNECT_STRING </for> , <for> type_identifier url </for> , <for> type_identifier uname </for> , <for> type_identifier word </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DB_CONNECT_STRING ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> pid = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { url , uname , word } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return pid ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as 'post', the SQL is executed via $conn$ ( query the first email in users via $username$ ) . If the query result is not empty, return the query result.","public Object register ( HttpRequest request , JdbcTemplate conn , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List us = conn . query ( "" select email from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( us . isEmpty ( ) ) { return null ; } else { return us . get ( 0 ) ; } } else { return null ; } }","Generate syntax code: If the request module sends the request as 'post', the SQL is executed via $conn$ ( query the first email in users via $username$ ) . If the query result is not empty, return the query result.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> us = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> us . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return <met> us . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $connection$ to execute the SQL statement ( query all columns in the TABLE table based on $Backends$ ) and get all the data. Make sure $connection$ is closed, store the query results as list and return it.","public List tearDown ( JdbcTemplate connection , String Backends ) { List res = connection . query ( "" select * from table where Backends = ? "" , new Object [ ] { Backends } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $connection$ to execute the SQL statement ( query all columns in the TABLE table based on $Backends$ ) and get all the data. Make sure $connection$ is closed, store the query results as list and return it.","<met> <mod> public </mod> type_identifier tearDown <for> ( <for> type_identifier connection </for> , <for> type_identifier Backends </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { Backends } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set sql with the string matching method ( query the table_name column in the infor_tables table based on $table_schema$ ) , execute SQL with $conn$, get all the query results, use for loop to traverse all the query results, insert them into a list and return the list.","public List getMergedTable ( JdbcTemplate conn , String table_schema ) { List rows = conn . query ( "" select table_name from infor_tables where table_schema= ? "" , new Object [ ] { table_schema } , new BeanPropertyRowMapper ( List . class ) ) ; List table_list = new ArrayList ( ) ; for ( Object row : rows ) { table_list . add ( row ) ; } return table_list ; }","Generate syntax code: Set sql with the string matching method ( query the table_name column in the infor_tables table based on $table_schema$ ) , execute SQL with $conn$, get all the query results, use for loop to traverse all the query results, insert them into a list and return the list.","<met> <mod> public </mod> type_identifier getMergedTable <for> ( <for> type_identifier conn </for> , <for> type_identifier table_schema </for> ) </for> <blo> { <loc> type_identifier <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table_schema } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> table_list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : rows ) <blo> { <exp> <met> table_list . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return table_list ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL statement: Query all 'name' with 'id': $ID$ in crawl_files table, execute SQL by $conn$ to get all the data, use logging.debug ( ) method to process the result of execution statement and return the result of execution statement.","public List getQuery ( JdbcTemplate conn , String ID ) { List results = conn . query ( "" select name from crawl_files where id= ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; return results ; }","Generate syntax code: Set up SQL statement: Query all 'name' with 'id': $ID$ in crawl_files table, execute SQL by $conn$ to get all the data, use logging.debug ( ) method to process the result of execution statement and return the result of execution statement.","<met> <mod> public </mod> type_identifier getQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$ ( query all columns from the reviews table ) to get the first data, render and return ""index.html"", where the res parameter is the first obtained data.","public String index ( JdbcTemplate conn , Model model ) { List rt = conn . query ( "" select * from reviews "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , rt ) ; return "" index.html "" ; }","Generate syntax code: Execute SQL via $conn$ ( query all columns from the reviews table ) to get the first data, render and return ""index.html"", where the res parameter is the first obtained data.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> type_identifier <var> rt = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , rt ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine using $db_conn$. Try to connect to the DATABASE and use the connection to execute the SQL statement ( query all columns in the DATABASE ) to get all the data and return it. Finally, use the dispose method to disconnect the database.","public List searchDATABASE ( DataSource db_conn ) { JdbcTemplate engine = new JdbcTemplate ( db_conn ) ; try { List DATABASEresults = engine . query ( "" select * from database "" , new BeanPropertyRowMapper ( List . class ) ) ; return DATABASEresults ; } finally { return null ; } }","Generate syntax code: Get the database engine using $db_conn$. Try to connect to the DATABASE and use the connection to execute the SQL statement ( query all columns in the DATABASE ) to get all the data and return it. Finally, use the dispose method to disconnect the database.","<met> <mod> public </mod> type_identifier searchDATABASE <for> ( <for> type_identifier db_conn </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_conn ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> DATABASEresults = <met> engine . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return DATABASEresults ; </ret> } </blo> <fin> finally <blo> { <ret> return null_literal ; </ret> } </blo> </fin> </try> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query the ID in the Students table based on $StuName$ ) and get all the data. Close the data connection and convert each item in the query result to a dict and return.,"public List queryPage ( JdbcTemplate conn , String StuName ) { List resID = conn . query ( "" select id from students where stuname= ? "" , new Object [ ] { StuName } , new BeanPropertyRowMapper ( List . class ) ) ; return resID ; }",Generate syntax code: Use $conn$ to execute SQL ( query the ID in the Students table based on $StuName$ ) and get all the data. Close the data connection and convert each item in the query result to a dict and return.,"<met> <mod> public </mod> type_identifier queryPage <for> ( <for> type_identifier conn </for> , <for> type_identifier StuName </for> ) </for> <blo> { <loc> type_identifier <var> resID = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { StuName } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return resID ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL based on the java expression: ( query country column in $wigle$ table based on $ssid$ ) . Execute the SQL with $conn$ and get all the data, use for loop to iterate through and print the results of each query result.""","public void getSource ( EntityManager conn , Root < Object > wigle , String ssid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( wigle ) . where ( cb . equal ( wigle . get ( "" ssid "" ) , ssid ) ) ; List < Object > countries = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object res : countries ) { System . out . println ( res ) ; } }","Generate syntax code: Set up SQL based on the java expression: ( query country column in $wigle$ table based on $ssid$ ) . Execute the SQL with $conn$ and get all the data, use for loop to iterate through and print the results of each query result.""","<met> <mod> public </mod> void_type getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> wigle </for> , <for> type_identifier ssid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( wigle ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> wigle . get <arg> ( string_literal ) </arg> </met> , ssid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> countries = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier res : countries ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set up the SQL statement ( use the format ( ) function to output string in a format way and query all columns in the string $table$ ) . Use $db_engine$ to connect the database and try to execute the SQL statement, if Exception, print the abnormal information; otherwise, use for loop traversal to query the results, print the query results, and close them.""","public void printAllData ( DataSource db_engine , String table ) { JdbcTemplate connection = new JdbcTemplate ( db_engine ) ; try { List result = connection . query ( "" select * from ? "" , new Object [ ] { table } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( row ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } }","Generate syntax code: Set up the SQL statement ( use the format ( ) function to output string in a format way and query all columns in the string $table$ ) . Use $db_engine$ to connect the database and try to execute the SQL statement, if Exception, print the abnormal information; otherwise, use for loop traversal to query the results, print the query results, and close them.""","<met> <mod> public </mod> void_type printAllData <for> ( <for> type_identifier db_engine </for> , <for> type_identifier table </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_engine ) </arg> </obj> </var> ; </loc> <try> try <blo> { <loc> type_identifier <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { table } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use the java expression to set up SQL: To query the data in $articles_table$ through $author_snippet$, use $connection$ to execute SQL, get all the data, and return the obtained data. If Exception occurs, prints the exception message and return.""","public List < Object > displayArticlesByAuthor ( EntityManager connection , Root < Object > articles_table , String author_snippet ) { try { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( articles_table ) . where ( cb . equal ( articles_table . get ( "" author "" ) , author_snippet ) ) ; List < Object > rp = connection . createQuery ( cq ) . getResultList ( ) ; return rp ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }","Generate syntax code: Try to use the java expression to set up SQL: To query the data in $articles_table$ through $author_snippet$, use $connection$ to execute SQL, get all the data, and return the obtained data. If Exception occurs, prints the exception message and return.""","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> displayArticlesByAuthor <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> articles_table </for> , <for> type_identifier author_snippet </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( articles_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> articles_table . get <arg> ( string_literal ) </arg> </met> , author_snippet ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rp = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return rp ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the noodles table based on $id$ ) and get all the data. Use for loop iterate through all query results, add the value corresponding to the stuff in each row to the string, and space it with newlines. Finally return the processed results.","public String hello ( JdbcTemplate conn , String id ) { List result = conn . query ( "" select * from noodles where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; String return_value = "" "" ; for ( Object row : result ) { return_value += JSONObject . parseObject ( row . toString ( ) ) . getString ( "" stuff "" ) ; } return return_value ; }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the noodles table based on $id$ ) and get all the data. Use for loop iterate through all query results, add the value corresponding to the stuff in each row to the string, and space it with newlines. Finally return the processed results.","<met> <mod> public </mod> type_identifier hello <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> return_value = string_literal </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <ass> return_value += <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> </ass> ; </exp> } </blo> </enh> <ret> return return_value ; </ret> } </blo> </met>"
"Generate origin code: Use $url$ to get the database engine. Get the connection. Then set SQL: To query all columns in the event_details table that the 'email' is $email$, and execute SQL to get all the data. Use for loop to store each element in the query result into list and return the list content.""","public List viewMyEvents ( DataSource url , String email ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List events = conn . query ( "" select * from event_details where email = ? "" , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; List events_json = new ArrayList ( ) ; for ( Object event : events ) { events_json . add ( event ) ; } return events_json ; }","Generate syntax code: Use $url$ to get the database engine. Get the connection. Then set SQL: To query all columns in the event_details table that the 'email' is $email$, and execute SQL to get all the data. Use for loop to store each element in the query result into list and return the list content.""","<met> <mod> public </mod> type_identifier viewMyEvents <for> ( <for> type_identifier url </for> , <for> type_identifier email </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> events = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> events_json = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier event : events ) <blo> { <exp> <met> events_json . add <arg> ( event ) </arg> </met> ; </exp> } </blo> </enh> <ret> return events_json ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query price in test table based on $name$ ) and get all query results. If the query data exists, use redirect to redirect to the '/' page.""","public String get ( JdbcTemplate conn , String name ) { List price = conn . query ( "" select price from test where name= ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; if ( price . isEmpty ( ) ) { return null ; } else { return "" / "" ; } }","Generate syntax code: Execute SQL with $conn$ ( query price in test table based on $name$ ) and get all query results. If the query data exists, use redirect to redirect to the '/' page.""","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> price = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> price . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the TABLE_NAME column in the TABLES table where TABLE_SCHEMA is $TABLE_SCHEMA$, execute SQL through $conn$ and get all the data.""","public List tableNames ( JdbcTemplate conn , String TABLE_SCHEMA ) { List tables = conn . query ( "" select table_name from tables wherE TABLE_SCHEMA = ? "" , new Object [ ] { TABLE_SCHEMA } , new BeanPropertyRowMapper ( List . class ) ) ; List names = new ArrayList ( ) ; for ( Object table : tables ) { names . add ( JSONObject . parseObject ( table . toString ( ) ) . getString ( "" TABLE_NAME "" ) ) ; } return names ; }","Generate syntax code: Set the SQL statement: Query the TABLE_NAME column in the TABLES table where TABLE_SCHEMA is $TABLE_SCHEMA$, execute SQL through $conn$ and get all the data.""","<met> <mod> public </mod> type_identifier tableNames <for> ( <for> type_identifier conn </for> , <for> type_identifier TABLE_SCHEMA </for> ) </for> <blo> { <loc> type_identifier <var> tables = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { TABLE_SCHEMA } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> names = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier table : tables ) <blo> { <exp> <met> names . add <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> table . toString <arg> ( ) </arg> </met> ) </arg> </met> . getString <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return names ; </ret> } </blo> </met>"
"Generate origin code: If the request method is 'GET', render and return 'main.html'. Otherwise execute the SQL statement ( query all columns in the books table when type equals $input$ ) using $conn$ and get all the data. Render and return 'main.html', where the results parameter is the result of the query.""","public String index ( HttpRequest request , JdbcTemplate conn , String input , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List results = conn . query ( "" select * from books where type = ? "" , new Object [ ] { input } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; return "" main.html "" ; } else { return "" main.html "" ; } }","Generate syntax code: If the request method is 'GET', render and return 'main.html'. Otherwise execute the SQL statement ( query all columns in the books table when type equals $input$ ) using $conn$ and get all the data. Render and return 'main.html', where the results parameter is the result of the query.""","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier input </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { input } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $type_id$ is not empty, set the SQL statement: Query the id column in the options table according to $type_id$, use $conn$ to execute SQL statement, get all data, use for loop to convert each element in the query result to dict, store it in list, and return the list content.""","public List getListOption ( JdbcTemplate conn , String type_id ) { if ( type_id != null ) { List entries = conn . query ( "" select id from options where type_id = ? "" , new Object [ ] { type_id } , new BeanPropertyRowMapper ( List . class ) ) ; List json_row = new ArrayList ( ) ; for ( Object en : entries ) { json_row . add ( en ) ; } return json_row ; } else { return null ; } }","Generate syntax code: If $type_id$ is not empty, set the SQL statement: Query the id column in the options table according to $type_id$, use $conn$ to execute SQL statement, get all data, use for loop to convert each element in the query result to dict, store it in list, and return the list content.""","<met> <mod> public </mod> type_identifier getListOption <for> ( <for> type_identifier conn </for> , <for> type_identifier type_id </for> ) </for> <blo> { <if_> if <par> ( <bin> type_id != null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> entries = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { type_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json_row = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier en : entries ) <blo> { <exp> <met> json_row . add <arg> ( en ) </arg> </met> ; </exp> } </blo> </enh> <ret> return json_row ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $db_string$ to get the database engine, execute SQL ( get the venue_id column in the Show table according to $artist_id$ ) , get all the data, and finally return the query result.""","public List upgrade ( DataSource db_string , String artist_id ) { JdbcTemplate engine = new JdbcTemplate ( db_string ) ; List ids = engine . query ( "" select venue_id from Show where artist_id= ? "" , new Object [ ] { artist_id } , new BeanPropertyRowMapper ( List . class ) ) ; return ids ; }","Generate syntax code: Use $db_string$ to get the database engine, execute SQL ( get the venue_id column in the Show table according to $artist_id$ ) , get all the data, and finally return the query result.""","<met> <mod> public </mod> type_identifier upgrade <for> ( <for> type_identifier db_string </for> , <for> type_identifier artist_id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ids = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { artist_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ids ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the id column in the $status_of_table$ table based on $status$ ) . Execute SQL through $session$ and get the first piece of data, print the query result, and return the 0th element of the query result.""","public Object insertStatus ( EntityManager session , Root < Object > status_of_table , String status ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( status_of_table ) . where ( cb . equal ( status_of_table . get ( "" status "" ) , status ) ) ; List < Object > results = session . createQuery ( cq ) . getResultList ( ) ; System . out . println ( results . get ( 0 ) ) ; return JSONObject . parseObject ( results . get ( 0 ) . toString ( ) ) . get ( 0 ) ; }","Generate syntax code: Set SQL based on the java expression ( query the id column in the $status_of_table$ table based on $status$ ) . Execute SQL through $session$ and get the first piece of data, print the query result, and return the 0th element of the query result.""","<met> <mod> public </mod> type_identifier insertStatus <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> status_of_table </for> , <for> type_identifier status </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( status_of_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> status_of_table . get <arg> ( string_literal ) </arg> </met> , status ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <met> <met> JSONObject . parseObject <arg> ( <met> <met> results . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query all columns in the model_evaltable when features equals $gen_age_features$,test_score equals $test_score$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the results after being processed by jsonify.""","public JSONArray model ( JdbcTemplate conn , String gen_age_features , String test_score ) { List texts = conn . query ( "" select * from model_eval where features = ? and test_score = ? "" , new Object [ ] { gen_age_features , test_score } , new BeanPropertyRowMapper ( List . class ) ) ; return JSONObject . parseArray ( texts . toString ( ) ) ; }","Generate syntax code: Set SQL ( query all columns in the model_evaltable when features equals $gen_age_features$,test_score equals $test_score$ ) . Use $conn$ to execute SQL and get all the data. Finally, return the results after being processed by jsonify.""","<met> <mod> public </mod> type_identifier model <for> ( <for> type_identifier conn </for> , <for> type_identifier gen_age_features </for> , <for> type_identifier test_score </for> ) </for> <blo> { <loc> type_identifier <var> texts = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { gen_age_features , test_score } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> JSONObject . parseArray <arg> ( <met> texts . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $conn$ ( get all the information in the table from Bars where b is $b$ and casino is $casino$ ) and grab all the data, then return the query results.""","public List getBar ( JdbcTemplate conn , String b , String casino ) { List rs = conn . query ( "" select * from Bars where Bar=? and casino= ? "" , new Object [ ] { b , casino } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: Execute the SQL using $conn$ ( get all the information in the table from Bars where b is $b$ and casino is $casino$ ) and grab all the data, then return the query results.""","<met> <mod> public </mod> type_identifier getBar <for> ( <for> type_identifier conn </for> , <for> type_identifier b </for> , <for> type_identifier casino </for> ) </for> <blo> { <loc> type_identifier <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { b , casino } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Try to use the format string matching method to set SQL ( query all columns in the mysql table according to $result_set$ ) , use $conn$ to execute the SQL to query for the first piece of data, and return the query result. If an exception occurs during execution, return """"Query failed"""".""","public Object sqlalchemyMysqlQuery ( JdbcTemplate conn , String result_set ) { try { List msg = conn . query ( "" select * from mysql where result_set = ? "" , new Object [ ] { result_set } , new BeanPropertyRowMapper ( List . class ) ) ; return msg . get ( 0 ) ; } catch ( Exception e ) { String msg = "" Query failed. "" ; return msg ; } }","Generate syntax code: Try to use the format string matching method to set SQL ( query all columns in the mysql table according to $result_set$ ) , use $conn$ to execute the SQL to query for the first piece of data, and return the query result. If an exception occurs during execution, return """"Query failed"""".""","<met> <mod> public </mod> type_identifier sqlalchemyMysqlQuery <for> ( <for> type_identifier conn </for> , <for> type_identifier result_set </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> msg = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { result_set } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> msg . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <loc> type_identifier <var> msg = string_literal </var> ; </loc> <ret> return msg ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Set up sql ( query all columns in the MetaData table based on $engine$ and $testtable$ ) , execute SQL with $conn$ and get all the data, use for loop to convert the data into list and return.""","public List testInsertedPrimaryKey ( JdbcTemplate conn , String engine , String testtable ) { List le = conn . query ( "" select * from MetaData where engine = ? and testtable = ? "" , new Object [ ] { engine , testtable } , new BeanPropertyRowMapper ( List . class ) ) ; List list = new ArrayList ( ) ; for ( Object l : le ) { list . add ( l ) ; } return list ; }","Generate syntax code: Set up sql ( query all columns in the MetaData table based on $engine$ and $testtable$ ) , execute SQL with $conn$ and get all the data, use for loop to convert the data into list and return.""","<met> <mod> public </mod> type_identifier testInsertedPrimaryKey <for> ( <for> type_identifier conn </for> , <for> type_identifier engine </for> , <for> type_identifier testtable </for> ) </for> <blo> { <loc> type_identifier <var> le = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { engine , testtable } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> list = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier l : le ) <blo> { <exp> <met> list . add <arg> ( l ) </arg> </met> ; </exp> } </blo> </enh> <ret> return list ; </ret> } </blo> </met>"
"Generate origin code: connect the database through $engine$. Set SQL ( get the description data in the Customer table based on $id$ ) . Execute SQL, get all the data, use for loop to traverse the execution result, and print the 0th element of the execution result.""","public void testCoreFetchall ( DataSource engine , String id ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List result = conn . query ( "" select description from customer where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object row : result ) { System . out . println ( JSONObject . parseObject ( row . toString ( ) ) . get ( 0 ) ) ; } }","Generate syntax code: connect the database through $engine$. Set SQL ( get the description data in the Customer table based on $id$ ) . Execute SQL, get all the data, use for loop to traverse the execution result, and print the 0th element of the execution result.""","<met> <mod> public </mod> void_type testCoreFetchall <for> ( <for> type_identifier engine </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> JSONObject . parseObject <arg> ( <met> row . toString <arg> ( ) </arg> </met> ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: If the request module sends the request in a GET method, set the statement to: Query the average_score data in the books table where author is $author$, use the $conn$ connection to execute SQL, get all the data and return all the obtained data.""","public List jsonApi ( HttpRequest request , JdbcTemplate conn , String author ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { List average_scores = conn . query ( "" select average_score from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return average_scores ; } else { return null ; } }","Generate syntax code: If the request module sends the request in a GET method, set the statement to: Query the average_score data in the books table where author is $author$, use the $conn$ connection to execute SQL, get all the data and return all the obtained data.""","<met> <mod> public </mod> type_identifier jsonApi <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> average_scores = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return average_scores ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to set up SQL ( query all columns of TABLE where id is $id$ ) , execute the SQL statement with $conn$, obtain all the data and return. If an Exception occurs, return False.""","public Object selectData ( JdbcTemplate conn , String id ) { try { List data_results = conn . query ( "" select * from table where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return data_results ; } catch ( Exception e ) { return false ; } }","Generate syntax code: Try to set up SQL ( query all columns of TABLE where id is $id$ ) , execute the SQL statement with $conn$, obtain all the data and return. If an Exception occurs, return False.""","<met> <mod> public </mod> type_identifier selectData <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> data_results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data_results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the cursor method of $db$ to execute SQL ( get the totalvotes column in the cars table according to $id$ ) , get the first piece of data, and finally return the query result.""","public List findTotalVotes ( JdbcTemplate db , String id ) { List ts = db . query ( "" select totalvotes from cars where id= ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return ts ; }","Generate syntax code: Use the cursor method of $db$ to execute SQL ( get the totalvotes column in the cars table according to $id$ ) , get the first piece of data, and finally return the query result.""","<met> <mod> public </mod> type_identifier findTotalVotes <for> ( <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> ts = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ts ; </ret> } </blo> </met>"
