id,NL,Code
13901,"Use $conn$ to query all columns in the flights table with destination as $destination$ and get all data,use for loop iterate through the query results and print all the results.","public void main(JdbcTemplate conn,String destination) {
List information = conn.query(""select * from flights where destination = ? "", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
for (Object flight : information) {
System.out.println(flight);
}
}"
11196,"Try to use $db$ to connect to the database,query all columns in the trainers where result is $result$, and get all the data,return the query result in jsonify form. If an Exception occurs,the Exception information in the form of a string is returned by jsonify.","public JSONObject trainers(DataSource db, String result){
JdbcTemplate conn = new JdbcTemplate(db);
JSONObject json = null;
try {
List result_data = conn.query(""select * from trainers where result= ? "", new Object[]{result}, new BeanPropertyRowMapper(List.class));
if(!result_data.isEmpty()){
json = new JSONObject(new HashMap(){
{put(""result_data"", result_data.get(0));}
});
}
}
catch (Exception e){
json = new JSONObject(new HashMap(){
{put(""exception"",e);}
});
}
return json;
}"
13714,Use $conn$ to execute SQL (query all columns in the metadata table based on $id$)and get the first piece of data. Print the query results and return.,"public Object setupClass(JdbcTemplate conn,String id){
List foo = conn.query(""select * from metadata where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(foo.get(0));
return foo.get(0);
}"
13207,"Use $sess$to execute a java expression (query all the columns in the $urls$ where url is $url$) and get the first data.Returns the ""id"" item of the query result if there is one, otherwise return None.","public String selectUrls(EntityManager sess, Root<Object> urls, String url){
CriteriaBuilder cb = sess.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(urls).where(cb.equal(urls.get(""url""),url));
List<Object> ex_url = sess.createQuery(cq).getResultList();
if (ex_url.isEmpty()){
return null;
}
else {
JSONObject jsonObject = JSONObject.parseObject(ex_url.get(0).toString());
return jsonObject.getString(""id"");
}
}"
14135,Get the database engine via $url$.Query all the columns in the person table based on $id$ and get all the data. For loop iterates through the query results and prints.,"public void getAll(DataSource url,String id){
JdbcTemplate con = new JdbcTemplate(url);
List res = con.query(""select * from person where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object i : res) {
System.out.println(i);
}
}"
13953,"Get the database engine and establish a connection through $cookies1$.Use the java expression to set the SQL statement (query all the data in the $cookies$ table),execute SQL, get all the data and return.","public List getSource(EntityManager cookies1,List<Object> cookies){
CriteriaBuilder cb = cookies1.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cookies = cookies1.createQuery(cq).getResultList();
return cookies;
}"
13440,Use $conn$ to execute SQL (get 'column' column in the 'table' table based on $type$)and get all the data. Then use information method to process the query results and finally return the query results.,"public List selectCols(JdbcTemplate con,String type){
List results = con.query(""select column from table where type = ?"", new Object[]{type}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
return results;
}"
11032,"Using $conn$ to execute SQL in ORM mode:Query the first piece of data information in the $passengers$ table based on $flight_id$.If the result of the query is None, return the rendered ""error.html"" page andpass ""No such flights"" to the message parameter. Otherwise, return to the rendered ""fligh.thtml"" page and pass the query result to the passengers parameter.","public String selectUrls(EntityManager conn, Root<Object> passengers, String flight_id, Model model){
        CriteriaBuilder cb = conn.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(passengers).where(cb.equal(passengers.get(""flight_id""),flight_id));
        List<Object> values = conn.createQuery(cq).getResultList();
        if (values.isEmpty()){
            model.addAttribute(""message"",""No such flights"");
            return ""error.html"";
        }
        else {
            model.addAttribute(""passengers"",values);
            return ""flight.html"";
        }
    }"
11381,"Get the database engine through $db_file$, set the parameter echo to True, and establish a connection. Execute the SQL statement (query all the columns in the Directions table according to $directionID$), get all the data, close the connection, take the query result as the value of the parameter steps and return in json format.","public JSONArray getDirectionsForDestination(DataSource db_file,String directionID){
JdbcTemplate connection = new JdbcTemplate(db_file);
List steps = connection.query(""select * from Directions where directionID= ? "", new Object[]{directionID}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(steps.toString());
}"
14150,"""Query all 'year' with 'title': $title$ in the movies table via $conn$, print the query result and return.","public List yearCall(JdbcTemplate conn,String title){
List resultData = conn.query(""select year from movies where title = ? "", new Object[]{title}, new BeanPropertyRowMapper(List.class));
System.out.println(resultData);
return resultData;
}"
11016,"Execute SQL with $conn$: Query isbn in the books table where low_title is $title$ and low_author is $author$.If the number of query results rows is 0, render the ""error.html"" page and input ""Sorry"" in the message field.If the number of rows is not 0, input the query message, render the""books.html"" page, and pass the query result to the books parameter.""","public List user(JdbcTemplate conn,String title,String author){
List books = conn.query(""select isbn from books where low_title=? and low_author=? "", new Object[]{title,author}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return null;
}
else {
return books;
}
}"
11450,"""Use ORM and $session$ to execute SQL (query all information in $cls$ table based on $id$), get all the queried data and return.","public List selectRes(EntityManager session, Root<Object> cls, String id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cls).where(cb.equal(cls.get(""id""),id));
List<Object> values = session.createQuery(cq).getResultList();
return values;
}"
11072,"""If $type$ is not None, use $conn$ to execute SQL (query the name in the master_table table based on $type$) and return the execution result. Otherwise, retutn None.","public List getTableNames(JdbcTemplate conn,String type){
if (type!=""""&&type!=null){
List names = conn.query(""select name from master_table where type= ? "", new Object[]{type}, new BeanPropertyRowMapper(List.class));
return names;
}
else {
return null;
}
}"
13779,"Set sql (query the user_id column in the ic_user_session table according to $session_hash$) and use $conn$ to execute SQL. If there is no query result, return None,and finally return the obtained 0th element of the first query result.","public Object getUserIdFromSession(JdbcTemplate conn,String session_hash){
List res = conn.query(""select user_id from ic_user_session where session_hash =? "", new Object[]{session_hash}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}
else {
return res.get(0);
}
}"
13572,"""Set up sql (query all the information in the db_table table based on $wildcards$),execute SQL with $conn$, get all the query results, print and return the execution results.","public List mysqlSelect(JdbcTemplate conn,String wildcards){
List rslt = conn.query(""select * from db_table where wildcards= ? "", new Object[]{wildcards}, new BeanPropertyRowMapper(List.class));
System.out.println(rslt);
return rslt;
}"
13321,""" connect the database according to $db$.Execute SQL (query the user_id column in the users table with the condition that $user_id$ and age is less than $age$), get all the query results,use for loop to print each query result and each query result converted to dict.","public void textSql(DataSource db,String user_id,String age){
JdbcTemplate conn = new JdbcTemplate(db);
List s = conn.query("" select user_id from users where user_id= ? and age < ?"", new Object[]{user_id,age}, new BeanPropertyRowMapper(List.class));
for (Object x : s) {
System.out.println(x);
}
}"
13419,"""If $schema_name$ is reversed, return False; otherwise use $conn$ to execute SQL(get table_name column in all_tables table with table_name as $name$ and owner as $schema_name$), get all the data and return query result.","public List selectValue(JdbcTemplate conn,String schema_name,String name){
if (schema_name!=""""&&schema_name!=null){
List rs = conn.query(""select table_name from all_tables where table_name = ? AND owner = ?"", new Object[]{name,schema_name}, new BeanPropertyRowMapper(List.class));
return rs;
}
else {
return null;
}
}"
14112,"""If the request module uses post to send a request, execute SQL via $conn$: Query all columns in the reviews table based on $author_id$ and $book_isbn$, and get the first piece of data.If the query result is empty, render and return ""error.html""; otherwise render and return ""review.html"", where the reviews parameter is the query result.","public Object review(JdbcTemplate conn,String author_id,String book_isbn, Model model){
List reviews = conn.query(""select * from reviews where author_id= ? and book_isbn= ?"", new Object[]{author_id,book_isbn}, new BeanPropertyRowMapper(List.class));
if (reviews.isEmpty()){
return ""error.html"";
}
else {
model.addAttribute(""reviews"",reviews.get(0));
return ""review.html"";
}
}"
14006,"Try to execute the SQL statement(get all the columns in the pg_stat_activity table) through $conn$,get all the data and return the query results. Print exception information when Exception appears.","public List test(JdbcTemplate conn){
List records = null;
try {
records = conn.query(""select * from pg_stat_activity"", new BeanPropertyRowMapper(List.class));
}
catch (Exception e){
e.printStackTrace();
}
return records;
}"
14205,Set the SQL statement: Query the data in the $taglist$ table based on $code_no$ and execute SQL through $conn$ to get all the data.For loop iterates through the execution result and prints.,"public String selectUrls(EntityManager conn, Root<Object> passengers, String flight_id, Model model){
        CriteriaBuilder cb = conn.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(passengers).where(cb.equal(passengers.get(""flight_id""),flight_id));
        List<Object> values = conn.createQuery(cq).getResultList();
        if (values.isEmpty()){
            model.addAttribute(""message"",""No such flights"");
            return ""error.html"";
        }
        else {
            model.addAttribute(""passengers"",values);
            return ""flight.html"";
        }
    }"
11083,"In ORM mode, use $session$ to execute SQL (query the information in the $User$ table when email is $login_email$) and get the first piece of data. Return True, if the query result exists. Otherwise, return False.","public Boolean getUser(EntityManager session, Root<Object> User, String login_email){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""email""),login_email));
List<Object> user = session.createQuery(cq).getResultList();
if (user.isEmpty()){
return false;
}
else {
return true;
}
}"
13487,"Use $db$ to execute SQL (get all columns in the books table based on $isbn$) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", then use $db$ to execute SQL (get the number of all columns in the reviews table with book_id as $id$) and get the 0th element of all the data. Finally return the three columns processed by jsonify: title, author and review_count.","public JSONObject api(JdbcTemplate db,String id,String isbn){
List book = db.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (!book.isEmpty()){
return null;
}
else {
List review_count = db.query(""select count(*) from reviews where book_id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
JSONObject jsonObject = JSONObject.parseObject(book.get(0).toString());
JSONObject json = new JSONObject();
json.put(""title"", jsonObject.getString(""title""));
json.put(""author"", jsonObject.getString(""author""));
json.put(""review_count"", JSONObject.parseObject(review_count.get(0).toString()).getString(""count""));
return json;
}
}"
11148,"Set the SQL statement(Format the output string with the format () function, query the otu_id in the samples where the id of input is $input_id$）,execute the SQL statement with the $conn$ connection to get all the data and use jsonify to return the retrieved data.","public JSONArray queryPage(JdbcTemplate conn,String input_id){
List infor = conn.query(""select otu_id from samples where input_id= ?"", new Object[]{input_id}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(infor.toString());
}"
13465,Execute SQL through $conn$ (get all columns in the books table based on $isbn$)and get the first piece of data. Then convert the query results into list and return the contents of the list.,"public List getBookByIsbn(JdbcTemplate conn,String isbn){
List book = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return book;
}"
11022,"If the content of $database_name$ is ""sqlite"", then use $conn$ to execute SQL (query the paper information in database based on $database_uri$),get all the data, and return the query result. Return False if $database_name$ is something else.","public List createEngine(JdbcTemplate conn,String database_uri,String database_name){
if (""sqlite"".equals(database_name)){
List papers = conn.query(""select paper from database_name where database_uri= ?"", new Object[]{database_uri}, new BeanPropertyRowMapper(List.class));
return papers;
}
else {
return null;
}
}"
13244,"Creating a database engine with $db_string$. Try to set up SQL (query all columns in tb_user where senha is $senha$) ,execute SQL to get all the data and return it. If an Exception error occurs, the specific Exception information is printed and the query result is assigned to False. Finally, the query results are returned.","public List selectValue(DataSource db_string,String senha){
JdbcTemplate conn = new JdbcTemplate(db_string);
try {
List res = conn.query(""select * from tb_user where senha = ?"", new Object[]{senha}, new BeanPropertyRowMapper(List.class));
return res;
}
catch (Exception e){
e.printStackTrace();
return null;
}
}"
11098,Use an java expression to set SQL (query the values in the $testtable$ table based on $id$).Use $conn$ to execute the SQL and get all the data. Set the assertion to determine that the query data length is greater than 0.,"public List testInserted(EntityManager conn, Root<Object> testtable, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(testtable).where(cb.equal(testtable.get(""id""),id));
List<Object> result = conn.createQuery(cq).getResultList();
assert result.size()>0;
if (result.isEmpty()){
return null;
}
else {
return result;
}
}"
13446,Use $e$ to connect to the database and execute the SQL (get all the columns in the ontime_data table processed by the counting method based on $Origin$) and get all the data. Finally return the query results.,"public List selectCount(DataSource e,String Origin){
JdbcTemplate conn = new JdbcTemplate(e);
List result = conn.query(""select count(*) from ontime_data where Origin = ?"", new Object[]{Origin}, new BeanPropertyRowMapper(List.class));
return result;
}"
13458,Use $conn$ to execute the SQL (get the name column in the tb1 table based on $value$) and get all the data. Then set the assertion that the length of the query result is greater than 0. Finally return the 0th element of the query result.,"public List testAsyncCursorServerSide(JdbcTemplate conn,String value){
List names = conn.query(""select name from tb1 where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
assert names.size()>0;
if (names.isEmpty()){
return null;
}
else {
return names;
}
}"
11568,"Use the $conn$ connection to execute the SQL (query all columns in the reviews table based on $isbn$) and get all the data. If the query result is empty, use jsonify to return ""Erro, reviews not found""; otherwise, use jsonify to return all the results of the query.","public JSONArray isbnApi(JdbcTemplate conn,String isbn){
List values = conn.query(""select * from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (values.isEmpty()){
JSONArray jsonArray = new JSONArray();
Object put = new JSONObject().put(""Erro"", ""reviews not found"");
jsonArray.add(put);
return jsonArray;
}
else {
return JSONObject.parseArray(values.toString());
}
}"
13525,"Execute SQL with $conn$ (query all columns in the user table according to $name$),get all the query results, use for loop to traverse all obtained query results, print the format string, that is the id and name fields of each piece of data, and separate them with '|'.","public void selectDb(JdbcTemplate conn,String name){
List users = conn.query(""select * from user where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object user : users) {
JSONObject jsonObject = JSONObject.parseObject(user.toString());
System.out.println(jsonObject.getString(""id"")+""|""+jsonObject.getString(""name""));
}
}"
14088,"Step 1: Execute SQL through $db$: Query the 0th element of the first 'title' in the books table according to $isbn$; step 2: Executes SQL through $db$: Query the 0th element of the first 'author' in the books table according to $isbn$; s tep 3: Executes SQL through $db$: Query the 0th element of the first 'year' in the books table according to $isbn$. Render and return ""book.html"", where the name parameter is the query result of step1, the author parameter is the query result of step2, and the published parameter is the query result of step3.","public Map book(JdbcTemplate conn,String isbn){
List name = conn.query(""select title from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List author = conn.query(""select author from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List published = conn.query(""select year from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
JSONObject json1 = JSONObject.parseObject(name.get(0).toString());
JSONObject json2 = JSONObject.parseObject(author.get(0).toString());
JSONObject json3 = JSONObject.parseObject(published.get(0).toString());
Map map = new HashMap();
map.put(""name"",json1.getString(""name""));
map.put(""author"",json2.getString(""author""));
map.put(""published"",json3.getString(""published""));
return map;
}"
13397," connect the database according to $engine$. Execute SQL (query the manufacturer column in the items table according to $name$)and get all the query results. If the query results are empty, return None;
otherwise, convert the query results to dict and return.","public List findBeers(JdbcTemplate engine,String name){
List result = engine.query(""select manufacturer from items where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}
else {
return result;
}
}"
13049,"Use java expressions to set up SQL: Query everything in the $users$ table based on $username$. Use $conn$ to execute SQL and get the first piece of data. Finally, return the query result.","public Object logout(EntityManager conn, Root<Object> users, String username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""username""),username));
List<Object> user = conn.createQuery(cq).getResultList();
return user;
}"
11677,"Execute SQL with $db$ (get the name column in the contact_mode table according to $id$), and use for loop to print every item f all data.","public void getModes(JdbcTemplate conn,String id){
List modes = conn.query(""select name from contact_mode where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object mode : modes) {
System.out.println(mode);
}
}"
11325,"Set sql (query all columns in the $User$ table according to $KartenID$) , use $engine$ to execute the java expression, get all the data and close the connection. If the query data length is not 0, output success and return True; otherwise, output fail and return False.","public boolean authenticateRfid(EntityManager engine, Root<Object> User, String KartenID){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""url""),KartenID));
List<Object> mou = engine.createQuery(cq).getResultList();
if (mou.isEmpty()){
System.out.println(""fail"");
return false;
}
else {
System.out.println(""success"");
return true;
}
}"
13689,"Set SQL (query all columns in the assignments table where course_id is $classid$ and student_id is $studentid$). Execute SQL with $conn$ and get all the data. Convert each item in the query results to the dic type and store the results as values for the records in the dictionary. Finally, return the serialized dictionary.","public JSONArray getRecords(JdbcTemplate conn,String classid,String studentid){
List data = conn.query(""select * from assignments where course_id=? and student_id = ?"", new Object[]{classid,studentid}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(data.toString());
}"
11470,"If the request method is ""GET"",return the rendered 'index.html' page.If the request method is ""POST"",set the SQL (query the isbn column in the booktable table based on $bookname$), use $conn$ to execute the SQL and get all the query results. Return the rendered'index.html' page with the books parameter as the query result.","public String index(HttpRequest request,JdbcTemplate conn,String bookname, Model model){
if (request.getMethod().equals(""POST"")){
List books = conn.query(""select isbn from booktable where bookname = ?"", new Object[]{bookname}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"",books);
return ""index.html"";
}
else {
return ""index.html"";
}
}"
13513,"Use $conn$ to execute SQL (query the name column in the passengers table according to $flight_id$), get all the query results, use for loopto traverse all the query results obtained, print the name field of each piece of date. If the length of the query result is 0, print ""No passengers. and return 'empty'; otherwise, return the query result.","public List main(JdbcTemplate conn,String flight_id){
List passengers = conn.query(""select name from passengers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
for (Object passenger : passengers) {
System.out.println(JSONObject.parseObject(passenger.toString()).getString(""name""));
}
if (passengers.isEmpty()){
System.out.println(""No passengers."");
return null;
}
else {
return passengers;
}
}"
11262,"""Use $conn$ to execute SQL (get all the columns in users based on $image_url$) , get all the data, and finally return the obtained result data.","public List insertImageUrl(JdbcTemplate conn,String image_url){
List result = conn.query(""select * from users where image_url = ?"", new Object[]{image_url}, new BeanPropertyRowMapper(List.class));
return result;
}"
14183,Execute SQL via $conn$: Query all schema data in 'table'. For loop iterates through all query results and prints and returns all query results,"public List getQuery(JdbcTemplate conn){
List rows = conn.query(""select schema from table"", new BeanPropertyRowMapper(List.class));
for (Object row : rows) {
System.out.println(row);
}
return rows;
}"
11596,"Open the books.csv file and read it.Iterate the contents of the file through the next () method. Use for loop traverse the contents of the read file,query all the columns in the books table where isbn is $isbn$ through $conn$, and get all the data. Set the assertion to determine that the returned resultis not empty list, and return the query result.","public List main(JdbcTemplate conn){
List list = new ArrayList();
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String isbn = sc.nextLine();
List values = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (!values.isEmpty()){
System.out.println(values);
for (Object value : values) {
list.add(value);
}
}
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
return list;
}"
14249,"If $isbn$ is empty, return False. Execute the SQL statement through $con$,which reads: Query the first 'author'in books table beased on the $isbn$,print the query result and return it.","public List bookApi(JdbcTemplate con,String isbn){
if ("""".equals(isbn)||isbn==null){
return null;
}
else {
List data = con.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
System.out.println(data);
return data;
}
}"
13997,Set the SQL statement: Query the is_admin in the users table through $username$. Use $conn$ to execute SQL to get all the data and return.,"public List getPlayerForUsername(JdbcTemplate con,String username){
List result = con.query(""select is_admin from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return result;
}"
13673,"""Set SQL: query destination information in the flights where origin is $origin$ and duration is $duration$. Use $conn$ to execute the SQL and get the first data. Return the rendered ""added.html"" page and passe the query result to the RES parameter.","public String getFlight(JdbcTemplate conn,String origin,String duration,Model model){
List res = conn.query(""select destination from flights where origin= ? and duration= ?"", new Object[]{origin,duration}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""res"",res);
return ""addded.html"";
}"
14128,"Get the database engine via $db_conn_uri_default$ and establish a connection. Execute the SQL statement (get the first uri in the database based on $name$), close the database connection, and return all the obtained data.","public List getdata(DataSource db_conn_uri_default,String name){
JdbcTemplate conn = new JdbcTemplate(db_conn_uri_default);
List rec = conn.query(""select uri from database where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return rec;
}"
13394,"""Get the database engine through $call_center$, where the echo parameter is set to True, and a connection is established. Execute the SQL statement (query all the columns in the companies table according to $name_company$),
get all the data, use for loop to traverse all obtained query results, insert the 0th element of each piece of data into a list, and return the 0th element of the list.","public List getCompanyIdByName(DataSource db_conn_uri_default,String name){
JdbcTemplate conn = new JdbcTemplate(db_conn_uri_default);
List result = conn.query(""select * from companies where name_company= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List ids = new ArrayList();
for (Object i : result) {
ids.add(JSONObject.parseObject(i.toString()).get(0));
}
return ids;
}"
13998,"Set the SQL statement: Query the average_score in the books table through $isbn$, use $conn$ to execute SQL to get all the data, and use jsonify to return the obtained data.","public JSONArray isbnCheck(JdbcTemplate conn,String isbn){
List api_return = conn.query(""select average_score from books where isbn = ? "", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(api_return.toString());
}"
11696,"""Execute SQL with $conn$ (get the id column in the POLYNOME_CORRECTION table according to $name$), get all the data, then use fr loop to convert the 0th element of each item of the qu ery result into list, and finally return the list content.","public List getIndetify(JdbcTemplate conn,String name){
List result = conn.query(""select id from polynome_correction where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List instruments = new ArrayList();
for (Object ele : result) {
instruments.add(JSONObject.parseObject(ele.toString()).get(0));
}
return instruments;
}"
11513,"Get the database engine through $stock_base$.Set the SQL statement to: Query all columns in the mistakes table based on $tick$, e xecute the SQL statement to get all the data and return all the queried information.","public List getMistakes(DataSource stock_base,String tick){
JdbcTemplate conn = new JdbcTemplate(stock_base);
List item = conn.query(""select * from mistakes where tick = ? "", new Object[]{tick}, new BeanPropertyRowMapper(List.class));
return item;
}"
13390,"Set SQL based on the java expression(query all columns in the $QuestionAnswer$ table based on $answer$). Execute SQL with $con$, get all the data, use for loop to traverse the 'question' field of each query result, store it as list, and return the list.","public List questionsTo(EntityManager con, Root<Object> QuestionAnswer, String answer){
CriteriaBuilder cb = con.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(QuestionAnswer).where(cb.equal(QuestionAnswer.get(""answer""),answer));
List<Object> clause = con.createQuery(cq).getResultList();
List res = new ArrayList();
for (Object row : clause) {
res.add(JSONObject.parseObject(row.toString()).getString(""question""));
}
return res;
}"
13735,"Use $conn$ to execute SQL (query all columns in the flights table based on $id$),get all the query results, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and output the list.","public List index(JdbcTemplate conn,String id){
List flights = conn.query(""select * from flights where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List st = new ArrayList();
for (Object i : flights) {
st.add(JSONObject.parseObject(i.toString()).get(0));
}
System.out.println(st);
return st;
}"
13659,"If the request method is POST, execute the following code:set SQL (query all columns in the users table where name is $name$ and password is $pws$) ;execute SQL with $db$ and get all the data; if the query data exists, redirect and url_for to ""search"". Otherwise, if the request method is GET, the rendered ""login.html"" is returned.","public String checkLogin(HttpRequest request,JdbcTemplate db,String name,String password){
if (request.getMethod().equals(""POST"")){
List row = db.query(""select * from users where name = ? and password = ? "", new Object[]{name,password}, new BeanPropertyRowMapper(List.class));
if (!row.isEmpty()){
return ""search"";
}
else {
return ""login.html"";
}
}
else{
return ""login.html"";
}
}"
13175,"Get the database engine using $email_settings$, execute the SQL (get the INDEX column in the akamaiCache where number is $number$) ,get all the data, and return the query results.","public List dropDb(DataSource email_settings,String number){
JdbcTemplate engine = new JdbcTemplate(email_settings);
List res = engine.query(""select INDEX from akamaiCache where number= ? "", new Object[]{number}, new BeanPropertyRowMapper(List.class));
return res;
}"
13040,"If the request method of request is ""POST"" , execute the following code: Use $conn$ to get the cursor; use the cursor to execute SQL (query all columns in the book table based on $title$) and get all the data; close the cursor; if the list type of the query result is not None, return the rendered 'search_results.html',and pass the query result to the books parameter.","public String resultTitle(HttpRequest request,JdbcTemplate conn,String title,Model model){
if (request.getMethod().equals(""POST"")){
List books = conn.query(""select * from book where title= ? "", new Object[]{title}, new BeanPropertyRowMapper(List.class));
if (!books.isEmpty()){
model.addAttribute(""books"",books);
return ""search_results.html"";
}
else {
return null;
}
}
else{
return null;
}
}"
13218,"Connect to the database using $db$,execute the SQL statement (query all columns in query_users) ,and get all the data. Set the assertion that the length ofthe return result is not equal to 0. Close the databaseconnection and finally return all data.","public List getUser(DataSource db){
JdbcTemplate engine = new JdbcTemplate(db);
List user_results = engine.query(""select * from query_users "", new BeanPropertyRowMapper(List.class));
if (user_results.isEmpty()){
return null;
}
else {
return user_results;
}
}"
13667,Try using $session$ to execute the java expression SQL(query the name in the $E_product$ by where id_product is $id_product$)and get the first data. Close $session$ and return the query result.Return False if an exception occurs.,"public Object getProduct(EntityManager session, Root<Object> E_product, String id_product){
try {
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(E_product).where(cb.equal(E_product.get(""id_product""),id_product));
List<Object> product = session.createQuery(cq).getResultList();
return product.get(0);
}
catch (Exception e){
return false;
}
}"
13327,"If label is not empty, use $conn$ to execute SQL (query all columns in the 'data_table' table based on $label$), get all the query results, print them and return.","public List getPage(JdbcTemplate conn,String label){
List comment = conn.query(""select * from data_table where label=? "", new Object[]{label}, new BeanPropertyRowMapper(List.class));
System.out.println(comment);
return comment;
}"
11409,"Set SQL (query the password column in the manager table based on $username$), execute SQL based on $conn$ and get all the query results. if the length of the query result is greater than 0,return the data. Otherwise print 'Username does not exists, please signup' and return '/signup'.","public Object loginC(JdbcTemplate conn,String username){
List passwords = conn.query(""select password from manager where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (passwords.isEmpty()){
System.out.println(""Username does not exists, please sign up"");
return ""/signup"";
}
else {
return passwords;
}
}"
13330,"If the request method is ""POST"", use $db$ to execute SQL (query all columns in the usuarios table based on $usuario$ and $password$), get the first row of data, close the connection, and return the query results.","public Object login(HttpRequest request,JdbcTemplate db ,String usuario,String password){
if (request.getMethod().equals(""POST"")){
List cuenta = db.query(""select * from usuarios where usuario=? and password=?"", new Object[]{usuario,password}, new BeanPropertyRowMapper(List.class));
return cuenta.get(0);
}else {
return null;
}
}"
13901,"If the request module sends the request in a GET method,return the rendered ""login.html"". If the request module sends the request in a POST method, use $conn$ to execute SQL (query all columns in the users table through $username$) andget the first piece of data. If the execution result is empty, render and return ""error.html""; otherwise, use redirect to return ""/ search"".","public Object search(HttpRequest request,JdbcTemplate conn ,String username,Model model){
if (request.getMethod().equals(""POST"")){
List user = conn.query(""select * from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (user.isEmpty()){
return ""/search"";
}
else {
return ""error.html"";
}
}
else {
return ""login.html"";
}
}"
13013,"Use the method of the string format to set SQL(query all columns in the teams table when rownum is $limit$). Use $conn$ to execute SQL and get all the data. Finally, return the query result.","public Object getTeams(JdbcTemplate conn ,String limit){
List result = conn.query(""select * from teams where rownum < ?"", new Object[]{limit}, new BeanPropertyRowMapper(List.class));
return result;
}"
13445,"If the requested method is ""GET"", then use $db$ to execute the SQL (get the title column in the books table based on $isbn$), get the first piece of data and return the rendered ""review.html"" "", where the isbn parameter is the $isbn$ column and the titile parameter is the title column of the query results; otherwise return False.","public Object review(HttpRequest request,JdbcTemplate db ,String isbn,Model model){
if (request.getMethod().equals(""GET"")){
List row = db.query(""select title from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""isbn"",isbn);
model.addAttribute(""title"",JSONObject.parseObject(row.get(0).toString()).get(""title""));
return ""review.html"";
}
else {
return false;
}
}"
11106,"Execute SQL (query the email_id in the sent_backfill where the id of template is $template_id$ and the address of email is $email_address$)with $conn$ and get all the data. Finally, the query results are returned.","public Object queryRecord(JdbcTemplate conn ,String template_id,String email_address){
List record = conn.query(""select email_id from sent_backfill where template_id=? and email_address=?"", new Object[]{template_id,email_address}, new BeanPropertyRowMapper(List.class));
return record;
}"
13704,"""Create a database engine based on $uri$.Execute SQL (query all columns in 'table' table based on $date$, $market$ and $schema$),get all the data, and finally return the query results.","public Object queryRecord(DataSource uri ,String date,String market,String schema){
JdbcTemplate conn = new JdbcTemplate(uri);
List result = conn.query(""select * from table where date = ? and market = ? and schema = ?"", new Object[]{date,market,schema}, new BeanPropertyRowMapper(List.class));
return result;
}"
13462,Execute the SQL through $conn$ (get the isbn column in the 'books_table'table based on $title$) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"public List selectIsbn(JdbcTemplate conn,String title){
List results = conn.query(""select isbn from books_table where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
List isbns = new ArrayList();
for (Object isbn : results) {
isbns.add(isbn);
}
return isbns;
}"
13827,"If the request module sends a request by post,use the $conn$ connection to execute the SQL (query the columns in users through $email$ and $psd$ and get the first piece of data. If the query result is empty,return False; otherwise return the query result.","public Object login(HttpRequest request,JdbcTemplate conn, String email, String psd){
if (request.getMethod().equals(""POST"")){
List result = conn.query(""select * from users where email = ? and psd = ?"", new Object[]{email,psd}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return false;
}
else {
return result.get(0);
}
} else {
return false;
}
}"
11424,"Set SQL based on the java expression (query the baseDomain column in the $cookies$ table based on 'client_mac': $mac$). Execute SQL with $conn$ and get all the data, and use for loop to iterate throughit and store the 0th element of each query result as list. Finally use for loop to print the list.","public void getSource(EntityManager conn, Root<Object> cookies, String mac){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cookies).where(cb.equal(cookies.get(""client_mac""),mac));
List<Object> domains = conn.createQuery(cq).getResultList();
List results = new ArrayList();
for (Object domain : domains) {
results.add(JSONObject.parseObject(domain.toString()).get(0));
}
for (Object cookie : results) {
System.out.println(cookie);
}
}"
11272,"Use $conn$ to execute SQL based on the java expression(get the word column with 'id': $pkid$ in $words$ table),get the first row of data, and finally return the 0th element of the query result.","public Object getEmail(EntityManager conn, Root<Object> words, String pkid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(words).where(cb.equal(words.get(""id""),pkid));
List<Object> found_word = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(found_word.get(0).toString()).get(0);
}"
11600,"Use the java expression to set the SQL statement: Get all the name in the $contract_table$ through $conId$, use the $conn$ to execute the SQL statement to get the data, convert each item of the query result to dict, store it as list, and return.","public List<Object> getInfo(EntityManager conn, Root<Object> contract_table, String conId){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(contract_table).where(cb.equal(contract_table.get(""conId""),conId));
List<Object> result = conn.createQuery(cq).getResultList();
return result;
}"
11357,Get the database engine and establish a connection through $TimeTable$. Execute the SQL statement (query the first piece of data in the time column of the Comments table based on $summary$) and return the query results.,"public List dbConnect(DataSource TimeTable, String summary){
JdbcTemplate engine = new JdbcTemplate(TimeTable);
List laten = engine.query(""select time from comments where summary = ? "", new Object[]{summary}, new BeanPropertyRowMapper(List.class));
return laten;
}"
13103,"If the requested method is ""GET"", return ""search.html"" after rendering, otherwise execute SQL with $conn$ (to GET all the information in the books where isbn is $isbn$) and GET all the data, return ""search-results.html"" after rendering,where the results parameter is the result of the query.","public String index(HttpRequest request,JdbcTemplate conn, String isbn,Model model){
if (request.getMethod().equals(""GET"")){
return ""search.html"";
} else {
List results = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"",results);
return ""search-results.html"";
}
}"
13365,"Use the format string matching method to set the sql(query the table_name column in the 'tables' table based on $schema$), use $conn$ to get a cursor and execute SQL, use for loop to traverse all the obtained query result, insert the 0th element of each piece of data into a list, and return the list.","public List getSchema(JdbcTemplate conn,String schema){
List cursor = conn.query(""select table_name from tables where schema= ?"", new Object[]{schema}, new BeanPropertyRowMapper(List.class));
List tables = new ArrayList();
for (Object table : cursor) {
tables.add(JSONObject.parseObject(table.toString()).get(0));
}
return tables;
}"
11611,"Print $conn_string$, and then use $conn_string$ to get the database engine, execute SQL (get all the columns in the flowbot_requests table based on $id$ and $name$)and get all the data. If the query result is not empty, return the query result.","public List getTarget(DataSource conn_string, String id,String name){
System.out.println(conn_string);
JdbcTemplate engine = new JdbcTemplate(conn_string);
List target = engine.query(""select * from flowbot_requests where id=? and name=? "", new Object[]{id,name}, new BeanPropertyRowMapper(List.class));
if (!target.isEmpty()){
return target;
}
else {
return null;
}
}"
14098,"Use $conn$ to execute the SQL statement: Query t he first piece of year data in the books table based on $title$, make sure that $conn$ is turned off and return the query results.","public List main(JdbcTemplate conn,String title){
List rs = conn.query(""select year from books where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13495,Connect to the database through $engine$ and execute the SQL (get the fullname column in the users table based on $id$) and get all the data.,"public void selectFullname(DataSource engine, String id){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select fullname from users where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
}"
11438,"If the request method is ""POST"", set SQL (query all columns in the stu_essay based on $teacher$), execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, and print each piece of data. Return the rendered ""evaluate.html"" page with the 'essays' parameter setting as the query result. Otherwise, return the rendered ""teacher.html"" page.","public String login(HttpRequest request, JdbcTemplate conn, String teacher,Model model){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select * from stu_essay where teacher = ?"", new Object[]{teacher}, new BeanPropertyRowMapper(List.class));
for (Object row : rows) {
System.out.println(row);
}
model.addAttribute(""essays"", rows);
return ""evaluate.html"";
} else {
return ""teacher.html"";
}
}"
11100,"If the request method of request is ""POST"", use $conn$ to execute SQL (query all columns in the user_info table based on $email$) and get all the data. For each item in the query result, print the password and user_id properties. Finally, return the rendered ""login.html"" in addition to the judgment of the request method of request.","public String getLogin(HttpRequest request, JdbcTemplate conn, String email,Model model){
if (request.getMethod().equals(""POST"")){
List data = conn.query(""select * from user_info where email=?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
for (Object d : data) {
String password = JSONObject.parseObject(d.toString()).getString(""password"");
String userid = JSONObject.parseObject(d.toString()).getString(""user_id"");
System.out.println(password+userid);
}
}
return ""login.html"";
}"
13234,"If $aid$ is None, then return None. Try to set up the SQL statement(query all columns in the tattributes when id equals $aid$) .Execute the SQL statement with $conn$, get all the data and return.If an exception occurs, return None.","public Object selectValue(JdbcTemplate conn,String aid){
if (aid== """"){
return null;
}
try {
List results = conn.query(""select * from tattributes where id =?"", new Object[]{aid}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
return null;
}
}"
11609,"Get the database engine through $host$, execute SQL (get all the columns in the availability2 table when stationNUM is $num$), get all the data, and finally print the query result.","public void getModels(DataSource host, String num){
JdbcTemplate engine = new JdbcTemplate(host);
List models = engine.query(""select * from availability2 where stationNUM= ? "", new Object[]{num}, new BeanPropertyRowMapper(List.class));
System.out.println(models);
}"
13023,"Use $mssql$ to create the database engine and get the connection. Set up SQL (query all columns in the mytable table based on $PageNo$ and $PageSize$) and get all the data. Use the database connection to perform the SQL and get all the data. Finally, close the connection and return the query results.","public List getAbstract(DataSource mssql, String PageNo,String PageSize){
JdbcTemplate engine = new JdbcTemplate(mssql);
List rows = engine.query(""select * from mytable where pageno =? and pagesize =? "", new Object[]{PageNo,PageSize}, new BeanPropertyRowMapper(List.class));
return rows;
}"
11036,"Use $conn$ to execute SQL (query the average of rate in the reviews table based on $isbn$) and get the first piece of data. If the result of the query is None, return {""error"": ""Invalid ISBN""} information with jsonify. Otherwise, directly return the query result.","public JSONObject bookApi(JdbcTemplate conn,String isbn){
List results = conn.query(""select AVG(rate) from reviews where isbn=? "", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
JSONObject json = new JSONObject();
if (results.isEmpty()){
json.put(""error"",""Invalid ISBN"");
}
else {
json = JSONObject.parseObject(results.get(0).toString());
}
return json;
}"
11204,"Get the database engine via $conn_string$ and set the echo parameter to False, get the connection, execute SQL (query the goods column data in the shop table via $name$), store the query result as t he data parameter of DataFrame, set 'columns' parameter as every element in 'keys' after excecuting SQL, capitalize the letters of each element, and finally return the data.","public List executInquery(DataSource conn_string, String name){
JdbcTemplate engine = new JdbcTemplate(conn_string);
List res = engine.query(""select goods from shop where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
11087,Use $connection$ to execute SQL (query the item information in the item_property table based on $property$) and get all the data.,"public void testRowOverload(JdbcTemplate connection,String property){
List res_item = connection.query(""select item from item_property where property= ?"", new Object[]{property}, new BeanPropertyRowMapper(List.class));
assert res_item.size()>0;
for (Object row : res_item) {
System.out.println(row);
}
}"
13088,Use $conn$ to execute SQL (query the statecode in the cities table based on $city$) and get all the data.,"public JSONArray getStateCode(JdbcTemplate conn,String city){
List rows = conn.query(""select statecode from cities where city= ?"", new Object[]{city}, new BeanPropertyRowMapper(List.class));
List results = new ArrayList();
for (Object row : rows) {
results.add(row);
}
return JSONObject.parseArray(results.toString());
}"
13441,"Execute SQL through $conn$ (get all columns in the student table with name as $x$). If the number of rows of the query results is greater than 0, then get the first piece of data and return it; otherwise return None.","public Object getStudent(JdbcTemplate conn, String x){
List result = conn.query(""select * from student where name = ? "", new Object[]{x}, new BeanPropertyRowMapper(List.class));
if (!result.isEmpty()){
Object row = result.get(0);
return row;
}
else {
return null;
}
}"
13666,Create the database engine from $postgres$ and execute the SQL (query the year information in the stock_data where date is $date$) from that engine and get all the data. Return the result of a serialized query.,"public JSONArray getYears(DataSource postgres,String date){
JdbcTemplate engine = new JdbcTemplate(postgres);
List years = engine.query(""select year from stock_data where date= ?"", new Object[]{date}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(years.toString());
}"
11040,"Use $engine$ to get the connection. Execute SQL (query all the db_uri information in the DATABASE_NAME table based on $heat$). Close the connection, separate the query results with list, store the 0th element of each item and return.","public List tearDown(DataSource engine,String heat){
JdbcTemplate conn = new JdbcTemplate(engine);
List heats = conn.query(""select db_uri from database_name where heat= ?"", new Object[]{heat}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object o : heats) {
Object o1 = JSONObject.parseObject(o.toString()).get(0);
list.add(o1);
}
return list;
}"
13124,"Execute SQL (get all columns in the FRC_ORDERS where kwargs is $kwargs$) with $conn$ and get all the data, and return the query results if they are true.","public List getOrders(JdbcTemplate conn,String kwargs){
List result_orders = conn.query(""select * from frc_orders where kwargs= ?"", new Object[]{kwargs}, new BeanPropertyRowMapper(List.class));
if (result_orders.isEmpty()){
return null;
}
else {
return result_orders;
}
}"
11093,"Use $conn$ to execute SQL (query all information in the users table when id is $iduser$) and get all the data. Finally, use jsonify to return the query result.","public JSONArray bookGet(JdbcTemplate conn,String iduser){
List again_res = conn.query(""select * from users where id= ?"", new Object[]{iduser}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(again_res.toString());
}"
13512,"Get the database engine and establish a connection through $db_root_url$. Execute the SQL statement (query all the columns in the SCHEMA table according to $sms$), get all the data, close the connection, and return the query results.","public List teardownDb(DataSource db_root_url,String sms){
JdbcTemplate connection = new JdbcTemplate(db_root_url);
List res = connection.query(""select * from SCHEMA where sms=?"", new Object[]{sms}, new BeanPropertyRowMapper(List.class));
return res;
}"
14131,Use $URI$ to get the database engine and establish a connection. Use the java expression to set up the SQL statement (query the userID information in the $user$ table where userName is $stringUserName$). Execute SQL to get all the information and return.,"public List<Object> getUserIntoDatabase(EntityManager URI, Root<Object> user, String stringUserName){
CriteriaBuilder cb = URI.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(user).where(cb.equal(user.get(""userName""),stringUserName));
List<Object> res = URI.createQuery(cq).getResultList();
return res;
}"
14148,"Set up SQL statement: Query all columns in m_table table, execute SQL by $conn$ to get the first piece of data and return.","public List getPrice(JdbcTemplate conn){
List res = conn.query(""select * from m_table"", new BeanPropertyRowMapper(List.class));
return res;
}"
14052,"Query all f_id in the passengers table that the 'name' is $name$ through $conn$,make sure that $conn$ is turned off, render and return ""confirm.html"", where the res parameter is the query result.","public String confirm(JdbcTemplate conn,String name, Model model){
List res = conn.query(""select f_id from passengers where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""res"",res);
return ""confirm.thtml"";
}"
13841,"""Set up SQL statement (use format() function to format the output string, query all columns in the posts table by string $classid$) and use $conn$ connection to execute SQL statement to get all the data. Convert each item of query results into dict and store it as list. Use jsonify to return the contents of the list.","public JSONArray getPostsByid(JdbcTemplate conn,String classid){
List res = conn.query(""select * from posts where classid = ?"", new Object[]{classid}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(res.toString());
}"
13083,Use $conn$ to execute SQL (query test in test_table) and get all of data. Convert each item in the query result to dict and return.,"public List createDb(JdbcTemplate conn){
List texts = conn.query(""select test from test_table"", new BeanPropertyRowMapper(List.class));
return texts;
}"
11448,"Try to set up SQL (query all columns in the stockdata table based on $name$), use $conn$ to execute sql, get all the data, and return the query data. If an exception occurs during execution, print ""fail"".","public List selectValue(JdbcTemplate conn,String name){
try {
List results = conn.query(""select * from stockdata where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return results;
}
catch (Exception e){
e.printStackTrace();
return null;
}
}"
11418,"
Set SQL based on the java expression: (query mods column in $results$ table based on $fraction_id$) . Execute the SQL with $conn$ and get all the data. Use for loop to iterate through each query result and store the 0th element of each data as list, and finally return the list.","public List getUndefModMassesFromTopResults(EntityManager conn, Root<Object> results, String fraction_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(results).where(cb.equal(results.get(""fraction_id""),fraction_id));
List<Object> response = conn.createQuery(cq).getResultList();
List undef_mods = new ArrayList();
for (Object row : response) {
undef_mods.add(JSONObject.parseObject(row.toString()).get(0));
}
return undef_mods;
}"
11680,"Use $db$ to execute SQL (get the duration column in the flights table where origin is $origin$ and destination is $dest$), get the first piece of data, and finally return the query result.","public List getDuration(JdbcTemplate db,String origin,String dest){
List dur = db.query(""select duration from flights where origin=? and destination=?"", new Object[]{origin,dest}, new BeanPropertyRowMapper(List.class));
return dur;
}"
13367,"Use the f string matching method to set sql (query the college column in the players table according to $id$), use the begin method of $engine$ to execute SQL, get all the query results, use for loop to store the 0th element of each item of the query results as list and return.","public List getDuration(JdbcTemplate engine,String id){
List res = engine.query(""select college from players where id=?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object each : res) {
list.add(JSONObject.parseObject(each.toString()).get(0));
}
return list;
}"
13700,"Set SQL: query the service in the spann where name is $name$ and duration is $duration$. Execute SQL with $conn$ and get barracuda data. Set assertion to determine that the length of the query result is greater than 0. Finally, each item in the query result is converted to dict and returned.","public List getService(JdbcTemplate conn, String name, String duration){
List services = conn.query(""select service from spann where name=? and duration=?"", new Object[]{name,duration}, new BeanPropertyRowMapper(List.class));
assert services.size()>0;
return services;
}"
13015,"Try to execute the following code: Set up SQL (query the DISH_DESCRIPTION information in the dish table when DISH_ID is $dishid$); use $conn$ to execute SQL and get the first piece of data; and finally return the query result. If an exception occurs, the 'failed' information is printed.","public List queryDish(JdbcTemplate conn, String dishid){
try {
List description = conn.query(""select dish_description from dish where dish_id =?"", new Object[]{dishid}, new BeanPropertyRowMapper(List.class));
return description;
}catch (Exception e){
System.out.println(""failed"");
return null;
}
}"
11598,"Use the $conn$ connection to execute SQL (query all columns in the Category table through $username$) and get all the data. If the query result is not empty, render and return 'home.html', where the categories parameter is the query result.","public String showHome(JdbcTemplate conn,String username, Model model){
List categories = conn.query(""select * from category where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (categories.isEmpty()){
return null;
}
else {
model.addAttribute(""categories"",categories);
return ""home.thtml"";
}
}"
14005,"Use the java expression to set up the SQL statement, which contains: Query the data in the $E_cuenta$ table where id_cuenta is $obj_cuenta$, execute the SQL statement through $session$ and get all the data, make sure that $session$ is closed and return all the query results.","public List actualizar(EntityManager session, Root<Object> E_cuenta, String obj_cuenta){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(E_cuenta).where(cb.equal(E_cuenta.get(""id_cuenta""),obj_cuenta));
List<Object> res = session.createQuery(cq).getResultList();
return res;
}"
11060,"In ORM mode, use $conn$ to execute SQL (query all the information in the $UsageMetric$ table based on $service_id$), get all the data, and close the connection. Use for loop to store 0th element of each item in the query result into list and return.","public List aggregate(EntityManager conn, Root<Object> UsageMetric, String service_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(UsageMetric).where(cb.equal(UsageMetric.get(""service_id""),service_id));
List<Object> values = conn.createQuery(cq).getResultList();
List service_list = new ArrayList();
for (Object i : values) {
service_list.add(JSONObject.parseObject(i.toString()).get(0));
}
return service_list;
}"
13784,"Execute SQL with $conn$ (query the name column in the sqlite_master table based on $type$ and $posts$), get all the query results, use for loop to traverse all the obtained query results, print the 0th element of each piece of data and return the query results.","public List index(JdbcTemplate conn, String type,String posts){
List sql = conn.query(""select name from sqlite_master where type = ? and posts = ?"", new Object[]{type,posts}, new BeanPropertyRowMapper(List.class));
for (Object i : sql) {
System.out.println(JSONObject.parseObject(i.toString()).get(0));
}
return sql;
}"
11687,"Use $engine$ to connect the database and execute SQL (get the id column in the test_users table where firstname is $fname$ and lastname is $lname$), get all the data, and finally return the query result.","public List index(JdbcTemplate engine, String fname,String lname){
List regs = engine.query(""select id from test_users where firstname=? and lastname=?"", new Object[]{fname,lname}, new BeanPropertyRowMapper(List.class));
return regs;
}"
14154,"Execute SQL statement via $con$: Query all columns of books table and get all the data. If no data is obtained, return None; otherwise return all the obtained data.","public List main(JdbcTemplate con){
List books = con.query(""select * from books"", new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return null;
}
else {
return books;
}
}"
11427,"Create cursor by $connection$, set SQL (query all information in call_list table based on $callid$), execute SQL, get all the query results and close the connection. Uf execution statement is greater than 0, return rendered 'calllists.html' and the 'articles' parameter is the query result. Otherwise return the rendered 'calllists.html' and the msg parameter is 'No Call lists Found'.","public String selectValue(JdbcTemplate conn,String callid, Model model){
List call_lists = conn.query(""select * from call_list where callid = ?"", new Object[]{callid}, new BeanPropertyRowMapper(List.class));
if (call_lists.isEmpty()){
model.addAttribute(""msg"",""No Call lists Found"");
return ""calllists.html"";
}
else {
model.addAttribute(""articles"",call_lists);
return ""calllists.thtml"";
}
}"
13106,"Use $conn$ to execute SQL (get the three columns of origin, destination, and duration in the flights) and get all the data, print ""Error"" and return directly if the query result is None, and then use the for loop to print each item in the query result. The origin column, formatted as the result of the query, continues for minutes in the duration column to the destination column""","public void selectValue(JdbcTemplate conn){
List flights = conn.query(""select origin, destination, duration from flights"", new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
System.out.println(""Erroe"");
return;
}
else {
for (Object flight : flights) {
System.out.println(JSONObject.parseObject(flight.toString()).getString(""origin"") + "" to ""
+JSONObject.parseObject(flight.toString()).getString(""destination"") + "" lasting ""
+JSONObject.parseObject(flight.toString()).getString(""duration"") + "" mintues "");
}
}
}"
13087,"* Try to execute the following code: use $conn$ to execute SQL (query all the information in $table$ based on $my_all$) under java expressions, get the first piece of data and return the query results. If an exception occurs, print the specific information and return it directly.","public List<Object> selectPprint(EntityManager conn, Root<Object> table, String my_all){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""url""),my_all));
List<Object> table_result = conn.createQuery(cq).getResultList();
return table_result;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13364,"Use $conn$ to execute SQL (query all columns in the lace_texts table based on $textsid$), use for loop to traverse all obtained query results, and output them.","public void selectValue(JdbcTemplate conn,String textsid){
List c = conn.query(""select * from lace_texts where textsid= ?"", new Object[]{textsid}, new BeanPropertyRowMapper(List.class));
for (Object i : c) {
System.out.println(i);
}
}"
11453,"Set SQL (query the maximum value of the orderid column in the orders table), use $conn$ to execute the SQL and get all the query results, and return the 0th element of the query results which is converted to list format.","public Object search(JdbcTemplate conn){
List db_result = conn.query(""select max(orderid) from orders"", new BeanPropertyRowMapper(List.class));
return db_result.get(0);
}"
14186," connect to the database based on $engine$. Query all the name, email, address and state data in the drinkers table, convert each item of the query result to dict, store as list and return.","public List getDrinkers(JdbcTemplate conn){
List rs = conn.query(""select name, email, address, state from drinkers"", new BeanPropertyRowMapper(List.class));
return rs;
}"
13100,"Set SQL in java expressions: Query all information in $table$ based on $scorecolumn$. Use $connection$ to execute the SQL and get all the data, and finally return the query results.","public List<Object> testQuoted(EntityManager connection, Root<Object> table, String scorecolumn){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""scorecolumn""),scorecolumn));
List<Object> result = connection.createQuery(cq).getResultList();
return result;
}"
13190,"Execute the SQL with $conn$ (get the id column in the show where link is $link$) and get the first piece of data, then return the tenth element of the query result and list it as ""id"".","public String selecgetShowIdtRes(JdbcTemplate conn,String link){
List rows = conn.query(""select id from show where link= ?"", new Object[]{link}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(rows.get(0).toString()).getString(""id"");
}"
13648,Execute the SQL (query all columns in the professors table where id is $id$) using $db$ and get all the data. Use the for loop to print each item of data in the query results.,"public void selectProfessors(JdbcTemplate db,String id){
List professors = db.query(""select * from professors where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object p : professors) {
System.out.println(p);
}
}"
13293,* Execute the SQL (get the origin column in the TABLE where destination is $destination$) with $conn$ to get all the data printed and return.,"public List selectOrigin(JdbcTemplate conn,String destination){
List origin_results = conn.query(""select origin from table where destination = ?"", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
System.out.println(origin_results);
return origin_results;
}"
11521,"""Use $conn$ connection to execute SQL (query all columns in zips table through $zipcode$) and get all data. If zipcode is empty, use jsonify to return error message: ""invalid zipcode"". Otherwise, use jsonify to return zip information: zipcode attribute of zipcode, place_name information: city attribute of zipcode, state information: state attribute of zipcode.","public JSONObject api(JdbcTemplate conn,String zipcode){
List zipcodes = conn.query(""select * from zips where zipcode = ?"", new Object[]{zipcode}, new BeanPropertyRowMapper(List.class));
JSONObject json = null;
if (zipcodes.isEmpty()){
json = new JSONObject();
json.put(""error"",""invalid zipcode"");
}else {
json = new JSONObject();
json.put(""zip"", JSONObject.parseObject(zipcodes.get(0).toString()).getString(""zipcode""));
json.put(""place_name"", JSONObject.parseObject(zipcodes.get(0).toString()).getString(""city""));
json.put(""state"", JSONObject.parseObject(zipcodes.get(0).toString()).getString(""state""));
}
return json;
}"
13436,"Use $conn$ to execute the SQL (get all columns in the happiness table based on $id$) and get all the data. Finally return the rendered ""index.html"", where the data parameter is the query result.","public String index(JdbcTemplate conn,String id, Model model){
List data = conn.query(""select * from happiness where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""data"",data);
return ""index.thtml"";
}"
13011,"* ,""Use $db_api_connection$ to get the cursor. Try executing the following code: query all columns in the mytables table based on the cursor and get all the data; close the cursor and return the query results. If an exception occurs, a DisconnectionError exception is thrown.","public List testConnection(JdbcTemplate db_api_connection){
try {
List data = db_api_connection.query(""select * from mytables"", new BeanPropertyRowMapper(List.class));
return data;
}
catch (Exception e){
return null;
}
}"
11606,"Use $db$ to execute SQL (get all the columns in the users table whose username is $uname$ and password is $pwd$). If the number of row of the query result is 0, return the rendered ""error.html"", the input message parameter is ""No such user., and finally return the rendered ""personal_page.html"", where the users parameter is the query result.","public String personalPage(JdbcTemplate conn,String uname,String pwd,Model model){
List users = conn.query(""select * from users where username=? and password=?"", new Object[]{uname,pwd}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
model.addAttribute(""message"",""No such user."");
return ""error.html"";
}
else {
model.addAttribute(""users"",users);
return ""personal_page.thtml"";
}
}"
13850,"Use the ORM method to query the first piece of data in the $ProfilesData$ table with gid as $gid$ through $session$. Make sure $session$ is closed. If the query result exists, return True.","public boolean selectUrls(EntityManager get_value, Root<Object> ProfilesData, String gid){
CriteriaBuilder cb = get_value.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ProfilesData).where(cb.equal(ProfilesData.get(""gid""),gid));
List<Object> pdata = get_value.createQuery(cq).getResultList();
if (pdata.isEmpty()){
return false;
}
else {
return true;
}
}"
13225,"Try to execute an SQL statement with $conn$ (query all columns in the $db_table$ where Open is $Open$) in a java expression, get all the data, and return it. If an Exception Exception occurs, the specific Exception information is printed.","public List<Object> selectFile(EntityManager conn, Root<Object> db_table, String Open){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(db_table).where(cb.equal(db_table.get(""incident_status""),Open));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11683,"Execute SQL with $conn$ (get the consumer_id column in the allocation table where id is $id$ and provider_id is $pid$) and get all the data. If the query result is not true, print ""no allocation records""; otherwise, return the query result.","public List personalPage(JdbcTemplate conn,String id,String pid){
List cids = conn.query(""select consumer_id from allocation where id=? and provider_id=?"", new Object[]{id,pid}, new BeanPropertyRowMapper(List.class));
if (cids.isEmpty()){
System.out.println(""no allocation records"");
return null;
}
else {
return cids;
}
}"
14173,"If the request module sends the request as post, execute the SQL via $conn$: Get all columns in 'books' based on $isbn$ and get all the data, render and return 'booksreview.html', where the all_reviews parameter is the all obtained data.","public String login(HttpRequest request, JdbcTemplate conn, String isbn,Model model){
if (request.getMethod().equals(""POST"")){
List all_reviews = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""all_reviews"", ""all_reviews"");
return ""booksreview.html"";
} else {
return null;
}
}"
13621,"Try to set the SQL using a java expression (querying the user information in $atable$ where uname is $uname$). Execute the SQL with $conn$ and get the first data and return the query results. If an exception occurs, return False.","public Object appUserLogout(EntityManager conn, Root<Object> atable, String uname){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(atable).where(cb.equal(atable.get(""uname""),uname));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}catch (Exception e){
return false;
}
}"
13879,Use $conn$ to execute the SQL statement (query all columns in the flights table based on $id$) and get all the data. Use for loop iterate through all the query results and prints the 0th element of each row of the query results.,"public void seleselectFlightsctValue(JdbcTemplate conn,String id){
List flights = conn.query(""select * from flights where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object flight : flights) {
System.out.println(JSONObject.parseObject(flight.toString()).get(0));
}
}"
11082,"If logged_in is not in $session$, redirect to the '/ login' page. Otherwise, use $conn$ in the java expression to query SQL (query all the information in $todostable$ when id is $deleteBtnID$) and get all the data. Convert each item of the query result to dict and return.","public Object selectUrls(EntityManager conn, Root<Object> todostable, String deleteBtnID, HttpSession session){
Object logger_in = session.getAttribute(""logger_in"");
if (logger_in==null){
return ""/login"";
}
else {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(todostable).where(cb.equal(todostable.get(""id""),deleteBtnID));
List<Object> values = conn.createQuery(cq).getResultList();
return values;
}
}"
13362,"Use the format string matching method to set sql (query all the information in the 'users_table' table according to $user_id$), use $conn$ to execute SQL, get all the query results, use for loop to convert each item of the query results into dict, store it as list and return.","public List getStudents(JdbcTemplate conn,String user_id){
List q = conn.query(""select * from users_table where user_id= ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return q;
}"
13173,"* Execute the SQL using $conn$ (get the isbn, title, and three columns in the books where isbn is $query$, title is $query$ and author is $query$) and return the rendered ""error.html"" if the number of rows in the query results is 0, otherwise, return the rendered ""results.html"", where the books parameter is all the data retrieved after the query.","public String search(JdbcTemplate conn,String query, Model model){
List books = conn.query(""select isbn, title, author from books where isbn =? and title =? and author=?"", new Object[]{query,query,query}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
model.addAttribute(""message"",""No such flights"");
return ""error.html"";
}
else {
model.addAttribute(""books"",books);
return ""results.html"";
}
}"
13046,Use $db_uri$ to create the database engine and get the connection according to the engine. Use the connection to execute SQL (query cande in drop_DATABASE) and get all the data. Return the query results directly.,"public List tearDown(DataSource db_uri){
JdbcTemplate engine = new JdbcTemplate(db_uri);
List informa = engine.query(""select cande from drop_DATABASE "", new BeanPropertyRowMapper(List.class));
return informa;
}"
13546,"Connect the database with $testing$, execute SQL (query all columns in the insert_foo table according to $moredata$), get all the query results, close the connection, and return the query results.","public List testExplicittext(DataSource testing, String moredata){
JdbcTemplate conn = new JdbcTemplate(testing);
List res = conn.query(""select * from insert_foo where moredata= ? "", new Object[]{moredata}, new BeanPropertyRowMapper(List.class));
return res;
}"
14210,"If the request module sends a request by POST, execute the SQL statement based on the $conn$ connection:Get the first name data in the users table according to $email$ and return the query result; otherwise render and return 'login.html'.","public Object login(HttpRequest request, JdbcTemplate conn, String email){
if (request.getMethod().equals(""POST"")){
List name = conn.query(""select name from users where email= ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
return name.get(0);
} else {
return ""login.html"";
}
}"
13680,"Execute the SQL using $db$ (query information about otu_id in samples where sample is $sample$) and get all the data. Use for loop to put the 0th element of each item in the query result into a list, and finally return a list that is handled with jsonify.","public JSONArray samplesIdValues(JdbcTemplate conn, String sample){
List values = conn.query(""select otu_id from samples where sample= ?"", new Object[]{sample}, new BeanPropertyRowMapper(List.class));
List sample_list = new ArrayList();
for (Object i : values) {
sample_list.add(JSONObject.parseObject(i.toString()).get(0));
}
return JSONObject.parseArray(sample_list.toString());
}"
11605,"Use $conn$ to execute SQL (get all the columns in the iris table according to $id$), get the first piece of data, and finally return the query result.","public Object getIris(JdbcTemplate conn,String id){
List iris_results = conn.query(""select * from iris where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
Object row = iris_results.get(0);
return row;
}"
11277,"Use $conn$ to execute SQL (get all the columns in 'books' based on $book_isbn$) and get the first piece of data. If the query result is not empty, use jsonify to process'No book with that isbn exists' content and return, and finally return query result after being processed by jsonify.","public JSONObject apiRes(JdbcTemplate conn,String book_isbn){
List books = conn.query(""select * from books where book_isbn =?"", new Object[]{book_isbn}, new BeanPropertyRowMapper(List.class));
Object book = books.get(0);
if (books.isEmpty()){
return JSONObject.parseObject(""No book with that isbn exists"");
}
else {
return JSONObject.parseObject(book.toString());
}
}"
13017,"Use $conn$ to execute SQL (query all columns in mytable when rownum is less than $nrows$) and get all the data. Finally, return the query result.","public List randomSample(JdbcTemplate conn,String nrows){
List nrow = conn.query(""select * from mytable where rownum < ?"", new Object[]{nrows}, new BeanPropertyRowMapper(List.class));
return nrow;
}"
13833,"Query all the name in the passengers table with flight_id as $flight_id$ through $conn$. If there is no query result, return None; otherwise, loop through the query results and print the name attribute information in the query results.","public List select(JdbcTemplate conn,String flight_id){
List data = conn.query(""select name from passengers where flight_id =?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (data.isEmpty()){
return null;
}
else {
for (Object passenger : data) {
System.out.println(JSONObject.parseObject(passenger.toString()).getString(""name""));
}
return data;
}
}"
,"Use $conn$ to execute SQL (get all columns in the flights table with id as $flight_id$) and get the first piece of data. If the query result is None, then return None; otherwise return the rendered ""flight.html"", where the flight parameter is the query result.","public String select(JdbcTemplate conn,String flight_id,Model model){
List flights = conn.query(""select * from flights where id =?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
Object flight = flights.get(0);
if (flights.isEmpty()){
return null;
}
else {
model.addAttribute(""flight"", flight);
return ""flight.html"";
}
}"
13259,", make the connection using $engine$. Execute the SQL statement (select the itemId column in the sells where barId is $barId$) to get all the data. Finally, each item in the query result is converted to a dictionary type and returned as a list.","public List selectValue(DataSource engine, String barId){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select itemid from sells where barid = ? "", new Object[]{barId}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13895,Use $conn$ connection to execute SQL (query all columns in uploads_content table through $filename$) and get all the data. Use for loop iterate through query results and print them. Convert each item of query results into dict and store as list and return it.,"public List upload(JdbcTemplate conn,String filename){
List rows = conn.query(""select * from uploads_content where filename = ?"", new Object[]{filename}, new BeanPropertyRowMapper(List.class));
for (Object e : rows) {
System.out.println(e);
}
return rows;
}"
11255,"Set SQL (get all columns in table_name based on $goods$), try to execute with $conn$, get all the data and finally return true, otherwise return false.","public boolean dbuDoesTablExist(JdbcTemplate conn,String goods){
try {
List rows = conn.query(""select * from table_name where goods= ?"", new Object[]{goods}, new BeanPropertyRowMapper(List.class));
return true;
} catch (Exception e){
return false;
}
}"
13323,"Use $conn$ to execute SQL (query all the columns in the flights table with the condition that flights_id is $id$) and get all the query results, use for loop to insert each of the query results into a list and return the rendered 'flights.html' page, where the parameter flights is the list where the query results are stored.","public String queryFlights(JdbcTemplate conn, String goods, Model model){
List res_list = conn.query(""select * from table_name where goods= ?"", new Object[]{goods}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"", res_list);
return ""flights.html"";
}"
13477,"Execute the SQL through $conn$ (get the parent column in the relationship table based on $student$)
* and get all the data. Then use for loop to print each item of the query results.","public void getRelation(JdbcTemplate conn, String student){
List parents = conn.query(""select parent from relationship where student = ?"", new Object[]{student}, new BeanPropertyRowMapper(List.class));
for (Object parent : parents) {
System.out.println(parent);
}
}"
11323,"Execute SQL based on $conn$ (query all columns of types_test_data in the $DateCol$ table based on $conn$), get all the data, and set the assertion to determine whether the query result is empty.","public void testDateParsing(JdbcTemplate conn, String DateCol){
List ery = conn.query(""select from types_test_data where datecol= ?"", new Object[]{DateCol}, new BeanPropertyRowMapper(List.class));
assert ery.size()>0;
}"
11108,"Execute the SQL (querying all game data in the flights where destination is $destination$) using the $conn$ connection, and use the for loop to traverse the query results and print.","public void flightPage(JdbcTemplate conn, String destination){
List texts = conn.query(""select game from flights where destination= ?"", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
for (Object t : texts) {
System.out.println(t);
}
}"
11028,"Use $conn$ to start a transaction. Try to execute the following code: Use the java expression to execute SQL (query the quantity information in the $cookies$ table based on $cookie_id$); execute and get all the query results; and print the query results. If an exception occurs, use transaction to rollback and print the error message.","public void shipIt(EntityManager conn, Root<Object> cookies, String cookie_id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cookies).where(cb.equal(cookies.get(""cookie_id""),cookie_id));
List<Object> recs = conn.createQuery(cq).getResultList();
System.out.println(recs);
}catch (Exception e){
e.printStackTrace();
System.out.println(""error"");
}
}"
13399,"If the request method is ""GET"", return the rendered ""login.html"" page; if the request method is ""POST"", use $conn$ to execute SQL (query the id column in the users table based on $username$ and $password$) and get the first query result.","public Object login(HttpRequest request, JdbcTemplate conn, String username, String password){
if (request.getMethod().equals(""POST"")){
List user_id = conn.query(""select id from users where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (user_id.isEmpty()){
return ""error.html"";
}
else {
return ""/index"";
}
} else {
return ""login.html"";
}
}"
11516,"Use $conn$ connection to execute SQL query statement and the content is as follows: query the number of id in the 'table' table based on $aname$, convert row 0 and column 0 data of all query result to integer data and return it.","public Object selectValue(JdbcTemplate conn,String aname){
List count = conn.query(""select count(id) from table where aname = ?"", new Object[]{aname}, new BeanPropertyRowMapper(List.class));
return count.get(0);
}"
11011,"Use the java expression to set SQL: Query the id in the table when the name column in $sample_table$ is $value$. SQL calls the execute method to execute nd get a piece of data. If the first obtained data exists, return the first element of the first data. Otherwise, return -1.","public Object getSampleId(EntityManager sess, Root<Object> sample_table, String value){
CriteriaBuilder cb = sess.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(sample_table).where(cb.equal(sample_table.get(""name""),value));
List<Object> result = sess.createQuery(cq).getResultList();
if (!result.isEmpty()){
Object x = result.get(0);
Object sample_id = JSONObject.parseObject(x.toString()).get(0);
return sample_id;
}else {
return ""-1"";
}
}"
13326,"Try to use $conn$ to execute SQL (query the bookpage column in the books table according to $isbn$) and get the first query result. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' book.html' page, where the book parameter is the queried result. If an exception is caught, return the rendered 'error.html' page.","public String book(JdbcTemplate conn,String isbn, Model model){
List books = conn.query(""select bookpage from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}
else {
Object book = books.get(0);
model.addAttribute(""book"",book);
return ""book.html"";
}
}"
13265,"Use $game$ to get the database engine and establish a connection. Execute the SQL statement by joining(query all $Score$ data and return) .","public List scoreList(EntityManager game, Root<Object> Score) {
        CriteriaBuilder cb = game.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(Score);
        List<Object> laten = game.createQuery(cq).getResultList();
        return laten;
    }"
14080,Use $conn$ to execute the SQL statement and the content is as follows: Query the 0th element of the first id data in the nittest_table table and set the assertion to determine that the query result is 0.,"public void testTransaction(JdbcTemplate conn){
List numbers = conn.query(""select id from nittest_table"", new BeanPropertyRowMapper(List.class));
int number =(Integer) JSONObject.parseObject(numbers.get(0).toString()).get(0);
assert number ==0;
}"
13483,"Use $conn$ cursor method to execute SQL (get the name column in the USER table) and get all the data. Close the cursor connection, then close the database connection and finally return the query results.","public void selectUser(JdbcTemplate conn){
List names = conn.query(""select name from user"", new BeanPropertyRowMapper(List.class));
System.out.println(names);
}"
13287,"Create and return a cursor using $conn$. Execute SQL (select all columns in the $users$) and get all the data. Close the cursor and database connection, and finally return the result of the query.","public List searchUsers(JdbcTemplate conn){
List users = conn.query(""select * from user"", new BeanPropertyRowMapper(List.class));
return users;
}"
13193,"Use $conn$ to execute the SQL (get all the columns in the reviews where token is $token$) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the rendered ""index.html"", where the review_words parameter is the list content.","public String cleanReview(JdbcTemplate conn,String token, Model model){
List review_words = conn.query(""select * from reviews where token= ?"", new Object[]{token}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""review_words"",review_words);
return ""index.html"";
}"
13640,Start a thing with $connection$ : set up the SQL using a java expression (Query the Haslo in the $uzytkownicy$ when the Login is $login$). Execute the SQL using $connection$ and get the first data. Finally return 0th element of the query result.,"public Object getHasloUzytk(EntityManager connection, Root<Object> uzytkownicy, String login){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(uzytkownicy).where(cb.equal(uzytkownicy.get(""login""),login));
List<Object> results = connection.createQuery(cq).getResultList();
Object result = results.get(0);
return JSONObject.parseObject(result.toString()).get(0);
}"
13237,"Set the SQL (query all columns in $datapaths$ where dpid is $dpid$) using a java expression, execute the SQL with $conn$ and get all the data. Return None if the data is not retrieved, otherwise return True.","public Object getHasloUzytk(EntityManager connection, Root<Object> uzytkownicy, String login){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(uzytkownicy).where(cb.equal(uzytkownicy.get(""login""),login));
List<Object> results = connection.createQuery(cq).getResultList();
Object result = results.get(0);
return JSONObject.parseObject(result.toString()).get(0);
}"
11487,"Set SQL (query the username column in the users table based on $password$), execute SQL based on $conn$ and get all the query results. Return the rendered ""regsuccess.html"" page with the username parameter being the query results.","public String getPass(JdbcTemplate conn,String password, Model model){
List usernames = conn.query(""select username from users where password = ?"", new Object[]{password}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""username"",usernames);
return ""regsuccess.html"";
}"
11437,"Set SQL (query all the information in the users table based on the value of 'name': $user_name$), use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the length of the query results is not equal to 0, and finally return the query results.","public List testHeavyNesting(JdbcTemplate conn,String user_name){
List re_user = conn.query(""select * from users where name =?"", new Object[]{user_name}, new BeanPropertyRowMapper(List.class));
assert re_user.size()!=0;
return re_user;
}"
13035,"Use $tlengine$ to get the connection. Try to use a database connection to execute SQL (query all data in the query_users table) and get all the query results. Return the query results. Finally, make sure that the database connection is closed.","public List testCommit(DataSource TimeTable){
JdbcTemplate engine = new JdbcTemplate(TimeTable);
List userinf = engine.query(""select * from query_users "", new BeanPropertyRowMapper(List.class));
return userinf;
}"
13576,"Get the database engine through $DB_CONNECT_STRING$ where a parameter max_overflow is 5, set the SQL statement (query the topics column in the spider_jam_comment table based on $id$), get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list, and return the list.","public List getTotalRequestUrls(DataSource DB_CONNECT_STRING, String id){
JdbcTemplate engine = new JdbcTemplate(DB_CONNECT_STRING);
List results = engine.query(""select topics from spider_jam_comment where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List list_request_urls = new ArrayList();
for (Object result : results) {
list_request_urls.add(result);
}
return list_request_urls;
}"
11314,Use $conn$ to execute SQL (query all data in the id column of the bypass table based on $machinary$ and $transaction$) and return the query results.,"public List testCommit(JdbcTemplate conn,String machinary,String transaction){
List results = conn.query(""select id from bypass where machinary = ? and transaction = ?"", new Object[]{machinary,transaction}, new BeanPropertyRowMapper(List.class));
return results;
}"
13718,"Execute SQL through $conn$ (query the oppose column in the show table according to $link$), and get the first row of data. If the query result is not empty, print the query result, and finally return it.","public Object getShows(JdbcTemplate conn,String link){
List rows = conn.query(""select oppose from show where link= ?"", new Object[]{link}, new BeanPropertyRowMapper(List.class));
Object row = rows.get(0);
if (!rows.isEmpty()){
System.out.println(row);
}
return row;
}"
13625,"Use $engine$  to get the connection, execute the SQL connection (querying the contents of players when player_id is $pid$) and get all the data. If the query result is not None, each element in the query result is converted to dict and return. Otherwise, return None.","public List getPlayerInfo(DataSource engine, String pid){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select * from players where player_id=? "", new Object[]{pid}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
return res;
}
else {
return null;
}
}"
13095,"Use $conn$ to execute a SQL: Query for all columns in the articles table. Return the rendered ""index.html"" and pass the query results to the articles parameter.","public String index(JdbcTemplate conn,Model model){
List articles = conn.query(""select * from articles"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""articles"",articles);
return ""index.html"";
}"
13514,"Try to use $conn$ to execute SQL (query all columns in the session table based on $deployment_id$), get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","public List deploy(JdbcTemplate conn,String deployment_id){
try {
List res = conn.query(""select * from session where deployment_id = ?"", new Object[]{deployment_id}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13301,"Get the database engine and establish a connection through $DB_CONNECT_STRING$. Execute the SQL statement (query all the columns in the spider_table according to $body$), get all the data, use for loop to store each item of the query result in list, and return the list.","public List startRequests(DataSource DB_CONNECT_STRING, String body){
JdbcTemplate engine = new JdbcTemplate(DB_CONNECT_STRING);
List results = engine.query(""select * from spider_table where body=? "", new Object[]{body}, new BeanPropertyRowMapper(List.class));
List res_list = new ArrayList();
for (Object item : results) {
res_list.add(item);
}
return res_list;
}"
13708,"Use $conn$ to execute SQL (query all columns in the cars table based on $ID$), get all the data, and set the assertion to determine that the query result is not empty list.","public void cars(JdbcTemplate conn,String ID){
List df = conn.query(""select * from cars where id = ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
assert df.size()!=0;
}"
11077,"Try to use the ORM method to execute SQL through $session$ (query all the information in the $ProductType$ table based on $type_name$), get the first piece of data, and return the query result. If an exception occurs, throw it directly. Finally, make sure that $sessiong$ is closed.","public List<Object> getTypeObject(EntityManager session, Root<Object> ProductType, String type_name){
try {
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ProductType).where(cb.equal(ProductType.get(""short_name""),type_name));
List<Object> Product_values = session.createQuery(cq).getResultList();
return Product_values;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13642,"Set SQL: query all columns in the user table where ID is $id$, password is $password$, and email is $email$. Execute the SQL using $db$ and get the first data. Return the rendered 'sigin.html' and pass the query result to the result parameter.","public String findUser(JdbcTemplate db,String id,String password,String email, Model model){
List result = db.query(""select * from user where id=? and password=? and email=?"", new Object[]{id,password,email}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""result"",result);
return ""sigin.html"";
}"
13695,"If the request method is GET, return ""register.html"" after rendering directly. Otherwise, try to execute the SQL using $db$ (querying all columns in the users table where the usernameis $uname$ and password is $pwd$) and get the first data. Finally, return the data. If an exception occurs, return the rendered ""error.html"".","public Object register(HttpRequest request, JdbcTemplate db, String uname, String pwd){
if (request.getMethod().equals(""POST"")){
try {
List users = db.query(""select * from users where username=:uname? and password=?"", new Object[]{uname,pwd}, new BeanPropertyRowMapper(List.class));
return users.get(0);
}catch (Exception e){
return ""error.html"";
}
} else {
return ""register.html"";
}
}"
11085,Use $conn$ to execute SQL (query the tbname in the dbname table based on $colname$) and get all the data. Convert each item in the query result to dict and return.,"public List getDataset(JdbcTemplate conn,String colname){
List res = conn.query(""select tbname from dbname where colname= ?"", new Object[]{colname}, new BeanPropertyRowMapper(List.class));
return res;
}"
13670,"Set SQL (query where Creator is $creator$ in T_Treasure_EvalCustomItem). Execute SQL with $conn$ and get all the data. Return query result if the query result length is greater than 0. Otherwise, return False.","public Object getAllData(JdbcTemplate conn,String creator){
List res = conn.query(""select * from T_Treasure_EvalCustomItem where Creator= ?"", new Object[]{creator}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
return res;
}else {
return false;
}
}"
13339,"Use $pymysql_db$ to set up cursors, execute SQL (query all columns in the reply table based on $user_id$ and $post_id$), get all query results, close the database connection, and return the rendered 'reply.html' page, where the input argument is the obtained data.","public String replyFunc(DataSource pymysql_db, String user_id,String post_id,Model model){
JdbcTemplate cursor = new JdbcTemplate(pymysql_db);
List sqlData = cursor.query(""select * from reply where user_id=? and post_id=?"", new Object[]{user_id,post_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""sqlData"", sqlData);
return ""reply.html"";
}"
13382,"Use $conn$ to execute SQL (query all columns in the players table according to $playersid$), get all the query results, and set the assertion to determine whether the length of the query result is not 0. ""","public void testOpentracing(JdbcTemplate conn,String playersid){
List res = conn.query(""select * from players where playersid= ?"", new Object[]{playersid}, new BeanPropertyRowMapper(List.class));
assert res.size()!=0;
}"
11090,Use the java expression to set the SQL (the number of id in the $telemetry$ table when the query time is $timenow$). Use $conn$ to execute the SQL and get all the data. Store the 0th element of each item in the query result is stored in list and return.,"public List selectrows(EntityManager conn, Root<Object> telemetry, String timenow){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(telemetry).where(cb.equal(telemetry.get(""time""),timenow));
List<Object> recs = conn.createQuery(cq).getResultList();
List list = new ArrayList();
for (Object rec : recs) {
list.add(JSONObject.parseObject(rec.toString()).get(0));
}
return list;
}"
11411,"Execute SQL with $conn$ (query the title column in the books table based on $author$ and $year$) and get all the query results. If no data is obtained, print'No such title', otherwise print the query results.","public void main(JdbcTemplate conn,String author,String year){
List item = conn.query(""select title from books where author = ? and year = ?"", new Object[]{author,year}, new BeanPropertyRowMapper(List.class));
if (item.isEmpty()){
System.out.println(""No such title"");
}else {
System.out.println(item);
}
}"
13776,"Set SQL based on the java expression (query all columns in the $date$ table based on $datetime$). Execute SQL with $connection$, get all the data, use for loop to traverse each query result, store the 0th element of each piece of data as list, and return the list.","public List getCodesFromBase(EntityManager connection, Root<Object> date, String datetime){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(date).where(cb.equal(date.get(""datetime""),datetime));
List<Object> ans = connection.createQuery(cq).getResultList();
List ans_list =new ArrayList();
for (Object i : ans) {
ans_list.add(JSONObject.parseObject(i.toString()).get(0));
}
return ans_list;
}"
11227,"Execute SQL via $conn$ (query the strategy_name in 'strategy' based on $strategy_id$) get all the data, and finally return the obtained result.","public List checkPreviousStrategyName(JdbcTemplate conn,String strategy_id){
List res = conn.query(""select strategy_name from strategy where strategy_id= ?"", new Object[]{strategy_id}, new BeanPropertyRowMapper(List.class));
return res;
}"
11517,"Get the database engine through $connection_string$, where echo parameter is False and convert_unicode parameter is True. Query all data with the aid as $aid$ in the engine table and return it.","public List queryInfo(DataSource connection_string, String aid){
JdbcTemplate engine = new JdbcTemplate(connection_string);
List aout = engine.query(""select * from engine where aid = ? "", new Object[]{aid}, new BeanPropertyRowMapper(List.class));
return aout;
}"
13593,"Execute SQL with $conn$ (query the Lat column in the Incidents table according to $lab$), get all the query results, convert the query results to json and return.","public JSONArray incidentMapData(JdbcTemplate conn,String lab){
List results = conn.query(""select lat from incidents where lab= ?"", new Object[]{lab}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(results.toString());
}"
13260,"Set the SQL statement using a java expression with the content of querying all columns in $NOTES$ when id is $note_id$. Execute the SQL statement with $conn$ and get all the data, then return the query results.","public List showNote(EntityManager conn, Root<Object> NOTES, String note_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(NOTES).where(cb.equal(NOTES.get(""id""),note_id));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}"
11249,"Use $conn$ to execute SQL (get all columns in imdb_movies based on $movietitle$) and get all data, finally store the result as list and return.","public List todas(JdbcTemplate conn,String movietitle){
List db_result = conn.query(""select * from imdb_movies where movietitle=?"", new Object[]{movietitle}, new BeanPropertyRowMapper(List.class));
return db_result;
}"
13214,"Execute the SQL statement using $connection$ (query all columns in the Images where the Id of image is $imageId$) , get all the data, and return.","public List selectImg(JdbcTemplate connection,String imageId){
List results = connection.query(""select * from images where imageid =?"", new Object[]{imageId}, new BeanPropertyRowMapper(List.class));
return results;
}"
13345,"Use $conn$ to execute SQL (query the year column in the books table based on $isbn$, $title$ and $author$), get the first row of data, and return the query results.","public Object main(JdbcTemplate conn,String isbn,String title,String author){
List years = conn.query(""select * from images where imageid =?"", new Object[]{isbn,title,author}, new BeanPropertyRowMapper(List.class));
Object year = years.get(0);
return year;
}"
13772,Execute SQL with $conn$ (query the sequenceno column in the operation_step table according to $id$) and return the obtained first row of data.,"public Object getName(JdbcTemplate conn,String id){
List list = conn.query(""select sequenceno from operation_step where id =?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return list.get(0);
}"
11233,"Use $conn$ to execute SQL (get all columns in 'noodles' based on $firstname$), get all the data, finally return the query result.","public List testfour(JdbcTemplate conn,String firstname){
List result = conn.query(""select * from noodles where firstname =?"", new Object[]{firstname}, new BeanPropertyRowMapper(List.class));
return result;
}"
14026,"Use $conn$ to execute the SQL statement: Find all the columns from the test_categorical table, get the first piece of data, and return.","public Object testCategorical(JdbcTemplate conn){
List list = conn.query(""select * from test_categorical"", new BeanPropertyRowMapper(List.class));
Object res = list.get(0);
return res;
}"
13983,"Use $conn$ to execute the SQL statement: Query all columns in the flights table with 'id': $flight_id$ and get the first piece of data.If the data obtained is empty, render and return ""error.html"", otherwise, render and return ""flight.html"", where the flight parameter is the obtained data.","public String flight(JdbcTemplate conn,String flight_id,Model model){
List flight = conn.query(""select * from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (flight.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""flight"",flight);
return ""flight.html"";
}
}"
11383,"If $distance$ is not empty, use $db_connection$ to execute SQL (query all columns in the user table based on $distance$), get all the query results, and return the query results.","public List createUser(JdbcTemplate db_connection,String distance){
if (distance!=null){
return null;
}else {
List query = db_connection.query(""select * from user where distance= ?"", new Object[]{distance}, new BeanPropertyRowMapper(List.class));
return query;
}
}"
13209,"""In ORM, the database engine is fetched using $localhost$ further fetching the Session object. Execute the SQL statement (query all columns in the $File$ where the id of file is $file_id$) , render and return 'file.html', where the file parameter is the result of the query.","public String file(EntityManager localhost, Root<Object> File, String file_id,Model model){
CriteriaBuilder cb = localhost.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(File).where(cb.equal(File.get(""id""),file_id));
List<Object> file = localhost.createQuery(cq).getResultList();
model.addAttribute(""file"", file);
return ""file.html"";
}"
14214,Set the SQL statement: Query the maximum value of code_no in the $codetbl$ table and execute the SQL through the $conn$ connection to get the first piece of data.,"public Object maxCodeNo(EntityManager conn, Root<Object> codetbl) {
        CriteriaBuilder cb = conn.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(codetbl);
        List<Object> s = conn.createQuery(cq).getResultList();
        Object r = s.get(0);
        if (r!=null){
            return JSONObject.parseObject(r.toString()).get(0);
        }else {
            return 0;
        }
    }"
13617,"Create a database engine where conn_string is $conn_string$ and set the echo parameter to False. Creating session instances using sessionmaker. Execute SQL (Excute tweets in the $TweetData$ where the datetime of science is $since_datetime$) in ORM and get all the data. Return if the query result exists, return None if the query result does not exists.","public List getTweetsSince(DataSource conn_string, EntityManager sess, Root<Object> TweetData ,String since_datetime){
JdbcTemplate engine = new JdbcTemplate(conn_string);
CriteriaBuilder cb = sess.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(TweetData).where(cb.equal(TweetData.get(""since_datetime""),since_datetime));
List<Object> tweets = sess.createQuery(cq).getResultList();
if (tweets.isEmpty()){
return null;
}else {
return tweets;
}
}"
13294,"Set the SQL using a java expression (get all rows of $table_name$ in the $table$), get the data using $conn$ and return.","public List count(EntityManager conn, Root<Object> table_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_name);
List<Object> r = conn.createQuery(cq).getResultList();
return r;
}"
13466,Execute SQL through $conn$ (get meta column in the user table based on $name$) and get all the data. Then use for loop to store each item of query results as list and finally return the 0th element of the list contents.,"public List testNullIsDecodedAsEmptyDict(JdbcTemplate conn,String name){
List result = conn.query(""select meta from user where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object row : result) {
list.add(JSONObject.parseObject(row.toString()).get(0));
}
return list;
}"
13941,"Set the SQL statement (query all columns in the 'tables' table whose name is $name$), use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result and print it. If the length of the execution result is 0, print ""No data"".","public void showTable(JdbcTemplate conn,String name){
List table = conn.query(""select * from tables where name =?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (!table.isEmpty()){
for (Object data : table) {
System.out.println(data);
}
}else {
System.out.println(""No data"");
}
}"
13762,"Execute SQL with $session$ (query all columns in the 'table' table based on $table_name$ and $destination$), get all the data, close the connection, and return the query result.","public List updateDestdb(JdbcTemplate session,String table_name,String destination){
List sets = session.query(""select * from table where table_name = ? and destination = ?"", new Object[]{table_name,destination}, new BeanPropertyRowMapper(List.class));
return sets;
}"
14099,"Use the ORM method to execute the SQL statement through the $conn$ connection, which is to query the first piece of data in the $SfWaybillResp$ table whose order_id is $order_id$ and return the obtained data.","public List sfQueryWaybillNormal(EntityManager conn, Root<Object> SfWaybillResp, String order_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(SfWaybillResp).where(cb.equal(SfWaybillResp.get(""order_id""),order_id));
List<Object> record = conn.createQuery(cq).getResultList();
return record;
}"
11398,"Use $conn$ to execute SQL (query all columns in the sqlite_master table based on $type$ and $name$), get the first row of data, and use for loop to traverse and print the 0th element of each article in the query result.","public void printTables(JdbcTemplate conn,String type,String name){
List rows = conn.query(""select * from sqlite_master where type =? and name=?"", new Object[]{type,name}, new BeanPropertyRowMapper(List.class));
for (Object item : rows) {
System.out.println(item);
}
}"
11401,"Try to set SQL based on the java expression: (query all columns in $data$ table based on 'id': $keyword_id$), execute SQL with $conn$, get all the data, and return query data.If an Exception occurs during execution, output the error log.","public List getMaxId(EntityManager conn, Root<Object> data, String keyword_id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(data).where(cb.equal(data.get(""id""),keyword_id));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11120,"Set up the SQL statement（Format the output string using the format () function. Query all columns in the ratings where the id of rate is $id_rate$). Execute the SQL statement with the $conn$ connection to get all the data, and return all the data.","public List updatePage(JdbcTemplate conn, String id_rate){
List texts = conn.query(""select * from ratings where id_rate= ?"", new Object[]{id_rate}, new BeanPropertyRowMapper(List.class));
return texts;
}"
13686,"Use a java expression to set up the SQL: query for all the information in the $passengers$ where flight_id is $id$. Execute the SQL using $db$ and get all the data. The rendered""flight.html"" is returned and the query result is passed to the passengers parameter.","public String getPassengers(EntityManager db, Root<Object> passengers, String id, Model model){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(passengers).where(cb.equal(passengers.get(""flight_id""),id));
List<Object> passenger = db.createQuery(cq).getResultList();
model.addAttribute(""passengers"", passenger);
return ""flight.html"";
}"
13585,"Open and read the ""flights.csv"" file, use for loop to get each origin in the obtained file, execute SQL with $conn$ (query the type column in the flights table based on $origin$), get all the query results, store the query results from each loop in list and return the list.","public List main(JdbcTemplate conn,String origin){
List l = new ArrayList();
String filePath = ""flights.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String isbn = sc.nextLine();
List res = conn.query(""select type from flights where origin= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
for (Object value : res) {
l.add(value);
}
}
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
return l;
}"
13959,"Use the java expression to set the SQL statement: Query all the data in the $scores$ table based on $feature_name$. Use $conn$ to execute SQL and get all the data. If the execution result is not empty, print the execution result and return; otherwise, return 0.","public Object getSource(EntityManager conn, Root<Object> scores, String feature_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(scores).where(cb.equal(scores.get(""feature_name""),feature_name));
List<Object> score = conn.createQuery(cq).getResultList();
if (score.isEmpty()){
return 0;
}
else {
return score;
}
}"
13845,"If the request module sends the request as post, use the $conn$ connection to execute the SQL (query the columns in books through $title$ and $isbn$) and get the first piece of data. Use for loop iterate through all the query results and print the title attribute of the query results. If the length of the query results is 0, then return False; if the length of the query results is not 0, then return 'browse.html', where the books parameter is the query results. If the request module sends the request in a way other than post, render and return 'browse.html'.","public Object browse(HttpRequest request, JdbcTemplate conn, String title, String isbn,Model model){
if (request.getMethod().equals(""POST"")){
List booksSearch = conn.query(""select * from books where title = ? and isbn = ?"", new Object[]{title,isbn}, new BeanPropertyRowMapper(List.class));
if (booksSearch.isEmpty()){
return false;
}
else {
for (Object book : booksSearch) {
System.out.println(JSONObject.parseObject(book.toString()).getString(""title""));
}
model.addAttribute(""books"", booksSearch);
return ""browse.html"";
}
} else {
return ""browse.html"";
}
}"
11111,Execute the SQL statement with $connection$ (query all content in the books_again where isbn is $isbn$) and return the query result using jsonify.,"public JSONArray isbnSelect(JdbcTemplate connection, String isbn){
List texts = connection.query(""select content from books_again where isbn=?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(texts.toString());
}"
13638,Create the database engine from $db_uri$ and get the connection. Execute the SQL using the join (querying the blog information in the DATABASE table where blog_name is $blog_name$) and fetch all the data. Close the connection and return the query results.,"public List tearDown(DataSource db_uri, String blog_name){
JdbcTemplate engine = new JdbcTemplate(db_uri);
List database = engine.query(""select blog from database where blog_name= ? "", new Object[]{blog_name}, new BeanPropertyRowMapper(List.class));
return database;
}"
13874,"Set up SQL statement (query all columns in the 'table' table through $r_id$ and $raw_d$). Use $conn$ connection to execute SQL to get all the data. If the query result is empty, return 1; otherwise return 0.","public int getInsertEx(JdbcTemplate conn, String r_id,String raw_id){
List ans = conn.query(""select * from table where r_id = ? and raw_d = ?"", new Object[]{r_id,raw_id}, new BeanPropertyRowMapper(List.class));
if (ans.isEmpty()){
return 1;
}else {
return 0;
}
}"
13610,"Get the index using $conn$ and execute the SQL based on the index (query the number of ids in the CAPTURE table where lastid is $lastid$), then get the first data. Finally,return the query results.","public Object count(JdbcTemplate conn, String lastid){
List ress = conn.query(""select count(id) from CAPTURE where lastid = ?"", new Object[]{lastid}, new BeanPropertyRowMapper(List.class));
Object res = ress.get(0);
return res;
}"
13460,Execute the SQL through $conn$ (get all the columns in the review table based on $book_id$) and get all the data. Use for loop to print each item of the query results.,"public void selectValue(JdbcTemplate conn,String book_id){
List reviews = conn.query(""select * from review where book_id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
for (Object review : reviews) {
System.out.println(review);
}
}"
11376,"Set up sql (query all the information in the stock_data table based on $adj_open$ and $end_val$), use $conn$ to execute SQL and get all the query results, and return the query results that converted to json format.","public JSONArray stockData(JdbcTemplate conn,String adj_open,String end_val){
List data = conn.query(""select * from stock_data where adj_open = ? and end_val = ?"", new Object[]{adj_open,end_val}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(data.toString());
}"
13834,Get the database engine through $url$. Execute SQL statement (query the first piece of SCHEMA with $SCHEMA_NAME$ in the INFORMATION table) and return the query result.,"public List queryDatabase(DataSource url, String SCHEMA_NAME){
JdbcTemplate engine = new JdbcTemplate(url);
List res = engine.query(""select schema from information where schema_name = ? "", new Object[]{SCHEMA_NAME}, new BeanPropertyRowMapper(List.class));
return res;
}"
13184,"Use $conn$ to execute the SQL (get the maximum ID column in the documents where the id of domain is $domain_id$) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the list content.","public List run(JdbcTemplate conn,String domain_id){
List ret = new ArrayList();
List list = conn.query(""select max(id) from documents where domain_id = ?"", new Object[]{domain_id}, new BeanPropertyRowMapper(List.class));
for (Object i : list) {
ret.add(JSONObject.parseObject(i.toString()).getString(""id""));
}
return ret;
}"
11519,"Use the $conn$ connection to execute the SQL statement to get the first piece of bname in pages based on $type$, print the obtained data, and store the 0th element of each item of the query result as a list and return it.","public List queryInfo(JdbcTemplate conn,String type){
List bout = conn.query(""select bname from pages where type = ?"", new Object[]{type}, new BeanPropertyRowMapper(List.class));
System.out.println(bout);
List list = new ArrayList();
for (Object item : bout) {
list.add(JSONObject.parseObject(item.toString()).get(0));
}
return list;
}"
13744,"Use $conn$ to execute SQL (query all columns in the dataSST table based on $testDB$), get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","public void testDB(JdbcTemplate conn,String testDB){
List result = conn.query(""select * from datasst where testdb = ?"", new Object[]{testDB}, new BeanPropertyRowMapper(List.class));
for (Object r : result) {
System.out.println(r);
}
}"
11583,"Set the SQL statement and the content: Query all the columns in the pg_database through $datname$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$. Try to use the cursor to get all the data, return all the query results, and make sure the cursor is closed.","public List databaseExists(JdbcTemplate conn,String datname){
try {
List ret = conn.query(""select * from pg_database where datname = ?"", new Object[]{datname}, new BeanPropertyRowMapper(List.class));
return ret;
}catch (Exception e){
return null;
}
}"
11403,"Set up SQL (query all the information in the app_default_class table based on $app_eui$), execute SQL with $conn$ and get all the query result. Use for loop to iterate through and print all the query result, and hang the process for 6 seconds.","public void freshCache(JdbcTemplate conn,String app_eui){
while (true){
List result = conn.query(""select * from app_default_class where app_eui =?"", new Object[]{app_eui}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}
}"
14007,"Use $conn$ to query all columns in the books table whose isbn is $isbn$, and get the first piece of information. Render and return ""review.html"", where 'book' parameter is the query result and logged_in parameter is True.","public String writeReview(JdbcTemplate conn,String isbn, Model model){
List book = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book"",book);
return ""review.html"";
}"
13636,"Try the following code: set the SQL using a java expression (query all the information in the $link_table$ where target_type is $target_type$ and target_id is $target_id$) ; execute the SQL using $connection $and get all the data; and return the query results using list. Finally, make sure the $connection$ is closed.","public List<Object> checkLink(EntityManager connection, Root<Object> link_table, String target_type, String target_id){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(link_table).where(cb.equal(link_table.get(""target_type""),target_type));
cq.select(link_table).where(cb.equal(link_table.get(""target_id""),target_id));
List<Object> res = connection.createQuery(cq).getResultList();
return res;
}"
14147,"Query all gid from pg_prepared_xacts table via $connection$, convert each item of query result into dict to store as 'list' and return.","public List doRecoverTwophase(JdbcTemplate conn){
List resultset = conn.query(""select gid from pg_prepared_xacts"", new BeanPropertyRowMapper(List.class));
List list =new ArrayList();
for (Object row : resultset) {
list.add(JSONObject.parseObject(row.toString()).get(0));
}
return list;
}"
13328,"Use the string matching to set sql (query all the information in the columns table according to $table_name$), use $conn$ to execute SQL, get all the query results, use for loop to form a tuple of the 0th, 1st and 2nd elements of each article of the query results, store them in the form of list, and return this list.","public List getTableColumnsInfo(JdbcTemplate conn,String textsid){
List result = conn.query(""select * from columns where table_name= ?"", new Object[]{textsid}, new BeanPropertyRowMapper(List.class));
List columns = new ArrayList();
for (Object row : result) {
columns.add(JSONObject.parseObject(row.toString()).get(0));
columns.add(JSONObject.parseObject(row.toString()).get(1));
columns.add(JSONObject.parseObject(row.toString()).get(2));
}
return columns;
}"
11639,"Use $data$ to get the database engine and connect the database, execute SQL (get all the columns in the Codes table where codes_name is $cname$), get all the data, and finally return the query result.","public List getCodes(DataSource data, String cname){
JdbcTemplate connection = new JdbcTemplate(data);
List codes = connection.query(""select * from Codes where codes_name= ? "", new Object[]{cname}, new BeanPropertyRowMapper(List.class));
return codes;
}"
13870,Use $conn$ connection to execute SQL statement (query all columns in test_frame_roundtrip table based on $id$) and get all the data. Set assertion to determine that the returned result is not empty list.,"public void testRoundtrip(JdbcTemplate conn,String id){
List result = conn.query(""select * from test_frame_roundtrip where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert result.size()!=0;
}"
11265,"Use $db$ to connect to the database, execute SQL (get all the columns in the users based on $call$), get all the data, and finally return the obtained result data.","public List testInvalidateTrans(JdbcTemplate conn,String call){
List kueridb = conn.query(""select * from users where call = ?"", new Object[]{call}, new BeanPropertyRowMapper(List.class));
return kueridb;
}"
14155,"If the request module sends the request through POST, execute SQL via $conn$ (query all columns in the users table where 'username' is $uname$) to get all the data. If the length of the first piece of data obtained is not 0, render and return ""error.html""; otherwise, use redirect to return ""/"". If the request module sends the request through GET, render and return ""register.html"".","public Object register(HttpRequest request, JdbcTemplate conn, String uname){
if (request.getMethod().equals(""POST"")){
List check = conn.query(""select * from users where username = ?"", new Object[]{uname}, new BeanPropertyRowMapper(List.class));
if (check.isEmpty()){
return ""error.html"";
}
else {
return ""/"";
}
} else {
return ""register.html"";
}
}"
11156,"If the request module sends the request as GET, set the SQL statement (format the output string with the format () function. Query all the columns in the shoe table with the string $shoeid$) , and execute SQL statement with $conn$ connection to GET all the data, make sure the database connection is closed and return the data obtained as jsonify.","public Object register(HttpRequest request, JdbcTemplate conn, String shoeid){
if (request.getMethod().equals(""GET"")){
List rows = conn.query(""select * from shoe where shoeid= ?"", new Object[]{shoeid}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(rows.toString());
} else {
return null;
}
}"
13042,"* Use $sqlite$ to create the database engine and obtain the database connection according to the engine. Use the connection to perform SQL (query the image information in the imagesAbout table based on $imageId$) and get the first piece of data. Finally, return the query result.","public List deleteid(DataSource sqlite, String imageId){
JdbcTemplate connection = new JdbcTemplate(sqlite);
List delid = connection.query(""select image from imagesabout where imageid= ? "", new Object[]{imageId}, new BeanPropertyRowMapper(List.class));
return delid;
}"
13054,"Try to execute the following code: Use java expression to set SQL (query all the information in the $table$ table when id is $table_id$); use $conn$ to execute SQL and get all the data and finally return the query results. If a SQLAlchemyError exception occurs, the specific exception information should be printed and return False.","public Object countRows(EntityManager conn, Root<Object> table, String table_id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""table_id""),table_id));
List<Object> rows = conn.createQuery(cq).getResultList();
return rows;
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
13189,"Execute the SQL (get the date column in the StockDB where days is $days$) with $conn$ and get all the data, then use the for loop to store the tenth element of each item of the query result as a list and return the list content.","public List GetDates(JdbcTemplate conn,String days){
List ft = conn.query(""select date from stockdb where days = ?"", new Object[]{days}, new BeanPropertyRowMapper(List.class));
List date = new ArrayList();
for (Object elt : ft) {
date.add(JSONObject.parseObject(elt.toString()).get(0));
}
return date;
}"
13992,Use $conn$ to execute the SQL statement: Query the first piece of duration in the flights table based on $origin$ and $destination$ and return the query result.,"public List main(JdbcTemplate conn,String origin,String destination){
List dura = conn.query(""select duration from flights where origin = ? and destination = ?"", new Object[]{origin,destination}, new BeanPropertyRowMapper(List.class));
return dura;
}"
13763,"""If the request method is ""POST"", try to use $conn$ to execute SQL (query the user column in the logs table based on $username$), get the first piece of data, return the query data. Return False if an Exception occurs during execution.","public Object log(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
try {
List ans = conn.query(""select user from logs where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return ans;
}catch (Exception e){
return false;
}
} else {
return false;
}
}"
13113,"Set up the SQL using the text method (get the col_string in one_row_complex where cat is $cat$) , then execute the SQL statement using $conn$ to get all the data and return the query results.","public List testParameter(JdbcTemplate conn,String cat){
List result = conn.query(""select col_string from one_row_complex where cat = ?"", new Object[]{cat}, new BeanPropertyRowMapper(List.class));
return result;
}"
14022,Get the database engine and establish a connection through $sqlite$. Execute the SQL statement(get all the us_county data in the tblByCountyAndYear table where us_state is $state$)and close the database connection. Use for loop to store each element in the query result into list and return the list content.,"public List counties(DataSource sqlite, String state){
JdbcTemplate connection = new JdbcTemplate(sqlite);
List result = connection.query(""select us_county from tblbycountyandyear where us_state = ? "", new Object[]{state}, new BeanPropertyRowMapper(List.class));
List counties = new ArrayList();
for (Object row : result) {
counties.add(JSONObject.parseObject(row.toString()).get(0));
}
return counties;
}"
13950,"Use $db_uri$ to get the database engine and establish a connection. Set the SQL statement (query all columns in the database table based on $value$). Execute SQL, get all the information, make sure that the database connection is closed and return all the obtained data.","public List tearDown(DataSource db_uri, String value){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List data = conn.query(""select * from database where value = ? "", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return data;
}"
13319,"Get the database engine and establish a connection through $game$. Use ORM method to execute the SQL statement (query all the columns in the $Score$ table according to $id$), get the first piece of data, and return the query results.","public List<Object> scoreSelect(EntityManager game, Root<Object> Score, String id){
CriteriaBuilder cb = game.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Score).where(cb.equal(Score.get(""id""),id));
List<Object> score = game.createQuery(cq).getResultList();
return score;
}"
11078,"If $group$ does not exist, print ""group is None"". Otherwise, use $conn$ to execute SQL (query all columns in the address table based on $group$) and get all the data. Convert each item in the query result to a dict type and return.","public List addressShowdb(JdbcTemplate conn,String group){
if (group==null){
System.out.println(""group is None"");
return null;
}
else {
List groupres = conn.query(""select * from address where group=?"", new Object[]{group}, new BeanPropertyRowMapper(List.class));
return groupres;
}
}"
13756,"Set sql (query all the information in the Callback table based on $addend1$ and $addend2$), use $conn$ to execute SQL, get all the query results, and return them.","public List testDo(JdbcTemplate conn,String addend1,String addend2){
List rp = conn.query(""select * from Callback where addend1 = ? and addend2 = ?"", new Object[]{addend1,addend2}, new BeanPropertyRowMapper(List.class));
return rp;
}"
13563,"Get the database engine and establish a connection through $url$. Set up a cursor and set the SQL statement (query all columns in the full_path table according to $tbl$), execute sql, get all the data, and return the query results.","public List testCsvPostgresLoad(DataSource url, String tbl){
JdbcTemplate conn = new JdbcTemplate(url);
List res = conn.query(""select * from full_path where tbl= ? "", new Object[]{tbl}, new BeanPropertyRowMapper(List.class));
return res;
}"
14273,"Set the SQL statement: Query the latitude and longitude data in the Campground table through $nameID$, and use $conn$ to execute SQL to get the first piece of data. If the data obtained is not empty, it is printed.","public void locationDistanceSingleOrig(JdbcTemplate conn,String nameID){
List res = conn.query(""select latitude, longitude from campground where nameid= ?"", new Object[]{nameID}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
System.out.println(res);
}
}"
13619,Use the string format method to set SQL: query all columns in TABLE1 based on $db_name$. Execute SQL with $conn$ and get all the data. Set assertion to determine that the length of the query result is not 0.,"public void testSelect(JdbcTemplate conn,String db_name){
List result = conn.query(""select * from TABLE1 where db_name = ?"", new Object[]{db_name}, new BeanPropertyRowMapper(List.class));
assert result.size()!=0;
}"
14221,Create the database engine through $db_string$. Execute a SQL: Query for all columns in the tb_fornecedores table and get all the data. Return all obtained data.,"public List dbConnect(DataSource db_string){
JdbcTemplate db = new JdbcTemplate(db_string);
List fornecedores = db.query(""select * from tb_fornecedores"", new BeanPropertyRowMapper(List.class));
return fornecedores;
}"
13760,"Use $engine$ to execute SQL (query the fake_stuff column in the fake_table table according to $dialect$), get all the query results, set assertions to determine whether the length of the query results is greater than 0, and return the query results.","public List testExplodeInInitializerDisconnect(JdbcTemplate engine,String dialect){
List res = engine.query(""select fake_stuff from fake_table where dialect = ?"", new Object[]{dialect}, new BeanPropertyRowMapper(List.class));
assert res.size()>0;
return res;
}"
11476,"Set up the SQL (query the updatetime column in the obj table based on $name$), use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through the cursor of the obtained results, convert 'keys' and 'values' of each piece of data into tuple, zip and dict, and store in a list. Finally return the list.","public List selectValue(JdbcTemplate conn,String name){
List results = conn.query(""select updatetime from obj where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return results;
}"
11340,"""Use $conn$ to execute the java expression (query all the columns in the $note_box$ table based on $id$), get all the data, and return the query results.","public List<Object> whereClauseFn(EntityManager conn, Root<Object> note_box, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(note_box).where(cb.equal(note_box.get(""id""),id));
List<Object> stmt = conn.createQuery(cq).getResultList();
return stmt;
}"
11601,"Use $db$ to connect the database, then set the assertion not to close the connection, execute SQL (get the counted connections column in the DBAPI table according to $is_disconnect$) and get all the data, further close the connection, and finally return the query result.","public List testReconnect(DataSource db, String summary){
JdbcTemplate conn = new JdbcTemplate(db);
List res = conn.query(""select time from comments where summary = ? "", new Object[]{summary}, new BeanPropertyRowMapper(List.class));
return res;
}"
14062,"Use $conn$ to query all the columns in the books table that an id is $book_id$, and get the first piece of data. If the query result is empty, render and return ""error.html""; use for loops traversal to query results, return a traverable (key, value) tuple array in a list through the items () method. Otherwise, render and return ""book.html"", where the book parameter is the query result.","public String book(JdbcTemplate conn,String book_id,Model model){
List book = conn.query(""select * from books where id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
if (book.isEmpty()){
return ""error.html"";
}
else {
for (Object o : book) {
Map map = JSONObject.parseObject(o.toString(), Map.class);
System.out.println(map);
}
model.addAttribute(""book"", book);
return ""book.html"";
}
}"
13544,"Initialize the log module, if $name$ has a value, set sql (query the value column in the version table based on $name$), use $connection$ to execute SQL and get the 0th element of the first piece of data. Output the info log that gets the result.","public void connect(JdbcTemplate connection,String name){
List cursor = connection.query(""select value from version where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
Object schema_version = cursor.get(0);
System.out.println(JSONObject.parseObject(schema_version.toString()).get(0));
}"
11089,"Create a database engine based on $host$ and use sessionmaker to create session instantiated objects. Execute SQL through the instantiated object (query the grades information in the tbl_epstrade table based on $row$) and get all the data. Finally, return the query result.","public List initTest(DataSource host, String row){
JdbcTemplate session = new JdbcTemplate(host);
List grades = session.query(""select grades from tbl_epstrade where row<? "", new Object[]{row}, new BeanPropertyRowMapper(List.class));
return grades;
}"
13629,"Set SQL: query all columns in the queue_table where id is $id$. Execute SQL with $conn$ and get the first data. If the query result length is greater than 0, the 0th element of the query result is returned. ""","public Object getqueue(JdbcTemplate conn,String id){
List result = conn.query(""select * from queue_table where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (!result.isEmpty()){
return result.get(0);
}else {
return null;
}
}"
11035,"Try to execute the following code: Use the java expression to set SQL: When id is $flight_id$, query all the corresponding information in the $flights$ table; use $conn$ to execute SQL and get all the data; if the query result length is not 0, render the ""success.html"" page and return; otherwise, pass ""Sorry, no such flight with that id. to the message parameter and return the rendered ""error.html"" page. If a ValueError exception occurs, pass ""Invalid flight number. to the message parameter and render the ""error.htm"" page.","public String book(EntityManager conn, Root<Object> flights, String flight_id,Model model){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(flights).where(cb.equal(flights.get(""id""),flight_id));
List<Object> result = conn.createQuery(cq).getResultList();
if (result.isEmpty()){
model.addAttribute(""message"", ""Sorry, no such flight with that id."");
return ""error.html"";
}
else {
return ""success.html"";
}
}catch (Exception e){
model.addAttribute(""message"", ""Invalid flight number."");
return ""error.html"";
}
}"
11384,"Use $db_engine$ to execute SQL (query the sample column in the raw_data table based on $test$), get all the query results, and use for loop to print the query results one by one.","public void createAndPopulateRawTable(JdbcTemplate db_engine,String test){
List query = db_engine.query(""select sample from raw_data where test= ?"", new Object[]{test}, new BeanPropertyRowMapper(List.class));
for (Object i : query) {
System.out.println(i);
}
}"
13143,"Execute SQL (get all columns in the users where the name is $name$, email is $email$, city is $city$, and phone is $phone$) with $conn$ and get all the data, and print the query results.","public void getUser(JdbcTemplate conn,String name,String email,String city,String phone){
List exc = conn.query(""select * from users where name=? and email=? and city=? and phone=?"", new Object[]{name,email,city,phone}, new BeanPropertyRowMapper(List.class));
System.out.println(exc);
}"
11210,"Use $conn$ to execute SQL (query all columns in the imdb_movies table based on $movietitle$) and get all the data, then convert the result to list type and return.","public List buscarPeli(JdbcTemplate conn,String movietitle){
List db_result = conn.query(""select * from imdb_movies where movietitle = ?"", new Object[]{movietitle}, new BeanPropertyRowMapper(List.class));
return db_result;
}"
13929,"Set the SQL statement: Query all the columns in the flights table through $value$, use the $conn$ connection to execute SQL, get all the data, store the query result as list and return.","public List getFlights(JdbcTemplate conn,String value){
List flights = conn.query(""select * from flights where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return flights;
}"
13730,"Use $conn$ to execute SQL (query the id column in the targets table according to $name$),get the first row of data, and return the 0th element of the query result.","public Object getPwidByName(JdbcTemplate conn,String name){
List slf = conn.query(""select id from targets where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return slf.get(0);
}"
13761,"Execute SQL through $session$ (query all columns in the Users table based on $id$), get all the data, close the connection, and return the query result.","public List getUser(JdbcTemplate session,String id){
List imp = session.query(""select * from users where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return imp;
}"
13618,Try to execute the following statements: set the SQL (query for all columns in the USER table where username is $root_username$ and password is $root_password$) ; execute the SQL using $connection$ and get the first data. Close the connection and return the result of the query. Return False if exception occurs.,"public Object testDb(JdbcTemplate connection,String root_username,String root_password){
try {
List res = connection.query(""select * from USER where username = ? and password =?"", new Object[]{root_username,root_password}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return false;
}
}"
13068,"Use $conn$ to execute SQL (query all columns in the my_entities table) and get all the data. Set the assertion to determine that the query result length is not 0. Finally, return the query results in list form.","public List testSave(JdbcTemplate conn){
List centities = conn.query(""select * from my_entities"", new BeanPropertyRowMapper(List.class));
assert centities.size()!=0;
return centities;
}"
13969,"Try to use the java expression to set up SQL (query all the data in the $articles_table$ table through $name$). Use the $conn$ connection to execute SQL to get all the data. If an Exception occurs, print exception information and return directly.","public List displayArticleByName(EntityManager conn, Root<Object> articles_table, String name){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(articles_table).where(cb.equal(articles_table.get(""name""),name));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11185,"Execute the SQL statement with the $conn$ connection: Get All the columns in $flows$ where devid is $devid$ and hour is $hour$, and get all the data, and turn each item of the query into a dict and store it as a list and return.","public List getFlowData(JdbcTemplate conn,String devid,String hour){
List res_data = conn.query(""select * from flows where devid=? and hour=?"", new Object[]{devid,hour}, new BeanPropertyRowMapper(List.class));
return res_data;
}"
14129,"""Create cursor object by $conn$ and execute SQL by cursor:Query all columns from app table, get all the data and return all query results.","public List showAll(JdbcTemplate conn){
List res = conn.query(""select * from app"", new BeanPropertyRowMapper(List.class));
return res;
}"
11074,Use $conn$ to execute SQL (query the amount of data in the ratings table according to $countid$) and return the [0] [0] element in the first query result.,"public Object getFlowData(JdbcTemplate conn,String countid){
List num = conn.query(""select count(*) from ratings where countid=?"", new Object[]{countid}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(num.get(0).toString()).get(0);
}"
13889,"""Execute SQL statement with $db$: Query all columns in books through $isbn$ and get the first piece of data. If there is no query result, then return ""error"" through jsonify with the content ""Invalid isbn"".","    public JSONObject getBarCounts(JdbcTemplate db,String isbn){
        List row = db.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
        if (row.isEmpty()){
            JSONObject json = new JSONObject();
            json.put(""error"", ""Invalid isbn"");
            return json;
        }
        else {
            JSONObject json = new JSONObject();
            json.put(""count"", row.get(0));
            return json;
        }
    }"
13044,"Set SQL: To query the activateSurvey information in the userdetails table based on $survey$,$company$ and $department$. Use $conn$ to execute SQL and get the first piece of data, and then return the query results.","public List activateSurvey(JdbcTemplate conn,String survey,String company,String department){
List values = conn.query(""select activatesurvey from userdetails where survey=? and company= ? and department=?"", new Object[]{survey,company,department}, new BeanPropertyRowMapper(List.class));
return values;
}"
11244,"Connect to the database with $db$, try to execute the SQL (get all columns in users based on $user_id$), get all the data, return the query result, and finally make sure the connection is closed.","public List testRawjava(DataSource db, String user_id){
try {
JdbcTemplate conn = new JdbcTemplate(db);
List res = conn.query(""select * from users where user_id= ? "", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return res;
}finally {
return null;
}
}"
13358,"Use $conn$ to execute SQL (query all columns in the uploads_content table based on $content_id$), get all the query results, and use for loop to output each query result.","public void getMetadata(JdbcTemplate conn,String content_id){
List rows = conn.query(""select * from uploads_content where content_id= ?"", new Object[]{content_id}, new BeanPropertyRowMapper(List.class));
for (Object e : rows) {
System.out.println(e);
}
}"
13211,"Get the database engine through $connection_str$ (set the encoding parameter to 'utf-8') , execute the SQL statement (query all columns in the db_name) , get all the data and return.","public List searchTable(DataSource connection_str, String summary){
JdbcTemplate enj = new JdbcTemplate(connection_str);
List db_result = enj.query(""select * from db_name "", new BeanPropertyRowMapper(List.class));
return db_result;
}"
13892,"Use $name$ to query all columns in the database table and get all the data. If there is no row of the query result, use raise to throw the exception with an ""Error"" message. Make sure $conn$ is closed and returns True.","public boolean selectDb(JdbcTemplate conn,String name){
List result = conn.query(""select * from database where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
System.out.println(""Error"");
return false;
}else {
return true;
}
}"
11690,"Execute SQL with $engine$ (get the bike_stands column in the stations1 table according to $name$), get all the data, then use for loop to convert each item of the query result into a dictionary type, store it as list, and finally return list content.","public List getBikestands(JdbcTemplate engine,String name){
List rows = engine.query(""select bike_stands from stations1 where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return rows;
}"
14239," connect to the database according to $engine$. Use the java expression to set up the SQL statement: Query the id data in the $users$ table according to $name$, and execute SQL to get all the data. If the length of the obtained data is less than 1, return directly. Otherwise, return all the obtained data.","public List searchProperty(EntityManager engine, Root<Object> users, String name){
        CriteriaBuilder cb = engine.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(users).where(cb.equal(users.get(""name""),name));
        List<Object> res = engine.createQuery(cq).getResultList();
        if (res.isEmpty()){
            return null;
        }else {
            return res;
        }
    }"
13166,"Use $db_url$ to get the database engine and connect to the database, try to execute SQL (get the table_name column in the information_schema where table_schema is $table_schema$) and get the first data, then return the query results, and throw an exception if an exception occurs during execution.","public Object setOwner(DataSource db_url, String table_schema){
try {
JdbcTemplate conn = new JdbcTemplate(db_url);
List res = conn.query(""select table_name from information_schema where table_schema = ? "", new Object[]{table_schema}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return e;
}
}"
13627,Set SQL: query the average value of the review_rating in the user_book_review table when book_isbn is $isbn$. Execute the SQL using $db$ and get the first data. Return data for a query using a serialization method.,"public JSONObject api(JdbcTemplate db,String isbn){
List book_average_scores = db.query(""select avg(review_rating) from user_book_review where book_isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(book_average_scores.get(0).toString());
}"
13047,Try to execute the following code: Set up SQL (query all columns in the pg_database table when datname is $database$); use $conn$ to execute SQL to get the first piece of data and return the query results. Returns False if an exception occurs.,"public Object databaseExists(JdbcTemplate conn,String database){
try {
List values = conn.query(""select * from pg_database where datname= ?"", new Object[]{database}, new BeanPropertyRowMapper(List.class));
return values;
}catch (Exception e){
return false;
}
}"
11451,"Set up SQL (query all information in tbl table based on $doc$), use $conn$ to execute SQL and get all query results. Use for loop to iterate through all query results, insert each data into a list, and return the list.","public List selectValue(JdbcTemplate conn,String doc){
List results = conn.query(""select * from tbl where doc = ?"", new Object[]{doc}, new BeanPropertyRowMapper(List.class));
return results;
}"
13534,"If the request method is ""GET"", return empty. Otherwise, try to use $conn$ to execute SQL (query the name column in the flights table based on $id$), get all the data, and return the rendered ""pass.html"" page, where 'f' is set to query data. If an Exception occurs during execution, print ""no flights"".","public Object pas(HttpRequest request, JdbcTemplate conn, String id,Model model){
if (request.getMethod().equals(""POST"")){
try {
List f = conn.query(""select * from users where email = ? and psd = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""f"", f);
return ""pass.html"";
}catch (Exception e){
System.out.println(""no flights"");
return false;
}
} else {
return false;
}
}"
13926,"Set the SQL statement (query the isbn data in the books table according to $average_rating$), use the $conn$ connection to execute SQL and get all the data. Use for loop to store each element in the query result into list and return the list content.","public List review(JdbcTemplate conn,String average_rating){
List isbns = conn.query(""select isbn from books where average_rating = ?"", new Object[]{average_rating}, new BeanPropertyRowMapper(List.class));
return isbns;
}"
13748,"Execute SQL with $connection$ (query the linkValue column in the tableHtml table according to $metadata$) and get all records, use for loop to store the value of the linkValue field of each query result in list and return.","public List getEnteredHtmlSet(JdbcTemplate connection,String metadata){
List links = connection.query(""select linkValue from tableHtml where metadata = ?"", new Object[]{metadata}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object link : links) {
list.add(JSONObject.parseObject(link.toString()).getString(""linkValue""));
}
return list;
}"
13678,"If the request request method is GET, the rendered ""pw_change.html"" is returned. Otherwise, set SQL (query password information in the users table where username is $username$) , execute SQL with $conn$, get all the data, and return the query results.","public Object getPw(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List pw = conn.query(""select password from users where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return pw;
} else {
return ""pw_change.html"";
}
}"
11034,Use $connection$ to execute SQL (query the test_logging in the ratings table based on $id$) and get all the data. Print all query results and store the 0th element of each item in the query result into list and return.,"public List testLogging(JdbcTemplate connection,String id){
List log = connection.query(""select test_logging from ratings where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(log);
List list = new ArrayList();
for (Object test : log) {
list.add(JSONObject.parseObject(test.toString()).get(0));
}
return list;
}"
11299,"""Set SQL (get the sql_id_column column in sql_table based on $sqlschema$), try to use $conn$ to execute the SQL statement, get all the data and return the query result.","public Object getItems(JdbcTemplate conn,String sqlschema){
try {
List res = conn.query(""select sql_id_column from sql_table where sqlschema= ?"", new Object[]{sqlschema}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return false;
}
}"
13158,"Execute the SQL (get the key column in the clothes where category is $category$) with $conn$, get all the data, and return the query results.","public List main(JdbcTemplate conn,String category){
List res = conn.query(""select key from clothes where category = ?"", new Object[]{category}, new BeanPropertyRowMapper(List.class));
return res;
}"
11243,"Use $db_engine$ to execute SQL (get abstract column in paperabstracts table based on format-processed $paperid$), get all the data, return null if the length of the obtained result is 0, and finally return the 0th element of the query result.","public Object getAbstract(JdbcTemplate db_engine,String paperid){
List tuples = db_engine.query(""select abstract from paperabstracts where paperid = ?"", new Object[]{paperid}, new BeanPropertyRowMapper(List.class));
if (tuples.isEmpty()){
return null;
}else {
return tuples.get(0);
}
}"
13121,"Execute SQL using $conn$ (to get the columns trained_model and metadata in the models where id is $model_id$) and get the first data, and finally return the 0th element of the query results.","public Object getId(JdbcTemplate conn,String model_id){
List result = conn.query(""select trained_model, metadata from models where id = ?"", new Object[]{model_id}, new BeanPropertyRowMapper(List.class));
return result.get(0);
}"
13641,"If $noofdays$ exists, set SQL (query all columns in eod_data when nse_date is $noofdays$). Execute SQL with $conn$ to get all the data and return the query results.","public Object getEoddata(JdbcTemplate conn,String noofdays){
if (noofdays!=null){
List data = conn.query(""select * from eod_data where nse_date= ?"", new Object[]{noofdays}, new BeanPropertyRowMapper(List.class));
return data;
}else {
return null;
}
}"
14296,Use $conn$ to execute the SQL statement (get all the usersname in the users table according to $email$) and return all the query results.,"public List getdata(JdbcTemplate conn,String email){
List res = conn.query(""select usersname from users where email= ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
return res;
}"
13526,",""Try to set SQL (query all the information in the Neighbors table where the value of DistrictAId is $districtA$), use $conn$ to execute sql and get all the data, and return the query data.","public Object importNeighbor(JdbcTemplate conn,String districtA){
try {
List res = conn.query(""select * from Neighbors where DistrictAId= ?"", new Object[]{districtA}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return false;
}
}"
11115,"Set up the SQL statement (Format the output string with the format () function; Query all columns in finance by $con$.), querying all the columns in the finance with the $conn$. ""","public void migrateFinance(JdbcTemplate conn,String con){
List texts = conn.query(""select * from finance where con= ?"", new Object[]{con}, new BeanPropertyRowMapper(List.class));
System.out.println(texts);
}"
11252,"Try to use $host$ to get the database engine and establish a connection, execute SQL (get all the columns of AffiliationID in the ReferenceData table that have been processed by the counting method based on $token$), get all the data, close the connection and return the obtained data, otherwise close the connection and hang.","public Object updateAffiliationIdfValue(DataSource host, String token){
JdbcTemplate conn = new JdbcTemplate(host);
try {
List result = conn.query(""select count(AffiliationID) from ReferenceData where token=? "", new Object[]{token}, new BeanPropertyRowMapper(List.class));
return result;
}catch (Exception e){
return e;
}
}"
13398,"Get the database engine through $DB_CONNECT_STRING$, where the max_overflow parameter is set to 5, execute the SQL statement with the ORM method (query all columns in the $PortalProfile$ table based on $username$), get the first piece of data, and return the query result.","public List processProfiles(EntityManager DB_CONNECT_STRING, Root<Object> PortalProfile, String username){
CriteriaBuilder cb = DB_CONNECT_STRING.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(PortalProfile).where(cb.equal(PortalProfile.get(""url""),username));
List<Object> values = DB_CONNECT_STRING.createQuery(cq).getResultList();
return values;
}"
14193,"""Query the first comment data in the reviews table with a user_id of $user_id$ through $conn$. Use for loop to iterate through the query results and print, store each element in the query results in list, render and return ""review.html"", where the reviews parameter is the 'list' content.","public String review(JdbcTemplate conn,String user_id, Model model){
List reviews = conn.query(""select comment from reviews where user_id=?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
if (reviews.isEmpty()){
return null;
}
else {
model.addAttribute(""reviews"",reviews);
return ""review.html"";
}
}"
13338,"Set SQL according to the java expression (query the maximum value of the epochtime column in the $telemetry$ table based on $date$). Execute SQL through $conn$, get the 0th element of the first piece of data, and return the queried results.","public Object maxepoch(EntityManager conn, Root<Object> telemetry, String date){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(telemetry).where(cb.equal(telemetry.get(""date""),date));
List<Object> result = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(result.get(0).toString()).get(0);
}"
11486,"Set up SQL (query all columns in the atable table based on $value$), execute SQL based on $conn$ and get all the query results. Return the data.","public List selectValue(JdbcTemplate conn,String value){
List results = conn.query(""select * from atable where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return results;
}"
13683,"Set SQL (query load_extension in Table where $hamming_load$ is load_extension). Execute the SQL using $db$ and get the first data. Finally, return the query results.","public List begin(JdbcTemplate db,String hamming_load){
List txn = db.query(""select load_extension from table where hamming_load= ?"", new Object[]{hamming_load}, new BeanPropertyRowMapper(List.class));
return txn;
}"
13219,"""Get the database engine with $memory$. Start a connection , execute the SQL statement in a java expression (query for the name in $t_users$ where u2 is $u2$) and get the first data. Finally, the query results are returned.","public List<Object> search(EntityManager memory, Root<Object> t_users, String u2){
CriteriaBuilder cb = memory.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(t_users).where(cb.equal(t_users.get(""id""),u2));
List<Object> results = memory.createQuery(cq).getResultList();
return results;
}"
11523,"Connect to the database through $testing$. Execute SQL: query all name in the users table based on $id$, return the first query results.","public List test(DataSource testing, String id){
JdbcTemplate connection = new JdbcTemplate(testing);
List out = connection.query(""select name from users where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return out;
}"
14120,"""Query the first id data in the wed_flow table with wed_flow of $wed_flow$ via $conn$. For loop iterates through the query results, prints the 0th element of the query results and returns the query results.","public List selectFlow(JdbcTemplate conn,String wed_flow){
List result = conn.query(""select id from wed_flow where flow = ?"", new Object[]{wed_flow}, new BeanPropertyRowMapper(List.class));
for (Object l : result) {
System.out.println(JSONObject.parseObject(l.toString()).get(0));
}
return result;
}"
13613,Set SQL: query all the columns in the books table where ISBN is $isbn$. Execute the SQL using $db$ and get the first data. Return the result of the query.,"public Object getBookByISBN(JdbcTemplate db,String isbn){
List books = db.query(""select * from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return books.get(0);
}"
13386,"Use $conn$ to execute SQL (query all columns in the operation table based on $operationcode$), get all the query results, and use for loop to traverse and output all the obtained query results.","public void operationFunction(JdbcTemplate conn,String operationcode){
List operationRes = conn.query(""select * from operation where operationcode= ?"", new Object[]{operationcode}, new BeanPropertyRowMapper(List.class));
for (Object row : operationRes) {
System.out.println(row);
}
}"
14009,"Use $conn$ to connect to the database and create a cursor object through the cursor () method. Execute the SQL statement (use the format () function to output string in a format way and query all the columns in the 'table' table with the string $table_name$), get all the data, ensure that $conn$ is closed and return the query results.","public List clear(JdbcTemplate conn,String table_name){
List result = conn.query(""select * from table where table_name= ?"", new Object[]{table_name}, new BeanPropertyRowMapper(List.class));
return result;
}"
11354,"If $password$ is empty, return the rendered ""register.html"" page; otherwise, use $conn$ to execute SQL (query all columns in the request table based on $email$ and $password$), get all the data, and return the redirect operation ""/"".","public String register(JdbcTemplate conn,String email,String password, Model model){
if (password==null){
List data = conn.query(""select * from request where email=? and password = ?"", new Object[]{email,password}, new BeanPropertyRowMapper(List.class));
return ""/"";
}
else {
return ""register.html"";
}
}"
13052,Use java expressions to set up SQL: Query $tbl_node$ table for bp_id. Use $conn$ to execute SQL and get all data. Use for loop to store the 0th element of each item in the query result into set and return it.,"public Set findExisting(EntityManager conn, Root<Object> tbl_node){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tbl_node);
List<Object> result = conn.createQuery(cq).getResultList();
Set bp_nodes = new HashSet();
for (Object row : result) {
bp_nodes.add(JSONObject.parseObject(row.toString()).get(0));
}
return bp_nodes;
}"
13851,Use the ORM method to execute SQL statement (query the first data in the $Groups$ table based on $uuid$) through $session$. Make sure $session$ is closed and return all query results.,"public List getProfile(EntityManager session, Root<Object> Groups, String uuid){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Groups).where(cb.equal(Groups.get(""uuid""),uuid));
List<Object> q = session.createQuery(cq).getResultList();
return q;
}"
13505,"""Set up sql (query the bank column in the 'table' table according to $LIMIT$), use $conn$ to execute SQL, get all the query results, and return the 0th element of the query result.","public Object getTableColumnNames(JdbcTemplate conn, String LIMIT){
List cur = conn.query(""select bank from table where limit=?"", new Object[]{LIMIT}, new BeanPropertyRowMapper(List.class));
return cur.get(0);
}"
11531,"Use $conn$ to query the first piece of REMAIN in the chef_to_dish table with id as $id$, use for loop iterate through the query results. Get the 0th element of each row. Print the obtained elements and return them.","public Object setChefToDishByIdIncrease(JdbcTemplate conn, String id){
List rows = conn.query(""select remain from chef_to_dish where id =?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
Object row = rows.get(0);
Object number = JSONObject.parseObject(row.toString()).get(0);
System.out.println(number);
return number;
}"
13556,"Set SQL according to the java expression (query the maximum value of the timestamp column in the $DataTable$ table based on $timestamp$). Execute SQL through $conn$ and get all the data. If no data is found, return None. Otherwise, return the result of executing the statement.","public List checkAgg(EntityManager conn, Root<Object> DataTable, String timestamp){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(DataTable).where(cb.equal(DataTable.get(""timestamp""),timestamp));
List<Object> last_data_time = conn.createQuery(cq).getResultList();
if (last_data_time.isEmpty()){
return null;
}
else {
return last_data_time;
}
}"
13115,"Get the database engine using $oracle$, then  execute the SQL using the start method (get the number column in the team where name is $name$) and get all the data and return the query results.","public List getTeam(DataSource oracle, String name){
JdbcTemplate engine = new JdbcTemplate(oracle);
List res = engine.query(""select number from team where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
14059,"Try to use the java expression to execute SQL through $c$: Query all the data in the $users$ table based on $name$ and return the query results. Finally, make sure that $c$ is closed.","public List testTransaction(EntityManager c, Root<Object> users, String name){
try {
CriteriaBuilder cb = c.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""name""),name));
List<Object> res = c.createQuery(cq).getResultList();
return res;
}finally {
c.close();
}
}"
14281,Use the java expression to set the SQL statement and the content is as follows: Query the amount of data in the $articles_table$ table whose categoryID is $category_id$. Execute SQL to get all the data through $connection$ and return the obtained data.,"public List getArticleCount(EntityManager connection, Root<Object> articles_table, String category_id){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(articles_table).where(cb.equal(articles_table.get(""categoryID""),category_id));
List<Object> rp = connection.createQuery(cq).getResultList();
return rp;
}"
11171,"""Try to use $conn$ to execute the SQL statement that query AGE in EMPLOYEE where SEX is $SEX$ and return the result of the query. If an exception occurs, return None.","public List queryPage(JdbcTemplate conn,String SEX){
try {
List r = conn.query(""select age from employee where sex= ?"", new Object[]{SEX}, new BeanPropertyRowMapper(List.class));
return r;
}catch (Exception e){
return null;
}
}"
11552,Use ORM method to query all the data in $QuestionNode$ table with parent_id as $parent_id$ through $session$. Use for loop iterate through the query results and print them.,"public void total(EntityManager session, Root<Object> QuestionNode, String parent_id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(QuestionNode).where(cb.equal(QuestionNode.get(""parent_id""),parent_id));
List<Object> list = session.createQuery(cq).getResultList();
for (Object root : list) {
System.out.println(root);
}
}"
14054,"Query all the columns in the one_row table through $connection$, get all the data, set the assertion to determine that the length of the query result is not 0, and return the query result.","public List testBasicQuery(JdbcTemplate connection){
List rows = connection.query(""select * from one_row"", new BeanPropertyRowMapper(List.class));
assert rows.size()!=0;
return rows;
}"
13262,"Set the SQL (query all columns in $schema$ where public is $public$) using java expression methods, execute the SQL statement by $sess$ and get all the data.","public List schemaExists(EntityManager sess, Root<Object> schema, String publics){
CriteriaBuilder cb = sess.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(schema).where(cb.equal(schema.get(""schema_name""),publics));
List<Object> schema_names = sess.createQuery(cq).getResultList();
return schema_names;
}"
11123,"Execute the SQL statement (query all columns in the measurement when the DATE is less than the value in $DATE$) with $conn$ and get all the data, and return all the query results by jsonify.","public JSONArray tobs(JdbcTemplate conn, String DATE){
List tobs_totals = conn.query(""select * from measurement where date< ?"", new Object[]{DATE}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(tobs_totals.toString());
}"
13721,"Initialize the log module and try to  connect the database according to $engine$. Execute SQL (query the bugid column in the bugs table according to $metaData$), get all the query results and return, and output the debug log if an Exception is caught.","public List fetchAllIssues(DataSource engine, String metaData){
try {
JdbcTemplate conn = new JdbcTemplate(engine);
List rows = conn.query(""select bugid from bugs where metaData = ? "", new Object[]{metaData}, new BeanPropertyRowMapper(List.class));
return rows;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13413,"Execute SQL based on $conn$ (get the flight column in the flights table based on $id$) and get all the data. If the length of the query result is 0, then return the rendered ""error.html"", and finally return the rendered ""flights.html"" directly, where the flights parameter is the query result.","public String flights(JdbcTemplate conn,String id, Model model){
List flights = conn.query(""select flight from flights where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
return ""error.html"";
}
else {
model.addAttribute(""flights"",flights);
return ""flights.html"";
}
}"
11224,"Use $conn$ to execute SQL (query the rating in the ratings table based on $isbn$) and get all the data. If the length of the obtained result is 1, return the rendered ""searhConfirm.html"", where the num_results parameter is the length of the query result.","public String reviewPage(JdbcTemplate conn,String isbn, Model model){
List value = conn.query(""select rating from ratings where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (value.isEmpty()){
return null;
}
else {
model.addAttribute(""num_results"",value.size());
return ""searhConfirm.html"";
}
}"
11051,"Try to use $conn$ to execute SQL (query all columns in the flight_gan table when id is $gan_id$). Return and render ""success.html"" if the number of rows fetched by execution is not zero. If an exception occurs, return and render ""error.html"", pass in the message parameter as ""Invalid flight number..","public String bookPage(JdbcTemplate conn,String gan_id, Model model){
List myExecute = conn.query(""select * from flight_gan where id= ?"", new Object[]{gan_id}, new BeanPropertyRowMapper(List.class));
if (myExecute.isEmpty()){
model.addAttribute(""message"",""Invalid flight number."");
return ""error.html"";
}
else {
return ""flights.html"";
}
}"
14103,"Try to use $db_engine$ to connect the database and set the SQL, content as follows: Query the status data in the orders table where customerid is $custid$, execute SQL to get all the data, and return the obtained data. When an exception occurs and the database connection is not empty, close the database connection .","public List comprar(DataSource db_engine, String custid){
JdbcTemplate engine = new JdbcTemplate(db_engine);
try {
List res = engine.query(""select status from orders where customerid= ? "", new Object[]{custid}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11435,"Set SQL (query all the information in the treview table based on book_id $isbn$), use $conn$ to execute SQL and get all the query results. If the length of the query data is 0, return the rendered 'error.html' page. Otherwise, return the rendered ""books.html"" page and the 'reviews parameter is the query result.","public String searchBook(JdbcTemplate conn,String isbn, Model model){
List results = conn.query(""select * from treview where book_id = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return ""error.html"";
}
else {
model.addAttribute(""reviews"",results);
return ""books.html"";
}
}"
14223,"""Use the java expression to execute the SQL statement through $connection$: Query all user_id in the $users$ table, ensure that $connection$ is turned off and return all query results.","public List testNested(EntityManager connection, Root<Object> users){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users);
List<Object> res = connection.createQuery(cq).getResultList();
return res;
}"
13230,"If $Cid$ has a value of 0, set SQL (query all columns of Commands) , otherwise set SQL (query all columns of Commands where cid is $Cid$) . Execute the SQL statement with $conn$, get all the data and return.","public List selectCommand(JdbcTemplate conn,Integer Cid){
String sql_Command = null;
if (Cid==0){
sql_Command = ""select * from commands"";
}
else {
sql_Command = ""select * from commands where cid = ?"";
}
List result = conn.query(sql_Command, new Object[]{Cid}, new BeanPropertyRowMapper(List.class));
return result;
}"
13341,"Get the database engine through $mysql_url$, where the echo parameter is set to False, further get the Session object and establish a connection. Execute the SQL statement (query all the columns in the t1 table according to $id$), get all the data, and print the query results.","public void execute(DataSource mysql_url, String id){
JdbcTemplate ss = new JdbcTemplate(mysql_url);
List result = ss.query(""select time from comments where summary = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
}"
11054,""" create a connection based on $engine$, execute SQL (query the username in the users table based on $email$) and get all the data. Store 0th element of each item of the query result in list. Return False if the length of list is not 0. Otherwise, return True.","public boolean getUser(DataSource engine, String email){
JdbcTemplate conn = new JdbcTemplate(engine);
List username = conn.query(""select username from users where email= ? "", new Object[]{email}, new BeanPropertyRowMapper(List.class));
List l = new ArrayList();
for (Object i : username) {
l.add(JSONObject.parseObject(i.toString()).get(0));
}
if (l.isEmpty()){
return false;
}else {
return true;
}
}"
11274,"Use $conn$ to execute SQL (get the pointer column of pointer_table based on $ptr$) and get all the data. If the number of rows of the query result is not zero, return the query result.","public List updatePointer(JdbcTemplate conn,String ptr){
List res = conn.query(""select pointer from pointer_table where ptr= ?"", new Object[]{ptr}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
13574,"If $password$ is not empty, use $db$ to execute SQL (query all columns in the users table based on $password$) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""search.html"" page, where the parameter user is the query result.","public String selectRes(JdbcTemplate conn,String flight_id, Model model){
List values = conn.query(""select * from passengers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (values.isEmpty()){
model.addAttribute(""message"",""No such flights"");
return ""error.html"";
}
else {
model.addAttribute(""passengers"",values);
return ""fligh.thtml"";
}
}"
13485,"Execute SQL through $conn$ (get the date column in the data_hist table based on $code$) and get all the data. Then get the length of the query results. If the length is greater than 0, then return the query results.","public List identifyDataHistPriceWave(JdbcTemplate conn,String code){
List rs = conn.query(""select date from data_hist where code = ?"", new Object[]{code}, new BeanPropertyRowMapper(List.class));
if (rs.isEmpty()){
return null;
}
else {
return rs;
}
}"
13416,"Use ORM to get all columns in $Users$ table with project_id as $fr$ and use $conn$ to query SQL to get all the data. Then use for loop to store the 0th element of each item of the query result as list, and finally return the contents and length of the list.","public Object search(EntityManager conn, Root<Object> Users, String fr){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Users).where(cb.equal(Users.get(""project_id""),fr));
List<Object> rs = conn.createQuery(cq).getResultList();
List users = new ArrayList();
for (Object row : rs) {
users.add(JSONObject.parseObject(row.toString()).get(0));
}
users.add(users.size());
return users;
}"
11349,"Use the ORM method and $conn$ to execute SQL (query all the information in the $Calling$ table according to $id$), get all the queried data, and return the result of the execution statement.","public List<Object> getCallById(EntityManager conn, Root<Object> Calling, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Calling).where(cb.equal(Calling.get(""project_id""),id));
List<Object> session = conn.createQuery(cq).getResultList();
return session;
}"
11363,"Use ORM method and $conn$ to execute SQL (query all the information in the $Transaction$ table according to $trans_id$), get all the data queried, and finally output the information of the execution result log.","public void getTransaction(EntityManager conn, Root<Object> Transaction, String trans_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Transaction).where(cb.equal(Transaction.get(""trans_id""),trans_id));
List<Object> query = conn.createQuery(cq).getResultList();
System.out.println(query);
}"
11174,Connect to the database with $db$ and create a cursor object to execute the SQL statement: query all columns where the id of pv is $pv_id$ in pv and return the result of the query.,"public List poulateAnagrafica(DataSource db, String pv_id){
JdbcTemplate engine = new JdbcTemplate(db);
List res = engine.query(""select * from pv where pv_id= ? "", new Object[]{pv_id}, new BeanPropertyRowMapper(List.class));
return res;
}"
11482,"Set up SQL (query all the information in the recommendations table based on $date$), use $conn$ to execute SQL. Use for loop to iterate through to get the cursor of execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Then store in a list and return the list.","public List selectValue(JdbcTemplate conn,String date){
List results = conn.query(""select * from recommendations where date = ?"", new Object[]{date}, new BeanPropertyRowMapper(List.class));
return results;
}"
13006,"Create the database engine through $postgresql$ and get the connection. Use the connection to execute the SQL (query all the columns in the articles based on $id$) and get the first piece of data. Return the rendered ""article.html"" and pass the query result to the article parameter.","public String article(DataSource postgresql, String id,Model model){
JdbcTemplate engine = new JdbcTemplate(postgresql);
List article = engine.query(""select * from articles where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""article"",article.get(0));
return ""article.html"";
}"
11638,"Use $db$ to execute SQL (get the column_name column in the 'Table' table when column_type is $c_type$), get the first piece of data, print the query result, and finally return the query result.","public List selectValue(JdbcTemplate db,String c_type){
List coltype = db.query(""select column_name from Table where column_type= ?"", new Object[]{c_type}, new BeanPropertyRowMapper(List.class));
System.out.println(coltype);
return coltype;
}"
11213,"Set up the SQL (query the nspname in the pg_namespace table based on $nspname$), execute the SQL with $conn$ and get all the query results. Store each item of the query results as 'list' and return.","public List getSchemaNames(JdbcTemplate conn,String nspname){
List schema_names = conn.query(""select nspname from pg_namespace where nspname= ?"", new Object[]{nspname}, new BeanPropertyRowMapper(List.class));
return schema_names;
}"
11331,"Use $conn$ to execute SQL (query the email column in the customers table according to $name$), get all the query results, and convert the data to list. If the result of the query is queried, return True; otherwise, return False.","public boolean isUser(JdbcTemplate conn,String name){
List res = conn.query(""select email from customers where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
return true;
}else {
return false;
}
}"
11134,"Execute the SQL statement using the $db$ connection (query all autoload in the 'table_name' where the metadata is $metadata$), iterate through the query results through the for loop and print.","public void displayTable(JdbcTemplate db,String metadata){
List rs = db.query(""select autoload from table_name where metadata= ?"", new Object[]{metadata}, new BeanPropertyRowMapper(List.class));
for (Object row : rs) {
System.out.println(row);
}
}"
11049,"Create the database engine through $path$ and use the raw_connection method to get the connection. If $following$ is not None, use the java expression to set SQL: To query the profilename information in the $users$ table based on $following$. Execute SQL and get all the data and return the query results. Otherwise, return False if $following$ is None.","public Object dbGet(EntityManager path, Root<Object> users, String following){
if (following!=null){
CriteriaBuilder cb = path.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""following""),following));
List<Object> ling = path.createQuery(cq).getResultList();
return ling;
}else {
return false;
}
}"
13849,"If the request module sends the request as GET, render and return ""buy.html"". Otherwise, use $conn$ connection to execute SQL statement (get the cash in the users table based on $uid$) and get the first records. If there is no query result, return None, otherwise use redirect to return the query results.","public Object buy(HttpRequest request, JdbcTemplate conn, String uid){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select cash from users where uid = ?"", new Object[]{uid}, new BeanPropertyRowMapper(List.class));
if (rows.isEmpty()){
return null;
}
else {
return rows.get(0);
}
} else {
return ""buy.html"";
}
}"
11155,Connect to the database according to$db_connect$ and execute the SQL statement: query all the columns in $employees$ where money is $money$ and get all the data. Store the 0th element of each item of the query result as a list and return.,"public List get(DataSource db_connect, String money){
JdbcTemplate engine = new JdbcTemplate(db_connect);
List query = engine.query(""select * from employees where money= ? "", new Object[]{money}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object i : query) {
list.add(JSONObject.parseObject(i.toString()).get(0));
}
return list;
}"
13566,"If the request method is ""GET"", use $conn$ to execute SQL (query the rating column in the reviews table based on $book_id$) and get all the query results. If the execution statement result is empty, return ""fail""; otherwise, return the query result.","public Object bookpage(HttpRequest request, JdbcTemplate conn, String book_id){
if (request.getMethod().equals(""GET"")){
List review_obj = conn.query(""select rating from reviews where book_id= ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
if (review_obj.isEmpty()){
return ""fail"";
}
else {
return review_obj;
}
} else {
return null;
}
}"
13127,"If the requested method is ""POST"", execute SQL (get the username column in the users where the book_id is $book$) with $conn$ and get all the data, then return the rendered ""book.html"" where the reviews parameter is the result of the query, otherwise ""/book/"" and $book$ handled by redirect are returned.","public Object book(HttpRequest request, JdbcTemplate conn, String book,Model model){
if (request.getMethod().equals(""POST"")){
List reviews = conn.query(""select username from users where book_id = ?"", new Object[]{book}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""reviews"",reviews);
return reviews;
} else {
return ""/book/""+book;
}
}"
11667,"Use $db$ to execute SQL according to the java expression (get all the columns in the $reviews$ table where book_id is $id$) and get all the data. Finally, return the ""title"" and ""author"" contents processed by jsonify, where 'title' is the title column of the query result and 'author' is the author column of the query result.","public JSONArray findBookReviews(EntityManager db, Root<Object> reviews, String id){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(reviews).where(cb.equal(reviews.get(""book_id""),id));
List<Object> rs = db.createQuery(cq).getResultList();
JSONArray list = new JSONArray();
for (Object r : rs) {
JSONObject json = new JSONObject();
json.put(""title"",JSONObject.parseObject(r.toString()).getString(""title""));
json.put(""author"",JSONObject.parseObject(r.toString()).getString(""author""));
list.add(json);
}
return list;
}"
13715,"Create the database engine through $call_center$ and set the echo parameter to False. Create a connection according to the database engine. Set SQL with the java expression (query all the information in the $call$ table based on $id_call$). Execute SQL, get all query results and return them.","public List updateStatus(EntityManager call_center, Root<Object> call, String id_call){
CriteriaBuilder cb = call_center.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(call).where(cb.equal(call.get(""id_call""),id_call));
List<Object> result = call_center.createQuery(cq).getResultList();
return result;
}"
13233,"Try to execute the following code: Get the database engine and make the connection via $config_uri$. Execute SQL (query all columns in the database_name) and get all the data. Close the database connection and return the result of the query. If an Exception Exception occurs, the specific Exception information is printed and False is returned.","public Object searchRecord(DataSource config_uri){
try {
JdbcTemplate engine = new JdbcTemplate(config_uri);
List records = engine.query(""select * from database_name "", new BeanPropertyRowMapper(List.class));
return records;
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
13179,"Execute the SQL with $conn$ (get the rank column in the testtable where ider is $ider$) and get all the data, convert the query results to the dictionary type, set the assertion dictionary length to 2, and return the query results.","public List testKeys(JdbcTemplate conn,String ider){
List keys = conn.query(""select rank from testtable where ider= ?"", new Object[]{ider}, new BeanPropertyRowMapper(List.class));
assert keys.size()==2;
return keys;
}"
11010,Use $conn$ to get the cursor. Execute SQL with cursors (get the acres information in the tablename table based on $perc$ and $series$) and get all the data. Use for loop to store the 0th element of each item of the query result in list.,"public List getAcresField(JdbcTemplate conn,String perc,String series){
List acres = conn.query(""select acres from tablename where perc=? and series=?"", new Object[]{perc,series}, new BeanPropertyRowMapper(List.class));
List acres_rec =new ArrayList();
for (Object i : acres) {
acres_rec.add(JSONObject.parseObject(i.toString()).get(0));
}
return acres_rec;
}"
11562,"Use the java expression to set up the SQL statement to get all the id in $plots$ based on $name$, use the $conn$ connection to execute the SQL and get the data. Store the 0th element of each item of the query result as list and return it.","public List getCustomerPlots(EntityManager conn, Root<Object> plots, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(plots).where(cb.equal(plots.get(""name""),name));
List<Object> res = conn.createQuery(cq).getResultList();
List list = new ArrayList();
for (Object x : res) {
list.add(JSONObject.parseObject(x.toString()).get(0));
}
return list;
}"
11475,"Get the database engine via $CKAN_DATASTORE_WRITE_URL$ and establish a connection. Set up SQL (query all columns in USER table based on $PASSWORD$) and get all the data. Close the connection, use for loop to convert each query result into dict, store as list, and finally return the list.","public List selectUser(DataSource CKAN_DATASTORE_WRITE_URL, String PASSWORD){
JdbcTemplate engine = new JdbcTemplate(CKAN_DATASTORE_WRITE_URL);
List users = engine.query(""select * from user where PASSWORD = ? "", new Object[]{PASSWORD}, new BeanPropertyRowMapper(List.class));
return users;
}"
11096,"Set up SQL (query the temperatura information in the sensor table based on $humedad$ and $clima$), and use $conn$ to execute SQL. Store all query results obtained after execution into the DataFrame of pandas and set the column name as the keys of the query results. Finally, return DataFrame.","public List getDataFrame(JdbcTemplate conn,String humedad,String clima){
List result = conn.query(""select temperatura from sensor where humedad=? and clima=?"", new Object[]{humedad,clima}, new BeanPropertyRowMapper(List.class));
return result;
}"
13804,"Use $engine$ to connect to the database. Set up SQL statement with the following content: Query all columns in the frequents based on $bar$, execute SQL statement to get all the data, convert each item of query results into dict to store as list and return it.","public List getBarCounts(DataSource engine, String bar){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select * from frequents where bar = ? "", new Object[]{bar}, new BeanPropertyRowMapper(List.class));
return results;
}"
13986,Connect to the database through $db$ and set the SQL statement: Query the number of all columns in the information_schema table based on $table_schema$. Execute SQL to get all the data and return all the data obtained.,"public List getBarCounts(DataSource db, String table_schema){
JdbcTemplate connection = new JdbcTemplate(db);
List count = connection.query(""select count(*) from information_schema where table_schema= ? "", new Object[]{table_schema}, new BeanPropertyRowMapper(List.class));
return count;
}"
11656,"Use $conn$ to execute SQL (get all the columns in the TABLE1 table according to $label$), get all the data, and finally return the query result.","public List getData(JdbcTemplate conn,String label){
List datas = conn.query(""select * from TABLE1 where label= ?"", new Object[]{label}, new BeanPropertyRowMapper(List.class));
return datas;
}"
13335,"Use $conn$ to execute SQL (query all columns in the base_table based on $table_id$), get the first row of data, close the connection, and return the query results.","public List queryPage(JdbcTemplate conn,String table_id){
List query_table = conn.query(""select * from base_table where table_id= ?"", new Object[]{table_id}, new BeanPropertyRowMapper(List.class));
return query_table;
}"
11534,"Set up the SQL statement (format the output string with the format() function, query all columns in the INVESTORS table with the string $stock$). Use the $conn$ connection to execute the SQL and get all the data. Store the query result as list and return it.","public List CompareDB(JdbcTemplate conn,String stock){
List info = conn.query(""select * from investors where stock = ?"", new Object[]{stock}, new BeanPropertyRowMapper(List.class));
return info;
}"
14157,"Set SQL statement: Query the 'name' in the metadata table base on $value$ and execute SQL statement by $conn$. If the number of rows of the query result is 0, return False; otherwise return the first piece of data of the query result.","public Object getData(JdbcTemplate conn,String value){
List result = conn.query(""select name from metadata where value= ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return false;
}else {
return result.get(0);
}
}"
13620,"Use the% symbol string matching method to set up SQL: query the game_id in Games table where game is $game_name$. Execute SQL with $conn$ and get the first data. Returns the tenth data if the query result exists, or None if it does not.","public Object gameId(JdbcTemplate conn,String game_name){
List result = conn.query(""select game_id from games where game = ?"", new Object[]{game_name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result.get(0);
}
}"
13074,"Return False directly if insert_key is None. Otherwise, use $conn$ to execute SQL (query the insert_val in the table table based on $insert_key$) and get all the data. Finally, return the query results.","public Object queryRow(JdbcTemplate conn,String insert_key){
if (insert_key==null){
return false;
}else {
List values = conn.query(""select insert_val from table where insert_key= ?"", new Object[]{insert_key}, new BeanPropertyRowMapper(List.class));
return values;
}
}"
11109,"If the request module sends the request as a POST, then the SQL is executed using the $conn$ connection (query the first favorite_stock in the login_info where the name of user is $user_name$). Use $base$ to process the query results with the % operator. Return the processed result using redirect.","public Object addfav(HttpRequest request, JdbcTemplate conn, String user_name, Integer base){
if (request.getMethod().equals(""POST"")){
List texts = conn.query(""select favorite_stock from login_info where user_name= ?"", new Object[]{user_name}, new BeanPropertyRowMapper(List.class));
int uri =base % Integer.parseInt(texts.get(0).toString());
return uri;
} else {
return null;
}
}"
13461, execute the SQL through the cursor method of $connection$ (get all the columns in the milks table based on $location$) and get all the data. Close the connection and finally return the query results.,"public List testConnectMethod(JdbcTemplate connection,String location){
List results = connection.query(""select * from milks where location = ?"", new Object[]{location}, new BeanPropertyRowMapper(List.class));
return results;
}"
11636,"Use $engine$ to execute SQL (get all the columns in the RowProxy table according to $id$), get all the data, and finally return the query result.","public List searchRowproxy(JdbcTemplate engine,String id){
List d = engine.query(""select * from RowProxy where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return d;
}"
13428,Use $conn$ to execute the SQL (get the origin column in the flights table) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.,"public List main(JdbcTemplate conn){
List flights = conn.query(""select origin from flights"", new BeanPropertyRowMapper(List.class));
List origins = new ArrayList();
for (Object row : flights) {
origins.add(row);
}
return origins;
}"
14036,"If the request module sends the request in a post method, use $conn$ to execute the SQL statement: Get all the topic_name in $topics$, render and return ""topiclist.html"", where the alltopics parameter is the query result; otherwise, use redirect to return ""/ teacher"".","public Object topiclist(HttpRequest request, JdbcTemplate conn, Model model){
if (request.getMethod().equals(""POST"")){
List alltopics = conn.query(""select topic_name from topics"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""alltopics"",alltopics);
return ""topiclist.html"";
} else {
return ""/teacher"";
}
}"
13342,"If the request method is ""POST"", the judgment is made. If the $title$ is an empty string, return the rendered ""index.html""; otherwise, use $conn$ to execute the SQL statement (query all the columns in the books table based on $isbn$ and $title$), get all the data, and return the rendered ""index.html"", where the books parameter is the query result. If the request method is not ""POST"", return the rendered ""index.html"".","public Object search(HttpRequest request, JdbcTemplate conn, String isbn, String title,Model model){
if (request.getMethod().equals(""POST"")){
if (title==""""){
return ""index.html"";
}else {
List books = conn.query(""select * from books where isbn=? and title=?"", new Object[]{isbn,title}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"",books);
return ""index.html"";
}
} else {
return ""index.html"";
}
}"
13510,"Set SQL based on the java expression (query the ReferalFilePath column in the $References$ table where Username is $username$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store the 0th element of each query result as list, and return the list.","public List getReferralPath(EntityManager conn, Root<Object> References, String username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(References).where(cb.equal(References.get(""username""),username));
List<Object> fs = conn.createQuery(cq).getResultList();
List list =new ArrayList();
for (Object item : fs) {
list.add(JSONObject.parseObject(item.toString()).get(0));
}
return list;
}"
13383,"Try to use $conn$ to execute SQL (query the number of all columns in the product table based on $uuid$), get the first piece of data, and return the query results. If an exception occurs during execution, throw the exception directly, and finally ensure that the database is closed.","public List persistBundle(JdbcTemplate conn,String uuid){
try {
List res = conn.query(""select count(*) from product where uuid= ?"", new Object[]{uuid}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13496,Use $db$ to connect to the database and execute the SQL (get the name column in the users table based on $id$) and get all the data. Finally return the query results.,"public List testAutoflush2(DataSource db, String id){
JdbcTemplate engine = new JdbcTemplate(db);
List names = engine.query(""select name from users where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return names;
}"
11471,"Set SQL based on the java expression: (query $table$ table value column based on $key$). Execute SQL with $conn$ and get all the data. If there is a query result, return its 0th element. Otherwise throw KeyError with $key$ as parameter.","public Object getSource(EntityManager conn, Root<Object> table, String key){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""key""),key));
List<Object> values = conn.createQuery(cq).getResultList();
if (values.isEmpty()){
Exception e = new Exception();
return e;
}
else {
return values.get(0);
}
}"
14165,"Execute SQL statement via $db_connection$:Get all instance data in user table according to $name$, set assertion to determine that the result is not empty 'list', and return all the obtained data.","public List getQuery(JdbcTemplate db_connection,String name){
List rs = db_connection.query(""select instance from user where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
assert rs.size()!=0;
return rs;
}"
13605,Set up SQL: query all columns in the reviews table where userid is $userid$. Use $db$ to execute SQL and get all data. Return the rendered 'userpage.html' and pass the query result into the res parameter.,"public String getQuery(JdbcTemplate db,String userid,Model model){
List res = db.query(""select * from reviews where userid = ?"", new Object[]{userid}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""res"",res);
return ""userpage.html"";
}"
11492,"Set SQL (query the users table sur_name column based on $uuid$), execute SQL based on $conn$ and get all the query results. Return the rendered ""dashboard.html"" page with results parameter being query result.","public String dashboard(JdbcTemplate conn,String uuid,Model model){
List results = conn.query(""select sur_name from users where uuid = ?"", new Object[]{uuid}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"",results);
return ""dashboard.html"";
}"
14127,"Use the java expression to set SQL: Get data in $bm$ based on $type$, and execute SQL to get all data by $conn$. If the query result exists, return the last element of the query result; otherwise, return 0.","public Object getDataBabyMonitor(EntityManager conn, Root<Object> bm, String type){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(bm).where(cb.equal(bm.get(""type""),type));
List<Object> result = conn.createQuery(cq).getResultList();
if (result.isEmpty()){
return 0;
}
else {
return result.get(-1);
}
}"
13828,"""Use $conn$ to query all the columns in the banks table with id as $id$ and get all the data. Set the assertion to determine the length of the query result is greater than 0, convert the query result into list and return it.","public List selectValue(JdbcTemplate conn,String id){
List result = conn.query(""select * from banks where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert result.size()>0;
return result;
}"
11004,"If the method of the request is POST, then use $conn$ to execute SQL (get all the columns in the books based on $isbn$, $low_title$ and $low_author$) and get all the data. Input the query result into the books field and render ""books.html"". Otherwise, only the rendered ""booksearch.html"" page will be returned.","public String bookSearch(HttpRequest request, JdbcTemplate conn, String isbn,String low_title, String low_author,Model model){
if (request.getMethod().equals(""POST"")){
List books = conn.query(""select * from books where isbn=? and low_title=? and low_author=?"", new Object[]{isbn,low_title,low_author}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"",books);
return ""books.html"";
} else {
return ""booksearch.html"";
}
}"
11293,"Use $DATABASEURI$ to get the data engine, where the convert_unicode parameter is True. Connect to the database and execute SQL (get the mname column in teams based on 'tname' is $tname$) and get all the data. Finally return the query result.","public List searchTeam(DataSource DATABASEURI, String tname){
JdbcTemplate conn = new JdbcTemplate(DATABASEURI);
List res = conn.query(""select mname from teams where tname = ? "", new Object[]{tname}, new BeanPropertyRowMapper(List.class));
return res;
}"
14125,"Use the java expression to set up SQL: Query the data in the $currency$ table, and execute SQL to get all the data via $con$. For loop iterates through all the query results and prints the 0th element of each row. Return all the query results.","public List<Object> getLastUpdate(EntityManager con, Root<Object> currency){
CriteriaBuilder cb = con.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(currency);
List<Object> data = con.createQuery(cq).getResultList();
for (Object item : data) {
System.out.println(JSONObject.parseObject(item.toString()).get(0));
}
return data;
}"
13775,"Try to use $conn$ to execute SQL (query all the information in the REVIEWS table based on $user_id$ and $book_id$) and get the first piece of data. Return False, if there are query results; otherwise, return True. If an Exception occurs during execution, return the rendered ""error.html"" page.","public Object book(JdbcTemplate conn,String user_id,String book_id){
try {
List reviewfounds = conn.query(""select * from reviews where user_id = ? and book_id = ?"", new Object[]{user_id,book_id}, new BeanPropertyRowMapper(List.class));
if (reviewfounds.isEmpty()){
return false;
}else {
return true;
}
}catch (Exception e){
return ""error.html"";
}
}"
13943,"Use the java expression to set the SQL statement: Query the information in the $foo$ table based on $data$, use $conn$ to execute SQL and get all the data. Make sure $conn$ is closed. Set the assertion to determine that the length of the execution result is greater than 0 and return the execution result.","public List getSource(EntityManager conn, Root<Object> foo, String data){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(foo).where(cb.equal(foo.get(""data""),data));
List<Object> results = conn.createQuery(cq).getResultList();
assert results.size()>0;
return results;
}"
11217,"Use $engine$ to connect to the database, execute SQL (get all the columns in the tickets based on $metadata$) and get all the data, and finally return the query result.","public List getConnectTickets(DataSource engine, String metadata){
JdbcTemplate connection = new JdbcTemplate(engine);
List res = connection.query(""select * from tickets where metadata= ? "", new Object[]{metadata}, new BeanPropertyRowMapper(List.class));
return res;
}"
13073,"Use java expressions to set up SQL (query the contents of the $aliases$ table). Use $conn$ to execute SQL and get all the data. Use for loop to store the 0th element and the 1st element of each item in the query results into list, and store list into set. Finally, return the processed set.","public Set getAliases(EntityManager conn, Root<Object> aliases){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(aliases);
List<Object> list = conn.createQuery(cq).getResultList();
Set dictionary =new HashSet();
for (Object row : list) {
dictionary.add(JSONObject.parseObject(row.toString()).get(0));
dictionary.add(JSONObject.parseObject(row.toString()).get(1));
}
return dictionary;
}"
13033,"If the request method of request is ""POST"", use $conn$ to execute SQL (query all columns in the bookreviews table based on $username$ and $isbn$), get the first piece of data, and finally return the query result.","public Object bookQuery(HttpRequest request, JdbcTemplate conn, String username, String isbn){
if (request.getMethod().equals(""POST"")){
List items = conn.query(""select * from bookreviews where username = ? and isbn = ?"", new Object[]{username,isbn}, new BeanPropertyRowMapper(List.class));
return items.get(0);
} else {
return null;
}
}"
13723,"Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement (query the curso column in the trab table according to $id$), get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list and return. If an Exception is caught, print the exception and return False.","public Object listarMaterias(DataSource db_string, String id){
try {
JdbcTemplate db = new JdbcTemplate(db_string);
List result = db.query(""select curso from trab where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List res =new ArrayList();
for (Object part : result) {
res.add(part);
}
return res;
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
11355,"Get the database engine and establish a connection through $host$. Execute the SQL statement (query all the columns in the database table based on $customers$ and $mock$), get all the data, and return the query results.","public List sqlImport(DataSource host, String customers,String mock){
JdbcTemplate conn = new JdbcTemplate(host);
List query = conn.query(""select * from database where customers=? and mock=? "", new Object[]{customers,mock}, new BeanPropertyRowMapper(List.class));
return query;
}"
11390,"Use ORM method to set SQL (query all columns in the $buildsets_table$ table according to $id$), execute SQL according to $conn$ and get all the query results. If the query result is not empty, return the 0th element of the 0th data; otherwise, return None.","public Object getBranch(EntityManager conn, Root<Object> buildsets_table, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(buildsets_table).where(cb.equal(buildsets_table.get(""id""),id));
List<Object> r = conn.createQuery(cq).getResultList();
if (r.isEmpty()){
return null;
}
else {
return JSONObject.parseObject(r.get(0).toString()).get(0);
}
}"
13314,"Get the database engine and establish a connection through $DBHost$. Try to execute the SQL statement with ORM method (query all the columns in the $project$ table according to $projId$), get the first piece of data, return the 0th element of the data. Output the exception if an Exception occurs during execution, and finally close the database connection and all connections.","public Object getRowCount(EntityManager DBHost, Root<Object> project, String projId){
        try {
            CriteriaBuilder cb = DBHost.getCriteriaBuilder();
            CriteriaQuery<Object> cq = cb.createQuery(Object.class);
            cq.select(project).where(cb.equal(project.get(""projId""),projId));
            List<Object> result = DBHost.createQuery(cq).getResultList();
            return result.get(0);
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }"
13709,"Use $conn$ to execute SQL (query all columns in the users table based on $username$ and $password$) and get all the data. If the query result exists, return the rendered ""success.html"" page.","public String register(JdbcTemplate conn,String username, String password){
List users = conn.query(""select * from users where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
return null;
}
else {
return ""success.html"";
}
}"
13842,Use the $conn$ connection to execute the SQL statement (query all the tobs data in measurement based on $date$). Use for loop iterate through the query results and print the 0th element of each item. Use jsonify to return the query results.,"public JSONArray tobs(JdbcTemplate conn,String date){
List temps = conn.query(""select tobs from measurement where date= ?"", new Object[]{date}, new BeanPropertyRowMapper(List.class));
for (Object row : temps) {
System.out.println(JSONObject.parseObject(row.toString()).get(0));
}
return JSONObject.parseArray(temps.toString());
}"
13296,"Execute SQL (get all the columns in the test_index_label) with $conn$,get all the data, set assertion to determine that the query result is not 0, and return the query result.","public List searchLabel(JdbcTemplate conn){
List labels = conn.query(""select * from test_index_label"", new BeanPropertyRowMapper(List.class));
assert labels.size()!=0;
return labels;
}"
14097,"Set SQL (query the number of id in the titanic table whose age is less than $num$), use $conn$ to execute SQL to get all the data, print the query results and return.","public List unitTest(JdbcTemplate conn,String num){
List results = conn.query(""select count(id) from titanic where age < ?"", new Object[]{num}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
return results;
}"
13258,"Connect via $engine$. Set the SQL (all columns in the $account$ are selected where uname is $uname$) in a java expression and return after getting all the data. If an exception is generated, the logging error level is used to output the exception information and return None.","public List<Object> getSource(EntityManager engine, Root<Object> account, String uname){
try {
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(account).where(cb.equal(account.get(""uname""),uname));
List<Object> results = engine.createQuery(cq).getResultList();
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14286,"If the request module sends the request in a post method, use $con$ to execute SQL (query all the year in the books through $author$) and return all the query results.","public List books(HttpRequest request, JdbcTemplate con, String author){
if (request.getMethod().equals(""POST"")){
List years = con.query(""select year from books where author= ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
return years;
} else {
return null;
}
}"
13559,"Connect the database with $engine$ and set the SQL based on the java expression (query the file_path column in the $files$ table based on $exp_id$). Execute SQL and get all the data, use for loop to traverse each query result, store them as list, and finally return the list.","public List<Object> gatherFileLocs(EntityManager engine, Root<Object> files, String exp_id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(files).where(cb.equal(files.get(""exp_id""),exp_id));
List<Object> results = engine.createQuery(cq).getResultList();
List files_dict = new ArrayList();
for (Object file1 : results) {
files_dict.add(file1);
}
return files_dict;
}"
13097,Set SQL in java expressions: Query name in $users$ table when projid is equal to $fr$. Use $conn$ to execute SQL and get all data. Print and return the query results.,"public List<Object> update(EntityManager conn, Root<Object> users, String fr){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""projid""),fr));
List<Object> names = conn.createQuery(cq).getResultList();
System.out.println(names);
return names;
}"
11048,"Set SQL with the java expression (query all the information in the $users$ table based on $email$). Use $connection$ to execute SQL and get the first piece of data. Close the connection. Return if the query result exists. Otherwise, return False.","public Object addFriend(EntityManager connection, Root<Object> users, String email){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""email""),email));
List<Object> email_users = connection.createQuery(cq).getResultList();
if (email_users.isEmpty()){
return false;
}else {
return email_users.get(0);
}
}"
11333,"Use $conn$ to execute SQL (query all data in the count column of the resources table based on $type_id$), store the data back as list and return.","public List getUserMenu(JdbcTemplate conn,String type_id){
List entries = conn.query(""select count from resources where type_id= ?"", new Object[]{type_id}, new BeanPropertyRowMapper(List.class));
List json_row = new ArrayList();
for (Object en : entries) {
json_row.add(en);
}
return json_row;
}"
11493,"If the request method is ""POST"", set the SQL (query the book_id column in the reviews table based on $user_id$), use $conn$ to execute the SQL and get all the query results. Return the query results.","public List selectValue(HttpRequest request, JdbcTemplate conn, String user_id){
if (request.getMethod().equals(""POST"")){
List book_id = conn.query(""select book_id from reviews where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return book_id;
} else {
return null;
}
}"
14118,"Set SQL: Query all columns in musei, execute SQL statement by $conn$ to get all the data and return the obtained data.","public List FindAllMusei(JdbcTemplate conn){
List result = conn.query(""Select * from musei"", new BeanPropertyRowMapper(List.class));
return result;
}"
11137,"Use $conn$ to query all columns in the flights where ganid is $ganid$ and get all the data. Render and return 'flights.html', where the flights parameter is the result of the query.","public String selectValue(JdbcTemplate conn,String ganid,Model model){
List flights = conn.query(""select * from flights where ganid= ?"", new Object[]{ganid}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"",flights);
return ""flights.html"";
}"
13488,Use $conn$ to execute the SQL (get all columns in the files table based on $boxID$) and get all the data. Then use for loop to print each item of the query results.,"public void copyContentData(JdbcTemplate conn,String boxID){
List rows = conn.query(""select * from files where boxid = ?"", new Object[]{boxID}, new BeanPropertyRowMapper(List.class));
for (Object row : rows) {
System.out.println(row);
}
}"
11232, get the connection via the start method of $engine$ and then execute SQL (get the player_headshot in 'players' based on $name$) and get all the data. Use for loop to iterate through the query result and return the result of each item if the 0th element of the query is not empty.,"public Object getPlayerImage(DataSource engine, String name){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select player_headshot from players where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object row : res) {
if (JSONObject.parseObject(row.toString()).get(0)!=""""){
return row;
}else {
return null;
}
}
return null;
}"
11669,"Execute SQL according to the java expression (get the name column in the $passengers$ table whose flight_id is $id$) and use $db$ to execute SQL to get all the data. If the length of the query result is 0, return ""No names., and finally return the query result.","public Object getPassName(EntityManager db, Root<Object> passengers, String id){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(passengers).where(cb.equal(passengers.get(""flight_id""),id));
List<Object> names = db.createQuery(cq).getResultList();
if (names.isEmpty()){
return ""No names."";
}
else {
return names;
}
}"
13633,Execute the SQL (query all the columns in the one_row where number_of_rows is $cname$) using $conn$ and get the first data. Set the assertion determination query result length to 1 and return the query result.,"public Object searchDottedName(JdbcTemplate conn, String cname){
List rows = conn.query(""select * from one_row where number_of_rows= ?"", new Object[]{cname}, new BeanPropertyRowMapper(List.class));
Object row = rows.get(0);
assert rows.size() == 1;
return row;
}"
11694,"If the request method is ""POST"", use $db$, to execute SQL according to the java expression (get the username column in the $users$ table where password is $pwd$), get all the data, and then print the query result.","public void register(HttpRequest request, EntityManager db, Root<Object> users, String pwd){
if (request.getMethod().equals(""POST"")){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""password""),pwd));
List<Object> usernames = db.createQuery(cq).getResultList();
System.out.println(usernames);
}
}"
11587,"Execute the SQL statement through $engine$: Query the first piece of cname information in User table based on $cid$. Set assertion to determine that the length of the returned result is 1, and return the query result.","public Object commitWithSavepoint(JdbcTemplate engine, String cid){
List results = engine.query(""select cname from user where cid = ?"", new Object[]{cid}, new BeanPropertyRowMapper(List.class));
Object result = results.get(0);
assert results.size() == 1;
return result;
}"
13531,"Set SQL based on the java expression (query all columns in the $Customer$ table whose name is $bindparam$). Execute SQL through $engine$, get all the data and return the query results.","public List testSqlalchemyCore(EntityManager engine, Root<Object> Customer, String bindparam){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Customer).where(cb.equal(Customer.get(""name""),bindparam));
List<Object> res = engine.createQuery(cq).getResultList();
return res;
}"
14146,"If the request module sends the request as post, connect to the database via $dbe$. Set the SQL (query the loginpassword in Member via $uid$), execute the SQL to get all the data, and return all the obtained data.","public List login(HttpRequest request, DataSource dbe, String uid){
if (request.getMethod().equals(""POST"")){
JdbcTemplate connection = new JdbcTemplate(dbe);
List actualpwd = connection.query(""select loginpassword from member where uid = ?"", new Object[]{uid}, new BeanPropertyRowMapper(List.class));
return actualpwd;
} else {
return null;
}
}"
13038,"""Use $tlengine$ to get the connection. Use the connection to execute SQL (query all columns in the users_table table). Use the keys in the execution result as the key in the dictionary, each item in the execution result cursor as the value, and store the obtained dictionary into list. Close the connection and return the processed list.","public List testCommit(DataSource tlengine, String summary){
JdbcTemplate external_connection = new JdbcTemplate(tlengine);
List inf_dic = external_connection.query(""select * from users_table "", new BeanPropertyRowMapper(List.class));
return inf_dic;
}"
13145,"Execute SQL (get all the columns in the users where the id of user is $user_id$) with $conn$, and finally return whether the function that return the result of the query is true or false for 1.","public boolean clearResetCode(JdbcTemplate conn, String user_id){
List res = conn.query(""select * from users where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return res.size()==1;
}"
11502,Use $con$ to query the SQLITE_MASTER table for the first piece of name data with path as $path$.Use for loop iterate through all the results and print the 0th element of the query result. Make sure $con$ is closed.,"public Object printSchema(JdbcTemplate con, String path){
List outputs = con.query(""select name from sqlite_master where path = ?"", new Object[]{path}, new BeanPropertyRowMapper(List.class));
Object output = outputs.get(0);
return JSONObject.parseObject(output.toString()).get(0);
}"
11184,"Use a java expression to set the SQL statement to get all the data in $users$ where the id of user is $user_id$, execute the SQL statement over a $conn$ connection, and store the query results as dict as a list and return.","public List queryOldRecs(EntityManager conn, Root<Object> users, String user_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""id""),user_id));
List<Object> again_uesr = conn.createQuery(cq).getResultList();
return again_uesr;
}"
13976,"et the SQL statement: Query the number of id in the Districts table, use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result.","public Object getDistrictCount(JdbcTemplate conn){
List count_res = conn.query(""select count(id) from districts"", new BeanPropertyRowMapper(List.class));
return count_res.get(0);
}"
11195," connect to the database where engine is $engine$. Query all the columns in the table_name where the name of schema is $schema_name$ and get all the data, convert each item of the query result into a dict, store it as a list, and return it.","public List backupOldTable(DataSource engine, String schema_name){
JdbcTemplate con = new JdbcTemplate(engine);
List gojome = con.query(""select * from table_name where schema_name= ? "", new Object[]{schema_name}, new BeanPropertyRowMapper(List.class));
return gojome;
}"
11302,"Use $conn$ to execute SQL (query all columns in the RIDERS table based on $rider$), get all the data, store the 0th element of each item of the query result as tuple and return it.","public List testMultipleRowsOneCommit(JdbcTemplate conn,String rider){
List result = conn.query(""select * from riders where rider = ?"", new Object[]{rider}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object r : result) {
list.add(JSONObject.parseObject(r.toString()).get(0));
}
return list;
}"
14264,"Try to execute the SQL statement through the $conn$ connection, which says: Query all the columns in the books table based on $isbn$ and $title$, get all the data, render and return ""books.html"", where the 'results' parameter is all the obtained data. If an exception occurs, render and return ""tbr.html"".","public String books(JdbcTemplate conn,String isbn,String title, Model model){
try {
List results = conn.query(""select * from books where isbn = ? and title = ?"", new Object[]{isbn,title}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"",results);
return ""books.html"";
}catch (Exception e){
return ""tbr.html"";
}
}"
14126,"""Get the database engine and establish a connection via $easyFindDB$. Use the java expression to set up the SQL statement (query the id data in the $prod$ table based on $categoria$ and $nome$) and execute the SQL statement to get all the data. If the length of the query result is 1, return False; otherwise return all the query results.","public Object queryProd(EntityManager easyFindDB, Root<Object> prod, String categoria,String nome){
CriteriaBuilder cb = easyFindDB.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(prod).where(cb.equal(prod.get(""categoria""),categoria));
cq.select(prod).where(cb.equal(prod.get(""nome""),nome));
List<Object> risControl = easyFindDB.createQuery(cq).getResultList();
if (risControl.size()==1){
return false;
}else {
return risControl;
}
}"
13112,"If the requested method is 'POST', SQL is executed using $db$ (to get the users column in the zips where zipcode is $zipcode$) and the first data is returned to the rendered ""location.html"", where the Zips parameter is the result of the query.","public Object location(HttpRequest request, JdbcTemplate db, String zipcode,Model model){
if (request.getMethod().equals(""POST"")){
List res = db.query(""select users from zips where zipcode = ?"", new Object[]{zipcode}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""zips"",res);
return ""location.html"";
} else {
return null;
}
}"
14076,"Open the books.csv file and read it, use for loop traversal to read the content, execute the SQL statement through $conn$: Use $author$ to query all the 'title' data in the books table and print the query results.","public void main(JdbcTemplate conn){
List list = new ArrayList();
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String author = sc.nextLine();
List results = conn.query(""select title from books where author= ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
11334,"Get the database engine and establish a connection through $postgresql$. Execute the SQL statement (query the first piece of data in the taxonomyresults table according to $taxonomysampleinfo$), close the connection, and return the query results.","public List clear(DataSource postgresql, String taxonomysampleinfo){
JdbcTemplate eng = new JdbcTemplate(postgresql);
List statement = eng.query(""select * from taxonomyresults where taxonomysampleinfo= ? "", new Object[]{taxonomysampleinfo}, new BeanPropertyRowMapper(List.class));
return statement;
}"
14089,"se $connection$ to execute a SQL: Query all columns in the fiche table and get all the data. Use for loop traversal to query the results, print the id of the query results and the corresponding values of titre and text.","public void affListe(JdbcTemplate connection){
List r = connection.query(""select * from fiche"", new BeanPropertyRowMapper(List.class));
for (Object i : r) {
JSONObject jsonObject = JSONObject.parseObject(r.toString());
System.out.println(jsonObject.getString(""id"")+jsonObject.getString(""titre"")+jsonObject.getString(""text""));
}
}"
11029,"Use $conn$ to execute SQL: To query all columns in the dual table based on $rownum$. If the number of rows of the query result is not 0, return the number of rows of the query result.","public Object query(JdbcTemplate conn,String rownum){
List result = conn.query(""select * from dual where rownum< ?"", new Object[]{rownum}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result.size();
}
}"
13002,"If $time_now$ exists, create the database engine and get the connection through $postgres_dbapi$; execute SQL (query the num in the database_name table based on $time_now$) and get all the data; close the connection and return the query results. Otherwise ($time_now$ does not exist), return False.","public Object createDatabase(DataSource postgres_dbapi, String time_now){
if (time_now!=null){
JdbcTemplate conn = new JdbcTemplate(postgres_dbapi);
List nums = conn.query(""select num from database_name where time_now= ? "", new Object[]{time_now}, new BeanPropertyRowMapper(List.class));
return nums;
}else {
return false;
}
}"
14262,Create a cursor with $conn$ and execute a SQL through the cursor: Query the first id in the sqlalchemy_bench table and return all the query results.,"public Object initSqlite3(DataSource conn){
JdbcTemplate engine = new JdbcTemplate(conn);
List res = engine.query(""select id from sqlalchemy_bench "", new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
13967,Set SQL (query the 'password' data in the player_master table through $username$). Use the $conn$ connection to execute SQL to get all the data. For loop iterates the execution result and prints.,"public void selectValue(JdbcTemplate conn,String username){
List result = conn.query(""select password from player_master where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}"
13755,""" connect the database according to $engine$, set SQL (query all columns in the outcome_vw table based on $model_name$ and $pct_correct$), execute SQL, get all the query results, return the rendered ""project_outcomes.html"" page, and set the parameter rsOutcome to the query result.","public String admin(DataSource engine, String model_name,String pct_correct,Model model){
JdbcTemplate con = new JdbcTemplate(engine);
List rsOutcome = con.query(""select * from outcome_vw where model_name = ? and pct_correct = ? "", new Object[]{model_name,pct_correct}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rsOutcome"",rsOutcome);
return ""project_outcomes.html"";
}"
11237,"Use $conn$ to execute SQL based on the java expression (get all columns in $Threads$ table based on $thread_number$), get the first row of data, and finally return the query result.","public List markThreadDead(EntityManager conn, Root<Object> Threads, String thread_number){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Threads).where(cb.equal(Threads.get(""thread_number""),thread_number));
List<Object> thread_rows = conn.createQuery(cq).getResultList();
return thread_rows;
}"
13473,"Try to use $conn$ to execute SQL (get all columns in the pets table based on $name$) and get all data, then return the query results. If not try, then pass.","public List testRollback(JdbcTemplate conn,String name){
try {
List results = conn.query(""select * from pets where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
return null;
}
}"
11131,"Use java expressions to set the SQL (query the foo column in the $table_name$ with $id$) , execute the SQL with $conn$ and get all the data, and set assertions to determine that the length of the returned result is greater than 0.","public void testChange(EntityManager conn, Root<Object> table_name, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_name).where(cb.equal(table_name.get(""id""),id));
List<Object> foolist = conn.createQuery(cq).getResultList();
assert foolist.size()>0;
}"
13819,Use ORM method to execute SQL statement through $conn$: Query the contents with olympic_id as $olympic_id$ in the $Medal$ table and get all the data. Set assertion to determine the length of the returned results is not 0.,"public void getMedal(EntityManager conn, Root<Object> Medal, String olympic_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Medal).where(cb.equal(Medal.get(""olympic_id""),olympic_id));
List<Object> medal_olympics = conn.createQuery(cq).getResultList();
assert medal_olympics.size()!=0;
}"
14260,"Create a cursor object through $conn$ and use the cursor object to execute the SQL statement, and the content is as follows: Query all the u_name in the customer table according to $u_id$ and return the query results.","public List get(DataSource conn, String u_id){
JdbcTemplate c = new JdbcTemplate(conn);
List result = c.query(""select u_name from customer where u_id = ? "", new Object[]{u_id}, new BeanPropertyRowMapper(List.class));
return result;
}"
14121,"""Try to use ORM method to execute the SQL statement via $conn$: Query all of data in the $tables$ table, return the query results, and is an Exception occurs, return False.","public Object getData(EntityManager conn, Root<Object> tables){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tables);
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}catch (Exception e){
return false;
}
}"
13628,"""Set SQL: query all columns in the City table where City is $city$, temp is $temp$, pressure is $pressure$ and wind is $wind$. Execute the SQL using $connection$ and get all the data. Return the result of the query.","public List searchCity(JdbcTemplate connection,String city,String temp,String pressure,String wind){
List results = connection.query(""select * from City where city=? and temp=? and pressure=? and wind=?"", new Object[]{city,temp,pressure,wind}, new BeanPropertyRowMapper(List.class));
return results;
}"
14278,Get the database engine through $uri$ and use the created database engine to execute the SQL statement: Query all the id in the testtable and return all the query results.,"public List getInfo(DataSource uri){
JdbcTemplate engine = new JdbcTemplate(uri);
List res = engine.query(""select id from testtable "", new BeanPropertyRowMapper(List.class));
return res;
}"
13043,"Try to use java expressions to set up SQL (query the id in the $class_or_mapper$ table). Use $conn$ to execute SQL and get all the data. Finally, return the query result. If an exception occurs, the ""Error"" message is printed directly.","public Object getById(EntityManager conn, Root<Object> class_or_mapper){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(class_or_mapper);
List<Object> objects = conn.createQuery(cq).getResultList();
return objects;
}catch (Exception e){
System.out.println(""Error"");
return false;
}
}"
11564,"Use the $conn$ connection to execute a SQL statement: Get all columns in the books table based on $qisbn$ and $qtitle$, and get all the data. If the query result is empty, then return None; otherwise, use for loop iterate through the query results and print them.","public Object books(JdbcTemplate conn,String qisbn,String qtitle){
List val = conn.query(""select * from books where qisbn = ? and qtitle = ?"", new Object[]{qisbn,qtitle}, new BeanPropertyRowMapper(List.class));
if (val.isEmpty()){
return null;
}else {
for (Object row : val) {
System.out.println(row);
}
return val;
}
}"
13422,"Try to use $conn$, execute SQL based on the java expression (get gi column in $table_gi_taxid_nuc$ table based on $tax_id$) and get all the data. Return the query results and finally make sure $conn$ connection is closed.","public Object getTaxids(EntityManager conn, Root<Object> table_gi_taxid_nuc, String tax_id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_gi_taxid_nuc).where(cb.equal(table_gi_taxid_nuc.get(""tax_id""),tax_id));
List<Object> records = conn.createQuery(cq).getResultList();
return records;
}catch (Exception e){
return null;
}
}"
11136,"Set the SQL to query all columns in userdetails where survey is $survey$ and company is $company$, get all the data, execute the SQL statement using the $conn$ connection, and return all the query results.","public Object activateSurvey(JdbcTemplate conn,String survey,String company){
List infor = conn.query(""select * from userdetails where survey=? and company=?"", new Object[]{survey,company}, new BeanPropertyRowMapper(List.class));
return infor;
}"
11039,Use $conn$ to execute SQL (use the method of format string to query the id in the ratings table based on $genre$) and get all the data. Convert the query result to a list type and return the 0th data.,"public Object lookupGenreId(JdbcTemplate conn,String genre){
List genre_id = conn.query(""select id from ratings where genre =?"", new Object[]{genre}, new BeanPropertyRowMapper(List.class));
return genre_id.get(0);
}"
14276,"Connect the database through $db$ and execute the SQL statement, which reads: Query all email data from the users table according to $name$ and return all the query results.","public List testConnection(DataSource db, String name){
JdbcTemplate conn = new JdbcTemplate(db);
List rp = conn.query(""select email from users where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return rp;
}"
14219,"Try use the java expression to set up the SQL statement: Query the number of name in the $table$ table whose id is $id$, execute the SQL statement through the $conn$ connection to get the first piece of data and return the execution result. If Exception occurs, return the exception information with the logging.error() method.","public Object getStats(EntityManager conn, Root<Object> table, String id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""url""),id));
List<Object> result = conn.createQuery(cq).getResultList();
return result.get(0);
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13373," connect the database according to $engine$. Set up sql (query the table_name column in the schema_tables table according to $schema_value$), execute SQL, get all the query results, and return them.","public List queryPage(DataSource engine, String schema_value){
JdbcTemplate conn = new JdbcTemplate(engine);
List table_names = conn.query(""select table_name from schema_tables where schema_value= ? "", new Object[]{schema_value}, new BeanPropertyRowMapper(List.class));
return table_names;
}"
11426,"Set up SQL (query title column in books table based on $author$), use $conn$ to execute SQL and get all query results, use for loop to iterate through all query results, print ""Search result:"" and 'title' field of each data. If the list is empty, return the rendered ""error.html"" with the parameter message ""Sorry"". Otherwise, return the rendered ""all_book_results.html"" page and the list which stores the query results with parameter of books_list.","public String bookResults(JdbcTemplate conn,String author, Model model){
List books_list = conn.query(""select title from books where author = ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
for (Object book : books_list) {
System.out.println(book);
}
if (books_list.isEmpty()){
model.addAttribute(""message"",""Sorry"");
return ""error.html"";
}
else {
model.addAttribute(""books_list"",books_list);
return ""all_book_results.html"";
}
}"
13305,"Use $conn$ to execute SQL (query the pokemon_id column in the sightings table according to $order_by$), get all the data, use for loop to convert each item of the query result into dict, and store it in list, and then return the list.","public List getTopPokemon(JdbcTemplate conn,String order_by){
List list = conn.query(""select pokemon_id from sightings where order_by= ?"", new Object[]{order_by}, new BeanPropertyRowMapper(List.class));
List pokemons = new ArrayList();
for (Object r : list) {
pokemons.add(r);
}
return pokemons;
}"
14175,"Set the SQL statemen: Query all the columns in the french_wordlist through $student$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$ to get all the data. Set the assertion to determine whether the length of the execution result is greater than 0, and return all the execution results.","public List listWordList(JdbcTemplate conn,String student){
List result = conn.query(""select * from french_wordlist where student = ?"", new Object[]{student}, new BeanPropertyRowMapper(List.class));
assert result.size()>0;
return result;
}"
13501,"""Get the database engine through $localhost$. Execute the SQL statement (query the adj_open column in the stock_data table according to $id$) and get all the data. Use for loop to convert the 0th, 1st, and 2nd elements of each item of the query result into the values corresponding to the 'id', 'adj_open', and 'adj_close' keys in dict respectively, and store them in list. Return the list converted to json.","public JSONArray stockData(DataSource localhost, String id){
JdbcTemplate engine = new JdbcTemplate(localhost);
List data = engine.query(""select adj_open from stock_data where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
JSONArray newdata = new JSONArray();
for (Object datum : data) {
JSONObject json = new JSONObject();
json.put(""id"",JSONObject.parseObject(datum.toString()).get(0));
json.put(""adj_open"",JSONObject.parseObject(datum.toString()).get(1));
json.put(""adj_close"",JSONObject.parseObject(datum.toString()).get(2));
newdata.add(json);
}
return newdata;
}"
11254,"Try to get the database enginevia $host$ and establish a connection, where the echo parameter is True, execute the SQL statement (get all columns in datas based on $date$) and get all the data and return the obtained result. Print the exception if an exception occurs during execution, and finally make sure the connection is closed.","public List addBatchOperInfos(DataSource host, String date){
try {
JdbcTemplate connection = new JdbcTemplate(host);
List res = connection.query(""select * from datas where date= ? "", new Object[]{date}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13990,"Set the SQL statement: Query the user_id data in the users table where user_name is $name$, and execute the SQL statement with $conn$ to get all the data. Try to set the assertion to determine the length of the execution result to 0. Finally make sure $conn$ is closed.","public void testMorerollbackOffConn(JdbcTemplate conn,String name){
List result = conn.query(""select user_id from users where user_name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
try {
assert result.size()==0;
}catch (Exception e){
e.printStackTrace();
}
}"
11362,Use $conn$ to execute SQL (query all query results for the dest column in the flights table based on $minutes$) and use for loop to print the data one by one.,"public void main(JdbcTemplate conn,String minutes){
List query = conn.query(""select dest from flights where minutes= ?"", new Object[]{minutes}, new BeanPropertyRowMapper(List.class));
for (Object i : query) {
System.out.println(i);
}
}"
14096,"""Use the java expression to set the SQL statement: Query the data in the $tconfig$ table whose id is $item_id$, and use $conn$ to execute SQL to get all the data and return it.","public List query(EntityManager conn, Root<Object> tconfig, String item_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tconfig).where(cb.equal(tconfig.get(""id""),item_id));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
13195,"Execute the SQL with $conn$ (get all the columns in the transactions where the name of list is $listname$) , get all the data, and finally return the rendered ""transactions.html"" with the list parameter as the result of the query.","public String transactionsList(JdbcTemplate conn,String listname,Model model){
List list = conn.query(""select * from transactions where listname= ?"", new Object[]{listname}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""list"",list);
return ""transactions.html"";
}"
13444,"If $data$ is not None, then use $conn$ to execute the SQL (get the queue column in the Task table based on $data$) and get all the data. Use for loop to store each item of the query results as list and return it.","public List selectQueue(JdbcTemplate conn,String data){
if (data!=null){
List Tasks = conn.query(""select queue from task where data = ?"", new Object[]{data}, new BeanPropertyRowMapper(List.class));
return Tasks;
}else {
return null;
}
}"
13587,"Set up SQL based on the java expression (query the 'table' column in the $Customer$ table based on $id$).  connect the database according to $engine$, execute SQL, get all the data, and return the result of executing the statement.","public List testCoreReuseStmt(EntityManager engine, Root<Object> Customer, String id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Customer).where(cb.equal(Customer.get(""id""),id));
List<Object> row = engine.createQuery(cq).getResultList();
return row;
}"
13862,Use the $conn$ connection to execute the SQL statement (query the first piece of isbn data in reviews based on $userid$). Return the query result.,"public List revBook(JdbcTemplate conn,String userid){
List bookrs = conn.query(""select isbn from reviews where userid = ?"", new Object[]{userid}, new BeanPropertyRowMapper(List.class));
return bookrs;
}"
11356,",""Use $conn$ to execute SQL (query all columns in the CHECKIN table based on $humidity$), get the first row of data, and return the data.","public Object main(JdbcTemplate conn,String humidity){
List adder = conn.query(""select * from checkin where humidity = ?"", new Object[]{humidity}, new BeanPropertyRowMapper(List.class));
return adder.get(0);
}"
11394,"Use $conn$ to execute SQL (query all columns in the get_users table based on $full_name$), get the first row of data, and return the query results.","public List insertData(JdbcTemplate conn,String full_name){
List users = conn.query(""select * from get_users where full_name = ?"", new Object[]{full_name}, new BeanPropertyRowMapper(List.class));
return users;
}"
11566,Query all columns in the dataSST table with date_use as $date_use$ through $conn$ and get all the data. Use for loop iterate through the query result and print it.,"public void getGrapXMLdata(JdbcTemplate conn,String date_use){
List results = conn.query(""select * from datasst where date_use = ?"", new Object[]{date_use}, new BeanPropertyRowMapper(List.class));
for (Object r : results) {
System.out.println(r);
}
}"
13661,"Create the database engine where memory is $memory$. Start a connection . Execute the SQL represented by the java expression using the join (get all columns in $t_ccs$ where project_id is $project_id$) and get all the data. Finally, set assertion to judge that the length of the query result is not 0.","public void testSelect(EntityManager memory, Root<Object> t_ccs, String project_id){
CriteriaBuilder cb = memory.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(t_ccs).where(cb.equal(t_ccs.get(""project_id""),project_id));
List<Object> rows = memory.createQuery(cq).getResultList();
assert rows.size()!=0;
}"
13731,"Try to set up sql (query all the information in the database table based on $engine$ and $session$), use $conn$ to execute SQL and get all the query results. If the query results are not empty, use for loop to convert each of the query results to dict, store in list and return. If an Exception is caught, print the exception. Finally, close the connection.","public List getSubsetData(JdbcTemplate conn,String engine,String session){
try {
List rows = conn.query(""select * from database where engine = ? and session = ?"", new Object[]{engine,session}, new BeanPropertyRowMapper(List.class));
if (!rows.isEmpty()){
return rows;
}else {
return null;
}
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11280,"""Execute SQL via $conn$ (get all the columns in the events_entity_id based on $entity_id$) and get all the data, convert the 0th element of each item of the query result into list, further set the assertion list content length to 2, and finally return the list content.","public List testInputMinDate(JdbcTemplate conn,String entity_id){
List r = conn.query(""select * from events_entity_id where entity_id= ?"", new Object[]{entity_id}, new BeanPropertyRowMapper(List.class));
List rows = new ArrayList();
for (Object x : r) {
rows.add(JSONObject.parseObject(x.toString()).get(0));
}
assert rows.size()==2;
return rows;
}"
11339,"If the request method is ""POST"" and $session$ does not get the data 'logged_in', use $conn$ to execute SQL (query the longitude column in the ZIPCODE table according to $zip$), get the first row of data and return. Otherwise, return the rendered 'checked.html' page.","public Object weather(HttpRequest request, JdbcTemplate conn, String zip, HttpSession session){
if (request.getMethod().equals(""POST"")){
if (session.getAttribute(""logged_in"")!=null){
List lat = conn.query(""select longitude from zipcode where zip = ?"", new Object[]{zip}, new BeanPropertyRowMapper(List.class));
return lat;
}
else {
return ""checked.html"";
}
} else {
return ""checked.html"";
}
}"
11483,"Set up SQL (query all the information in the flights table based on $date$), execute SQL with $conn$ and get all the query results. Return the rendered ""index.html"" page with the flights parameter as the query results.","public String selectRes(JdbcTemplate conn,String date, Model model){
List flights = conn.query(""select * from flights where date = ?"", new Object[]{date}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"",flights);
return ""index.html"";
}"
11592,"Set the SQL statement (query all columns in the customers table where email is $email$), use $db_conn$ to execute the query statement (where the email parameter is email), get all the data, convert the query results to list form and return.","public List existeEmail(JdbcTemplate db_conn,String email){
List query = db_conn.query(""select * from customers where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
return query;
}"
13978,ed_tx_id in the pde_trades table and get all the data. For loop iterates through the execution result and returns the 0th element of the execution result.,"public Object countTradingTxs(JdbcTemplate conn){
List result_set = conn.query(""select count(requested_tx_id) from pde_trades"", new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(result_set.get(0).toString()).get(0);
}"
13567,"Get the database engine through $DB_CONNECT_STRING$, where the parameter max_overflow is set to 5. Execute the SQL statement (query the profileurl column in the people_profile table according to $username$), get all the data, and use for loop to print each piece of the query result.","public void initialProfiles(DataSource DB_CONNECT_STRING, String username){
JdbcTemplate engine = new JdbcTemplate(DB_CONNECT_STRING);
List results = engine.query(""select profileurl from people_profile where username= ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
for (Object r : results) {
System.out.println(r);
}
}"
13079,Use $connection$ to execute SQL (query the title in the books table based on $isbn$) and get the first piece of data. Return the query results after being processed by jsonify.,"public JSONArray isbnApi(JdbcTemplate connection,String isbn){
List api_response = connection.query(""select title from books where isbn =?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(api_response.toString());
}"
13098,Use $conn$ to execute SQL (query fake_stuff in the _fake_table table) and get all the data. Return the query results.,"public List testExplode(JdbcTemplate conn){
List values = conn.query(""select fake_stuff from _fake_table"", new BeanPropertyRowMapper(List.class));
return values;
}"
13257,""", make the connection using $engine$. Execute the SQL statement (select the drinkerID column in the drinkers where name is $name$) and fetch all the data. Return None if the result set is None, and return None if the result set is dictionary type.","public List findDrinker(DataSource engine, String name){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select drinkerid from drinkers where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
return results;
}
}"
13579,"If $field$ has a value, use $conn$ to execute SQL (query all columns in the books table based on $field$), get all the query results, and return the rendered 'search.html', where parameter books is the query result.","public String search(JdbcTemplate conn,String field,Model model){
List resultBooks = conn.query(""select * from books where field = ?"", new Object[]{field}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"",resultBooks);
return ""search.html"";
}"
13861,"""Use $conn$ connection, get all columns in the users table through $username$ and $password$ and get all the data. If the number of rows of the query results is not 0, render and return 'success.html', where the message parameter is 'YES'; render and return 'success.html', where the message parameter is 'NO'.","public String registration(JdbcTemplate conn, String username, String password,Model model){
List res = conn.query(""select * from users where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
model.addAttribute(""message"",""NO"");
}else {
model.addAttribute(""message"",""YES"");
}
return ""success.html"";
}"
11144,"Execute SQL with $conn$ (query title in file according to where id is $id$) and get all the data. Render and return to 'index.html', where the titles parameter is the result of the query.","public String index(JdbcTemplate conn, String id,Model model){
List infor_title = conn.query(""select title from file where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""titles"",infor_title);
return ""index.html"";
}"
11578,"Through the $conn$ connection, use ORM method to execute the SQL statement (query the first piece of data in the $Country$ table according to $noc$), set the assertion to determine that the length of the returned result is not 0, and return the queried data.","public Object getValue(EntityManager conn, Root<Object> Country, String noc){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Country).where(cb.equal(Country.get(""noc""),noc));
List<Object> outputs = conn.createQuery(cq).getResultList();
assert outputs.size()!=0;
return outputs.get(0);
}"
13174,"""Execute the SQL (get all the columns in the users where the name of user is $username$ and password is $password$) with $conn$ and get all the data, then print each item of the query results using the for loop.","public void checkLogin(JdbcTemplate conn,String username,String password){
List results = conn.query(""select * from users where username = ? and password=?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
for (Object item : results) {
System.out.println(item);
}
}"
11382,"Use the format string matching method to set SQL (query all columns in the home_list table based on $id$), and execute SQL according to $conn$. If the data is queried, return all the obtained data.","public List selectAllData(JdbcTemplate conn,String id){
List res = conn.query(""select * from home_list where id=?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
13897,Use the java expression to set up the SQL statement: Query the name data in the $clientes$ table based on $clienteid$. Use the $conn$ connection to execute the SQL statement to get all the data and return it.,"public List changeSaldo(EntityManager conn, Root<Object> clientes, String clienteid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(clientes).where(cb.equal(clientes.get(""clienteid""),clienteid));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
14102,"Get the database engine and establish a connection through $engine_auth$. Use the connected object to create a cursor object , set the SQL statement: Query the Field data in the table table whose Type is $m_type$, execute SQL to get the first piece of data, and return the obtained data.","public List selectRes(DataSource engine_auth, String m_type){
JdbcTemplate conn = new JdbcTemplate(engine_auth);
List res = conn.query(""select Field from table where Type= ? "", new Object[]{m_type}, new BeanPropertyRowMapper(List.class));
return res;
}"
13303,"""Use $conn$ to execute SQL (query all columns in the flights table based on $id$), get all the query results, and return the rendered ""flights.html"" page, where the flights parameter is assigned to the queried data.","public String flights(JdbcTemplate conn,String id,Model model){
List flights = conn.query(""select * from flights where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"",flights);
return ""flights.html"";
}"
14199,"If the request module sends a request by post, execute SQL via $conn$ (query all columns in books by $author$ and use the % operator to match the conditions in the SQL string) and get all the data. For loop iterates through all the obtained data, prints, and returns all the obtained data.","public List search(HttpRequest request, JdbcTemplate conn, String author){
if (request.getMethod().equals(""POST"")){
List data = conn.query(""select * from books where author= ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
for (Object x : data) {
System.out.println(x);
}
return data;
} else {
return null;
}
}"
13687,"In ORM, execute SQL using $session$ (query all information in the $BoltwoodSQL$ where timestamp is $dt$). Convert all executed query results to DataFrame. If the empty attribute of the transformed data is True, return None. Otherwise, close $session$ and return the processed data.","public List before(EntityManager session, Root<Object> BoltwoodSQL, String dt){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(BoltwoodSQL).where(cb.equal(BoltwoodSQL.get(""timestamp""),dt));
List<Object> data = session.createQuery(cq).getResultList();
if (data.isEmpty()){
return null;
}
else {
return data;
}
}"
13384,"Execute SQL through $conn$ (query the review column in the reviewtable table according to $isbn$) and get all the query results. If the query result length is 1, return True; otherwise, return False.","public boolean bookreviewFunc(JdbcTemplate conn,String isbn){
List review_return = conn.query(""select review from reviewtable where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (review_return.size()==1){
return true;
}else {
return false;
}
}"
13825,"Try to use $conn$ to query the the first piece of message with lastname as $lastname$ in the $User$ table and return the query results. If Exception occurs, print the exception message.","public List getValue(EntityManager conn, Root<Object> User, String lastname){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""lastname""),lastname));
List<Object> output = conn.createQuery(cq).getResultList();
return output;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13297,"Try the following code: set the SQL (get the name column in $categories_table$ where the id of category is $category_id$) in a java expression. Execute the SQL with $conn$ and get all the data. If an exception occurs, return directly after outputting the specific exception information.","public List getSource(EntityManager conn, Root<Object> categories_table, String category_id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(categories_table).where(cb.equal(categories_table.get(""categoryID""),category_id));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11377,"Set up sql (query all the information in the passengers table based on $flight_id$), use $conn$ to execute SQL and get all the query results. Return the rendered ""flights.html"", where the parameter passenger_detail is the query result.","public String flights(JdbcTemplate conn,String flight_id, Model model){
List passenger_detail = conn.query(""select * from passengers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (passenger_detail.isEmpty()){
return null;
}
else {
model.addAttribute(""passenger_detail"",passenger_detail);
return ""flights.thtml"";
}
}"
11033,Use $conn$ to execute SQL (query the schema information in the DataFrame table based on $options$) and get all the data. Store the 0th element of each item in the query result into list and return.,"public List chunksize(JdbcTemplate conn,String options){
List schemas = conn.query(""select schema from dataframe where options= ?"", new Object[]{options}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object alpha : schemas) {
list.add(JSONObject.parseObject(alpha.toString()).get(0));
}
return list;
}"
14093,"""Connect to the database according to $engine$. Set SQL: Query the City data in Bars through $bar$, execute SQL to get the first piece of data, and return None if the query result is empty; otherwise, return the query result in dictionary form.","public List findBar(DataSource engine, String bar){
JdbcTemplate con = new JdbcTemplate(engine);
List result = con.query(""select city from bars where bar = ? "", new Object[]{bar}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
11095,"If $id$ is not None, use $conn$ to execute SQL (query the username in the jam_people table based on $id$) and get all the data. If the query result is not an empty string, return the query result.","public List fillUsernamePeople(JdbcTemplate conn,String id){
if (id!=null){
List username = conn.query(""select username from jam_people where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (!username.isEmpty()){
return username;
}else {
return null;
}
}else {
return null;
}
}"
11279," connect to the database by $create_db_engine$, execute SQL (get all the columns in DATABASE based on $db_name$), get all the data, and finally return the query result.","public List getDb(DataSource create_db_engine, String db_name){
JdbcTemplate conn = new JdbcTemplate(create_db_engine);
List res = conn.query(""select * from DATABASE where db_name= ? "", new Object[]{db_name}, new BeanPropertyRowMapper(List.class));
return res;
}"
14070,"""Use the $conn$ to get that connection and query the first piece data of origin,destination and duration from the flights table. Use for loop traversal to query the results, print the query results in the form of ""{flight.origin} to {flight.destination} duration {flight.duration}"", and return the query results.","public List main(JdbcTemplate conn){
List flights = conn.query(""select origin, destination, duration from flights"", new BeanPropertyRowMapper(List.class));
for (Object flight : flights) {
JSONObject json = JSONObject.parseObject(flight.toString());
System.out.println(json.getString(""origin"")+"" to ""+json.getString(""destination"")+"" duration ""+json.getString(""duration""));
}
return flights;
}"
13806,"""Execute SQL through $conn$ connection (query all columns in the Data table through $year$) and get all thedata. For each item in the for loop, convert the 0th element to key and the 1st element to int type as value into the dictionary. Use jsonify to return the contents of the dictionary.","public JSONArray nationalInfo(JdbcTemplate conn,String year){
List data16 = conn.query(""select * from data where year= ?"", new Object[]{year}, new BeanPropertyRowMapper(List.class));
JSONArray data_dict = new JSONArray();
for (Object data : data16) {
JSONObject json = new JSONObject();
JSONObject jsonObject = JSONObject.parseObject(data.toString());
json.put(jsonObject.get(0).toString(),jsonObject.get(1));
data_dict.add(json);
}
return data_dict;
}"
13180,"Execute the SQL (get the pg_relation_size in the pg where name is $name$) with $conn$ and get all the data, return None if the query result is false, and finally return the result of the SQL statement.","public List getTableSize(JdbcTemplate conn,String name){
List result = conn.query(""select pg_relation_size from pg where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
11321,"Get the database engine through $db_string$. Execute the SQL statement (query all thecolumns in the sistema table according to $vendas$), get all the data, and return the query results.","public List getVendas(DataSource db_string, String vendas){
JdbcTemplate engine = new JdbcTemplate(db_string);
List ven = engine.query(""select * from sistema where vendas = ? "", new Object[]{vendas}, new BeanPropertyRowMapper(List.class));
return ven;
}"
13246,"Use java expressions to set the SQL (query all columns of $Customer$ where id is $id$, get the database connection with $engine$, execute the SQL based on the connection, get the first data, and return the result of the query.","public Object selectValue(EntityManager engine, Root<Object> Customer, String id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Customer).where(cb.equal(Customer.get(""id""),id));
List<Object> reses = engine.createQuery(cq).getResultList();
return reses.get(0);
}"
13472,Use $engine$ to connect to the database and then execute the SQL (get all the columns in the mark table with id as $video_id$) and get all the data. Then use for loop to print each item of the query results and finally close the connection.,"public void getExperienceVideoId(DataSource engine, String video_id){
JdbcTemplate con = new JdbcTemplate(engine);
List result = con.query(""select time from comments where summary = ? "", new Object[]{video_id}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}"
13273,"Set the SQL using a java expression: query all the columns in $items$ with $mid$. Execute the SQL statement with $conn$ and get all the data, close the database connection, and return the data.","public List getSource(EntityManager conn, Root<Object> items, String mid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(items).where(cb.equal(items.get(""mid""),mid));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}"
11129,"Set the SQL statement (use the format () function format string to get all the columns in a volcano_data by $full_db$) , execute the SQL statement with $conn$ to get all the data, render and return 'raw_data.html', where the data parameter is the result of the query.","public String dbPush(JdbcTemplate conn,String full_db, Model model){
List full_dbs = conn.query(""select * from volcano_data where data= ?"", new Object[]{full_db}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""data"",full_dbs);
return ""raw_data.html"";
}"
14017,"Use $con$ to get all the columns in the Drinker table, get all the data, convert each item of the query result to dict, store it as list, and return.","public List getDrinkers(JdbcTemplate con){
List rs = con.query(""select * from drinker"", new BeanPropertyRowMapper(List.class));
return rs;
}"
11691,"Execute SQL with $db$ (get the lokaatioID column in the havainto table according to $id$), get the first piece of data, and then use for loop to print each item of the query result.","public void taydenna(JdbcTemplate db,String id){
List testi = db.query(""select lokaatioID from havainto where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object t : testi) {
System.out.println(t);
}
}"
14117,"Create a cursor object with $conn$ and use the cursor to execute the SQL statement: Query the value information in the userdata table based on $m_series$. Use for loop to iterate through all the obtained data, print the 0th element of each item in the query result, store it in list and return the list content.","public List getData(DataSource conn, String m_series){
JdbcTemplate cur = new JdbcTemplate(conn);
List list = cur.query(""select value from userdata where series = ? "", new Object[]{m_series}, new BeanPropertyRowMapper(List.class));
List data = new ArrayList();
for (Object row : list) {
System.out.println(JSONObject.parseObject(row.toString()).get(0));
data.add(JSONObject.parseObject(row.toString()).get(0));
}
return data;
}"
11525," connect to the database based on the begin() method of $engine$. Execute the query statement: get all columns in users based on $team$ and get all data. Use for loop iterate through the query results, taking each team and name and printing them.","public void selectValue(DataSource engine, String team){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select * from users where team = ? "", new Object[]{team}, new BeanPropertyRowMapper(List.class));
for (Object row : res) {
String team1 = JSONObject.parseObject(row.toString()).getString(""team"");
String name = JSONObject.parseObject(row.toString()).getString(""name"");
System.out.println(team1+name);
}
}"
11554,"""Use $engine$ to connect to the database. Execute SQL statement: query all columns in drinkers table through $phone$ and get all data. Convert query result to dict, store it as list and return it.","public List getDrinkers(DataSource engine, String phone){
JdbcTemplate conn = new JdbcTemplate(engine);
List rs = conn.query(""select * from drinkers where phone = ? "", new Object[]{phone}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13031,",Use java expressions to set up SQL (query the user_name in the $users$ table based on $email$ and $password_hash$). Use $conn$ to execute SQL. Return the judgment result that the rowcount property of the execution result is equal to 1.","public boolean createUser(EntityManager conn, Root<Object> users, String email,String password_hash){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""email""),email));
cq.select(users).where(cb.equal(users.get(""password_hash""),password_hash));
List<Object> res = conn.createQuery(cq).getResultList();
return res.size()==1;
}"
13435,"Use $url$ to get the database engine and connect to the database, then execute the SQL (get all columns in the schools table based on $name$) and get all the data. Then close the connection and finally return the query results.","public List testDialectInitUsesOptions(DataSource url, String name){
JdbcTemplate conn = new JdbcTemplate(url);
List schools = conn.query(""select * from schools where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return schools;
}"
13217,"""If the request method is 'GET', execute the SQL statement (query all the columns in the check_in_list table where the checker_id is $user_id$ and check_zipcode is $zipcode$) using $conn$ and get all the data. Return the result of executed SQL statement. Otherwise, return to the rendered ""check_in_error.html"".","public Object selectValue(HttpRequest request, JdbcTemplate conn, String user_id, String zipcode){
if (request.getMethod().equals(""GET"")){
List results = conn.query(""select * from check_in_list where checker_id = ? and check_zipcode = ?"", new Object[]{user_id,zipcode}, new BeanPropertyRowMapper(List.class));
return results;
} else {
return ""check_in_error.html"";
}
}"
13388,"""Set SQL based on the java expression (query the parsed_obj column in the $slivers$ table based on $sliver_urn$). Execute SQL through $conn$ and get the first piece of data. Return False if the query result is empty; otherwise, return the query result.","public Object getSliverObj(EntityManager conn, Root<Object> slivers, String sliver_urn){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(slivers).where(cb.equal(slivers.get(""sliver_urn""),sliver_urn));
List<Object> rows = conn.createQuery(cq).getResultList();
if (rows.isEmpty()){
return false;
}else {
return rows.get(0);
}
}"
13504,"Get the database engine and establish a connection through $sqlite$. Set up the SQL statement (query all the columns in the Alltypes table according to $parm$), execute sql, get all the data, close the connection, and return the query result converted to json.","public JSONArray getState(DataSource sqlite, String parm){
JdbcTemplate conn = new JdbcTemplate(sqlite);
List data = conn.query(""select * from Alltypes where parm= ? "", new Object[]{parm}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(data.toString());
}"
13951,"""Execute the SQL statement through the $conn$ connection: Query all the rating in the reviews table based on the $book_id$. Get the length of the query result. If the length of the query result is not 0, use for loop to traverse the query result, print it and return the length of the query result.","public int booksApi(JdbcTemplate conn,String book_id){
List reviews = conn.query(""select rating from reviews where book_id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
int review_count = reviews.size();
if (review_count!=0){
for (Object row : reviews) {
System.out.println(row);
}
}
return review_count;
}"
13464,"Use $db_uri$ to get the database engine and connect to the database, then execute SQL (get all columns in the lights table based on $i_id$) and get all the data. Then close the connection and finally return the query results.","public List setUp(DataSource db_uri, String i_id){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List results = conn.query(""select * from lights where i_id = ? "", new Object[]{i_id}, new BeanPropertyRowMapper(List.class));
return results;
}"
13970,"""Set the SQL statement: Query the table_name in the information_schema table with 'table_schema': $table_schema$. Use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","public List getTableListFromDb(JdbcTemplate conn,String table_schema){
List table_names = conn.query(""select table_name from information_schema where table_schema = ?"", new Object[]{table_schema}, new BeanPropertyRowMapper(List.class));
return table_names;
}"
11640,"""Use $db$ to execute SQL (get 'a' column in the anon_1 table according to $label$) and get all the data. If the query result is not None, return the query result.","public List deprecated(JdbcTemplate db,String label){
List deps = db.query(""select a from anon_1 where label= ?"", new Object[]{label}, new BeanPropertyRowMapper(List.class));
if (deps.isEmpty()){
return null;
}else {
return deps;
}
}"
13902,"""Use $from_connection$ and the java expression to execute SQL: Get all the data in the $from_table$ table and store the obtained data as list. If the length of list content exists, retun the list content.","public List selectFile(EntityManager from_connection, Root<Object> from_table){
CriteriaBuilder cb = from_connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(from_table);
List<Object> table_data = from_connection.createQuery(cq).getResultList();
if (table_data.isEmpty()){
return null;
}
else {
return table_data;
}
}"
11648,"Use $conn$ to execute SQL based on the java expression (get the description column in the $Youtube$ table where url is $url$), get all the data, close the $conn$ connection, and finally return the query result.","public List<Object> getDesc(EntityManager conn, Root<Object> Youtube, String url){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Youtube).where(cb.equal(Youtube.get(""url""),url));
List<Object> desc = conn.createQuery(cq).getResultList();
return desc;
}"
14160,"Use $dbraw_engine$ to connect to the database and execute the SQL statement: Query all the columns in the world table with 'id' of $wid$, get the first piece of data, close the database connection and return the obtained data.","public List getRandomWorldSingleRaw(DataSource dbraw_engine, String wid){
JdbcTemplate connection = new JdbcTemplate(dbraw_engine);
List result = connection.query(""select * from world where id = ? "", new Object[]{wid}, new BeanPropertyRowMapper(List.class));
return result;
}"
11506,",Use $conn$ to execute SQL statement (get the first piece of year_occur in traffic_tbl table). Use for loop iterate the query result and print it. Use jsonify to return the query result.","public JSONArray queryInfo(JdbcTemplate conn){
List results = conn.query(""select year_occur from traffic_tbl"", new BeanPropertyRowMapper(List.class));
for (Object row : results) {
System.out.println(row);
}
return JSONObject.parseArray(results.toString());
}"
13393,"""Set SQL based on the java expression (query the hits column in the $url_domain$ table based on the condition that domain is $udomain$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","public List<Object> addDomain(EntityManager conn, Root<Object> url_domain, String udomain){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(url_domain).where(cb.equal(url_domain.get(""domain""),udomain));
List<Object> recs = conn.createQuery(cq).getResultList();
return recs;
}"
13539,"""Get the database engine through $url$, and the echo parameter is True,  get a connection. Execute the SQL statement (query all the columns in the DATABASE table according to $mtime$), get all the data, and return the query results.","public List resetDatabase(DataSource url, String mtime){
JdbcTemplate c = new JdbcTemplate(url);
List res = c.query(""elect * from DATABASE where mtime= ? "", new Object[]{mtime}, new BeanPropertyRowMapper(List.class));
return res;
}"
11086,"Use $conn$ to execute SQL (query all columns in the users_tl table based on $username$ and $password$). If the number of rows in the query result is 0, return the rendered ""loginfail.html"". Otherwise, return the rendered ""index.html"".","public String login(JdbcTemplate conn,String username,String password){
List result_u = conn.query(""select * from users_tl where username=? and password=?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (result_u.isEmpty()){
return ""index.html"";
}else {
return ""loginfail.html"";
}
}"
13493,Use $url$ to get the database and use raw_connection method to connect to the data and execute SQL through cursor method (get column 'a' in the travisci_mysql table based on $c$) and get all the data. Finally print the query results.,"public void testCsvMysqlLoad(DataSource url, String c){
JdbcTemplate conn = new JdbcTemplate(url);
List res = conn.query(""select a from travisci_mysql where c = ? "", new Object[]{c}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}"
13588,"""Use $conn$ to execute SQL (query the ball column in the users table according to $username$) and get all the query results. If the result is empty, return the rendered ""result.html"" page; otherwise, return the rendered ""result.html"" page, where the parameter result is 'Error!'.","public String register(JdbcTemplate conn, String username, Model model){
List check = conn.query(""select ball from users where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (check.isEmpty()){
return ""result.html"";
}else {
model.addAttribute(""result"",""Error!"");
return ""result.html"";
}
}"
13117,"""Execute SQL with $conn$ (get the Bar column in the Bar_table where Bar is $b$) and get all the data, return None if the query result is None, and finally convert each item of the query result to a dictionary type using a for loop and return the dictionary content.","public List findBarHelper(JdbcTemplate conn,String b){
List rs = conn.query(""select bar from bar_table where bar= ?"", new Object[]{b}, new BeanPropertyRowMapper(List.class));
if (rs.isEmpty()){
return null;
}else {
return rs;
}
}"
13660,Execute the SQL (based on all columns in the flights where flight_id is $flight_id$) using $db$ and get all the data. Convert each item in the query result to dict and return.,"public List flights(JdbcTemplate conn,String flight_id){
List fs = conn.query(""select * from flights where flight_id= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (fs.isEmpty()){
return null;
}else {
return fs;
}
}"
11053,"Use $conn$ to execute SQL (query the timestamp_id in the calibration_original table based on $calibration_value$) and get all the data. If the query result is None, the ""Error"" information is printed. Otherwise, return the query result.","public List calibrationCore(JdbcTemplate conn,String calibration_value){
List timestamp = conn.query(""select timestamp_id from calibration_original where calibration_value= ?"", new Object[]{calibration_value}, new BeanPropertyRowMapper(List.class));
if (timestamp.isEmpty()){
System.out.println(""Error"");
return null;
}else {
return timestamp;
}
}"
14217,"Execute the SQL statement through $conn$: Query all email and password from the users table. Use for loop traversal to query the results and print them, and finally return all the query results.","public List searchBooks(JdbcTemplate conn){
List results = conn.query(""select email,password from users"", new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
for (Object items : results) {
System.out.println(items);
}
return results;
}
}"
14266,"Use $connection$ to execute the SQL statement (query all id, origin, destination, duration in the flights table), return None if the length of the query result is 0; otherwise, return the query result.","public List main(JdbcTemplate conn){
List flights = conn.query(""select id, origin, destination, duration from flights"", new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
return null;
}else {
return flights;
}
}"
13187,Use $con$ to connect to the database and execute the SQL (get all the columns in a tableParam where tableParam is $tableParam$) to get the first data and return the result of the query.,"public List insert(DataSource con, String tableParam){
JdbcTemplate conn = new JdbcTemplate(con);
List res = conn.query(""select * from tableParam where tableParam= ? "", new Object[]{tableParam}, new BeanPropertyRowMapper(List.class));
return res;
}"
11436,"Set up SQL (query the password column in the users table based on $username$), execute SQL with $conn$ and get all the query results. Usw for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List getUser(JdbcTemplate conn,String username){
List results = conn.query(""select password from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
List passwords = new ArrayList();
for (Object i : results) {
passwords.add(i);
}
return passwords;
}"
11454,"Use string splicing to set up SQL (query the income column in the customers table based on $customerid$), execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List selectUserSaldo(JdbcTemplate conn,String customerid){
List results = conn.query(""select income from customers where customerid = ?"", new Object[]{customerid}, new BeanPropertyRowMapper(List.class));
List incomes = new ArrayList();
for (Object i : results) {
incomes.add(i);
}
return incomes;
}"
13245,"""Set up the SQL (query all columns of $QuestionAnswer$ where question is $question$) using a java expression and fetch all the data. SQL statements are executed with $conn$ in looping conditions, and the 'anwser' for each item of data is stored in a list. Finally, the generated result is returned.","public List selecValue(EntityManager conn, Root<Object> QuestionAnswer, String question){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(QuestionAnswer).where(cb.equal(QuestionAnswer.get(""question""),question));
List<Object> rows = conn.createQuery(cq).getResultList();
List res = new ArrayList();
for (Object row : rows) {
res.add(JSONObject.parseObject(row.toString()).getString(""answer""));
}
return res;
}"
14101,"""Use $conn$ to query all the columns in the books table, get all the data, render and return ""books.html"", where the books parameter is the query result.","public String books(JdbcTemplate conn,Model model){
List books = conn.query(""select * from books"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"", books);
return ""books.html"";
}"
13075,Use $conn$ to execute SQL (query all columns in realtime_bus based on $stopid$ under the condition that the% operator matches the string). Return the results of querying all data after execution.,"public List getLastOrder(JdbcTemplate conn,String stopid){
List results = conn.query(""select * from realtime_bus where stopid= ?"", new Object[]{stopid}, new BeanPropertyRowMapper(List.class));
return results;
}"
13631,"Set SQL (query all columns in the Pays table where TransactionId is $t$, Name is $drinker$, and Bar is $bar$). Execute SQL with $conn$ and get all the data. Return None if the query result is None. Otherwise, convert each item in the query result to type dict and return.","public List findPays(JdbcTemplate conn,String t,String drinker,String bar){
List rs = conn.query(""select * from pays where transactionid=? and name=? and bar=?"", new Object[]{t, drinker, bar}, new BeanPropertyRowMapper(List.class));
if (rs.isEmpty()){
return null;
}else {
return rs;
}
}"
11150,"""Connect to the database using $mysql$ and create the cursor object using the cursor () method. Execute the SQL (query all columns in the call_list table where articles is $articles$) and get all the data. If the query result is greater than 0, then render and return 'articles.html', where the articles parameter is the result of the query. Otherwise, render and return 'articles.html', where the msg parameter with content 'No Articles Found'.","public String articles(DataSource mysql, String articles,Model model){
JdbcTemplate cur = new JdbcTemplate(mysql);
List information = cur.query(""select * from call_list where articles= ? "", new Object[]{articles}, new BeanPropertyRowMapper(List.class));
if (information.isEmpty()){
model.addAttribute(""msg"", ""No Articles Found"");
return ""articles.html"";
}else {
model.addAttribute(""articles"", information);
return ""articles.html"";
}
}"
11665,"Use $cursor$ to execute SQL (get all the columns in the tbl table according to $id$), asynchronously use for loop to convert each item of the query result to a list type, and finally return the query result.","public List getTable(JdbcTemplate cursor,String id){
List c = cursor.query(""select * from tbl where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List ret = new ArrayList();
for (Object i : c) {
ret.add(i);
}
return ret;
}"
13071,"""In the case of async, use $conn$  to get the connection. Use the connection to execute the SQL (query all columns in the tbl) and get all the data. Use for loop to store the query data in list and return it.","public List testPool(JdbcTemplate conn){
List c = conn.query(""select * from tbl"", new BeanPropertyRowMapper(List.class));
List ret = new ArrayList();
for (Object i : c) {
ret.add(i);
}
return ret;
}"
13609,"""Set SQL: query the bot_speak information in the 'Table' where question is $question$. Execute SQL with $conn$ and get the first data. Finally, return the query results.","public Object selectQuestion(JdbcTemplate conn,String question){
List speaks = conn.query(""select bot_speak from Table where question = ?"", new Object[]{question}, new BeanPropertyRowMapper(List.class));
Object speak = speaks.get(0);
return speak;
}"
11518,"Use the $conn$ connection to execute the query statement : Query the first piece of element in the tokens table based on $bid$, use for loop iterate through the query results, and return the 0th element of the query results.","public Object tokenInitTx(JdbcTemplate conn,String bid){
List resultSets = conn.query(""select element from tokens where bid = ?"", new Object[]{bid}, new BeanPropertyRowMapper(List.class));
Object resultSet = resultSets.get(0);
return JSONObject.parseObject(resultSet.toString()).get(0);
}"
13706,"Use $conn$ to execute SQL (query all columns in the books table based on $isbn$) and get the first piece of data. If the query result is None, use the jsonify method to return {""error"": ""book not found""}. Otherwise, store the title, author and year in the query results in the values corresponding to the corresponding keywords in the dictionary. Finally, return the serialized dictionary.","public Object flightApi(JdbcTemplate conn,String isbn){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
Object book = books.get(0);
if (books.isEmpty()){
JSONObject json = new JSONObject();
json.put(""error"", ""book not found"");
return json;
}else {
JSONObject jsonObject = JSONObject.parseObject(book.toString());
JSONObject json = new JSONObject();
json.put(""title"", jsonObject.getString(""title""));
json.put(""author"", jsonObject.getString(""author""));
json.put(""year"", jsonObject.getString(""year""));
return json;
}
}"
11305,",Use $conn$ to execute SQL (query the first row of data in the Column table based on $column$) and return the data.","public Object testContainsDoesntCompile(JdbcTemplate conn,String column){
List rows = conn.query(""select * from column where column = ?"", new Object[]{column}, new BeanPropertyRowMapper(List.class));
Object row = rows.get(0);
return row;
}"
13320,"Get the database engine and establish a connection through $SQLALCHEMY_TEST_DATABASE_URI$. Execute the SQL statement (query all the columns in the users table according to $FOREIGN_KEY$), get all the data, and return the query results.","public List manualTest(DataSource SQLALCHEMY_TEST_DATABASE_URI, String FOREIGN_KEY){
JdbcTemplate engine = new JdbcTemplate(SQLALCHEMY_TEST_DATABASE_URI);
List values = engine.query(""select * from users where foreign_key= ? "", new Object[]{FOREIGN_KEY}, new BeanPropertyRowMapper(List.class));
return values;
}"
13674,"""Get the cursor using $connection$, and use the cursor to execute SQL (query all the columns in pillar where user is $user$ and pwd is $pwd$) and get all the data. Close the cursor and connection and return the result of the query using a serialization method.","public JSONArray get(DataSource connection, String user,String pwd){
JdbcTemplate cursor = new JdbcTemplate(connection);
List result = cursor.query(""select * from pillar where user=? and pwd=? "", new Object[]{user,pwd}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(result.toString());
}"
13770,""" connect the database according to $db_engine$. Execute SQL (query all columns in the DATABASE table based on $db_name$), get the first piece of data, and return the query result.","public List<Object> dropDb(DataSource db_engine, String db_name){
JdbcTemplate conn = new JdbcTemplate(db_engine);
List assy = conn.query(""select * from database where db_name =? "", new Object[]{db_name}, new BeanPropertyRowMapper(List.class));
return assy;
}"
11372,"""Set sql (query all columns in the ROLLBACK_TEST table according to $session$), use $conn$ to execute SQL and get the first row of data, and return the judgment of whether the query result is 0 or not.","public boolean supportsTransactions(JdbcTemplate conn,String session){
List counts = conn.query(""select COUNT from ROLLBACK_TEST where session = ?"", new Object[]{session}, new BeanPropertyRowMapper(List.class));
return counts.size()==0;
}"
13198,"Execute SQL (get the hair column in the universities where name is $name$) with $conn$, get the first data, then print the query results and return the rendered 'courses.html', where the university parameter is the result of the query.","public String supportsTransactions(JdbcTemplate conn,String name,Model model){
List university = conn.query(""select hair from universities where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(university);
model.addAttribute(""university"", university);
return ""courses.html"";
}"
13611,"Set SQL: when values are $value$, query all the columns in the Table. Execute the SQL using $db$ and get all the data. Print each item in the query result using a for loop.","public void searchval(JdbcTemplate db,String value){
List result = db.query(""select * from Table where values = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
for (Object entry : result) {
System.out.println(entry);
}
}"
13410,"Try to use $conn$ to execute SQL based on the java expression (get the tax_id column in the $table_gi_taxid_nuc$ table with gi as $gi$) and get all the data, then use for loop to store each item of the query result as list, return the list contents, and finally make sure the $conn$ connection is closed""","public List getSource(EntityManager conn, Root<Object> table_gi_taxid_nuc, String gi){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_gi_taxid_nuc).where(cb.equal(table_gi_taxid_nuc.get(""gi""),gi));
List<Object> results = conn.createQuery(cq).getResultList();
List res = new ArrayList();
for (Object taxid : results) {
res.add(taxid);
}
return res;
}finally {
return null;
}

}"
13451,"Use $engine$ to connect to the data, then execute the SQL based on the java expression (get all the columns in the $table$ table with timestamp between $begin_timestamp$ and $end_timestamp$) and get all the data. Use for loop to store each item of the query results as list. Further close the connection and finally return the contents of the list.","public List coreQueryData(EntityManager engine, Root<Object> table, String begin_timestamp,String end_timestamp){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.between(table.get(""table""), begin_timestamp, end_timestamp));
List<Object> rows = engine.createQuery(cq).getResultList();
List res = new ArrayList();
for (Object row : rows) {
res.add(row);
}
return res;
}"
13796,"""Execute SQL with $conn$ (query the destination column in the flights table according to $origin$), get all the data, use for loop to traverse the query results, store the 0th element of each article in list, and return the list.","public List main(JdbcTemplate conn,String origin){
List flights = conn.query(""select destination from flights where origin = ?"", new Object[]{origin}, new BeanPropertyRowMapper(List.class));
List flight_list = new ArrayList();
for (Object i : flights) {
flight_list.add(JSONObject.parseObject(i.toString()).get(0));
}
return flight_list;
}"
13882,"""Get the database engine and establish the connection through $db_uri$. Set the SQL statement to: Query all columns in the DATABASE table based on $name$, execute the SQL statement to get all the data. Make sure $conn$ is closed and print all the query results.","public void tearDown(DataSource db_uri, String name){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List res = conn.query(""select time froselect * from database where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}"
13852,"If the request module sends the request as post, use the $conn$ connection to execute the SQL: Get all the columns in $books_review$ based on $id$ and get all the data. If the query result is not empty, return the query results; otherwise, render and return ""book.html"".","public Object review(HttpRequest request, JdbcTemplate conn, String id){
if (request.getMethod().equals(""POST"")){
List check_usr_review = conn.query(""select * from books_review where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (check_usr_review.isEmpty()){
return null;
}
else {
return check_usr_review;
}
} else {
return ""book.html"";
}
}"
11186,"""Set the SQL statement to: query all data where value is $value$ in $groupType$, use a java expression, and execute the query statement over a $conn$ connection. Use the for loop to traverse the query results, print machine and group information in the query results.","public void arePart(EntityManager conn, Root<Object> groupType, String value){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(groupType).where(cb.equal(groupType.get(""value""),value));
List<Object> groupl = conn.createQuery(cq).getResultList();
for (Object o : groupl) {
JSONObject jsonObject = JSONObject.parseObject(o.toString());
System.out.println(jsonObject.getString(""machine"")+jsonObject.getString(""group""));
}
}"
14025,",Create cursors with $conn$ and use cursors to execute SQL statements: Get all the columns from the wemoveUser table and get all the data. Make sure the cursor and $conn$ are closed and return all query result.","public List handler(DataSource conn){
JdbcTemplate engine = new JdbcTemplate(conn);
List res = engine.query(""select * from wemoveuser "", new BeanPropertyRowMapper(List.class));
return res;
}"
13580,"""Set SQL based on the java expression (query the Machine column in the $machine$ table whose id is $uuid$). Execute SQL through $session$, get all the data and close the connection. Return True, if there is a result and the length is 1; otherwise, return False.","public boolean inventoryExists(EntityManager session, Root<Object> machine, String uuid){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(machine).where(cb.equal(machine.get(""id""),uuid));
List<Object> result = session.createQuery(cq).getResultList();
if (result.isEmpty()){
return false;
}
else {
return true;
}
}"
13590,"Try to use $conn$ to execute SQL (query the day column in the flights table based on $id$), get all the data, and return the query results. If an Exception occurs during execution, the exception is printed.","public List book(JdbcTemplate conn,String id){
try {
List res = conn.query(""select day from flights where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14283,"Set the SQL statement and the content is as follows: Query all columns from the url_list table and use $conn$ to execute SQL to get the first piece of data. Return -1 if the execution result is empty; otherwise, return the execution result.","public Object getURL(JdbcTemplate conn){
List ret = conn.query(""select * from url_list"", new BeanPropertyRowMapper(List.class));
if (ret.isEmpty()){
return -1;
}else {
return ret;
}
}"
14137,"Execute SQL statement via $session$ connection: Query all OAuth in test_factory table based on $flask_env$, close $session$ connection and return all query results.","public List getrec(JdbcTemplate session,String flask_env){
List res = session.query(""select OAuth from test_factory where flask_env= ?"", new Object[]{flask_env}, new BeanPropertyRowMapper(List.class));
return res;
}"
13059,",Use the acquire method of $engine$  to get the connection. Use java expressions to set SQL (query the name information in the $users$ table when id is $uID$). Use the connection to execute the SQL and return after getting the first piece of data.","public Object user(EntityManager engine, Root<Object> users, String uID){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""id""),uID));
List<Object> old_recs = engine.createQuery(cq).getResultList();
return old_recs.get(0);
}"
14108,"Connect to the database through $engine$ and use the java expression to set up the SQL statement: Query the data in $bm$ and execute SQL to get all the data. If the query resulst exist, return the last element of the query results; otherwise, return 0.","public Object getData(EntityManager engine, Root<Object> bm){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(bm);
List<Object> result = engine.createQuery(cq).getResultList();
if (result.isEmpty()){
return result.get(-1);
}
else {
return 0;
}
}"
13276,Execute the SQL statement (query all the columns in the Restaurant) with $conn$ and return after getting all the data. Close $conn$ and return the result of executing the SQL statement.,"public List search(JdbcTemplate conn){
List results = conn.query(""select * from restaurant"", new BeanPropertyRowMapper(List.class));
return results;
}"
13396,"Execute SQL through $conn$ (query the description column in the 'table' table according to $id$), get all the data, use for loop to convert each item of the query result into dict, store it into list, and return the list.","public List getCommonWords(JdbcTemplate conn,String id){
List descriptions = conn.query(""select description from table where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return descriptions;
}"
11219,"Use $url$ to get the database engine by the way of ORM, further get the Session object and set the autocommit parameter to True. Execute the SQL (query the $Person$ table based on $name$), get the first column of data, and finally return the result of the execution statement.","public List<Object> stuff(EntityManager url, Root<Object> Person, String name){
CriteriaBuilder cb = url.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Person).where(cb.equal(Person.get(""name""),name));
List<Object> p = url.createQuery(cq).getResultList();
return p;
}"
13826,"Use $conn$ to create the cursor by the cursor() method. If the request module sends the request as post, set the SQL (query all columns in services through $status$), execute the SQL statement to get all the data. Close the cursor, render and return ""marketplace.html"", where the res parameter is the result of the query.","public Object marketplace(HttpRequest request, JdbcTemplate conn, String status,Model model){
if (request.getMethod().equals(""POST"")){
List res = conn.query(""select * from services where status = ?"", new Object[]{status}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""res"", res);
return ""marketplace.html"";
} else {
return null;
}
}"
13930,"Execute the SQL statement with the $conn$ connection: Query all the name column in the passengers table where flight_id is $flight_id$, print the query results, store each element of the query results as list and return.","public List flight(JdbcTemplate conn,String flight_id){
List passengers_table = conn.query(""select name from passengers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
System.out.println(passengers_table);
return passengers_table;
}"
13449, connect to the database through $engine$ and execute the SQL (get the description column in the Customer table based on $id$) and get all the data. Finally return the query results.,"public List testCoreFetchmanyWStreaming(DataSource engine, String id){
JdbcTemplate conn = new JdbcTemplate(engine);
List results = conn.query(""select description from customer where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return results;
}"
13792,"Connect the database with $db$, set up SQL (query all columns in the deadlock_users table based on $user_id$ and $name$), execute SQL, get all the data, close the connection, and return the data.","public List testRollbackDeadlock(DataSource db, String user_id,String name){
JdbcTemplate conn1 = new JdbcTemplate(db);
List uesrs = conn1.query(""select * from deadlock_users where user_id = ? and name = ?"", new Object[]{user_id,name}, new BeanPropertyRowMapper(List.class));
return uesrs;
}"
11661,"Use $db$ to execute SQL (get the Name column processed by the counting method in the tracks table according to $name$), get all the data, and then use for loop to print each item in the query result.","public void findNameNum(JdbcTemplate db,String name){
List result = db.query(""select count(Name) from tracks where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object i : result) {
System.out.println(i);
}
}"
14130,"""Connect to the database through $engine$ , try to query all the columns in m_table and get all the data. For loop iterates through the queried information and prints. If an Exception occurs, print the exception message.","public void connectTable(DataSource engine){
try {
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select * from m_table "", new BeanPropertyRowMapper(List.class));
for (Object item : result) {
System.out.println(item);
}
}catch (Exception e){
e.printStackTrace();
}
}"
13936,"""Execute SQL through the $conn$ connection: Query all the columns in the zips table based on the $zipcode$ and get all the data. Use for loop to store each element in the query result into list, take out the 0th element of the list content, render and return ""locations.html"", where the results parameter is the 0th element of the list content.","public String location(JdbcTemplate conn,String zipcode,Model model){
List query_results = conn.query(""select * from zips where zipcode= ?"", new Object[]{zipcode}, new BeanPropertyRowMapper(List.class));
List results = new ArrayList();
for (Object row : query_results) {
results.add(row);
}
Object result = results.get(0);
model.addAttribute(""results"", result);
return ""locations.html"";
}"
11573,"Use $conn$ to execute SQL: Query the first 'name' in the books table based on $bk_id$. If the query result is empty, render and return ""error.html"", where the message parameter is ""No such book.; otherwise, render and return ""book_info.html"", where the book parameter is the query result.","public String bookInfo(JdbcTemplate conn,String bk_id,Model model){
List books = conn.query(""select name from books where bk_id = ?"", new Object[]{bk_id}, new BeanPropertyRowMapper(List.class));
Object book = books.get(0);
if (books.isEmpty()){
model.addAttribute(""message"",""No such book."");
return ""error.html"";
}else {
model.addAttribute(""book"",book);
return ""book_info.html"";
}
}"
11116,"Execute SQL (query the ratings data in the reviewtable with $isbn$) using the $conn$ connection and get the number of rows of data. If the number of rows obtained is not 0, all data is queried and the rendered ""review.html"" is returned with the review parameter as the result of the query.","public String userReview(JdbcTemplate conn,String isbn,Model model){
List review = conn.query(""select ratings from reviewtable where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
int count = review.size();
if (review.isEmpty()){
return null;
}else {
model.addAttribute(""review"",review);
return ""review.html"";
}
}"
13212," connect to the database where the engine is $engine$. Execute the SQL statement (query all columns in the Customer) using the database connection and get all the data. If no data is obtained, False is returned, otherwise return True .","public boolean getCustomer(DataSource engine){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select * from customer "", new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return false;
}else {
return true;
}
}"
13697,"Set SQL: query all columns in the factura where total is $valor_total$ and the id of user is $id_user$. Execute the SQL using $db$ and get all the query data. Finally, return the query results.","public List confirmed(JdbcTemplate db,String valor_total,String id_user){
List datas = db.query(""select * from factura where total=? and id_user=? "", new Object[]{valor_total,id_user}, new BeanPropertyRowMapper(List.class));
return datas;
}"
11543,"Set the SQL statement to: Get all the columns in orderItem based on $orderId$, match the conditions in the SQL string using the % operator, use the $conn$ connection to execute the SQL to get all the data and return the query results.","public List getOrderItems(JdbcTemplate db,String orderId){
List execStr = db.query(""select * from orderitem where orderid =? "", new Object[]{orderId}, new BeanPropertyRowMapper(List.class));
return execStr;
}"
11139,"Try to use $conn$ to query any DISH_PRICE in the dish where the ID of DISH is $DISH_ID$, and return all results. If an exception occurs, print 'fail'.","public List setDishPriceByDishId(JdbcTemplate conn,String DISH_ID){
try {
List gui = conn.query(""select DISH_PRICE from dish where DISH_ID=? "", new Object[]{DISH_ID}, new BeanPropertyRowMapper(List.class));
return gui;
}catch (Exception e){
System.out.println(""fail"");
return null;
}
}"
13924," connect the database according to $engine$. Use the java expression to set the SQL statement (query the data in the $regressions$ table according to $regression_id$), execute SQL and get all the data. If the execution result exists, return the 0th element of the execution result; otherwise, return None.","public Object getRegression(EntityManager engine, Root<Object> regressions, String regression_id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(regressions).where(cb.equal(regressions.get(""uregression_idrl""),regression_id));
List<Object> vs = engine.createQuery(cq).getResultList();
if (vs.isEmpty()){
return null;
}
else {
return vs.get(0);
}
}"
11458,"Set SQL based on the java expression: (query all columns in $users$ table based on $name$). Execute SQL with $conn$ and get all the data, use for loop to convert each item of query result to dict, print and return ""b"".","public Object getSource(EntityManager conn, Root<Object> users, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""name""),name));
List<Object> result = conn.createQuery(cq).getResultList();
for (Object row : result) {
System.out.println(row);
}
return ""b"";
}"
11091,"""Use $conn$ to execute SQL (query the amount of data in the events table when table_name is $hash_cohort$) and get the first piece of data. Set the assertion to determine the number of query results to 1. Finally, return the data.","public Object testEmptyOutput(JdbcTemplate conn,String hash_cohort){
List count_ts = conn.query(""select count(*) from events where table_name= ?"", new Object[]{hash_cohort}, new BeanPropertyRowMapper(List.class));
assert count_ts.size()==1;
return count_ts.get(0);
}"
11468,"Set up SQL (query all the information in the books table based on $isbn$), use $conn$ to execute the SQL and get all the query results. Return the query results converted to json format.","public JSONArray selectValue(JdbcTemplate conn,String isbn){
List data = conn.query(""select * from books where isbn =?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(data.toString());
}"
14094,"If the request module sends the request in a post method, use the $conn$ connection to execute SQL: To get all the columns in the users table based on the $username$ and get all the data. If the query result is empty, render and return ""error.html""; if not, use redirect to return ""/"". If the request module sends the request not in a post way, render and return""login.html"".","public Object query(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List result = conn.query(""select * from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return ""error.html"";
}
else {
return ""/"";
}
} else {
return ""login.html"";
}
}"
11466,"Get the database engine via $test_pymysql$ and use 'with' statement to establish a connection. Set up the SQL (query all the columns in the tbl table based on $val$), and execute the SQL, use for loop to iterate through to get the cursor of the execution result. Convery 'keys' and 'value' of each piece of data into tuple, zip and dict, and stor in a list. Use for loop to iterate through the list and print 'id' and 'val' of each piece of data. Finally, close the connection.","public void selectValue(DataSource test_pymysql, String val){
JdbcTemplate conn = new JdbcTemplate(test_pymysql);
List vals = conn.query(""select * from tbl where val = ? "", new Object[]{val}, new BeanPropertyRowMapper(List.class));
for (Object row : vals) {
System.out.println(JSONObject.parseObject(row.toString()).getString(""id"")+JSONObject.parseObject(row.toString()).getString(""val""));
}
}"
13538,"Try to use $conn$ to execute SQL (query all the columns in the 'tables' table where user_id is $id$), get all the data and print. If a SQLAlchemyError exception occurs during execution, print the exception converted to a string and convert the dictionary whose 'status' is 200 and 'message' is ""OK"" to json and return.","public JSONObject adoptPet(JdbcTemplate conn,String id){
try {
List res = conn.query(""select * from tables WHERE user_id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}catch (Exception e){
e.printStackTrace();
}
JSONObject jsonObject = new JSONObject();
jsonObject.put(""status"", 200);
jsonObject.put(""message"", ""ok"");
return jsonObject;
}"
13843,"Set up the SQL statement (get all columns in books based on $isbn$ and $title$), execute the SQL statement through the $conn$ connection. If the number of rows of the query results is 0, render and return ""error.html"". Get all the data, render and return ""results.html"", where the result of the books parameter is all the data obtained.","public String getBooks(JdbcTemplate conn,String isbn,String title,Model model){
List books = conn.query(""select * from books where isbn = ? and title = ?"", new Object[]{isbn,title}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""books"", books);
return ""results.html"";
}
}"
14114,"Use the $connection$ connection to execute the SQL statement: Query all the columns in the books table and get all the data. Set the assertion to determine that the length of the query result is greater than 1 and render and return ""books.html"", where the books parameter is the query result.","public String getBooks(JdbcTemplate connection,Model model){
List books = connection.query(""select * from books "", new BeanPropertyRowMapper(List.class));
assert books.size()>1;
model.addAttribute(""books"", books);
return ""books.html"";
}"
11540,Use $conn$ connection to execute SQL statement: Get all columns in station based on $id$ and get all data. Store the 0th element of each item of the query result as list and return it.,"public List stations(JdbcTemplate conn,String id){
List stations = conn.query(""select * from station where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List stations2 =new ArrayList();
for (Object i : stations) {
stations2.add(JSONObject.parseObject(i.toString()).get(0));
}
return stations2;
}"
11612,"Use $db$ to execute SQL (get the isbn column in the books table based on $title$ and $author$), get all the data, and return the rendered ""home.html"", where the result parameter is the query result.","public String search(JdbcTemplate db,String title,String author,Model model){
List all_isbn = db.query(""select isbn from books where title=? and author=?"", new Object[]{title,author}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""result"", all_isbn);
return ""home.html"";
}"
11522,"Through $conn$ connection, set up the SQL statement using the java expression (query all q data in the $t1$ table based on $column$), execute the SQL statement to get the data and return all the query results.","public List<Object> tesGetInfo(EntityManager conn, Root<Object> t1, String column){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(t1).where(cb.equal(t1.get(""column""),column));
List<Object> info = conn.createQuery(cq).getResultList();
return info;
}"
11183,"Set the SQL statement to get all the columns in orderdetail where the id of order is $orderid$, execute the SQL statement to get all the data through the $conn$ connection, and store each query result item as a dict in a list and return.","public List getDetalleHistorial(JdbcTemplate conn,String orderid){
List moviedata = conn.query(""select * from orderdetail where orderid= ?"", new Object[]{orderid}, new BeanPropertyRowMapper(List.class));
return moviedata;
}"
11199,",Execute SQL (query the first data in $BLOG$ where TITLE is $TITLE$) using ORM through a $conn$ connection to return the 0th element of the query result.","public Object selectRes(EntityManager conn, Root<Object> BLOG, String TITLE){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(BLOG).where(cb.equal(BLOG.get(""TITLE""),TITLE));
List<Object> rows = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(rows.get(0).toString()).get(0);
}"
11304,Use $conn$ to execute the java expression (get all the columns in the $hash_table$ table based on $addonid$) and try to get all the data. Finally ensure that the database connection is closed.,"public Object hashesExists(EntityManager conn, Root<Object> hash_table, String addonid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(hash_table).where(cb.equal(hash_table.get(""addonid""),addonid));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
11407,"Set up the SQL (query the id column in the book table based on $user_id$), execute the SQL based on $conn$ and get all the query result, close the connection, and return the data.","public List selectBook(JdbcTemplate conn,String user_id){
List ids = conn.query(""select id from book where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return ids;
}"
13414,"Use $conn$ to execute the SQL (get the book_name column in the books table based on $id$) and get all the data. If the obtained result is not None, then return the rendered ""error.html"", and finally return the rendered ""book.html"", where the book_names parameter is the data obtained by executing the SQL.","public String book(JdbcTemplate conn,String id,Model model){
List book_names = conn.query(""select book_name from books where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (book_names.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""book_names"", book_names);
return ""book.html"";
}
}"
13869," connect to the database based on $engine$. Set SQL statement: Query all columns in the drinkers table with name as $name$ and execute SQL to get all the data. If the query result is empty, return None; otherwise return the query results in the form of the dictionary.","public List findDrinker(DataSource engine, String name){
JdbcTemplate con = new JdbcTemplate(engine);
List result = con.query(""select * from drinkers where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
11104,"Set up the SQL using a java expression (query the value in $table$ according to $col$), execute the SQL using $conn$ and get all the data. Store the 0th element of each item of the query result as a list and return.","public List values(EntityManager conn, Root<Object> table, String col){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""col""),col));
List<Object> reccol = conn.createQuery(cq).getResultList();
List result = new ArrayList();
for (Object x : reccol) {
result.add(JSONObject.parseObject(x.toString()).get(0));
}
return result;
}"
11309,"If the data request method is POST, use $conn$ to execute SQL (query all data in the 'request' column of the POST table based on $check_password_hash$ and $check_password_hash$), store the query result as list and return. Otherwise, return the rendered ""login.html"" page.","public Object login(HttpRequest request, JdbcTemplate conn, String check_password_hash){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select request from post where check_password_hash = ?"", new Object[]{check_password_hash}, new BeanPropertyRowMapper(List.class));
for (Object row : rows) {
return row;
}
} else {
return ""login.html"";
}
return ""login.html"";
}"
13072,"Use $conn$ to execute SQL (query all columns in the detail table based on $host$). Get all query results, print and return.","public List dbhost(JdbcTemplate conn,String host){
List rs = conn.query(""select * from detail where host= ?"", new Object[]{host}, new BeanPropertyRowMapper(List.class));
System.out.println(rs);
return rs;
}"
13489,"Use the cursor method of $connection$ to execute the SQL (get all columns in the user table based on $id$) and get all the data. Then close the cursor method, close the database connection and finally print the query results.","public void databaseForSqliteSelect(DataSource connection, String id){
JdbcTemplate cursor = new JdbcTemplate(connection);
List values = cursor.query(""select * from user where id =? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(values);
}"
11122,"Open the given book.csv file, read each item of data in the file through a for loop, then execute the SQL query statement using the $conn$ connection (when the author equals each item of data read, get the corresponding title in the books) and get all the data. Print the query result at last.","public List queryDb(JdbcTemplate conn){
List list = new ArrayList();
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String author = sc.nextLine();
List texts = conn.query(""select title from books where author= ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
System.out.println(texts);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
return list;
}"
13250,"Set SQL (query the number of eligible rows in the table where name is $name$) , execute SQL with $conn$ to get all the data and return the 0th of the query results.","public Object selectCount(JdbcTemplate conn,String name){
List results = conn.query(""select count(*) from table where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
11651,Use the $engine$ to connect the database and execute SQL (get the name column in the Beers table where id is $bid$) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return.,"public List findBeersname(DataSource engine, String bid){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select name from Beers where id= ? "", new Object[]{bid}, new BeanPropertyRowMapper(List.class));
return results;
}"
11176,"Try to connect to the database with $engine$, execut SQL (get all of the weather_info where temp_min is $temp_min$ and temp_max is $temp_max$) to convert each query result into a dict store as a list and return.","public List queryPage(DataSource engine, String temp_min,String temp_max){
try {
JdbcTemplate connection = new JdbcTemplate(engine);
List res_data = connection.query(""select temp from weather_info where temp_min=? and temp_max=? "", new Object[]{temp_min,temp_max}, new BeanPropertyRowMapper(List.class));
return res_data;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14190,Create the database engine and connect via $localhost$. Execute the SQL statement (query the number of all columns in the pg_database table based on $datname$) to get the first piece of data and return the obtained data.,"public List sqlImport(DataSource localhost, String datname){
JdbcTemplate conn = new JdbcTemplate(localhost);
List value = conn.query(""select count(*) from pg_database where datname = ? "", new Object[]{datname}, new BeanPropertyRowMapper(List.class));
return value;
}"
13178,"Try to use $conn$ to execute SQL (get all the columns in the table where message is $message_te$) , get all the data, return the query results, and print an exception if an exception occurs during execution.","public List init(JdbcTemplate conn,String message_te){
try {
List res= conn.query(""select * from table where message_te= ?"", new Object[]{message_te}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14289,Execute the SQL statement through $con$ (query the first event_name and event_date in the events table where id is $id$) and return the query results.,"public List getEventName(JdbcTemplate conn,String id){
List ret = conn.query(""select event_name, event_date from events where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return ret;
}"
14065,"Connect to the database according to $engine$. Set up the SQL query statement: Query the number of all columns in lookup_schema, execute SQL to get the first piece of data, and use for loop traversal to query the results and print.","public List geoiRun(DataSource engine){
JdbcTemplate con = new JdbcTemplate(engine);
List row_counts = con.query(""select count(*) from lookup_schema "", new BeanPropertyRowMapper(List.class));
for (Object row : row_counts) {
System.out.println(row);
}
return row_counts;
}"
13210,"Set up SQL statements using java expressions and execute SQL statements using $conn$ (query hash column in $source_file$ according to $filehash$), obtain all the data and return.","public List<Object> getSource(EntityManager conn, Root<Object> source_file, String filehash){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(source_file).where(cb.equal(source_file.get(""filehash""),filehash));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}"
14290,"Use ORM method to execute the SQL statement through the $con$ connection: Query all the data in the $Friend$ table where a right_id is $right_id$, and use for loop traversal to query the results, print them, and return all the query results.","public List<Object> updateFriendTable(EntityManager con, Root<Object> Friend, String right_id){
CriteriaBuilder cb = con.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Friend).where(cb.equal(Friend.get(""right_id""),right_id));
List<Object> result = con.createQuery(cq).getResultList();
for (Object friend : result) {
System.out.println(friend);
}
return result;
}"
13478,"""Use $conn$ to execute SQL (get all columns in the ic_item table with _id as $item_id$) and get all the data. If the query result is true, return True.","public boolean getItem(JdbcTemplate conn, String item_id){
List items = conn.query(""select * from ic_item where _id = ?"", new Object[]{item_id}, new BeanPropertyRowMapper(List.class));
if (items.isEmpty()){
return false;
}else {
return true;
}
}"
13248,"Execute SQL (query all columns in book) with $conn$ to get all the data. Returns ""display.html"" after rendering, of which the argument books is the result of the query.","public String search(JdbcTemplate conn, Model model){
List books = conn.query(""select * from book"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"",books);
return ""display.html"";
}"
13790,"Set sql (query the model_id column in the model_metadata table based on $model_group_id$), execute the SQL with $conn$, get all the query results, use for loop to insert each item of the query result into list and return.","public List getModelsIds(JdbcTemplate conn,String model_group_id){
List query = conn.query(""select model_id from model_metadata where model_group_id = ?"", new Object[]{model_group_id}, new BeanPropertyRowMapper(List.class));
return query;
}"
11459,"Set SQL (query all the information in the books table based on id $book_id$), use $conn$ to execute SQL and get all the query results. If the query result is empty, return the rendered ""error.html"" page with the 'message' parameter: ""No such book exists here. Otherwise, return the rendered ""details.html"" page with the 'book' parameter book being the query result and 'rating' is the 'average_rating' field of the 0th data of the query result.","public String details(JdbcTemplate conn,String book_id, Model model){
List books = conn.query(""select * from books where id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
model.addAttribute(""message"",""No such book exists here."");
return ""error.html"";
}
else {
String rating = JSONObject.parseObject(books.get(0).toString()).getString(""average_rating"");
model.addAttribute(""rating"",rating);
model.addAttribute(""books"",books);
return ""details.html"";
}
}"
11542,"""Connect to the database through $engine$. Try to query all the columns in the tableDB table with name as $name$ and get all data, make sure the database connection is closed and return the query result. If an Exception exception occurs, print the exception message.","public List getInformation(DataSource engine, String name){
JdbcTemplate conn = new JdbcTemplate(engine);
try {
List query = conn.query(""select * from tabledb where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return query;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11221,Execute SQL via $conn$ (get all columns in the books table based on $search_criteria$) and get all the data. Close $conn$ and finally return the query result.,"public List testListenTargetsScope(JdbcTemplate conn,String search_criteria){
List res = conn.query(""select * from books where search_criteria= ?"", new Object[]{search_criteria}, new BeanPropertyRowMapper(List.class));
return res;
}"
11338,"Use $conn$ to execute SQL (query the first row of data in the Name table based on $NewName$ and $path$), close the connection, and return the data.","public Object renameTable(JdbcTemplate conn,String NewName,String path){
List files = conn.query(""select * from books where search_criteria= ?"", new Object[]{NewName,path}, new BeanPropertyRowMapper(List.class));
return files.get(0);
}"
13506,"If the request method is ""POST"", use $db$ to execute SQL (query the name column in the users table based on $password$), get all the query results, set the assertion to determine the query result length, and return the redirected 'login' page. Otherwise, return the redirected 'signupp' page.","public String signUp(HttpRequest request, JdbcTemplate db, String password){
if (request.getMethod().equals(""POST"")){
List login = db.query(""select name from users where password= ?"", new Object[]{password}, new BeanPropertyRowMapper(List.class));
assert login.size()>0;
return ""login"";
} else {
return ""signupp"";
}
}"
13940,"Set the SQL statement (get all the columns in the orderState table based on $orderId$), use the $conn$ connection to execute the SQL statement and get all the data. Convert each item of the query result to dict, store as list and return.","public List getOrderState(JdbcTemplate conn,String orderId){
List OrderStates = conn.query(""select * from orderstate where orderid = ?"", new Object[]{orderId}, new BeanPropertyRowMapper(List.class));
return OrderStates;
}"
13907,"Set the SQL statement and the content is as follows: Query all the columns in the generopeliculas table based on $categoria$ and executes SQL, use $conn$ to get all the data. Use for loop to store each element in the execution result in list and return the list.","public List getPelisEnCategoria(JdbcTemplate conn,String categoria){
List result = conn.query(""select * from generopeliculas where categoria = ?"", new Object[]{categoria}, new BeanPropertyRowMapper(List.class));
List peliscat = new ArrayList();
for (Object a : result) {
peliscat.add(a);
}
return peliscat;
}"
13093,"Use $conn$ to execute SQL (query stdin in copy_name) and get all the data. Finally, return the query results.","public List loaddata(JdbcTemplate conn){
List stdin_val = conn.query(""select stdin from copy_name"", new BeanPropertyRowMapper(List.class));
return stdin_val;
}"
14107,"Use $conn$ to query all columns in the flights table with an id of $flight_id$ and get the first piece of data. If the query result is empty, render and return ""error.html""; otherwise, return the query results.","public Object flight(JdbcTemplate conn,String flight_id){
List flights = conn.query(""select * from flights where id =?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
return ""error.html"";
}else {
return flights.get(0);
}
}"
13357,"Use $db$ to execute SQL (query all columns in the books table based on the condition that id is $book_id$) and get all the query results. If the length of the query results is not 1, return the rendered ""error.html"" page; otherwise, execute SQL (query all the columns in the reviews table for $book_id$), get all the query results, and return the rendered ""book.html"" page, where the parameter book_info is set to the 0th element of the first query result, and the parameter reviews is set to the second query result.","public String book(JdbcTemplate conn,String book_id,Model model){
List book_info = conn.query(""select * from books where id=?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
if (book_info.size()!=1){
return ""error.html"";
}else {
List reviews = conn.query(""select * from reviews where book_id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book_info"",book_info.get(0));
model.addAttribute(""reviews"",reviews);
return ""book.html"";
}
}"
13991,"If the request module sends the request as post, set the SQL (query all columns in books with 'title' as $search$) and uses $conn$ to execute the SQL to get all the data. If the result is null, return None; otherwise, render and return ""search.html"", where the books parameter is the execution result. If the request module sends the request in a way other than post, render and return ""index.html"".","public String books(HttpRequest request, JdbcTemplate conn, String search,Model model){
if (request.getMethod().equals(""POST"")){
List books = conn.query(""select * from books where title = ?"", new Object[]{search}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return null;
}
else {
model.addAttribute(""books"",books);
return ""search.html"";
}
} else {
return ""index.html"";
}
}"
11428," connect to the database based on $engine$. Set up the SQL (query the itemId column in the likes table based on 'drinkerId': $name$) and execute the SQL. Use for loop to iterate through all the obtained query results, insert the 'item' field of each piece of data into a list, and return the list.","public List getLikes(DataSource engine, String name){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select itemid from likes where drinkerid = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object row : rs) {
list.add(JSONObject.parseObject(row.toString()).getString(""item""));
}
return list;
}"
13984,"f the request module sends the request through POST, set the SQL statement: Query all the columns in the users table based on $email$, use $conn$ to execute SQL to get all the data and print. If the execution result is empty, return False; otherwise return True.","public boolean login(HttpRequest request, JdbcTemplate conn, String email){
if (request.getMethod().equals(""POST"")){
List results = conn.query(""select * from users where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return false;
}
else {
return true;
}
} else {
return false;
}
}"
13548,"Set up sql (query the weather column in the home_list table according to $id$), use $conn$ to execute SQL and get all the query results. If the data is obtained, print and return the query results.","public List selectDataById(JdbcTemplate conn,String id){
List res = conn.query(""select weather from home_list where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
System.out.println(res);
return res;
}
}"
11346,"Use $conn$ to execute SQL (query all the data in the message column of the username table based on $channel$), output the results of the query, take the data as the value of the dictionary 'message_uid' key and return with json format.","public JSONObject submitMessage(JdbcTemplate conn,String channel){
List result = conn.query(""select weather from home_list where id = ?"", new Object[]{channel}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
JSONObject json = new JSONObject();
json.put(""message_uid"",result);
return json;
}"
11559,"Open and read the books.csv file. Use for loop iterate through the read file, use the $conn$ connection to execute the SQL statement: query all columns in the books table based on $isbn$ and $title$ and get all the data and print the query results.","public void getBooks(JdbcTemplate conn){
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String isbn = sc.nextLine();
String title = sc.nextLine();
List vals = conn.query(""select * from books where isbn = ? and title = ?"", new Object[]{isbn,title}, new BeanPropertyRowMapper(List.class));
System.out.println(vals);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
14032," connect to the database according to $engine$. Execute the SQL statement: Query the first 'name' and manf data from the beers table, convert each item of the query result to dict, store it as list, and return.","public Object getBeers(DataSource engine, String summary){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select name, manf from beers "", new BeanPropertyRowMapper(List.class));
return rs.get(0);
}"
13092,"Try to execute the following code: Set up the SQL (query the id in users based on $username$ and $password$); use $conn$ to execute SQL and get the first piece of data and return the query results. If a ValueError exception occurs, return the rendered ""error.html"".","public Object reLogin(JdbcTemplate conn,String username,String password){
try {
List ids = conn.query(""select id from users where username=? and password=?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
return ids.get(0);
}catch (Exception e){
return ""error.html"";
}
}"
13768,"Set sql (query the isbn column in the books table based on $title$, $author$ and $year$), use $conn$ to execute SQL, get all the query results, and print them.","public void main(JdbcTemplate conn,String title,String author,String year){
List f = conn.query(""select isbn from books where title =? and author = ? and year = ?"", new Object[]{title,author,year}, new BeanPropertyRowMapper(List.class));
System.out.println(f);
}"
11556,"Set the SQL statement to get all the columns in the words table based on $id$, use $conn$ connection to execute the SQL to get all the data, and return all the obtained data.","public List selectValue(JdbcTemplate conn,String id){
List ret_value = conn.query(""select * from words where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return ret_value;
}"
11698,"Use the $engine$ to connect the database and execute SQL (get the key_word column in the 'table' table according to $key_id$), get the first piece of data, and finally return the query result.","public Object searchKey(DataSource engine, String key_id){
JdbcTemplate conn = new JdbcTemplate(engine);
List keys = conn.query(""select key_word from table where key_id=? "", new Object[]{key_id}, new BeanPropertyRowMapper(List.class));
return keys.get(0);
}"
11268,Use $con$ to execute SQL (get all columns in 'samples' based on $equation$) and get all the data. Close the $con$ connection and finally return the query result.,"public List selectValue(JdbcTemplate conn,String equation){
List res = conn.query(""select * from samples where equation= ?"", new Object[]{equation}, new BeanPropertyRowMapper(List.class));
return res;
}"
14220,"Execute the SQL statement through $conn$: Query file in structure table based on the $id$, get the first piece of data and return.","public Object file(JdbcTemplate conn,String id){
List res = conn.query(""select file from structure where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
11222,"Connect to the database via $engine$ and execute SQL (query all columns in the pool table based on $pool_pre_ping$), get all the data, and finally return the obtained result.","public List testPrePingDbStaysShutdown(DataSource engine, String pool_pre_ping){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select * from pool where pool_pre_ping= ? "", new Object[]{pool_pre_ping}, new BeanPropertyRowMapper(List.class));
return res;
}"
13366,"Use the ORM method and $conn$ to execute SQL (query all the information in the $Users$ table according to the condition that projid is $fr$,), get all the queried data, use for loop to traverse the index sequence of the query results, and output the data subscript and data.","public void select(EntityManager conn, Root<Object> Users, String fr){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Users).where(cb.equal(Users.get(""projid""),fr));
List<Object> users = conn.createQuery(cq).getResultList();
for(int i = 0;i<users.size();i++){
System.out.println(i+"" ""+JSONObject.parseObject(users.get(i).toString()));
}
}"
13001,"Use $conn$ to execute SQL (query the comments in the ratings table based on $isbn$) and get all the data. The default setting is False for the label of existing multiple data, and True for the label of existing multiple data if the query result length is greater than 1. Return the rendered ""bookpage.html"", where the row parameter is the 0th element of the query result, and the get_more parameter is the label of whether there are multiple pieces of data.","public Object bookPage(JdbcTemplate conn,String isbn,Model model){
List values = conn.query(""select comments from ratings where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
boolean get_more = false;
if (values.size()>1){
get_more = true;
}
model.addAttribute(""row"",values.get(0));
model.addAttribute(""get_more"",get_more);
return ""bookpage.html"";
}"
13307,"f the request method is' POST', set sql (query the entry_date column in the transaction table based on $comment$, $item$, $payer$, $amount$ and $status$), use $conn$ to execute SQL, get the first piece of data, and return the rendered 'transaction_form.html' page, where the date parameter should be assigned to the queried data.","public Object transactionEntry(HttpRequest request, JdbcTemplate conn, String comment, String item,String payer,String amount,String status,Model model){
if (request.getMethod().equals(""POST"")){
List entry_dates = conn.query(""select entry_date from transaction where comment=? and item=? and payer=? and amount=? and status=?"", new Object[]{comment,item,payer,amount,status}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""date"",entry_dates.get(0));
return ""transaction_form.html"";
} else {
return null;
}
}"
13039,"Try to use $conn$ to execute SQL (query iduser in the exis_table table) and get all the data. Convert each item of data in the query result to a dict type, store in list and return. If an exception occurs, return False.","public Object testAbort(JdbcTemplate conn){
try {
List res_information = conn.query(""select iduser from exis_table"", new BeanPropertyRowMapper(List.class));
return res_information;
}catch (Exception e){
return false;
}
}"
13281,"Execute SQL (get all the columns in the table) with $conn$, get all the data, and return.","public List searchRecords(JdbcTemplate conn){
List records = conn.query(""select * from table"", new BeanPropertyRowMapper(List.class));
return records;
}"
13216,"Get the database engine with $elephantsql$ and execute the SQL statement (query all columns in the Temperature_avg_table) . Convert all the data obtained to the DataFrame form, where the column name is the keys of the query result. Finally, the processed data is returned.","public List fineTemp(DataSource elephantsql, String summary){
JdbcTemplate db = new JdbcTemplate(elephantsql);
List df = db.query(""select * from temperature_avg_table "", new BeanPropertyRowMapper(List.class));
return df;
}"
11582,"Use the ORM method to execute the SQL statement through $session$: Query the first piece of data in the $Teams$ table based on $team_id$. Use the commit () method to update the data, make sure that $session$ is closed, and return the query results.","public Object getValue(EntityManager session, Root<Object> Teams, String team_id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Teams).where(cb.equal(Teams.get(""team_id""),team_id));
List<Object> outputs = session.createQuery(cq).getResultList();
return outputs.get(0);
}"
13086,Use $conn$ to execute SQL (query all columns in table based on $datum$) and get all the data. Return the query results.,"public List getOne(JdbcTemplate conn,String datum){
List rows = conn.query(""select * from table where datum= ?"", new Object[]{datum}, new BeanPropertyRowMapper(List.class));
return rows;
}"
13069,"""If $clause$ is not None, use $conn$ to execute SQL (query all columns in the table_name table when clause_string equals $clause$) and get all the data. Use for loop to convert the data to list and return.","public List getAll(JdbcTemplate conn,String clause){
if (clause!=null){
List table_names = conn.query(""select * from table_name where clause_string= ?"", new Object[]{clause}, new BeanPropertyRowMapper(List.class));
List table_l = new ArrayList();
for (Object i : table_names) {
table_l.add(i);
}
return table_l;
}else {
return null;
}
}"
13729,"If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the books table according to $isbn$), and get all the query results. If the query result length is less than 1, return the rendered ""apology.html"" page; otherwise, return the rendered ""results.html"" page and set the res parameter to the query result. If the request method is not ""POST"", return the rendered ""search.html"" page.","public Object search(HttpRequest request, JdbcTemplate conn, String isbn, Model model){
if (request.getMethod().equals(""POST"")){
List res = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return ""apology.html"";
}
else {
model.addAttribute(""res"",res);
return ""results.html"";
}
} else {
return ""search.html"";
}
}"
11014,"""Use $conn$ to execute the SQL (query all columns in the FRC_ALL_TRADES table based on $evdate$) and get all the data. Finally, return all the query results.","public List getAllTrades(JdbcTemplate conn,String evdate){
List result_all_trades = conn.query(""select * from frc_all_trades where evdate= ?"", new Object[]{evdate}, new BeanPropertyRowMapper(List.class));
return result_all_trades;
}"
13634,"If the request method is GET, return the rendered 'login.html'. Otherwise, use the java expression to set the SQL (query the id in the $users$ table where username is $username$ and password is $password$) . Use $db$ to execute the SQL and get the first data. Return the rendered 'search.html' and passe the query result to the result parameter.","public Object login(HttpRequest request, EntityManager db, Root<Object> users, String username,String password,Model model){
if (request.getMethod().equals(""GET"")){
return ""login.html"";
}
else {
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""username""),username));
cq.select(users).where(cb.equal(users.get(""password""),password));
List<Object> results = db.createQuery(cq).getResultList();
Object result = results.get(0);
model.addAttribute(""result"",result);
return ""search.html"";
}
}"
14156,"Execute SQL via $conn$: Query all columns in the books table and get the first piece of data. If the length of the obtained data is less than or equal to 0, return False; otherwise render and return ""booklist.html"", where the books parameter is the obtained data.","public Object bookSearch(JdbcTemplate conn, Model model){
List books = conn.query(""select * from books"", new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return false;
}
else {
model.addAttribute(""books"",books.get(0));
return ""booklist.html"";
}
}"
14030,Use $conn$ to query the first id statistic in the sightings table whose pokemon_id is $pokemon_id$ and return the pth element of the query result.,"public Object getTotalSpawnsCount(JdbcTemplate conn,String pokemon_id){
List result = conn.query(""select count(id) from sightings where pokemon_id = ?"", new Object[]{pokemon_id}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(result.get(0).toString()).get(0);
}"
11239,"Try to use $conn$ to execute SQL (get all the columns in the 'my_table' based on $Date$), get all the data, use for loop to store every item of queried data as list, and then return the list. If an exception occurs, return 500.","public Object postgresqlTrace(JdbcTemplate conn,String Date){
try {
List res = conn.query(""select * FROM my_table WHERE Date = ?"", new Object[]{Date}, new BeanPropertyRowMapper(List.class));
List result =new ArrayList();
for (Object item : res) {
result.add(item);
}
return result;
}catch (Exception e){
return 500;
}
}"
14140,Execute SQL statement via $conn$: Query all tablename in pg_tables table by $t$. For loop iterates through all query results and prints. Return all query results.,"public List get(JdbcTemplate conn,String t){
List tables = conn.query(""select tablename from pg_tables where t =?"", new Object[]{t}, new BeanPropertyRowMapper(List.class));
for (Object table : tables) {
System.out.println(table);
}
return tables;
}"
14110,"Use the java expression to execute the SQL statement through $conn$: Query the first Id in the $persons$ table where Name is $name$. If the query result is empty, return None, otherwise return the 0th element of the query result.","public Object getPersonId(EntityManager conn, Root<Object> persons, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(persons).where(cb.equal(persons.get(""name""),name));
List<Object> rows = conn.createQuery(cq).getResultList();
if (rows.isEmpty()){
return null;
}
else {
JSONObject firstRow = JSONObject.parseObject(rows.get(0).toString());
return firstRow.get(0);
}
}"
11433,"Use $conn$ to execute SQL (query the maximum value of the latest_date column in the account_latestfetchdate table) and get all the query results. If the query result is empty, or the 0th element of the query result is empty, return None, otherwise return the query result.","public List execute(JdbcTemplate conn){
List max_date = conn.query(""select max(latest_date) from account_latestfetchdate"", new BeanPropertyRowMapper(List.class));
if (max_date.isEmpty()){
return null;
}else {
return max_date;
}
}"
11558,"Use $conn$ connection to execute SQL statement (get all columns in frame_roundtrip based on $name$) and get all the data, convert query result into dict, store it as list and return it.","public List testRoundtrip(JdbcTemplate conn,String name){
List query = conn.query(""select * from frame_roundtrip where name =?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return query;
}"
13887,"Set up SQL statement: Query all columns in the record table through $prix$, $link$ and $id$. Use $conn$ connection to execute SQL statement to get all the data. Return the obtained data.","public List getUpdate(JdbcTemplate conn,String prix,String link,String id){
List res = conn.query(""select * from record where prix = ? and link = ? and id = ?"", new Object[]{prix,link,id}, new BeanPropertyRowMapper(List.class));
return res;
}"
11301,"Set up SQL (query all columns in the DATABASES table based on $DATABASE_SERVER$ and $DATABASE_URI$), execute SQL based on $conn$ and get the first piece of data, and return the data.","public Object createDatabase(JdbcTemplate conn,String DATABASE_SERVER,String DATABASE_URI,String id){
List log_starts = conn.query(""select * from DATABASES where DATABASE_SERVER=? and DATABASE_URI=?"", new Object[]{DATABASE_SERVER,DATABASE_URI}, new BeanPropertyRowMapper(List.class));
return log_starts.get(0);
}"
11345,"Get email and password from the page. If the length is 0 when use $db$ to execute SQL (query the data of id column in the users table based on email and password), return ""Incorrect Email or Password"". otherwise, return the jump command ""/ database"".","public Object processLogin(HttpSession request, JdbcTemplate db){
Object email = request.getAttribute(""email"");
Object password = request.getAttribute(""password"");
List result = db.query(""select id from users where email = ?, and password = ?"", new Object[]{email,password}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return ""Incorrect Email or Password."";
}else {
return ""/database"";
}
}"
13822,"Try to set up SQL query statement using the java expression as follows: Query all vendor with devid as $devid$ in the $mtable$ table, use the $conn$ connection to execute the SQL statement to get the data and return the query results stored as list. If Exception occurs, output the error message using the logging.error() method.","public List<Object> mircoDevices(EntityManager conn, Root<Object> mtable, String devid){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(mtable).where(cb.equal(mtable.get(""devid""),devid));
List<Object> out = conn.createQuery(cq).getResultList();
return out;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13204,"If the ""current_user"" obtained by $session$.get method is an empty list, return 'index' after processing using the url_for and redirect methods. Otherwise, execute SQL (query all columns in Books) with $conn$, get all the data and return.","public Object search(JdbcTemplate conn, HttpSession session){
if (session.getAttribute(""current_user"")==null){
return ""index"";
}else {
List results = conn.query(""select * from books"", new BeanPropertyRowMapper(List.class));
return results;
}
}"
14161,""" connect to the database based on $testing$. Use java expression to execute the SQL statement: Select all the data in the $t$ table where foo is $m_FOO$, and return all the query results.","public List testExpanding(EntityManager testing, Root<Object> t, String m_FOO){
CriteriaBuilder cb = testing.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(t).where(cb.equal(t.get(""foo""),m_FOO));
List<Object> res = testing.createQuery(cq).getResultList();
return res;
}"
11024,Get the connection through $admin_engine$. Execute SQL (query the val information in the DATABASE table based on $DATAid$) and get all data. Close the connection and return the query results.,"public List teardownDb(DataSource admin_engine, String DATAid){
JdbcTemplate conn = new JdbcTemplate(admin_engine);
List valsql = conn.query(""select val from database where dataid= ? "", new Object[]{DATAid}, new BeanPropertyRowMapper(List.class));
return valsql;
}"
13076,"In ORM mode, use $conn$ to execute SQL (query the id in the $User$ table when openid equals $identity_url$) and get the first piece of data. If the query result is not None, return the query results. Otherwise, return 'create_profile' after being processed by redirect and url_for.","public Object queryLogin(EntityManager conn, Root<Object> User, String identity_url){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""openid""),identity_url));
List<Object> users = conn.createQuery(cq).getResultList();
if (users.isEmpty()){
return ""create_profile"";
}else {
return users.get(0);
}
}"
13359,"Set SQL based on the java expression (query all columns in the $devices$ table based on the condition that controller is $idController$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result. Each cronologia_mac field is set to the value corresponding to the dictionary 'mac', and the devices_name field is set to the value corresponding to the dictionary' name'. And insert it into a list, and finally return the list.","public List listaCronologiaController(EntityManager conn, Root<Object> devices, String idController){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(devices).where(cb.equal(devices.get(""controller""),idController));
List<Object> recordQuery = conn.createQuery(cq).getResultList();
List storyList = new ArrayList();
for (Object record : recordQuery) {
JSONObject json = JSONObject.parseObject(record.toString());
JSONObject jsonObject = new JSONObject();
jsonObject.put(""mac"",json.getString(""cronologia_mac""));
jsonObject.put(""name"",json.getString(""devices_name""));
storyList.add(json);
}
return storyList;
}"
13061,Use $conn$ to execute SQL (query all columns in the books table when title equals $myString$) and get all the data. Use for loop to print each item in the query results.,"public void bookQuery(JdbcTemplate conn,String myString){
List selections = conn.query(""select * from books where title = ?"", new Object[]{myString}, new BeanPropertyRowMapper(List.class));
for (Object book : selections) {
System.out.println(book);
}
}"
14058,"If the request module sends the request as post, then use $connection$ to execute SQL (query all columns in users through $username$ and $password$) and get the first piece of data. If the query result is empty, use redirect to return the 'index' spliced by url_for; otherwise, return the query result. If the request module sends the request in a GET way, render and return ""index.html"".","public Object index(HttpRequest request, JdbcTemplate connection, String username, String password){
if (request.getMethod().equals(""POST"")){
List users = connection.query(""select * from users where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
return ""index"";
}
else {
return users.get(0);
}
} else {
return ""index.html"";
}
}"
13332,"Set SQL based on the java expression (query the values column in the $ta$ table based on $id$). Execute SQL through $conn$, get all the data, and return the query results.","public List markArticle(EntityManager conn, Root<Object> ta, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ta).where(cb.equal(ta.get(""id""),id));
List<Object> recs = conn.createQuery(cq).getResultList();
return recs;
}"
11551,Use the $conn$ connection to execute the SQL statement (query all columns in the books table based on $isbn$ and $title$) and get all the data. Use for loop iterate through the query results and print them.,"public void queryBooks(JdbcTemplate conn,String isbn,String title){
List res = conn.query(""select * from books where isbn = ? and title = ?"", new Object[]{isbn,title}, new BeanPropertyRowMapper(List.class));
for (Object i : res) {
System.out.println(i);
}
}"
13938,"Set the SQL statement to get all the columns in the universities table based on $motto$, and use the $conn$ connection to execute SQL and get the data. Use for loop to travers the execution result, print it, and return the execution result.","public List selectUniversity(JdbcTemplate conn,String motto){
List universities = conn.query(""select * from universities where motto =?"", new Object[]{motto}, new BeanPropertyRowMapper(List.class));
for (Object uni : universities) {
System.out.println(uni);
}
return universities;
}"
11508,"Execute SQL statement through $db$: Query all the isbn, title, author, year data in the books table. Use for loop iterate the query results and print the obtained data.","public void main(JdbcTemplate db){
List books = db.query(""select isbn, title, author, year from books"", new BeanPropertyRowMapper(List.class));
for (Object book : books) {
JSONObject json = JSONObject.parseObject(book.toString());
System.out.println(""f""+json.getString(""isbn"")+""title""+json.getString(""title"")+""author""+json.getString(""author"")+""publication year""+json.getString(""year""));
}
}"
14109,"Use $connection$ to query all ite in the db_cols table with label $label$, convert the query results into a list and return.","public List getItems(JdbcTemplate connection,String label){
List items = connection.query(""select ite from db_cols where label= ?"", new Object[]{label}, new BeanPropertyRowMapper(List.class));
return items;
}"
11537,"Execute the SQL statement through $session$ (query the first piece of title data in the commands table using $id$), make sure $session$ is closed, and return all the query results.","public List countAllCommandsOnHost(JdbcTemplate session,String id){
List out = session.query(""select title from commands where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return out;
}"
13656,"Get the cursor with $conn$. Set up SQL with the % Operator: query the table_name in the tables where table_schema is $table_schema$. Execute the SQL using the cursor and get the first data. Print the query results and use the for loop to store the query results in a list. Finally, return list.","public List getTable(JdbcTemplate conn,String table_schema){
List rows = conn.query(""select table_name from tables where table_schema= ?"", new Object[]{table_schema}, new BeanPropertyRowMapper(List.class));
System.out.println(rows.get(0));
List table_list = new ArrayList();
JSONArray jsonArray = JSONObject.parseArray(rows.get(0).toString());
for (Object o : jsonArray) {
table_list.add(o);
}
return table_list;
}"
11071,"""If the request method to execute request is ""POST"", use $conn$ to execute SQL (query username in users based on $book_id$), get the first piece of data, and finally return the data. Otherwise, return the rendered ""book.html"".","public Object queryBook(HttpRequest request, JdbcTemplate conn, String book_id){
if (request.getMethod().equals(""POST"")){
List usernames = conn.query(""select username from users where book_id= ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
return usernames.get(0);
} else {
return ""book.html"";
}
}"
13168,"Use the $conn$ cursor method to execute SQL (get all the columns in mobile_homes where home is $home$) and get the first data, then use the for loop to convert each item of the query result to a list type and return the list content.","public List mobileHomesEndpoint(JdbcTemplate conn,String home){
List results = conn.query(""select * from mobile_homes where home= ?"", new Object[]{home}, new BeanPropertyRowMapper(List.class));
List mh_data =new ArrayList();
for (Object result : results) {
mh_data.add(result);
}
return mh_data;
}"
11368,"Try to use $conn$ to execute SQL (query all the query results of all the information in the datasourceId table based on $countTotal$), and use for loop to insert the data one by one into a list, and return this list. If an Exception occurs during execution, return the 'error' that converted to list.","public Object getNA(JdbcTemplate conn,String countTotal){
try {
List query = conn.query(""select * from datasourceid where counttotal= ?"", new Object[]{countTotal}, new BeanPropertyRowMapper(List.class));
List result =new ArrayList();
for (Object i : query) {
result.add(i);
}
return result;
}catch (Exception e){
return ""error"";
}
}"
11256," connect to the database via $engine$, try to execute the SQL (get all the columns in the Table according to $user$) and get all the data. Return the obtained result and print an exception if a ValueError exception occurs during execution.","public List updateTable(DataSource engine, String user){
JdbcTemplate con = new JdbcTemplate(engine);
try {
List rs = con.query(""select * from table where user= ? "", new Object[]{user}, new BeanPropertyRowMapper(List.class));
return rs;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11147,"Execute the SQL statement using $conn$ (query all columns in the nodes where id_node is $id$) and get all the data, print the query results, and use jsonify to return the query results.","public JSONArray test(JdbcTemplate conn,String id){
List infor_node = conn.query(""select * from nodes where id_node= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(infor_node);
return JSONObject.parseArray(infor_node.toString());
}"
13381,"Get the database engine through $localhost$, use ORM method to execute SQL (query all columns in the $File$ table according to the condition that id is $File_id$), get the first piece of data, and return the rendered 'index.html' page, where the parameter files is the query results.","public String selectIndex(EntityManager localhost, Root<Object> File, String File_id,Model model){
CriteriaBuilder cb = localhost.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(File).where(cb.equal(File.get(""id""),File_id));
List<Object> files = localhost.createQuery(cq).getResultList();
model.addAttribute(""files"",files);
return ""index.html"";
}"
14139,"Use ORM to execute SQL statement via $session$: Query $Key$ table for the first data whose 'account' is $acc_name$. If the query result is empty, return False, and finally make sure that $session$ is turned off and return the value corresponding to key_id in the query result.","public Object getKeyId(EntityManager session, Root<Object> Key, String acc_name){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Key).where(cb.equal(Key.get(""account""),acc_name));
List<Object> keys = session.createQuery(cq).getResultList();
if (keys.isEmpty()){
return false;
}else {
return JSONObject.parseObject(keys.get(0).toString()).getString(""key_id"");
}
}"
13375,"Get the database engine through $uri$. Try to establish a connection, execute the SQL statement (query the id column in the ROLE table according to $user_name$), get all the data, close the connection, and return the query results. If an Exception is caught, print the exception.","public List droUser(DataSource uri, String user_name){
try {
JdbcTemplate conn = new JdbcTemplate(uri);
List res = conn.query(""select id from role where user_name= ? "", new Object[]{user_name}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11006,"Use $conn$ to execute SQL: Query all data_col in the testtable table based on $id$. Each query is stored in list using for loop and the assertion is set to determine that the list length is not 0. Finally, return the stored list.","public List testOpt(JdbcTemplate conn,String id){
List data_colb = conn.query(""select data_col from testtable where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List data_colist = new ArrayList();
for (Object i : data_colb) {
data_colist.add(JSONObject.parseObject(i.toString()).get(0));
}
return data_colist;
}"
11021,"Use $conn$ to execute SQL (query the year information in the count_vectors table based on $corpusid$) and get all the query results. Use for loop to print each of these elements of the query results. Finally, return the query results.","public List loadSparsVectorDataStructures(JdbcTemplate conn,String corpusid){
List texts = conn.query(""select year from count_vectors where corpusid= ?"", new Object[]{corpusid}, new BeanPropertyRowMapper(List.class));
List years = new ArrayList();
for (Object i : texts) {
years.add(i);
}
return years;
}"
13813,Use the java expression to set up the SQL statement to get all the tasks in the $table$ based on $updatetime$. Use $conn$ connection to execute the SQL and get the data. Use for loop iterate through all the query results and print them.,"public void checkSelect(EntityManager conn, Root<Object> table, String updatetime){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""updatetime""),updatetime));
List<Object> out = conn.createQuery(cq).getResultList();
for (Object t : out) {
System.out.println(t);
}
}"
13455,Use $conn$ to execute SQL (get the login column in the USER table based on $id$) and get all the data. Finally return the query results.,"public List getRecord(JdbcTemplate conn,String id){
List results = conn.query(""select login from user where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return results;
}"
13635,"Set SQL: query name in the users table where the user_id is $user$. Execute the SQL using $connect$ and get all the data. If the query result length is not 0, then return to rendered 'index.html' and pass the query result to the user parameter. Otherwise redirect to ""/login"" using redirect.","public String index(JdbcTemplate connect,String user,Model model){
List users = connect.query(""select name from users where user_id =?"", new Object[]{user}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
return ""/login"";
}else {
model.addAttribute(""user"",users);
return ""index.html"";
}
}"
13652,"In ORM, SQL is executed using $db$ (query title information in $Question$ based on $question_id$) and get all the data. Set assertion to determine that the length of the query result is not 0. Use the for loop to print each item of data in the query results.","public void exampleQuery(EntityManager db, Root<Object> Question, String question_id){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Question).where(cb.equal(Question.get(""question_id""),question_id));
List<Object> title = db.createQuery(cq).getResultList();
assert title.size()!=0;
for (Object res : title) {
System.out.println(res);
}
}"
13403,"Get the database engine through $db$, where the echo parameter is True, then  connect to the database and execute the SQL (get the webname column in the web table based on $url$). Use for loop to store the 0th element of each item of the query result as list, and finally return the list contents""","public List selectValue(DataSource db, String url){
JdbcTemplate c = new JdbcTemplate(db);
List results = c.query(""select webname from web where url = ? "", new Object[]{url}, new BeanPropertyRowMapper(List.class));
List webnames = new ArrayList();
for (Object result : results) {
webnames.add(JSONObject.parseObject(result.toString()).get(0));
}
return webnames;
}"
11240,"Use $conn$ to execute SQL (get the origin column of flights based on $destination$), get all the data, use for loop to print the origin column data in f format for each item of the query result, and finally return the query result.","public List main(JdbcTemplate conn,String destination){
List flights = conn.query(""select origin from flights where destination= ?"", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
for (Object flight : flights) {
System.out.println(JSONObject.parseObject(flight.toString()).getString(""origin""));
}
return flights;
}"
14235,Execute the SQL statement through the $conn$ connection: Query all columns in the universities table where name is $university_name$ and get the first piece of data. Return the execution result.,"public List course(JdbcTemplate conn,String university_name){
List university = conn.query(""select * from universities where name= ?"", new Object[]{university_name}, new BeanPropertyRowMapper(List.class));
return university;
}"
13497,"Use $conn$ to execute SQL (get all columns in the chapters table based on $quiz_type$) and get all the data. If the query result is true, return the query result.","public List preProcess(JdbcTemplate conn,String quiz_type){
List results = conn.query(""select * from chapters where quiz_type = ?"", new Object[]{quiz_type}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
return results;
}
}"
13285,"Get the database engine with $db_string$ and make the connection, execute the SQL statement (get the id_filme column in the Filme where titulo is $titulo$) and get all the data. Return the result of a query after disconnecting the database.","public List verificaIdFilme(DataSource db_string, String titulo){
JdbcTemplate connection = new JdbcTemplate(db_string);
List results = connection.query(""select id_filme from filme where titulo = ? "", new Object[]{titulo}, new BeanPropertyRowMapper(List.class));
return results;
}"
11084,"Create the engine based on $sqlite$ and set the SQL through the java expression (when time is $too_old$, query the id in the $sleep$ table). Execute the SQL and get all the data. Finally, each item of the data is printed through for loop.","public void query(EntityManager sqlite, Root<Object> sleep, String too_old){
CriteriaBuilder cb = sqlite.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(sleep).where(cb.equal(sleep.get(""time""),too_old));
List<Object> idsleep = sqlite.createQuery(cq).getResultList();
for (Object cmd : idsleep) {
System.out.println(cmd);
}
}"
13993,"Try to set the SQL statement: Query the number of all columns from the table table, use $conn$ to execute the SQL statement to get all the data and return. If an Exception occurs, use logging.error() to return exception information.","public List countTableRows(JdbcTemplate conn){
try {
List res = conn.query(""select count(*) from table"", new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13873,",Execute the SQL statement through $conn$ with the following contents: Query all the columns in samples based on $id$ and gets all the data. Use for loop iterate through the query results and print them. Then store the query results into list and return the contents of the list.","public List getOtuId(JdbcTemplate conn,String id){
List res = conn.query(""select * from samples where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List res_list = new ArrayList();
for (Object row : res) {
System.out.println(row);
res_list.add(row);
}
return res_list;
}"
13903,",Use $connection$ and the java expression to execute SQL: Get all the data in the $features$ table and return the obtained data.","public List selectFile(EntityManager connection, Root<Object> features, String too_old){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(features);
List<Object> features_res = connection.createQuery(cq).getResultList();
return features_res;
}"
11670,"Execute SQL with $conn$ (get the TIMESTAMP column in the eq_eod_data table processed by the maximum function according to $id$), get all the data, and finally return the 0th element of the 0th row of the query result.","public Object getLastloadedtime(JdbcTemplate conn,String id){
List ts = conn.query(""select max(timestamp) from eq_eod_data where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(ts.get(0).toString()).get(0);
}"
13837,"tep1: Execute SQL statement through $db$ connection (query all columns in universities based on $university_name$) and get the first piece of data. Step2: Execute SQL statement through $db$ connection (query columns in professors where uni_id is the id attribute in step1 query and l_name is $professor_name$) and get the first piece of data. Step3: Execute SQL statement through $db$ connection (query all columns in the courses table where professor_id is the id attribute in step2 query result). Step4: Execute SQL statement through $db$ connection (query all columns in publications where professor_id is the id attribute in step2 query result). Render and return 'professor.html', where the publications parameter is the query result of step4, the courses parameter is the query result of step3, the professor parameter is the query result of step2, and the university parameter is the query result of step1.","public String queryProfessor(JdbcTemplate db,String university_name,String professor_name,Model model){
List universitys = db.query(""select * from universities where name= ?"", new Object[]{university_name}, new BeanPropertyRowMapper(List.class));
String universityId = JSONObject.parseObject(universitys.get(0).toString()).getString(""id"");
List professors= db.query(""select * from professors where uni_id=? and l_name=?"", new Object[]{universityId,professor_name}, new BeanPropertyRowMapper(List.class));
String professorId = JSONObject.parseObject(professors.get(0).toString()).getString(""id"");
List courses = db.query(""select * from courses where professor_id= ?"", new Object[]{professorId}, new BeanPropertyRowMapper(List.class));
List publications = db.query(""select * from publications where professor_id= ?"", new Object[]{professorId}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""publications"",publications);
model.addAttribute(""courses"",courses);
model.addAttribute(""professors"",professors.get(0));
model.addAttribute(""universitys"",universitys.get(0));
return ""professor.html"";
}"
11692,"Use $e$ to connect the database and execute SQL (get the date column in the GBP table according to $id$), get all the data, then use for loop to store each item of the query result as a list type and return.","public List getDates(DataSource e, String id){
JdbcTemplate conn = new JdbcTemplate(e);
List dates = conn.query(""select date from GBP where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return dates;
}"
13185,"Use the $conn$ cursor method to execute SQL（get all the columns in the 'table_name' where name is $name$) and get all the data, and use the for loop to add and return the 0th, 1st, and 2nd elements of each item in the query result.","public Object sqlite3ViaIndex(DataSource conn, String name){
JdbcTemplate c = new JdbcTemplate(conn);
List rows = c.query(""select * from table_name where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
Object row = rows.get(0);
String start = JSONObject.parseObject(row.toString()).get(0).toString();
Object stop = JSONObject.parseObject(row.toString()).get(1);
Object score = JSONObject.parseObject(row.toString()).get(2);
Object calc = start+stop+score;
return calc;
}
}"
13080,Use java expressions to set SQL: Query the id in $tc$ when tconst equals $movieID$. Use $conn$ to execute SQL and get the first data. Return the 0th of the query results.,"public Object getMovieMain(EntityManager conn, Root<Object> tc, String movieID){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tc).where(cb.equal(tc.get(""tconst""),movieID));
List<Object> movie = conn.createQuery(cq).getResultList();
return movie.get(0);
}"
13130,"Execute the SQL with $conn$ (get all the columns in the books where isbn is $searchstring$, author is $searchstring$ and title is $searchstring$) and get all the data, and finally return the rendered ""search.html"" with the rbboks parameter as the result of the query.","public String search(JdbcTemplate conn,String searchstring,Model model){
List rbooks = conn.query(""select * from books where isbn=? and author =? and title =?"", new Object[]{searchstring,searchstring,searchstring}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rbooks"",rbooks);
return ""search.html"";
}"
11608,"Try to use $conn$ to execute SQL (get the tablename column in the 'table' table according to $table_id$), get the first piece of data and return the query result. If an exception occurs during execution, the exception is printed.","public List searchTable(JdbcTemplate conn,String table_id){
try {
List tb = conn.query(""select tablename from table where table_id= ?"", new Object[]{table_id}, new BeanPropertyRowMapper(List.class));
return tb;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11103,"Use the $conn$ connection to execute the SQL statement (based on all columns in the date_parse where the datetime is $datetime$) and get all the data, set the assertion that the return result is not an empty list, and then return the data.","public List containPercentsCharacterQuery(JdbcTemplate conn,String datetime){
List texts = conn.query(""select * from date_parse where datetime= ?"", new Object[]{datetime}, new BeanPropertyRowMapper(List.class));
assert texts.size()!=0;
return texts;
}"
13793,"Use $conn$ to execute SQL (query all columns in the drop_table according to $name_table$), get all the data, and return the query result.","public List dropTable(JdbcTemplate conn,String name_table){
List result = conn.query(""select * from drop_table where name_table= ?"", new Object[]{name_table}, new BeanPropertyRowMapper(List.class));
return result;
}"
11058,"In for loop, for each item of data in $rows$, use $conn$ to query the name information in the $customer$ table based on that data, and finally add the query results to the list. Finally, all the data stored in list is returned.","public List testSqlite3(JdbcTemplate conn,List rows){
List myname_list = new ArrayList();
for (Object row : rows) {
List mynames = conn.query(""select name from customer where row= ?"", new Object[]{row}, new BeanPropertyRowMapper(List.class));
myname_list.add(mynames);
}
return myname_list;
}"
13014,"Use $conn$ to execute SQL (query the country information in the Aquastat table when mid_year is $year$) and get all the data. Store 0th element of each item in the query result into list. Put the list of oth element into the dictionary corresponding to ""country"". Finally, jsonify returns the processed dictionary.","public JSONObject showHdi(JdbcTemplate conn,String year){
List results = conn.query(""select country from aquastat where mid_year= ?"", new Object[]{year}, new BeanPropertyRowMapper(List.class));
List countries = new ArrayList();
List hdi = new ArrayList();
for (Object result : results) {
countries.add(JSONObject.parseObject(result.toString()).get(0));
}
JSONObject jsonObject = new JSONObject();
jsonObject.put(""country"",countries);
return jsonObject;
}"
13053,"Try to use $conn$ to execute SQL (query all columns in the new_table_name table) and get the first piece of data.
* Return the query results. If the result appears, it will be returned directly.","public Object dropTable(JdbcTemplate conn){
try {
List values = conn.query(""select * from new_table_name"", new BeanPropertyRowMapper(List.class));
return values.get(0);
}catch (Exception e){
return null;
}
}"
13685,"Set SQL: query username in LoginData where Password is $Password$ and UserType is $UserType$. Execute SQL with $conn$ and get the first data. Finally, return the query results.","public Object searchUser(JdbcTemplate conn, String Password,String UserType){
List users = conn.query(""select username from LoginData where Password=? and UserType=?"", new Object[]{Password,UserType}, new BeanPropertyRowMapper(List.class));
return users.get(0);
}"
13523,"Set SQL based on the java expression (query the 'table' column in the $tb$ table based on $col8$). Execute SQL with $conn$ and get all the data, use for loop to traverse each query result, and insert the 0th element of each piece of data into list, and finally return the list.","public List iteritems(EntityManager conn, Root<Object> tb, String col8){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tb).where(cb.equal(tb.get(""col8""),col8));
List<Object> result = conn.createQuery(cq).getResultList();
List res = new ArrayList();
for (Object row : result) {
Object key = JSONObject.parseObject(row.toString()).get(0);
res.add(key);
}
return res;
}"
13141,"Use $conn$ to execute SQL (get all the columns in the weburls table where url is $url$) and get all the data, then use the for loop to store the list type for each item of the query result, and finally return the length of the list content.","public int urIsInDatabase(JdbcTemplate conn, String url){
List results = conn.query(""select * from weburls where url = ?"", new Object[]{url}, new BeanPropertyRowMapper(List.class));
return results.size();
}"
11241,"Use $conn$ to execute SQL (get all the columns of statusCode based on $stateId$), get all the data, and finally return the obtained result.","public List getStateCode(JdbcTemplate conn,String stateId){
List res = conn.query(""select * from statuscode where stateid = ?"", new Object[]{stateId}, new BeanPropertyRowMapper(List.class));
return res;
}"
11169,"Set the SQL statement (query the ID in the POST where the id of blog is $BLOG_ID$) , execute the SQL statement with $conn$, and query the for loop iterates through all the query results and print them.","public void postIter(JdbcTemplate conn,String BLOG_ID){
List results = conn.query(""select id from post where blog_id= ?"", new Object[]{BLOG_ID}, new BeanPropertyRowMapper(List.class));
for (Object row : results) {
System.out.println(row);
}
}"
11276,"Use $host$ to get the database engine, use orm's sessionmaker to bind $engine$, execute SQL through the Session method (get all the columns processed by the counting method in the stucco_evolution based on $id$), get all the data, and finally return the query result.","public List testEvolveCompat(DataSource host, String id){
JdbcTemplate engine = new JdbcTemplate(host);
List rows = engine.query(""select count(*) from stucco_evolution where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return rows;
}"
13253,Try to use $conn$ to execute the SQL statement (select all the columns in the books where isbn is $isbn$) and return with all the data. Returns False if an exception occurs.,"public Object selectValue(JdbcTemplate conn,String isbn){
try {
List results = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
return false;
}
}"
11146,"Set up the SQL statement（Use the format () function to format the output string and query all columns in the user where the id of user is $user_id$) , execute the SQL statement with the $conn$ connection to get all the data and return.","public List getDevtrafficData(JdbcTemplate conn,String user_id){
List userexin = conn.query(""select * from user where user_id= ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return userexin;
}"
14256,"Execute the SQL statement through the $conn$ connection, and the content is as follows: Query all year data in the tbook table through $title$, use % operator to match the conditions in the SQL string. Return None if the length of the query result is 0. Finally, return all the query results.","public List api(JdbcTemplate conn,String title){
List year = conn.query(""select year from tbook where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
if (year.isEmpty()){
return null;
}else {
return year;
}
}"
11417,"Get the database engine and establish a connection. Set the SQL statement (query all the columns in the cars table based on $value$), execute the SQL and get all the data. Set the assertion to determine whether the query result length is equal to 1.","public void testFetchall(JdbcTemplate conn, String value){
List rows = conn.query(""select * from cars where value = ? "", new Object[]{value}, new BeanPropertyRowMapper(List.class));
assert rows.size() == 1;
}"
11569,Get the database engine and establish a connection through $DB$. Execute the SQL statement (query the first name data in the sample_table table based on $id$) and return the query result.,"public Object main(DataSource DB, String id){
JdbcTemplate connection = new JdbcTemplate(DB);
List outs = connection.query(""select name from sample_table where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return outs.get(0);
}"
11037,"If the request method of request is POST, use $conn$ to execute SQL (get the words information in the messages table based on $channel$) and get all the data. Use list to separate the results, store the values of all result and print the dealt results. If it is not the POST method, pass $channel$ into the $load_home$ function and return.","public Object messagesInf(HttpRequest request, JdbcTemplate conn, String channel, String load_home, Model model){
if (request.getMethod().equals(""POST"")){
List messages_res = conn.query(""select words from messages where channel= ?"", new Object[]{channel}, new BeanPropertyRowMapper(List.class));
for (Object row : messages_res) {
System.out.println(JSONObject.parseObject(row.toString()).getString(""values""));
}
return null;
} else {
model.addAttribute(channel);
return load_home;
}
}"
11622,"Use $conn$ to execute SQL (get the pokemon_id column in the sightings table where the pokemon_id is $pid$), further use for loop to store the 0th element of each item of the obtained data results as a list type, and then use for loop to judge each number in the range (1,152). If it is not in the list content, convert these numbers to the list type and return.","public List getNonexistentPokemon(JdbcTemplate conn,String pid){
List list = conn.query(""select pokemon_id from sightings where pokemon_id= ?"", new Object[]{pid}, new BeanPropertyRowMapper(List.class));
List db_ids = new ArrayList();
for (Object r : list) {
db_ids.add(JSONObject.parseObject(r.toString()).get(0));
}
List result = new ArrayList();
for (int pokemon_id = 1;pokemon_id<=152;pokemon_id++){
for (Object db_id : db_ids) {
if (pokemon_id!=Integer.parseInt(db_id.toString())){
result.add(pokemon_id);
}
}
}
return result;
}"
11629,"Try to use $session$ to connect the database and execute SQL (get all the columns in the test_users table where user_id is $uid$), get all the data, and return the query results; otherwise, pass it.","public List getUsers(DataSource session, String uid){
try {
JdbcTemplate engine = new JdbcTemplate(session);
List users = engine.query(""select * from test_users where user_id= ? "", new Object[]{uid}, new BeanPropertyRowMapper(List.class));
return users;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13840,Use $conn$ connection to query all columns in the sci_mod table with id as $id$ and get all the data. Use for loop iterate through the query results and print them. Return all the query results.,"public List images(JdbcTemplate conn,String id){
List irs = conn.query(""select * from sci_mod where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object row : irs) {
System.out.println(row);
}
return irs;
}"
11396,"If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the books table based on $search$), get the first query result, and return the rendered ""search.html"" page, where the parameter rows is the query result; otherwise, return the rendered ""error.html"" page, where the parameter message is set to ""Sorry"".","public String search(HttpRequest request, JdbcTemplate conn, String search,Model model){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select * from books where search = ?"", new Object[]{search}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rows"",rows.get(0));
return ""search.html"";
} else {
return ""error.html"";
}
}"
13764,"Set SQL based on the java expression (query all columns in the $devices$ table based on $controller$). Execute SQL through $conn$, get all the data, and return the rendered ""story.html"" page, where the lista parameter is set to the query result.","public String listaCronologiaControllerWeb(EntityManager conn, Root<Object> devices, String controller,Model model){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(devices).where(cb.equal(devices.get(""controller""),controller));
List<Object> recordQuery = conn.createQuery(cq).getResultList();
model.addAttribute(""lista"",recordQuery);
return ""story.html"";
}"
13586,"Execute SQL with $conn$ (query all columns in the Bars table according to $style$), get all the query results, use for loop to convert each of the query results into dict, store them in list, and return this list.","public List getBars(JdbcTemplate conn,String style){
List rs = conn.query(""select * from bars where style= ?"", new Object[]{style}, new BeanPropertyRowMapper(List.class));
return rs;
}"
11539,"Connect to the database through $engine$. Try to query all columns in the policy table with p_code as $p_code$, get all data and return all query results. If SQLAlchemyError exception occurs, print the exception message.","public List predictByKnn(DataSource engine, String p_code){
JdbcTemplate conn = new JdbcTemplate(engine);
try {
List info = conn.query(""select * from policy where p_code = ? "", new Object[]{p_code}, new BeanPropertyRowMapper(List.class));
return info;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13236,"SETP1: set SQL (query all the books columns where isbn is $isbn$) , execute the SQL statement with $DB$ and get all the query results. If the query result is None, then use jsonify to return ({""error"": ""Invalid ISBN""}. Otherwise, get the value corresponding to 'id' in the query result. SETP2: execute SQL using $db$(query all columns of reviews when the book_id equals the value of 'id') and fetch all the data. If the fetched data is not None, the for loop is used to count the rows. The 'title' and 'author' values of the query result in STEP1 are used as the corresponding values for the 'title' and 'author' keywords in the dictionary, respectively. The value of 'review_count' in the dictionary is the result of the query in STEP2. Finally, use jsonify to return the processed dictionary.","public JSONObject selectValue(JdbcTemplate db,String isbn){
List book = db.query(""select * from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (book.isEmpty()){
JSONObject jsonObject = new JSONObject();
jsonObject.put(""error"",""Invalid ISBN"");
return jsonObject;
}else {
String book_id = JSONObject.parseObject(book.get(0).toString()).getString(""id"");
List reviews = db.query(""select * from reviews where book_id= ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
int count = 0;
if (!reviews.isEmpty()){
for (Object review : reviews) {
count +=1;
}
}
JSONObject jsonObject = new JSONObject();
jsonObject.put(""title"",JSONObject.parseObject(book.get(0).toString()).getString(""title""));
jsonObject.put(""author"",JSONObject.parseObject(book.get(0).toString()).getString(""author""));
jsonObject.put(""review_count"",count);
return jsonObject;
}
}"
11621,"Use $conn$ to execute SQL (get the gamecategorymap_id column in the GameCategoryMap table where game_id is $gid$ and category_id is $cid$) and get the first row of data. If the result is true, convert the 0th element of the query result to list and return; otherwise, return None.","public Object gamecategorymapId(JdbcTemplate conn,String gid,String cid){
List results = conn.query(""select gamecategorymap_id from gamecategorymap where game_id=? and category_id=?"", new Object[]{gid,cid}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
Object gamecategorymap_id = JSONObject.parseObject(results.get(0).toString()).get(0);
return gamecategorymap_id;
}
}"
14280,"Use $db$ to get the database engine. Use sessionmaker () to create a configured DBSession class and bind the database engine through 'bind'. Instantiate DBSession, and then execute the SQL statement: Query all NAMES data in the driver table. Return the query results.","public List init(DataSource db){
JdbcTemplate session = new JdbcTemplate(db);
List items = session.query(""select NAMES from driver "", new BeanPropertyRowMapper(List.class));
return items;
}"
13007,"Create the database engine through $sqlite$. Use the engine to execute SQL (query all columns in the myengine table based on $activities$) and get all the data. Finally, return the query result.","public List testMinimal(DataSource sqlite, String activities){
JdbcTemplate e = new JdbcTemplate(sqlite);
List data = e.query(""select * from myengine where activities= ? "", new Object[]{activities}, new BeanPropertyRowMapper(List.class));
return data;
}"
14073,"Create a cursor object through $conn$, and execute a SQL through the cursor object: Query all the name in the customer table, print the query results and return them.","public List testSqlite3(DataSource conn){
JdbcTemplate e = new JdbcTemplate(conn);
List data = e.query(""select * from myengine where activities= ? "", new BeanPropertyRowMapper(List.class));
return data;
}"
13581,"Execute SQL with $conn$ (query all columns in the active_stats table according to $value$), get all the query results, use for loop traverse all obtained query results, insert each piece of data into a list, and return the list.","public List getActiveStats(JdbcTemplate conn,String value){
List result_proxy = conn.query(""select * from active_stats where value= ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
List active_stats_df = new ArrayList();
for (Object row : result_proxy) {
active_stats_df.add(row);
}
return active_stats_df;
}"
11494,"Get database engine by $db_string$, set SQL statement (query all columns in tb_vendedores table based on $id$), execute SQL and get all the data. Return the query result.","public List selectValue(DataSource db_string, String id){
JdbcTemplate db = new JdbcTemplate(db_string);
List vendedores = db.query(""select * from tb_vendedores where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return vendedores;
}"
14167," connect to the database based on $engine$. Execute the SQL statement: Query 'name' information in the Beer table, get all the data, store the query results as list and return.","public List getBeersName(DataSource engine){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select name from beer "", new BeanPropertyRowMapper(List.class));
return rs;
}"
11042,"Try to execute the following code: get the connection with $engine$; set SQL: Query the number in the bike_dynamic table based on the $bike_stands$, $last_update$ and $bikes$; execute SQL and get all the data; finally, return the query results. If an exception occurs, the exception information should be printed after ""An error occurred:"".","public List selectValue(DataSource engine, String bike_stands, String last_update, String bikes){
try {
JdbcTemplate conn = new JdbcTemplate(engine);
List bike = conn.query(""select number from bike_dynamic where bike_stands=? and last_update=? and bikes=? "", new Object[]{bike_stands,last_update,bikes}, new BeanPropertyRowMapper(List.class));
return bike;
}catch (Exception e){
System.out.println(""An error occurred:""+e);
return null;
}
}"
13562,"If the request method is ""POST"", use $conn$ to execute SQL (query the username column in the users table based on $password$), get all the query results, and return them. Otherwise, return the rendered ""register.html"" page.","public Object register(HttpRequest request, JdbcTemplate conn, String password){
if (request.getMethod().equals(""POST"")){
List res = conn.query(""select username from users where password= ?"", new Object[]{password}, new BeanPropertyRowMapper(List.class));
return res;
} else {
return ""register.html"";
}
}"
13946,"""Use $engine$ to connect the database, set the SQL statement to: Query all the columns in the sometable table whose id is $id$, execute SQL, get all the information, and set the assertion to determine that the length of the execution result is not 0.","public void selectRecord(DataSource engine, String id){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select * from sometable where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert result.size()!=0;
}"
13939,"""Get the database engine through $url$. Set the SQL statement (query all columns in the 'testtable' table where id is $id$), execute SQL, get all the data, and return the 0th element of the execution result.","public Object searchDefaultTable(DataSource url, String id){
JdbcTemplate engine = new JdbcTemplate(url);
List results = engine.query(""select * from testtable where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
13480,Execute SQL based on the java expression (get all columns in the $counters$ table with counter_id as $counter_id$) and use $conn$ to execute SQL to get all the data. Finally set the assertion that the length of the query result is not 0.,"public void getSource(EntityManager conn, Root<Object> counters, String counter_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(counters).where(cb.equal(counters.get(""url""),counter_id));
List<Object> results = conn.createQuery(cq).getResultList();
assert results.size()!=0;
}"
13830,"Try to use $conn$ to query all columns in the flights table with id as $flight_id$ and get the first piece of message. If the query result exists, render and return 'success.html'; if Exception occurs, print the exception message.","public String bookFlight(JdbcTemplate conn,String flight_id){
try {
List rs = conn.query(""select * from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (!rs.isEmpty()){
return ""success.html"";
}else {
return null;
}
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14045,"Get the database engine and establish a connection through $db$. Execute the SQL statement (query all the columns in the Alltypes table), execute the SQL statement to get the first piece of data, close the database connection, and return the query results after jsonify processing.","public JSONObject getState(DataSource db){
JdbcTemplate conn = new JdbcTemplate(db);
List res = conn.query(""select * from Alltypes "", new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(res.get(0).toString());
}"
13937,"Get the database engine and establish a connection through $localhost$. Set the SQL statement (query the user data in the mysql table according to $value$), execute SQL to get all the data, close the database connection, and return the execution result.","public List index(DataSource localhost, String value){
JdbcTemplate connection = new JdbcTemplate(localhost);
List results = connection.query(""select user from mysql where value = ? "", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return results;
}"
13878,"Try to set up the SQL statement: Use $db$ to query the table_name data in the 'tables' table, use $session$ to execute the SQL statement and get all the query data. Convert each item of the query results into dict to store it as list and return it. If Exception occurs, print the exception message and finally make sure $session$ is closed.","public List getAllTableIfExists(JdbcTemplate session,String db){
try {
List out = session.query(""select table_name from tables where db = ?"", new Object[]{db}, new BeanPropertyRowMapper(List.class));
return out;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13350,"Set up sql (query the pass_ssid column in the ssid_array table according to $trip_id$), use $conn$ to execute SQL, get all the query results, and return the 0th data of the query results.","public Object getSSIDArray(JdbcTemplate conn,String trip_id){
List row = conn.query(""select pass_ssid from ssid_array where trip_id= ?"", new Object[]{trip_id}, new BeanPropertyRowMapper(List.class));
return row.get(0);
}"
13794,"Use $conn$ to execute SQL (query all columns in the user_table according to $dirty$), get all the data, and set the assertion to determine whether the query result length is greater than 0.","public void testIsModified(JdbcTemplate conn,String dirty){
List ch = conn.query(""select * from user_table where dirty= ?"", new Object[]{dirty}, new BeanPropertyRowMapper(List.class));
assert ch.size()>0;
}"
13738,"Open and read the file ""flights.csv"" with the 'open' statement, use for loop to traverse the read file, and get the value of each destination and duration: Use $conn$ to execute SQL (query all columns in the flights table according to destination and duration), get all the query results, and print them.","public void main(JdbcTemplate conn){
String filePath = ""flights.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String destination = sc.nextLine();
String duration = sc.nextLine();
List query = conn.query(""select * from flights where destination = ? and duration = ?"", new Object[]{destination,duration}, new BeanPropertyRowMapper(List.class));
System.out.println(query);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
11515,"Set the SQL statement to: query all columns in the one_row table through $name$, use $conn$ connection to execute the SQL statement to get all the data, set the assertion to determine the length of the returned result to 1, set the assertion to determine the length of the 0th element of the returned result to 1""","public void testBasicQuery(JdbcTemplate conn,String name){
List rows = conn.query(""select * from one_row where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
assert rows.size() ==1;
assert JSONObject.parseArray(rows.get(0).toString()).size()==1;
}"
11675,"Use $connection_string$ to get the database engine and connect the database, try to execute SQL (get the data column in the sql table according to $name$), get all the data, return the query results, and finally ensure that the connection is closed.","public List getData(DataSource connection_string, String name){
JdbcTemplate conn = new JdbcTemplate(connection_string);
try {
List datas = conn.query(""select time from comments where summary = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return datas;
}finally {
return null;
}
}"
13596,"Use ORM method and $conn$ to execute SQ (query the col5 column in the $Event$ table according to $col3$), get all the queried data, use for loop to convert each item of the query result into dict, store it in list and return.","public List event(EntityManager conn, Root<Object> Event, String col3){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Event).where(cb.equal(Event.get(""col3""),col3));
List<Object> event = conn.createQuery(cq).getResultList();
return event;
}"
11140,Connect to the database according to $engine$. Execute the SQL statement in ORM with the contents: get all the data in the $User$ based on $lastname$. Set the length of the result returned by the assertion determination to be 2.,"public void testBulkUpdate(EntityManager engine, Root<Object> User, String lastname){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""lastname""),lastname));
List<Object> values = engine.createQuery(cq).getResultList();
assert values.size()==2;
}"
11152,"If the request module sends the request as GET, render and return 'login.html'. Otherwise, execute SQL (query all columns in login where username is $username$) using the $conn$ connection and get all the data back to the query.","public Object queryLogin(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List my_login = conn.query(""select * from login where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return my_login;
} else {
return ""login.html"";
}
}"
13136,"SQL is executed with $conn$ (obtain isbn, title, author, year where isbn is $isbn$, title is $title$, author is $author$, year is $year$ in books) and all the data in four columns in the books) and return the result of the query.","public List main(JdbcTemplate conn,String isbn,String title,String author,String year){
List res = conn.query(""select isbn, title, author, year from books where isbn=? and title=? and author=? and year=?"", new Object[]{isbn,title,author,year}, new BeanPropertyRowMapper(List.class));
return res;
}"
11177,"Set up the SQL statement using a java expression (query all information in $Media$ where hash is $hash$) and execute the query statement over a $conn$ connection to get all the data. If the query result exists, all query results are returned, otherwise None is returned.","public List<Object> checkIfHashInDb(EntityManager conn, Root<Object> Media, String hash){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Media).where(cb.equal(Media.get(""hash""),hash));
List<Object> hash_row = conn.createQuery(cq).getResultList();
if (hash_row.isEmpty()){
return null;
}
else {
return hash_row;
}
}"
13917,"If the request module sends the request in a GET way, render and return ""index.html""; otherwise, set SQL (query all columns in the users table through $user$), execute SQL and get all the data with the $conn$ connection. If the length of the execution result is not 1, render and return ""index.html""; otherwise, render and return ""user.html"", where the user parameter is the execution result.","public Object login(HttpRequest request, JdbcTemplate conn, String user,Model model){
if (request.getMethod().equals(""POST"")){
List row = conn.query(""select * from users where user = ?"", new Object[]{user}, new BeanPropertyRowMapper(List.class));
if (row.size()!=1){
return ""index.html"";
}else {
model.addAttribute(""user"",row);
return ""user.html"";
}
} else {
return ""index.html"";
}
}"
13550,"Execute SQL with $conn$ (query the origin column in the flights table according to $destination$), get all the query results, and use for loop traversal to print all the query results.","public void main(JdbcTemplate conn,String destination){
List flights = conn.query(""select origin from flights where destination= ?"", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
for (Object flight : flights) {
System.out.println(flight);
}
}"
14087,"Use $conn$ to execute SQL: Query the number of id in the users table where USERNAME is $username$ and PASSWORD is $password$ and get the first piece of data. If the query result is not empty, render and return 'index.html'; otherwise, render and return' login.html'.","public String loginAttempt(JdbcTemplate conn,String username,String password){
List result = conn.query(""select count(id) from users where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return ""login.html"";
}else {
return ""index.html"";
}
}"
13632,Execute the SQL using $db$ (query tobs in the Measurement table where date is $date$) and get all the data. Use A for loop to store each query result in a list and use jsonify to return the processed list.,"public JSONArray getTobs(JdbcTemplate db, String date){
List data = db.query(""select tobs from measurement where date= ?"", new Object[]{date}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object record : data) {
list.add(record);
}
return JSONObject.parseArray(list.toString());
}"
13987,"Connect to the database through $engine$. Execute the SQL statement: Query all columns in the SIGHTINGS table with 'NAME': $name$ and get all the data. For loop stores every element in the query result in list. Close the database connection, render and return' sightings.html', where the sighting parameter is the list content.","public String getSightings(DataSource engine, String name,Model model){
JdbcTemplate connection = new JdbcTemplate(engine);
List sighting = connection.query(""select * from sightings where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List finalList = new ArrayList();
for (Object i : sighting) {
finalList.add(i);
}
model.addAttribute(""sighting"", finalList);
return ""sightings.html"";
}"
13649,Execute the SQL using $db$ (query token1_id_str in the pde_pool_pairs based on $token_id$) and get all the data. Use the for loop to put element 0 for each item in the query result into the list and return.,"public List getToken(JdbcTemplate db, String token_id){
List data = db.query(""select token1_id_str from pde_pool_pairs where token_id= ?"", new Object[]{token_id}, new BeanPropertyRowMapper(List.class));
List result = new ArrayList();
for (Object i : data) {
result.add(JSONObject.parseObject(i.toString()).get(0));
}
return result;
}"
11211,"Use $conn$ to execute SQL (get the clientes in table based on $saldo$), get all the data and return the query result.","public List recargaSaldo(JdbcTemplate conn,String saldo){
List res = conn.query(""select clientes from table where saldo = ?"", new Object[]{saldo}, new BeanPropertyRowMapper(List.class));
return res;
}"
14255," connect to the database according to $engine$. Use $conn$ to query all s_id in the seasons table whose s_time is $s_time$. Use for loop traversal to query and print the results, and return them.","public List allSeasons(DataSource engine, String s_time){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select s_id from seasons where s_time = ? "", new Object[]{s_time}, new BeanPropertyRowMapper(List.class));
for (Object each : res) {
System.out.println(each);
}
return res;
}"
13720,"Execute SQL with $conn$ (query all columns in the query table according to $id$), use for loop to traverse all the obtained query results, and print each piece of query data.","public void fetchByQuery(JdbcTemplate conn,String id){
List fetchQuery = conn.query(""select * from query where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object data : fetchQuery) {
System.out.println(data);
}
}"
13954,"Set the SQL statement: Query the number of all columns in the wordlist table where student is $name$, use $conn$ to execute SQL, get all the data, and return the oth element of the execution result.","public Object listStudent(JdbcTemplate conn,String name){
List count = conn.query(""select count(*) from wordlist where student = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return count.get(0);
}"
13732,"Use the ORM method and $conn$ to execute SQL (query all the information in the $Target$ table according to $ids$), and get all the data queried. If the query result is empty, return False; otherwise, return the result of executing the statement.","public List getTargetsByUUID(EntityManager conn, Root<Object> Target, String ids){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Target).where(cb.equal(Target.get(""ids""),ids));
List<Object> values = conn.createQuery(cq).getResultList();
if (values.isEmpty()){
return null;
}
else {
return values;
}
}"
11380,"Try to set up sql (query all the information in the Checkins table based on $business_id$ and $checkin_date$), use $conn$ to execute SQL to get all the query results and return the query data. Print this exception if an Exception occurs during execution, and finally close the connection if the connection is not empty.","public List tabulateCheckins(JdbcTemplate conn,String business_id,String checkin_date){
try {
List res = conn.query(""select * from Checkins where business_id = ? and checkin_date = ?"", new Object[]{business_id,checkin_date}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11335,"If the string $flag$ lowercase version is' ture', use $conn$ to execute SQL (query the first row of data in the TIMESTAMP table based on $CURRENT$) and return the data. If the string $flag$ lowercase version is' false', return False.","public Object convertDefaultArg(JdbcTemplate conn,String CURRENT,String flag){
if (flag.equals(""true"")){
List sa = conn.query(""select * from timestamp where current= ?"", new Object[]{CURRENT}, new BeanPropertyRowMapper(List.class));
return sa.get(0);
}else if(flag.equals(""false"")){
return false;
}else {
return null;
}
}"
11375,"Set sql according to the java expression (query all columns in the $id_ejer_det$ table based on $estado$), use $session$ to execute and get all the data, close the connection, and return the data.","public List<Object> actualizarEstado(EntityManager session, Root<Object> id_ejer_det, String estado){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(id_ejer_det).where(cb.equal(id_ejer_det.get(""estado""),estado));
List<Object> jie = session.createQuery(cq).getResultList();
return jie;
}"
13425,"If invert $username$, return the rendered ""error.html"", then use $conn$ to execute the SQL (get the email column in the users table based on $username$) and get the first piece of data. If the query result is not None, then return the query result.","public Object search(JdbcTemplate conn,String username){
if (username==null){
return ""error.html"";
}else {
List users = conn.query(""select email from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if(users.isEmpty()){
return null;
}else {
return users.get(0);
}
}
}"
14170,"Execute the SQL statement via $conn$: Query all columns in the usertable table based on $username$, get the first piece of data and return the obtained result.","public Object userLoader(JdbcTemplate conn,String username){
List results = conn.query(""select * from usertable where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
13508,"Connect the database through $engine$. Try to set up the SQL statement (query the 'column' column in the database table according to $table$), execute SQL, get all the data, return the query results, and finally close the connection.","public List getSampleData(DataSource engine, String table){
JdbcTemplate connection = new JdbcTemplate(engine);
try {
List result = connection.query(""select column from database where table= ? "", new Object[]{table}, new BeanPropertyRowMapper(List.class));
return result;
}finally {
return null;
}
}"
11604,"Use $db$ to execute SQL (get the auther column in the books table based on $isbn$, $title$ and $year$), get the first piece of data, and finally return the query result.","public Object main(JdbcTemplate db,String isbn,String title,String year){
List authers = db.query(""select auther from books where isbn=? and title=? and year=?"", new Object[]{isbn,title,year}, new BeanPropertyRowMapper(List.class));
return authers.get(0);
}"
13481,"Use $conn$ to execute SQL (get all columns in the books table based on $isbn$) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", otherwise return the rendered ""book.html"", where the book parameter is the query result.","public String book(JdbcTemplate conn,String isbn,Model model){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""book"", books.get(0));
return ""book.html"";
}
}"
11581,"Use $conn$ to execute the SQL statement (query the first name data in the users based on $email$), set the assertion to determine that the return result is not the empty list, and finally return the queried data.","public List testRawSql(JdbcTemplate conn,String email){
List out = conn.query(""select name from users where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
assert out.size()>0;
return out;
}"
11315,"Try to use $conn$ to execute SQL (query all data in the user column of the books table based on $title$,$author$ and $pub_year$) and return the query results. If a ValueError exception occurs during execution, output error.","public List main(JdbcTemplate conn,String title,String author,String pub_year){
try {
List feel = conn.query(""select user from books where title = ? and author = ? and pub_year = ?"", new Object[]{title,author,pub_year}, new BeanPropertyRowMapper(List.class));
return feel;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11659,"Use $eng$ to connect the database and execute SQL according to the java expression (get the tab column in the $taglist$ table whose code_no is $code_no$), get all the data, and then use for loop to print each item of the query result.","public void query(EntityManager eng, Root<Object> taglist, String code_no){
CriteriaBuilder cb = eng.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(taglist).where(cb.equal(taglist.get(""code_no""),code_no));
List<Object> rows = eng.createQuery(cq).getResultList();
for (Object row : rows) {
System.out.println(row);
}
}"
13682,"Execute the SQL using $db$ (query the average rating in the reviews table where isbn is $isbn$) and get all the data. The [0][1] element is stored as the value of review_count in the dictionary, the [0][0] element is stored as the value of average_score in the dictionary, and finally return the processed dictionary using jsonify.","public JSONObject api(JdbcTemplate conn,String isbn){
List review_info = conn.query(""select avg(rating) from reviews where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
Object review_count = JSONObject.parseObject(review_info.get(0).toString()).get(1);
Object average_score = JSONObject.parseObject(review_info.get(0).toString()).get(0);
JSONObject json_info = new JSONObject();
json_info.put(""review_count"",review_count);
json_info.put(""average_score"",average_score);
return json_info;
}"
13400,"Set SQL based on the java expression (query all columns in the $tbl_user$ table based on the condition that UID is $key$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","public List<Object> getUser(EntityManager conn, Root<Object> tbl_user, String key){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tbl_user).where(cb.equal(tbl_user.get(""UID""),key));
List<Object> recs = conn.createQuery(cq).getResultList();
return recs;
}"
14284, connect the database according to $engine$. Set the SQL statement: Query the number of movieID in the movies table. Execute SQL to get the 0th element of all the data and return the execution result.,"public List getMoviesCount(DataSource engine){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select count(movieID) from movies"", new BeanPropertyRowMapper(List.class));
return result;
}"
14176,"Use the java expression to set up the SQL statement: Query the number of cookie_names in the $cookies$ table, execute the SQL via $connection$ to get the first piece of data, print the obtained data and return.","public Object makeQuerySum(EntityManager connection, Root<Object> cookies){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cookies);
List<Object> result = connection.createQuery(cq).getResultList();
System.out.println(result.get(0));
return result.get(0);
}"
13753,"Set up sql (query the player_id column in the Players table according to $player$), use $conn$ to execute SQL and get all the query results. If the query result is obtained, return the 0th element of article 0; otherwise, return None.","public Object playerId(JdbcTemplate conn,String player){
List result = conn.query(""select player_id from players where player= ?"", new Object[]{player}, new BeanPropertyRowMapper(List.class));
Object player_id = JSONObject.parseObject(result.get(0).toString()).get(0);
return player_id;
}"
13418,",Use $conn$ to execute the SQL (get the fullname column in the User table based on $name$) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.","public List selectValue(JdbcTemplate conn,String name){
List results = conn.query(""select fullname from user where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List fullname = new ArrayList();
for (Object result : results) {
fullname.add(result);
}
return fullname;
}"
13749,"Use $conn$ to execute SQL (query the name column in the passengers table according to $flight_id$) and get all the data. If the query result length is equal to 0, output ""fail""; otherwise, use for loop to traverse all the query results and output the name field of each query result.","public void main(JdbcTemplate conn,String flight_id){
List passengers = conn.query(""select name from passengers where flight_id= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (passengers.isEmpty()){
System.out.println(""fail"");
}else {
for (Object passenger : passengers) {
System.out.println(JSONObject.parseObject(passenger.toString()).getString(""name""));
}
}
}"
13958,"Set the SQL statement (query the creator information in the $channels$ table where channel_name is $channel_name$). Use $conn$ to execute the SQL statement, get all the query results and print them.","public void selectValue(JdbcTemplate conn,String channel_name){
List results = conn.query(""select creator from channels where channel_name = ?"", new Object[]{channel_name}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
}"
13142,"Execute the SQL (get the polyline column in the boundary_data table where adcode is $adcode$) with $conn$, get all the data, and return the query results.","public List update(JdbcTemplate conn,String adcode){
List res = conn.query(""select polyline from boundary_data WHERE adcode = ?"", new Object[]{adcode}, new BeanPropertyRowMapper(List.class));
return res;
}"
13808,Get the database engine through $AIRFLOW_SQL_ALCHEMY_CONN_KEY$. Execute SQL statement (query the number of all columns in the dag table with tag as $tag$) and get the first piece of data. Return the query results.,"public Object getDagData(DataSource AIRFLOW_SQL_ALCHEMY_CONN_KEY, String tag){
JdbcTemplate engine = new JdbcTemplate(AIRFLOW_SQL_ALCHEMY_CONN_KEY);
List data = engine.query(""select count(*) from dag where tag = ? "", new Object[]{tag}, new BeanPropertyRowMapper(List.class));
return data.get(0);
}"
11359,"Use $conn$ to execute SQL (query all the data in the idProduct column of the Product table based on $WName$ and $PCode$), use for loop to traverse each query result, insert the data one by one into the list and return.","public List updateWebsite(JdbcTemplate conn,String WName,String PCode){
List engine = conn.query(""select idproduct from product where wname =? and pcode=?"", new Object[]{WName,PCode}, new BeanPropertyRowMapper(List.class));
return engine;
}"
11423,"Create cursor by $conn$, set SQL (query all information in user_table table based on $name$), execute SQL and commit operation, print ""Total records of rows updated :"" and 'rowcount' attribute of cursor.","public void selectOperate(DataSource conn, String name){
JdbcTemplate cursor = new JdbcTemplate(conn);
List data = cursor.query(""select * from user_table where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(""Total records of rows updated :""+data.size());
}"
13220,Execute the SQL statement (query all the columns of the table_name) with $conn$ and print each item in the query result using the for loop.,"public void sqlite3ViaNames(JdbcTemplate conn){
List results = conn.query(""select * from table_name"", new BeanPropertyRowMapper(List.class));
for (Object row : results) {
System.out.println(row);
}
}"
11579,"If the request module sends the request in a post method, use the $conn$ connection to execute SQL (query the first author data in the books through $bid$), render and return ""book.html"", where the bookInfo parameter is the query result; otherwise, render and return ""error.html"".","public Object bookInfo(HttpRequest request, JdbcTemplate conn, String bid,Model model){
if (request.getMethod().equals(""POST"")){
List book_outs = conn.query(""select author from books where bid = ?"", new Object[]{bid}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""bookInfo"", book_outs.get(0));
return ""book.html"";
} else {
return ""error.html"";
}
}"
13692,"Execute the SQL using $db$(query the information of name in the books where isbn is $isbn$) and get all the data. If the result of the query is None, return Error. Otherwise, return the query as a list.","public Object getBookName(JdbcTemplate db,String isbn){
List book_names = db.query(""select name from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (book_names.isEmpty()){
return ""Error"";
}else {
return book_names;
}
}"
13456,Use the java expression to execute SQL through $conn$ (get all columns in the $jUserAttrs$ table with user_id as $uid$). Then use for loop to print each item of the query results.,"public void getUserAttributes(EntityManager conn, Root<Object> jUserAttrs, String uid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(jUserAttrs).where(cb.equal(jUserAttrs.get(""user_id""),uid));
List<Object> res = conn.createQuery(cq).getResultList();
for (Object row : res) {
System.out.println(row);
}
}"
11046,"If $session$ gets the information about logged_in, get the connection through $eng$. Execute SQL (query all columns in the logs table according to $ip$), get all the data, pass the query result into the logs parameter and return the rendered 'settings.html' page. If the logged_in is not obtained, return the 'login' page through url_for and redirect.","public String settings(DataSource eng, String ip, HttpSession session,Model model){
if(session.getAttribute(""logged_in"")!=null){
JdbcTemplate conn = new JdbcTemplate(eng);
List result = conn.query(""select * from logs where ip= ? "", new Object[]{ip}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""logs"", result);
return ""settings.html"";
}else {
return ""/login"";
}
}"
13766,Set SQL based on the java expression (query all columns in the $articles_table$ table based on $articleID$). Execute SQL through $conn$ and return the rowcount field of the query result.,"public void getArticlePublication(EntityManager conn, Root<Object> articles_table, String articleID){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(articles_table).where(cb.equal(articles_table.get(""articleID""),articleID));
List<Object> result = conn.createQuery(cq).getResultList();
System.out.println(result.size());
}"
14300, connect to the database according to $lite_engine$. Use the java expression to execute the SQL statement (query all the id data in the $table$ table based on $name$) and return the execution result.,"public List queryTable(EntityManager lite_engine, Root<Object> table, String name){
CriteriaBuilder cb = lite_engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""articleID""),name));
List<Object> rows = lite_engine.createQuery(cq).getResultList();
return rows;
}"
13558,"Set SQL based on the java expression (query the time column in the $scans$ table based on $date$). Execute SQL through $con$ and get all the data, use for loop to convert each query result to dict, store it as list, and finally return this list.","public List getScan(EntityManager con, Root<Object> scans, String date){
CriteriaBuilder cb = con.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(scans).where(cb.equal(scans.get(""date""),date));
List<Object> res = con.createQuery(cq).getResultList();
List result_dicts = new ArrayList();
for (Object row : res) {
result_dicts.add(row);
}
return result_dicts;
}"
11439,"Try to use $conn$ to execute SQL (query all columns in the event table based on $amount$ and $user_id$) and get all the data. Use for loop to store each piece of query results in a list. If a SQLAlchemyError exception occurs during execution, print the exception name as a string.","public Object makePledge(JdbcTemplate conn,String amount,String user_id){
try {
List events = conn.query(""select * from event where amount = ? and user_id = ?"", new Object[]{amount,user_id}, new BeanPropertyRowMapper(List.class));
return events;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11548,"Try to use $conn$ to query all columns in the Class table with id as $id$ and get all the data and return the query result. If an AttributeError exception occurs, use raise to throw the exception and attach the exception message ""must fail"" through the Exception ().","public Object testInheritance(JdbcTemplate conn,String id){
try {
List numbers = conn.query(""select * from class where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return numbers;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11366,"Use $conn$ to execute SQL (query all the query results of all the information in the artist table based on $rarity$ and $layout$), use for loop to insert the data one by one into a list, and return this list.","public List generateAbridgedIndexSet(JdbcTemplate conn,String rarity,String layout){
List query = conn.query(""select * from artist where rarity=? and layout=?"", new Object[]{rarity,layout}, new BeanPropertyRowMapper(List.class));
List new_card_set = new ArrayList();
for (Object i : query) {
new_card_set.add(i);
}
return new_card_set;
}"
13181,"Execute the SQL (get all the columns in the results where the name of user is $username$) with $conn$, get all the data, and return the query results.","public List dashboard(JdbcTemplate conn,String username){
List all_results = conn.query(""select * from results where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return all_results;
}"
13603,"Set up SQL: Query the title information in the books table where isbn is $isbn$. Use $db$ to execute SQL and get the first data. If the query result is equal to None, then return to the serialized {""error"":""Invalid isbn""}. Otherwise, return to the serialized query result. ""","public JSONObject booksApi(JdbcTemplate conn,String isbn){
List book_infos = conn.query(""select title from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (book_infos.isEmpty()){
JSONObject jsonObject = new JSONObject();
jsonObject.put(""error"",""Invalid isbn"");
return jsonObject;
}else {
return JSONObject.parseObject(book_infos.get(0).toString());
}
}"
13286,"Execute the SQL statement with $conn$ (get the book_id column in the book) , get all the data, and print each item in the query results using the for loop.","public void searchBookId(JdbcTemplate conn){
List book_ids = conn.query(""select book_id from book"", new BeanPropertyRowMapper(List.class));
for (Object i : book_ids) {
System.out.println(i);
}
}"
13893,Execute the SQL statement using $conn$ with the following contents: Query all the columns in the database based on $addend1$ and $addend2$ and get all the data. Use for loop to store each element of the query results in the list and return the contents of the list.,"public List testDo(JdbcTemplate conn,String addend1,String addend2){
List res = conn.query(""select * from database where addend1 = ? and addend2 = ?"", new Object[]{addend1,addend2}, new BeanPropertyRowMapper(List.class));
List res_list = new ArrayList();
for (Object row : res) {
res_list.add(row);
}
return res_list;
}"
13872,"Execute SQL statement through $conn$: Query all columns in the books table based on $title$, $author$ and $year$ and get all the data. Render and return 'list_selections.html', where the selections parameter is the query result.","public String search(JdbcTemplate conn,String title,String author,String year,Model model){
List selections = conn.query(""select * from books where title = ? and author = ? and year = ?"", new Object[]{title,author,year}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""selections"", selections);
return ""list_selections.html"";
}"
11153,"Connect to the database according to $session$. Try to execute the SQL statement (get all the columns in the tooth where typeslice is $typeslice$) and get all the data, return all the query results. Return False if an exception occurs.","public Object dbConnect(DataSource session, String typeslice){
try {
JdbcTemplate conn = new JdbcTemplate(session);
List data = conn.query(""select * from tooth where typeslice= ? "", new Object[]{typeslice}, new BeanPropertyRowMapper(List.class));
return data;
}catch (Exception e){
return false;
}
}"
11068,"Try to use $conn$ to execute SQL (query all columns in the merged_imw table based on $mtr$), get all the data, and return the query results. If an exception occurs, pass directly.","public Object queryPostGres(JdbcTemplate conn, String mtr){
try {
List res = conn.query(""select * from merged_imw where mtr= ? "", new Object[]{mtr}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return null;
}
}"
13139,"Execute the SQL with $conn$ (get the name column in the accounts where the username is $name$) and get all the data, then set the assertion query result not equal to the list type.","public void testStrlen(JdbcTemplate conn,String name){
List result = conn.query(""select name from accounts where username= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
assert result.size()!=0;
}"
13719,"Get the database engine and establish a connection through $db_uri$. Execute the SQL statement (query all the columns in the database table according to $name$), get all the data, close the connection, and return the query results.","public List tearDown(DataSource db_uri, String name){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List e = conn.query(""select * from database where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return e;
}"
13034,"""Use the way of a java expression to set SQL (query the email information in the $users$ table when id is $user_id$). Use $conn$ to execute SQL, return the judgment result that the rowcount attribute of the execution result is equal to 1.","public boolean queryEmail(EntityManager conn, Root<Object> users, String user_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""id""),user_id));
List<Object> res = conn.createQuery(cq).getResultList();
return res.size()==1;
}"
11015,"""Create cursor via $conn$ and execute SQL via cursor: Query all ids in tableName table based on $tab_name$. Print number of rows of query result and close indexer. Commit via $conn$, close the connection and return the results.","public List createUser(DataSource conn, String tab_name){
JdbcTemplate cursor = new JdbcTemplate(conn);
List idtext = cursor.query(""select id from tablename where tab_name= ? "", new Object[]{tab_name}, new BeanPropertyRowMapper(List.class));
System.out.println(idtext.size());
return idtext;
}"
13457,"""Execute the SQL through $conn$ (get the title column in the books table based on $isbn$). If the number of rows of the query result is 0, return the rendered ""error.html"". Then get all the query data and finally return the rendered ""results.html"", where the books parameter is all the query data.","public String search(JdbcTemplate conn,String isbn, Model model){
List books = conn.query(""select title from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}
else {
model.addAttribute(""books"",books);
return ""results.html"";
}
}"
14166,"""Execute the SQL statement via $connection$: Query all columns in the flights table whose 'id' is $flight_id$ and get the first piece of data. If the obtained data is empty, return None;; otherwise, return the obtained data.","public Object flight(JdbcTemplate connection,String flight_id){
List flights = connection.query(""select * from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
return null;
}else {
return flights.get(0);
}
}"
13777,Get the database engine through $db_algorithms$ and further get the Session object. Execute the SQL statement (query the engine column in the Sess table according to $maker$) and return all the obtained data.,"public List readTableBySql(DataSource db_algorithms, String maker){
JdbcTemplate session = new JdbcTemplate(db_algorithms);
List row = session.query(""select engine from sess where maker =? "", new Object[]{maker}, new BeanPropertyRowMapper(List.class));
return row;
}"
11070,"""Use $conn$ to execute SQL (query the review_count in the book table based on $average_score$) and get the first piece of data. If the query result is None, return the serialized {""error"": ""Invalid""}. Otherwise, return the query result.","public JSONObject reviewApi(JdbcTemplate conn,String average_score){
List reviews = conn.query(""select review_count from book where average_score= ?"", new Object[]{average_score}, new BeanPropertyRowMapper(List.class));
if (reviews.isEmpty()){
JSONObject jsonObject = new JSONObject();
jsonObject.put(""error"", ""Invalid"");
return jsonObject;
}else {
return JSONObject.parseObject(reviews.get(0).toString());
}
}"
13026,"""If the request method of request is ""POST"", use $conn$ to execute SQL (query the onename in the books table when id equals $book_id$) and get the first piece of data. Return the rendered ""details.html"" and pass the query result to the bookone parameter""","public String book(HttpRequest request, JdbcTemplate conn, String book_id,Model model){
if (request.getMethod().equals(""POST"")){
List bookones = conn.query(""select onename from books where id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""bookone"", bookones.get(0));
return ""details.html"";
} else {
return null;
}
}"
11637,"""Get the database engine through $baasu$ and execute SQL (get all the columns in the Temperature_table according to $lat$), get all the data, and finally return the query result.","public List getTemperatures(DataSource baasu, String lat){
JdbcTemplate db = new JdbcTemplate(baasu);
List json_temps = db.query(""select * from Temperature_table where lat= ? "", new Object[]{lat}, new BeanPropertyRowMapper(List.class));
return json_temps;
}"
13914,"""Set the SQL statement: Query the hours data in the student table through $username$, use the $conn$ connection to execute SQL and get all the data. If the length of the execution result is greater than 0, convert the hours and name of the 0th element of the execution result to str, take the results converted to str type as the corresponding values of ""hours"" and ""name"" respectively, and use jsonify to return.","public JSONObject getStudentInfo(JdbcTemplate conn,String username){
List res = conn.query(""select hours from student where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (res.size()>0){
String hours = JSONObject.parseObject(res.get(0).toString()).getString(""hours"");
String name = JSONObject.parseObject(res.get(0).toString()).getString(""name"");
JSONObject results = new JSONObject();
results.put(""hours"", hours);
results.put(""name"", name);
return results;
}else {
return null;
}
}"
13540,"""Set SQL based on the java expression (query the surname column in the $candidates$ table based on $name$). Execute SQL through $conn$, get all the data and return the query results.","public List fillCandidates(EntityManager conn, Root<Object> candidates, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(candidates).where(cb.equal(candidates.get(""name""),name));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
13502,"""Get the database engine through $postgresql_uri$. Execute the SQL statement (query the ROLE column in the database table according to $PASSWORD$), get all the data, and return the query results.","public List selectDatabase(DataSource postgresql_uri, String PASSWORD){
JdbcTemplate engine = new JdbcTemplate(postgresql_uri);
List res = engine.query(""select ROLE from database where PASSWORD= ? "", new Object[]{PASSWORD}, new BeanPropertyRowMapper(List.class));
return res;
}"
13598,"""Connect the database with $db$, execute SQL according to the java expression (query all columns in the $users$ table based on $user_id$), get all the data, close the connection, and return the query results.","public List testRollbackToSubtransaction(EntityManager db, Root<Object> users, String user_id){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""user_id""),user_id));
List<Object> res = db.createQuery(cq).getResultList();
return res;
}"
11288,"""Use $conn$ to execute SQL based on the java expression (get the name column in the $t$ table where 'variants' is $variants$) and get all the data, and finally return the query result.","public List allTests(EntityManager conn, Root<Object> t, String variants){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(t).where(cb.equal(t.get(""variants""),variants));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
13615,"""If $username$ is None, return to False. Otherwise, use $pg_root_engine$  to get the connection: set the SQL (query the page information in the database where username is $username$). Execute the SQL using the database connection and get all the data. Close the connection and return each item in the query result as a dict type.","public Object getPg(DataSource pg_root_engine, String username){
if (username==null){
return false;
}else {
JdbcTemplate engine = new JdbcTemplate(pg_root_engine);
List pg = engine.query(""select page from database where username= ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return pg;
}
}"
13090,"""Use $conn$ to execute SQL (query the review_count in the ana_books table based on $isbn$) and get the first piece of data. Return Fasle if the query result is equal to None. Otherwise, return the query results.","public Object booksApi(JdbcTemplate conn,String isbn){
List review_counts = conn.query(""select review_count from ana_books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (review_counts.isEmpty()){
return null;
}else {
return review_counts.get(0);
}
}"
14086,"""Use the java expression to set the SQL statement through $sess$: Query all data in the $users$ table where id is $id$. Set the assertion to determine that the length of the query result is greater than 1, and return the query result.","public List testMapped(EntityManager sess, Root<Object> users, String id){
CriteriaBuilder cb = sess.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""id""),id));
List<Object> res = sess.createQuery(cq).getResultList();
assert res.size()>1;
return res;
}"
11225,"""Connect to the database via $db_connect$ and execute SQL (query the conments in the table_name table based on $status$), get all the data, and finally return the result.","public List checkForRun(DataSource db_connect, String status){
JdbcTemplate conn = new JdbcTemplate(db_connect);
List query = conn.query(""select conments from table_name where status= ? "", new Object[]{status}, new BeanPropertyRowMapper(List.class));
return query;
}"
11296,Execute SQL with $conn$ (get all columns in 'states' based on $tbl$) and get all the data. Finally convert each item in the query result into dictionary type and use jsonify to process 'States' and the dictionary content.,"public JSONObject states(JdbcTemplate conn,String tbl){
List States = conn.query(""select * from states where tbl= ?"", new Object[]{tbl}, new BeanPropertyRowMapper(List.class));
JSONObject jsonObject = new JSONObject();
jsonObject.put(""States"", States);
return jsonObject;
}"
14106,"""Use $teng$ to connect to the database in the execute the SQL statement as a java expression: Get the first piece of data in the $table$ table. Set the assertion to determine that the query result converted to list is greater than 0, and return the query results.","public List testSerialColumn(EntityManager teng, Root<Object> table){
CriteriaBuilder cb = teng.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table);
List<Object> results = teng.createQuery(cq).getResultList();
assert results.size()>0;
return results;
}"
11484,"""Set up SQL (query the user_name column in the users table based on $user_id$), execute SQL with $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List setupClass(JdbcTemplate conn,String user_id){
List results = conn.query(""select user_name from users where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
List user_names = new ArrayList();
for (Object result : results) {
user_names.add(result);
}
return user_names;
}"
13693,"""If the request request mode is POST, execute the SQL (querying all columns in the users table where email is $email$) with $conn$ and get all the data. If the query data length is equal to 0, the rendered 'login.html', otherwise, return rendered 'login.html' and pass the query result to the data parameter.","public Object login(HttpRequest request, JdbcTemplate conn, String email,Model model){
if (request.getMethod().equals(""POST"")){
List data = conn.query(""select * from users where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
if (data.isEmpty()){
return ""login.html"";
}
else {
model.addAttribute(""data"", data);
return ""login.html"";
}
} else {
return null;
}
}"
13681,"""Execute the SQL using $conn$ (all columns in the RIDERS where the engine is $mock_engine$). Set the assertion that the query result is not an empty list, and finally store element 0 for each item of data in the query result in the list and return it.","public List testSessionScope(JdbcTemplate conn,String mock_engine){
List result = conn.query(""select * from riders where engine= ?"", new Object[]{mock_engine}, new BeanPropertyRowMapper(List.class));
assert result.size()>0;
List list = new ArrayList();
for (Object r : result) {
list.add(JSONObject.parseObject(r.toString()).get(0));
}
return list;
}"
11092,"""Use $conn$ to execute SQL (query the name in the player_master table based on $player_id$) and get all the data. Using for loop, each time print the strings concatenated ""PLAYER_NAME ="" with the string type of 0th element of each item in the query result.","public void getPlayerName(JdbcTemplate conn,String player_id){
List result = conn.query(""select name from player_master where player_id= ?"", new Object[]{player_id}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(""PLAYER_NAME = ""+JSONObject.parseObject(row.toString()).get(0));
}
}"
13855, connect to the database based on $engine$. Query the the first piece of result in the database table with id as $taskid$. Use for loop iterate through the query results and output the query results using logging.info().,"public void start(DataSource engine, String taskid){
JdbcTemplate cursor = new JdbcTemplate(engine);
List allRows = cursor.query(""select result from database where id = ? "", new Object[]{taskid}, new BeanPropertyRowMapper(List.class));
for (Object row : allRows) {
System.out.println(row);
}
}"
11685,"""Use the cursor method of $db$ to execute SQL (get all the columns in the DATABASE table according to $name$), get the first piece of data, then ensure that the $db$ connection is closed, and finally return the query result.","public Object getDatabase(DataSource db, String name){
JdbcTemplate cursor = new JdbcTemplate(db);
List data = cursor.query(""select result from database where id = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return data.get(0);
}"
13380,"""Connect the database with $testing$, try to execute SQL (query all columns in the users table based on $name$), get all the query results, return the query results, and make sure that the connection is closed.","public Object testFlulsh(DataSource testing, String name){
JdbcTemplate cursor = new JdbcTemplate(testing);
try {
List flulsh = cursor.query(""select * from users where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return flulsh;
} finally {
return null;
}
}"
11283,"""If use the get method of $session$ to get 'logged_in', use $engine$ to connect to the database. Execute SQL based on the java expression to get all the columns in the $prtnr$ table with 'partner' of $partner$ and get all the data. Return the rendered' useradmin.html', where the query parameter is the query result, otherwise return the rendered 'login.html'.","public String settings(EntityManager engine, Root<Object> prtnr, String partner, HttpSession session, Model model){
if(session.getAttribute(""logged_in"")!=null){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(prtnr).where(cb.equal(prtnr.get(""partner""),partner));
List<Object> query = engine.createQuery(cq).getResultList();
model.addAttribute(""query"", query);
return ""useradmin.html"";
}else {
return ""login.html"";
}
}"
14215,"""If the request module sends the request as post, try to execute SQL (query the first id in users by $username$) through $conn$ connection and return the query results; if there is an exception, throw out through raise.","public Object queryId(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
try {
List user_ids = conn.query(""select id from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return user_ids.get(0);
}catch (Exception e){
e.printStackTrace();
return null;
}
} else {
return null;
}
}"
13003,"""Use the string format method to set the SQL (query the tn in the mytable based on $vt$). Use $conn$ to execute SQL and get all the data. Finally, return the query results.","public List queryRow(JdbcTemplate conn,String vt){
List res = conn.query(""select tn from mytable where vt= ?"", new Object[]{vt}, new BeanPropertyRowMapper(List.class));
return res;
}"
13945,"""Set the SQL statement with the java expression (get the data in $table$ table based on $name$), use the $conn$ connection to execute SQL, get all the data and return.","public List getTableSummary(EntityManager conn, Root<Object> table, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""name""),name));
List<Object> data = conn.createQuery(cq).getResultList();
return data;
}"
14075,"""Execute SQL through $conn$: Query all the columns in the books table through $isbn$, get the first piece of data. Return ""Error"" if the query result is empty; otherwise, return the query result.
*","public Object api(JdbcTemplate conn,String isbn){
List book_infos = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (book_infos.isEmpty()){
return ""Error"";
}else {
return book_infos.get(0);
}
}"
14196,"""Try to use $conn$ to execute SQL: Query the first piece of username data in the users table where id is $isbn$ and return the query results. If an exception occurs, render and return ""error.html"".","public Object submitReview(JdbcTemplate conn,String isbn){
try {
List users = conn.query(""select username from users where id = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return users.get(0);
}catch (Exception e){
return ""error.html"";
}
}"
11460,"""Set up SQL (query the description column in the Kipartman_Parts table based on $name$), execute SQL with $connection$ and get all the query results, use for loop to iterate through all the query results and print each piece of data. Close the connection and return the query result.","public List fetch(JdbcTemplate connection,String name){
List descriptions = connection.query(""select description from kipartman_parts where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object row : descriptions) {
System.out.println(row);
}
return descriptions;
}"
13859,"""Use $conn$ to query all the columns in the books table with search as $search$ and get all the data. If the query result is not empty list, render and return ""result.html"", where the books parameter is the query results.","public String result(JdbcTemplate conn,String search,Model model){
List res = conn.query(""select * from books where search = ?"", new Object[]{search}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
model.addAttribute(""books"", res);
return ""result.html"";
}else {
return null;
}
}"
13956,"""Set the SQL statement: Get all the columns in the box_data according to $box_id$, execute SQL through the $conn$ connection, get all the data, and return the obtained data.","public List selectTable(JdbcTemplate conn,String box_id){
List results = conn.query(""select * from box_data where box_id = ?"", new Object[]{box_id}, new BeanPropertyRowMapper(List.class));
return results;
}"
13108,"""Try to use $url$ to get the database engine and execute the SQL (get all columns from SCHEMATA where SCHEMA_NAME is $database$) and get all the data, return the query result, or return False.","public Object databaseExists(DataSource url, String database){
try {
JdbcTemplate engine = new JdbcTemplate(url);
List result = engine.query(""select * from schemata where schema_name = ? "", new Object[]{database}, new BeanPropertyRowMapper(List.class));
return result;
}catch (Exception e){
return false;
}
}"
11676,"""Use the ORM method and $connection$ to execute SQL (get all the columns in the $table_schema$ table where Creator is $creator$), get all the data, then make sure that the $connection$ connection is closed, and finally return the query result.","public List getAllData(EntityManager connection, Root<Object> table_schema, String creator){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_schema).where(cb.equal(table_schema.get(""creator""),creator));
List<Object> res = connection.createQuery(cq).getResultList();
return res;
}"
13009,"""Use $engine$  to start a connection. Use java expressions to set SQL (query the id in the $table$ table when col is $too_old$). Use the connection to execute the SQL and get all the data. Finally, return the query result.","public List queryOldRecs(EntityManager engine, Root<Object> table, String too_old){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""col""),too_old));
List<Object> old_recs = engine.createQuery(cq).getResultList();
return old_recs;
}"
14046,"""Use the $db_conn$ connection to execute SQL (query all columns in the imdb_actormovies table through $id$), get all the data, return query results of type list.","public List getactorsMovie(JdbcTemplate db_conn,String id){
List db_result = db_conn.query(""select * from imdb_actormovies where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return db_result;
}"
13542,"""Get the database engine through $db$, and the echo parameter is set to False. Try to execute the SQL statement (query all the columns in the users table according to $number$), get all the data, and return the query results. If an OperationalError exception is caught, return False.","public Object chkDB(DataSource db, String number){
try {
JdbcTemplate engine = new JdbcTemplate(db);
List result = engine.query(""select * from users where number= ? "", new Object[]{number}, new BeanPropertyRowMapper(List.class));
return result;
}catch (Exception e){
return false;
}
}"
11666,"""Use the $directory_uri$ to get database engine, execute SQL according to the java expression (get the name column in the $sqlite_master$ table whose type is $type$), get all the data, use for loop to store the 0th element of each item of the query result as a list type and return.","public List getNames(EntityManager directory_uri, Root<Object> sqlite_master, String type){
CriteriaBuilder cb = directory_uri.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(sqlite_master).where(cb.equal(sqlite_master.get(""type""),type));
List<Object> names = directory_uri.createQuery(cq).getResultList();
List got = new ArrayList();
for (Object row : names) {
got.add(JSONObject.parseObject(row.toString()).get(0));
}
return got;
}"
11660,"""Use the $testing$ to connect the database and execute SQL (get the foo column in the test table according to $id$), get the first piece of data, and finally return the query result.","public List getFoo(DataSource testing, String id){
JdbcTemplate conn = new JdbcTemplate(testing);
List result = conn.query(""select foo from test where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return result;
}"
13058,"""Use $session$ to execute SQL (query all columns in TABLES when TABLE_SCHEMA equals $database_name$) and get all the data. In the for loop, the 0th element of each item of the query result is taken as the corresponding value of 'value' in the dictionary, the 1st element is used as the corresponding value of 'label' in the dictionary, and then add the dictionary to the list. Close $session$ and return the processed list.","public List findTableList(JdbcTemplate session,String database_name){
List result = session.query(""select * from tables where table_schema = ?"", new Object[]{database_name}, new BeanPropertyRowMapper(List.class));
List result_list = new ArrayList();
for (Object r : result) {
JSONObject jsonObject = new JSONObject();
jsonObject.put(""value"", JSONObject.parseObject(r.toString()).get(0));
jsonObject.put(""label"", JSONObject.parseObject(r.toString()).get(1));
result_list.add(jsonObject);
}
return result_list;
}"
13447,Try to use $conn$ to execute SQL (get all columns in query_users table based on $user_id$). Then set assertion to get all data with non-zero length and finally make sure $conn$ connection is closed.,"public void testRollbackOffConn(JdbcTemplate conn,String user_id){
try {
List result = conn.query(""select * from query_users where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
assert result.size()!=0;
}finally {

}
}"
13545,"""Open and read the file ""books.csv"", use for loop to traverse the id and author in the file, use $conn$ to execute SQL (query all the columns in the books table based on $id$ and $author$), get all the query results, and print them.","public void main(JdbcTemplate conn){
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String id = sc.nextLine();
String author = sc.nextLine();
List res = conn.query(""select * from books where id=? and author=?"", new Object[]{id,author}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
11406,"""Use $e$ to establish the connection, set up the SQL (query the price column in the cars table based on $carid$), execute the SQL and get all the query result based on $conn$, and return the execution result.","public List selectValue(DataSource e, String carid){
JdbcTemplate conn = new JdbcTemplate(e);
List prices = conn.query(""select price from cars where carid =? "", new Object[]{carid}, new BeanPropertyRowMapper(List.class));
return prices;
}"
13202,"""Execute the SQL (get all the columns in the INFORMATION_SCHEMA where the TABLE_SCHEMA is $schemaname$ and the TABLE_NAME is $tablename$) using $conn$ and get all the data. The 0th and 1th elements of each item in the query result are treated as the key and value in the dictionary, and finally the processed dictionary is returned.","public List getTypes(JdbcTemplate conn,String schemaname,String tablename){
List res = conn.query(""select * from information_schema where table_schema =? and table_name =?"", new Object[]{schemaname,tablename}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object re : res) {
JSONObject jsonObject = new JSONObject();
jsonObject.put(JSONObject.parseObject(re.toString()).get(0).toString(), JSONObject.parseObject(re.toString()).get(1));
list.add(jsonObject);
}
return list;
}"
13817,Connect to the database through $conn$ and execute SQL (query all flight data in flights based on $flight_id$). Use for loop to store the query results into list and return all the query results.,"public List flight(JdbcTemplate conn,String flight_id){
List flights = conn.query(""select flight from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
List res =new ArrayList();
for (Object row : flights) {
res.add(row);
}
return res;
}"
11088,"""In ORM mode, use $conn$ to execute SQL (query all the information in the $usersTB$ table based on $username$ and $password$) and get the first piece of data. If the query data exists, write True to the value corresponding to logged_in in the $session$ dictionary and redirect to '/ todo/page/1', otherwise redirect to '/ login'.","public String selectRes(EntityManager conn, Root<Object> usersTB, String username,String password,HttpSession session){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(usersTB).where(cb.equal(usersTB.get(""username""),username));
cq.select(usersTB).where(cb.equal(usersTB.get(""password""),password));
List<Object> users = conn.createQuery(cq).getResultList();
if (!users.isEmpty()){
if (session.getAttribute(""logged_in"")!=null){
return ""/todo/page/1"";
}else {
return ""/login"";
}
}else {
return ""/login"";
}
}"
14169,"""Execute the SQL statement via $conn$ (query 'author' and 'year' in the books table whose isbn is $ID$). If the number of rows of execution results is 0, render and return ""error.html"". Otherwise, render and return ""results.html"", where the books parameter is all the obtained results.","public String search(JdbcTemplate conn,String ID,Model model){
List books = conn.query(""select author, year from books where isbn = ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""books"", books);
return ""results.html"";
}
}"
11023,"""Use $conn$ to execute SQL (query the girl information in the users table based on $name_User$) and get all the data. If the length of the query result is 0, print ""no data"". Otherwise, use for loop to store the 0th element of each item of the query result and return.","public List getOne(JdbcTemplate conn,String name_User){
List texts = conn.query(""select girl FROM users WHERE name_User= ?"", new Object[]{name_User}, new BeanPropertyRowMapper(List.class));
if (texts.isEmpty()){
System.out.println(""no data"");
return null;
}else {
List girls = new ArrayList();
for (Object i : texts) {
girls.add(JSONObject.parseObject(i.toString()).get(0));
}
return girls;
}
}"
13765,"""Initialize the log module, try to use $db_url$ to get the database engine,  connect the database, set SQL (query the table_name column in the STDIN table according to $string_data_io$), execute sql, get all the data, and return the query results. If an exception occurs during execution, output the info log.","public List appendToTable(DataSource db_url, String string_data_io){
try {
JdbcTemplate connection = new JdbcTemplate(db_url);
List copy_cmd = connection.query(""select table_name from stdin where string_data_io= ? "", new Object[]{string_data_io}, new BeanPropertyRowMapper(List.class));
return copy_cmd;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11567,"""Set up the SQL statement: Query all the columns in tb through $name$, using the % operator to match the conditions in the SQL string. Use the $conn$ connection to execute the SQL statement to get all the data and return all the query results.","public List dbEtlByname(JdbcTemplate conn,String name){
List res = conn.query(""select * from tb where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
11306,"""Use $conn$ to execute SQL (query the first row of data in the flights table according to $gh_id$), and if no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page, where the flight parameter is the query result.","public String flight(JdbcTemplate conn,String gh_id,Model model){
List flights = conn.query(""select * from flights where gh_id = ?"", new Object[]{gh_id}, new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""flight"", flights.get(0));
return ""flight.html"";
}
}"
14078,"""Connect to the database through $tlengine$, try to execute a SQL: Query the name statistics in the query_users table, get the first piece of data, and return the query results. Finally, close the database connection.","public List testNesting(DataSource tlengine){
JdbcTemplate external_connection = new JdbcTemplate(tlengine);
List res = external_connection.query(""select count(name) from query_users "", new BeanPropertyRowMapper(List.class));
return res;
}"
11577,"""Get the database engine through $url$, where the client_encoding parameter is 'utf8'. Query all columns in the person table where name is $name$ and psd is $psd$ through $con$, and get all the data. Use for loop to traverse the query results, print the corresponding values of name and lastname in the query results, and return all the query results.","public List person(DataSource url,String name,String password){
JdbcTemplate con = new JdbcTemplate(url);
List infos = con.query(""select * from person where name = ? and psd = ? "", new Object[]{name,password}, new BeanPropertyRowMapper(List.class));
for (Object info : infos) {
System.out.println(JSONObject.parseObject(info.toString()).getString(""name""));
System.out.println(JSONObject.parseObject(info.toString()).getString(""lastname""));
}
return infos;
}"
13085,"""In ORM mode, use $conn$ to execute SQL (query the ID in the $User$ table when NAME equals $name$) and get the first piece of data. If the query result is not None, return directly. Otherwise, return -1.","public Object load(EntityManager conn, Root<Object> User, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""name""),name));
List<Object> restids = conn.createQuery(cq).getResultList();
if (restids.isEmpty()){
return -1;
}
else {
return restids.get(0);
}
}"
14237,Execute SQL through the $conn$ connection (query all columns in the users based on $email$) to get the first piece of data and return if the obtained data is not empty.,"public Object validateEmail(JdbcTemplate conn,String email){
List users = conn.query(""select * from users where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
return null;
}else {
return users.get(0);
}
}"
13279,Set the SQL based on a java expression (get the maximum value in $orders_intern$ where the werkorderID is $werkorderID$) . Execute SQL with $conn$ and get all the data. Close $conn$ and return the query results.,"public List getSource(EntityManager conn, Root<Object> orders_intern, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(orders_intern);
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}"
11245,Use dbsession method of $conn$ to execute the SQL (get the STGeometryType column in SHAPE based on $name$) and get all the data. Finally return the query result.,"public List findGisDatatypeOftable(JdbcTemplate conn,String name){
List st_type = conn.query(""select stgeometrytype from shape where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return st_type;
}"
13157,"""Execute the SQL (get all the columns in the books where ratings_count is $ratings_count$) with $conn$, get all the data, and finally return the query result content handled by jsonify.","public JSONArray selectRecords(JdbcTemplate conn, String ratings_count){
List res = conn.query(""select * from books where ratings_count = ?"", new Object[]{ratings_count}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(res.toString());
}"
13254,"""Execute the SQL statement (select all columns in the books table where title is $title$) with $conn$ and get all the data. Return the rendered ""search_result.html"" page, where the results parameter is the query result.","public String selectBooksValue(JdbcTemplate conn,String title,Model model){
List book_res = conn.query(""select * from books where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"", book_res);
return ""search_result.html"";
}"
13517,"""Connect the database with $testing$, execute SQL (query the user_name column in the users table according to $user_id$), get all the query results, close the connection, and return the query results.","public List testMultipleTwoPhase(DataSource testing, String user_id){
JdbcTemplate conn = new JdbcTemplate(testing);
List res = conn.query(""select user_name from users where user_id= ? "", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return res;
}"
13664,"""Experiment with SQL using $conn$ (query schema_name information in schema where schema_id is $schema_id$), and save element 0 for each item of all the data in the list. If an exception occurs, the exception is thrown based on the specific information of the exception. Finally, return query data.","public List getDatabases(JdbcTemplate conn,String schema_id){
List databases = new ArrayList();
try {
List crs = conn.query(""select schema_name from schema where schema_id= ?"", new Object[]{schema_id}, new BeanPropertyRowMapper(List.class));
for (Object line : crs) {
databases.add(JSONObject.parseObject(line.toString()).get(0));
}
}catch (Exception e){
e.printStackTrace();
}
return databases;
}"
11654,"""Try to use $db$ to execute SQL (get the result column in the meishi_collection table where taskid is $id$) and get all the data. Use for loop to store each item in the query result as a list type. If an exception occurs during execution, the exception is printed.","public Object getResult(JdbcTemplate db,String id){
try {
List rs = db.query(""select result from meishi_collection where taskid= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return rs;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13971,"""Set the SQL statement: Query the number of all columns in the 'table' table according to $value$, and use $conn$ to execute the SQL to get all the data. If the 0th element of the execution result is 0, return True; otherwise, return False.","public boolean singleCount(JdbcTemplate conn,String value){
List count = conn.query(""select count(*) from table where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
if (Integer.parseInt(JSONObject.parseObject(count.get(0).toString()).toString())==0){
return true;
}else {
return false;
}
}"
11200,Execute the SQL statement with $session$ in ORM mode: query for the first password where the name of user is $user_name$ in the $User_bao$. Print query results and return.,"public Object selectRes(EntityManager session, Root<Object> User_bao, String user_name){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User_bao).where(cb.equal(User_bao.get(""user_name""),user_name));
List<Object> password_vals = session.createQuery(cq).getResultList();
System.out.println(password_vals.get(0));
return password_vals.get(0);
}"
13809,"""Connect to the database using $engine$. Try to query the columns in the sometable table through $tid$ and get the first data piece of and return the query results. If there is the Exception exception, print the exception message and set the exception manually using raise.","public List testInvalidateOnResults(DataSource engine, String tid){
JdbcTemplate conn = new JdbcTemplate(engine);
try {
List result = conn.query(""select * from sometable WHERE tid = ? "", new Object[]{tid}, new BeanPropertyRowMapper(List.class));
return result;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11317,"Get the database engine and establish a connection through $db_string$. Execute the SQL statement (query all the results of the id_cliente column in the locadora table based on $email$, $titulo$ and $id_estoque$), close the connection, and return the query results.","public List taAlugado(DataSource db_string, String titulo, String email, String id_estoque){
JdbcTemplate connection = new JdbcTemplate(db_string);
List cliente = connection.query(""select id_cliente from locadora where email=? and titulo=? and id_estoque=? "", new Object[]{titulo,email,id_estoque}, new BeanPropertyRowMapper(List.class));
return cliente;
}"
11117,"""Use $conn$ to query the entire column in the booktable where the isbn is $isbn$ and get all the data. If the data retrieved is empty, render and return 'error.html'. Otherwise, the rendered ""book.html"" is returned and the books parameter is passed as the result of the query.","public String bookPage(JdbcTemplate conn,String isbn,Model model){
List books = conn.query(""select * from booktable where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""books"", books);
return ""book.html"";
}
}"
11188,"""Set the SQL statement: query all columns in the transactions where the id of tx is $tx_id$ and execute the SQL statement to get all the data through the $conn$ connection. The for loop iterates through the query results, which should be printed.","public void queryPage(JdbcTemplate conn,String tx_id){
List trans = conn.query(""select * from transactions where tx_id= ?"", new Object[]{tx_id}, new BeanPropertyRowMapper(List.class));
for (Object r : trans) {
System.out.println(r);
}
}"
11198,"""Execute the SQL statement using ORM through the $conn$ connection, which query all titles in $books$ based on $author$. Use A for loop to store each element in the query result in a list and return the list content.","public List selectRes(EntityManager conn, Root<Object> books, String author){
List booklist = new ArrayList();
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(books).where(cb.equal(books.get(""author""),author));
List<Object> values = conn.createQuery(cq).getResultList();
for (Object i : values) {
booklist.add(i);
}
return booklist;
}"
14241,"""Connect to the database through $engine$, query the data in the $summary$ table where an id is $id$, and execute SQL to get the first piece of data. If the execution result is not empty, convert the execution result to dict and return.","public Object latestStatus(EntityManager engine, Root<Object> summary, String id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(summary).where(cb.equal(summary.get(""id""),id));
List<Object> rows = engine.createQuery(cq).getResultList();
if (rows.isEmpty()){
return null;
}else {
return rows.get(0);
}
}"
13311,"""Get the database engine through $SQLALCHEMY_DATABASE_URI$ and establish a connection. Execute the SQL statement (query the ip column in the logs table according to $user_agent$), get all the data, and return the query results.","public List logKaydet(DataSource SQLALCHEMY_DATABASE_URI, String user_agent){
JdbcTemplate con = new JdbcTemplate(SQLALCHEMY_DATABASE_URI);
List ips = con.query(""select ip from logs where user_agent= ? "", new Object[]{user_agent}, new BeanPropertyRowMapper(List.class));
return ips;
}"
13027,"""Create a database engine based on $db_user$. In ORM mode, use the database engine to execute SQL (query the id in the $Machines$ table based on $group_name$) and get all the data. Finally, return the query result.","public List<Object> getCondor(EntityManager db_user, Root<Object> Machines, String group_name){
CriteriaBuilder cb = db_user.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Machines).where(cb.equal(Machines.get(""group_name""),group_name));
List<Object> machine_list = db_user.createQuery(cq).getResultList();
return machine_list;
}"
11062,Use $conn$ to execute SQL (query the otu_id in the samples table based on $sample_values$) and get all the results. Store the 0th element of each item of the query result in list and return with the serialization method.,"public List otuIdValues(JdbcTemplate conn,String sample_values){
List results = conn.query(""select otu_id from samples where sample_values=?"", new Object[]{sample_values}, new BeanPropertyRowMapper(List.class));
JSONArray otus = new JSONArray();
for (Object item : results) {
otus.add(JSONObject.parseObject(item.toString()).get(0));
}
return otus;
}"
11415,""" connect to the database based on $engine$. Set up SQL (query name column in 'table' table based on 'id': $tid$), execute SQL and get all the query results, return query results.","public List selectValue(DataSource engine, String tid){
JdbcTemplate con = new JdbcTemplate(engine);
List names = con.query(""select name from table where id = ? "", new Object[]{tid}, new BeanPropertyRowMapper(List.class));
return names;
}"
13564,"Execute SQL with $db$ (query all columns in the books table according to $isbn$) and get all the query results (query the review, rating, review_date, username column in the reviews table where book_id is $isbn$), get all the query results, and return the rendered 'books.html' page. The parameter book is the 0th element of the first query result, and 'reviews' is the result of the second query.","public String getOne(JdbcTemplate db,String isbn,Model model){
List data = db.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List reviews = db.query(""select review, rating, review_date, username from reviews where book_id = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book"", data.get(0));
model.addAttribute(""reviews"",reviews);
return ""books.html"";
}"
13778,"""If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the users table based on $uname$) and get all the query results. If there are query results, return the command redirected to ""/ search"". Finally return the 'login.html' page.","public Object login(HttpRequest request, JdbcTemplate conn, String uname){
if (request.getMethod().equals(""POST"")){
List col = conn.query(""select * from users where uname= ?"", new Object[]{uname}, new BeanPropertyRowMapper(List.class));
if (col.isEmpty()){
return ""login.html"";
}
else {
return ""/search"";
}
} else {
return ""login.html"";
}
}"
13815,Get the database engine using $db_config$. Use sessionmaker() to create a configured Session class and bind the database engine. Instantiate the Session and execute the SQL statement using ORM method: Query the first piece of data in $Affiliation$ through $id$. Use logging.info() to output the query results and return the query results.,"public List getValue(EntityManager db_config, Root<Object> Affiliation, String id){
CriteriaBuilder cb = db_config.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Affiliation).where(cb.equal(Affiliation.get(""id""),id));
List<Object> values = db_config.createQuery(cq).getResultList();
System.out.println(values);
return values;
}"
13663,"""Use the string format method to set the SQL (query all the columns in the table where table_id is $id$) and print the SQL. , takes the connection in $db_engine$ and tries to execute the following code: execute the SQL using the connection and get all the data, print each piece of data using the for loop; close the connection and return the data. If an exception occurs, the exception's details are printed.","public List dbCgetAllDataonnect(DataSource db_engine, String id){
try {
JdbcTemplate engine = new JdbcTemplate(db_engine);
List result = engine.query(""select * from table where table_id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
return result;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13317,"""Execute SQL with $conn$ (query all columns in the voos table based on $origem$ and $destino$), get all the query results, and use for loop to print each item of the query results.","public void main(JdbcTemplate conn,String origem,String destino){
List voos = conn.query(""select * from voos where origem=? and destino=?"", new Object[]{origem,destino}, new BeanPropertyRowMapper(List.class));
for (Object voo : voos) {
System.out.println(voo);
}
}"
13507,"""If $dataset_id$ has no value, return a dictionary converted to json format where the value of the ""error"" key is ""Need dataset_id.. Try to use $conn$ to execute SQL (query all the columns in the Dataset table based on $dataset_id$) and get all the query results. Use for loop to convert the items field of each query result to dict, and store it in list and return. If an exception is caught, return False converted to json format.","public Object datasetPreview(JdbcTemplate conn,String dataset_id){
if (dataset_id==null){
JSONObject jsonObject = new JSONObject();
jsonObject.put(""error"", ""Need dataset_id"");
return jsonObject;
}else {
try {
List rows = conn.query(""select * from dataset where dataset_id = ?"", new Object[]{dataset_id}, new BeanPropertyRowMapper(List.class));
JSONArray jsonArray = new JSONArray();
for (Object row : rows) {
jsonArray.add(JSONObject.parseObject(row.toString()).getString(""items""));
}
return jsonArray;
}catch (Exception e){
return JSONObject.parseObject(""False"");
}
}

}"
11189,"""Set up the SQL statement to query all the data in the $product_area$ where name is $name$ using a java expression, execute the query with $conn$ and return all the query results.","public List queryOldRecs(EntityManager conn, Root<Object> product_area, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(product_area).where(cb.equal(product_area.get(""name""),name));
List<Object> area = conn.createQuery(cq).getResultList();
return area;
}"
11303,"""Get the database engine and establish a connection through $db_url$. Execute the SQL statement (query all the columns in the postgis table according to $geochat$), get all the data, close the connection, and print the query results.","public void create(DataSource db_url, String geochat){
JdbcTemplate conn = new JdbcTemplate(db_url);
List cope = conn.query(""select * from postgis where geochat = ? "", new Object[]{geochat}, new BeanPropertyRowMapper(List.class));
System.out.println(cope);
}"
11419,"""Set SQL based on the java expression: (query all columns in $studentData$ table based on $Username$). Execute the SQL with $conn$ and get the first piece of data, and return the query result.","public Object getFirstFormData(EntityManager conn, Root<Object> studentData, String Username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(studentData).where(cb.equal(studentData.get(""Username""),Username));
List<Object> students = conn.createQuery(cq).getResultList();
return students.get(0);
}"
13161,"""Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, then execute the SQL (get all columns in the spider_jam_post where baseurl is $category$) and get the first data, and return the query result.","public Object queryPostsByCategory(DataSource DB_CONNECT_STRING, String category){
JdbcTemplate engine = new JdbcTemplate(DB_CONNECT_STRING);
List results = engine.query(""select * from spider_jam_post where baseurl= ? "", new Object[]{category}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
13453,"""Try to use $conn$ to execute SQL (get submitter column in the archive table based on $action_id$) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List selectValue(JdbcTemplate conn,String action_id){
try{
List results = conn.query(""select submitter from archive where action_id = ?"", new Object[]{action_id}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13469,"""Try to use $engine$ to connect to the database and execute SQL (get all columns in the 'concat_table' table based on $value$) and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List comToPol(DataSource engine, String value){
try {
JdbcTemplate conn = new JdbcTemplate(engine);
List results = conn.query(""select * from concat_table where value = ? "", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13868,Use the java expression to set up the SQL statement with the following contents: Query all titles in $codetbl$ through $code_no$. Use the $conn$ connection to execute the SQL to get all the data and print them.,"public void listOneNote(EntityManager conn, Root<Object> codetbl, String code_no){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(codetbl).where(cb.equal(codetbl.get(""code_no""),code_no));
List<Object> res = conn.createQuery(cq).getResultList();
System.out.println(res);
}"
13309,"""Use $conn$ to execute SQL (query the origin column in the flight table based on $dest$ and $duration$), get all the query results, and use for loop to print each piece of the query results.","public void main(JdbcTemplate conn,String dest,String duration){
List flights = conn.query(""select origin from flight where dest=? and duration=?"", new Object[]{dest,duration}, new BeanPropertyRowMapper(List.class));
for (Object origin : flights) {
System.out.println(origin);
}
}"
11269,"""Execute SQL via $conn$ (get the description column in 'places' based on $visited$), get all the data, use for loop to store the 0th element of each item in the query as list type, close the $conn$ connection, and finally use jsonify to process the list content and return.","public JSONArray places(JdbcTemplate conn,String visited){
List rows = conn.query(""select description from places where visited= ?"", new Object[]{visited}, new BeanPropertyRowMapper(List.class));
List places = new ArrayList();
for (Object row : rows) {
places.add(JSONObject.parseObject(row.toString()).get(0));
}
return JSONObject.parseArray(places.toString());
}"
13725,"""Get the database engine and establish a connection through $mysql_str$. Set the SQL statement (query the diamonds column in the ecommerce table based on $invoiceno$ and $stockcode$), execute SQL, get the first piece of data, and return the query result.","public List sendToMysql(DataSource mysql_str, String invoiceno,String stockcode){
JdbcTemplate con = new JdbcTemplate(mysql_str);
List dt = con.query(""select diamonds from ecommerce where invoiceno = ? and stockcode = ? "", new Object[]{invoiceno,stockcode}, new BeanPropertyRowMapper(List.class));
return dt;
}"
14211,Use $conn$ to execute the SQL (query all columns in the combined table) to get all the data and use jsonify to return the execution result.,"public JSONArray combined(JdbcTemplate conn){
List Combined = conn.query(""select * from combined"", new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(Combined.toString());
}"
11565,"""Use the $conn$ connection to execute the SQL statement : Query the the clause data in the 'table' table with key as $key$. If the number of rows in the query result is 0, return False. Otherwise, return the first piece of data of the query result.","public Object putKv(JdbcTemplate conn,String key){
List r = conn.query(""select clause from table where key = ?"", new Object[]{key}, new BeanPropertyRowMapper(List.class));
if (r.isEmpty()){
return false;
}else {
return r.get(0);
}
}"
13655,Use a java expression to set the SQL (querying the id in $cache$ where namespace is $namespace$ and key is $key$). Execute SQL with $conn$ and get all the data. Return the decision that whether the query result is greater than 0 or not.,"public void findIds(EntityManager conn, Root<Object> cache, String key, String namespace){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cache).where(cb.equal(cache.get(""key""),key));
cq.select(cache).where(cb.equal(cache.get(""namespace""),namespace));
List<Object> rows = conn.createQuery(cq).getResultList();
assert rows.size()>0;
}"
11392,"""Set the SQL (query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$) , execute the SQL with the $conn$ connection and return the retrieved query results.","public String book(JdbcTemplate db,String book_isbn,Model model){
List books = db.query(""select isbn, title, auther, year from books where isbn= ?"", new Object[]{book_isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""bookinfo"", books.get(0));
return ""book.html"";
}"
11151,"""Set the SQL (query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$) , execute the SQL with the $conn$ connection and return the retrieved query results.","public List queryPage(JdbcTemplate conn,String id){
List tasks = conn.query(""select evdate from frc_customsignals where taskid= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return tasks;
}"
11343,"""Use $admin_engine$ to get the database connection and execute SQL (query all data in the name column of the DATABASE table according to $ROLE$), print the queried data, and close the connection.","public void setupDb(DataSource admin_engine, String ROLE){
JdbcTemplate conn = new JdbcTemplate(admin_engine);
List data = conn.query(""select name from database where role=? "", new Object[]{ROLE}, new BeanPropertyRowMapper(List.class));
System.out.println(data);
}"
13165,"""Get the database engine using $SQLconfig$ and connect the database using the raw_connection, then execute the SQL (get all the columns in equity_data where the data of equity is $dataconfig$) and get the first data, then close the connection and return the result of the query.","public Object dataPrep(DataSource SQLconfig, String dataconfig){
JdbcTemplate conn = new JdbcTemplate(SQLconfig);
List res = conn.query(""sselect * FROM equity_data WHERE equity_data=? "", new Object[]{dataconfig}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
11226,Execute SQL via $conn$ (get all the columns in 'Sells' based on $sell$) and get all the data. Convert each item of the query result to dictionary type and return.,"public List getSells(JdbcTemplate conn, String sell){
List rs = conn.query(""select * from sells where sell=?"", new Object[]{sell}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13961,"""If the request module sends the request as 'post', set SQL (query all columns in the 'users' through $email$), use $conn$ to execute SQL and get all the data. If the execution result is empty, use redirect to return ""/ search""; otherwise, render and return ""login.html"".","public String login(HttpRequest request, JdbcTemplate conn, String email){
if (request.getMethod().equals(""POST"")){
List username_data = conn.query(""select * from users where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
if (username_data.isEmpty()){
return ""/search"";
}
else {
return ""login.html"";
}
} else {
return null;
}
}"
13066,"""Try to execute the following code: Use $engine$ to get a database connection; set up the SQL: query the description in the weather_predictions table based on $temp$, $temp_min$, $temp_max$ and $speed$; use the connection to execute the SQL and get all the data and finally return query results. If an exception occurs, print the details of the exception.","public List queryPredicted(DataSource engine, String temp, String temp_min, String temp_max,String speed){
try {
JdbcTemplate connection = new JdbcTemplate(engine);
List values = connection.query(""select description from weather_predictions where temp=? and temp_min=? and temp_max=? and speed=? "", new Object[]{temp,temp_min,temp_max,speed}, new BeanPropertyRowMapper(List.class));
return values;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11097,Use $conn$ to execute SQL (query all columns in name_table based on $id_name$) and get all the data. Close the connection and return the query results.,"public List dropTable(JdbcTemplate conn,String id_name){
List res_go = conn.query(""select * from name_table where id_name= ?"", new Object[]{id_name}, new BeanPropertyRowMapper(List.class));
return res_go;
}"
11504,Set up SQL statements using the java expression: Query all id data in the $TAGS$ table by $tag$. Use $conn$ to execute SQL statements and return query results.,"public List<Object> annotateNote(EntityManager conn, Root<Object> TAGS, String tag){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(TAGS).where(cb.equal(TAGS.get(""tag""),tag));
List<Object> information = conn.createQuery(cq).getResultList();
return information;
}"
11679,"""Use $db$ to execute SQL based on the java expression (get all the columns in the $reviews$ table where isbn is $isbn$) and get all the data. If the result of the query data is None, return ""error"": ""Invalid ISBN"" processed by jsonify, and finally return the query result.","public Object api(EntityManager db, Root<Object> reviews, String isbn){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(reviews).where(cb.equal(reviews.get(""isbn""),isbn));
List<Object> rs = db.createQuery(cq).getResultList();
if (rs.isEmpty()){
JSONObject jsonObject = new JSONObject();
jsonObject.put(""error"",""Invalid ISBN"");
return jsonObject;
}
return rs;
}"
13255,""", make the connection using $engine$. Execute the SQL statement (query all columns in the Customer) and get all the data. Print each item in the query result using a for loop.","public void search(DataSource engine){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select * from customer"", new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}"
13226,"""Get the database engine from $uri$ and make the connection. Set SQL (query all columns in the information_schema where TABLE_SCHEMA is $openstack_citest$) , execute SQL to get all the data and return it.","public List testMysqlInnodb(DataSource uri, String openstack_citest){
JdbcTemplate engine = new JdbcTemplate(uri);
List results = engine.query(""select count(*) from information_schema where table_schema=? "", new Object[]{openstack_citest}, new BeanPropertyRowMapper(List.class));
return results;
}"
13886,"""If the request module sends the request as GET, uses the $conn$ connection to execute the SQL (query the first piece of username in the login through $user_id$). Use for loop iterate through all the query results, print the query results. And take the query results as the corresponding value of username in the dictionary, render and return ""index.html"", where the user parameter is the dictionary contents.","public String index(HttpRequest request, JdbcTemplate conn, String user_id, Model model){
if (request.getMethod().equals(""GET"")){
List s = new ArrayList();
List usernames = conn.query(""select username from login where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
for (Object username : usernames) {
s.add(JSONObject.parseObject(username.toString()).getString(""username""));
}
model.addAttribute(""users"",s);
return ""index.html"";
} else {
return null;
}
}"
11498,""",Set SQL (query all the information in the books table based on title $booktitle$). Use $conn$ to execute SQL and return the rendered 'search.html' page with the results parameter being the query result.","public String selectValue(JdbcTemplate conn,String booktitle, Model model){
List results = conn.query(""select * from books where title = ?"", new Object[]{booktitle}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"",results);
return ""search.thtml"";
}"
13858,Use the ORM method to execute SQL statement through $conn$ connection: Get all data in $City$ based on $name$. Set assertion to determine that the length of the returned result is not 0. Store the query results as list and return it.,"public Object getValue(EntityManager conn, Root<Object> City, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(City).where(cb.equal(City.get(""name""),name));
List<Object> rs = conn.createQuery(cq).getResultList();
assert rs.size()!=0;
return rs;
}"
13949,"""Get the database engine through $app$. Set the SQL statement with the java expression: Get the data in the $days$ table through $date$. Execute the SQL statement, get all the data, and return the obtained data.","public Object getSource(EntityManager app, Root<Object> days, String date){
CriteriaBuilder cb = app.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(days).where(cb.equal(days.get(""date""),date));
List<Object> datas = app.createQuery(cq).getResultList();
return datas;
}"
13599,"Try to create a cursor with $conn$, execute SQL (query the taskid column in the rank_item table based on $result$), use for loop to traverse all the obtained query results, and print the first element of each piece of data. If an Exception occurs during execution, print the exception.","public void start(JdbcTemplate conn,String result){
try {
List data = conn.query(""select taskid from rank_item where result= ?"", new Object[]{result}, new BeanPropertyRowMapper(List.class));
for (Object datum : data) {
System.out.println(JSONObject.parseObject(datum.toString()).get(1));
}
}catch (Exception e){
e.printStackTrace();
}
}"
13668,"""Get the connection using $db_connect$. Set the SQL (query for all columns in Employee where Employee_Id is $employee_id$) and execute the SQL. The keys of the result are executed as keys in the dictionary, each item in the result cursor is executed as a value, and all dict are stored in the list. Finally, return the serialized result of the list.","public JSONArray getEmployee(JdbcTemplate db_connect, String employee_id){
List result = db_connect.query(""select * from employee where employee_id = ?"", new Object[]{employee_id}, new BeanPropertyRowMapper(List.class));
List employees = new ArrayList();
for (Object i : result) {
employees.add(JSONObject.parseObject(i.toString()).getString(""keys""));
}
return JSONObject.parseArray(employees.toString());
}"
13343,"""Use the format string matching method to set sql (query the lat column in the acceleration table based on $long$ and $time$), execute SQL with $conn$, get all the data, and use for loop to store the query results as list and return.","public List queryAcceleration(JdbcTemplate conn,String longs,String time){
List result = conn.query(""select lat from acceleration where long=? and time=?"", new Object[]{longs,time}, new BeanPropertyRowMapper(List.class));
return result;
}"
13315,"""Use $eng$ to execute SQL (query all columns in the track_table according to $id$), get all the query results, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","public List testStorageDataBlueprint(JdbcTemplate eng,String id){
List data = eng.query(""select * from track_table where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert data.size()!=0;
return data;
}"
13249,"""Set up the SQL in java (query all columns in $slivers$ where deleted is $deleted$ and status is $status$) , execute the SQL with $conn$ and get all the data. The for loop is used to store the values of the parsed_obj columns for each item in the query result in a list and return.","public List selectValue(EntityManager conn, Root<Object> slivers, String deleted,String status){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(slivers).where(cb.equal(slivers.get(""deleted""),deleted));
cq.select(slivers).where(cb.equal(slivers.get(""status""),status));
List<Object> results = conn.createQuery(cq).getResultList();
List sl = new ArrayList();
for (Object row : results) {
sl.add(JSONObject.parseObject(row.toString()).getString(""parsed_ob""));
}
return sl;
}"
11386,"""Use $conn$ to execute SQL (query all columns in the data table according to $work_ratings_count$) and get all the query results. If the query result is empty, return the rendered 404.html page; otherwise, return the rendered ""api.json"", where the parameter api is the query result.","public String api(JdbcTemplate conn,String work_ratings_count,Model model){
List data = conn.query(""select * from data where work_ratings_count= ?"", new Object[]{work_ratings_count}, new BeanPropertyRowMapper(List.class));
if (data.isEmpty()){
return ""404.html"";
}else {
model.addAttribute(""api"",data);
return ""api.json"";
}
}"
11220,"""Get the database engine by $PG_URL$, execute the SQL statement (get eventid in gino_users based on $username$), get all the data, and finally return the result.","public List engine(DataSource PG_URL, String username){
JdbcTemplate e = new JdbcTemplate(PG_URL);
List res = e.query(""select eventid from gino_users where username= ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return res;
}"
13067,"""Create the database engine through $mysql$ and create a connection based on the engine. Use the connection to execute SQL (query all columns in the create_database table) and get all the data. Finally, return the query result directly.","public List mysqlSel(DataSource mysql){
JdbcTemplate e = new JdbcTemplate(mysql);
List result_create = e.query(""select * from create_database ? "", new BeanPropertyRowMapper(List.class));
return result_create;
}"
13024,"""Use $db1$  to get the database connection. Set the SQL with the java expression (query the nextid in the $ids$ table based on $for_update$). Execute the SQL and get all the data. Finally, return the query result.","public List idGenerator(EntityManager db1, Root<Object> ids,String for_update){
CriteriaBuilder cb = db1.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ids).where(cb.equal(ids.get(""for_update""),for_update));
List<Object> results = db1.createQuery(cq).getResultList();
return results;
}"
11246,"""Execute SQL with $conn$ (get all columns in test based on $data$) and get all the data, print query result, close $conn$ connection, and finally return query result.","public List task(JdbcTemplate conn,String data){
List res = conn.query(""select * from test where data= ?"", new Object[]{data}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
return res;
}"
11319,"""Try to set up sql (query all columns in the $cache$ table according to $namespace$), use $conn$ to execute the java expression to query all data and return the query results. Return False if an IOError, OSError, EOFError exception occurs during execution.","public Object doOpen(EntityManager conn, Root<Object> cache,String namespace){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cache).where(cb.equal(cache.get(""namespace""),namespace));
List<Object> stor = conn.createQuery(cq).getResultList();
return stor;
}catch (Exception e){
return false;
}
}"
13354,"""Use for loop to traverse the execution results of the following code: Execute SQL with $conn$ (query the password column in the user table based on $usr_name$), get all the query results, store them as list, and finally return.","public List handler(JdbcTemplate conn,String usr_name){
List result = new ArrayList();
List res = conn.query(""select password from user where usr_name= ?"", new Object[]{usr_name}, new BeanPropertyRowMapper(List.class));
for (Object row : res) {
result.add(row);
}
return result;
}"
11473,"""Open and read the file ""books.csv"" and convert the data into a list. Use for loop to iterate through the first data in this list to the end and get the value corresponding to the 'year' field in the database. Set the SQL (query all columns in the booktable table based on 'year'), execute the SQL based on $conn$, get all the data, and return the query result.","public List selectValue(JdbcTemplate conn){
List books = new ArrayList();
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String year = sc.nextLine();
books = conn.query(""select * from booktable where year = ?"", new Object[]{year}, new BeanPropertyRowMapper(List.class));
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
return books;
}"
13452,"""Use $conn$ to execute SQL (get all columns in the flights table with id as $flight_id$) and get the first piece of data. Finally return the rendered ""flight.html"", where the flight parameter is the query result.","public String flight(JdbcTemplate conn,String flight_id,Model model){
List flights = conn.query(""select * from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"",flights.get(0));
return ""flight.html"";
}"
13235,"""Connect to the database engine using $testing$. Set the SQL (query all columns for users where the id of user is $user_id$), execute the SQL and get all the data. Close the database connection and return the result of the query.","public List selectValue(DataSource testing, String user_id){
JdbcTemplate connection = new JdbcTemplate(testing);
List results = connection.query(""select * from users where user_id = ? "", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
return results;
}"
11361,"""Use $conn$ to execute SQL (query all columns in the books table according to $isbn$), get all the data, insert the data one by one into a list, close the connection, and return list.","public List main(JdbcTemplate conn,String isbn){
List query = conn.query(""select * from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List csv = new ArrayList();
for (Object i : query) {
csv.add(i);
}
return csv;
}"
13263,"""Set the SQL statement (query all the columns in books where isbn is $isbn$ and return all the data) . Execute an SQL statement with $conn$ to get all the data, return None if the query result is empty, otherwise return the query result.","public List selectApi(JdbcTemplate conn,String isbn){
List book_res = conn.query(""select * from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (book_res.isEmpty()){
return null;
}else {
return book_res;
}
}"
11298,"""Try to use $DB_URI$ to get the database engine and execute SQL (get all the columns in the TABLE based on $FOREIGN_KEY_CHECKS$), get all the data and return the query result. If there is a SQLAlchemyError error, print the error and exit the system.","public List dbConnection(DataSource DB_URI, String FOREIGN_KEY_CHECKS){
try {
JdbcTemplate connection = new JdbcTemplate(DB_URI);
List res = connection.query(""select * from table where foreign_key_checks= ? "", new Object[]{FOREIGN_KEY_CHECKS}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14274,"""If the request module sends the request in a post method, use $conn$ to execute SQL (query all the login_info in the login_table through $user_name$) and return all the query results.","public List defav(HttpRequest request, JdbcTemplate conn, String user_name){
if (request.getMethod().equals(""POST"")){
List res = conn.query(""select login_info from login_table where user_name= ?"", new Object[]{user_name}, new BeanPropertyRowMapper(List.class));
return res;
} else {
return null;
}
}"
11455,"""Use $db$ to establish a connection, set up SQL (query all the information in the mock_calls table based on $id$), use $conn$ to execute SQL and get all the query results, close the connection, and return the query results.","public List selectValue(DataSource db, String id){
JdbcTemplate engine = new JdbcTemplate(db);
List calls = engine.query(""select * from mock_calls where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return calls;
}"
14083,"""Query all the columns in the books table where 'author' is $author$ through $conn$, get all the data, render and return ""books.html"", where the books parameter is the query result.","public String books(JdbcTemplate conn, String author,Model model){
List books = conn.query(""select * from mock_calls where id = ? "", new Object[]{author}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""books"",books);
return ""books.html"";
}"
13438,"""Use $engine$ to connect to the database, then use the java expression to execute SQL (get all columns in the $tbl_events$ table with EID as $EID$) and get all the data. Further arrange $engine$ and finally return the query results.","public Object editEvent(EntityManager engine, Root<Object> tbl_events,String EID){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tbl_events).where(cb.equal(tbl_events.get(""EID""),EID));
List<Object> results = engine.createQuery(cq).getResultList();
return results;
}"
11700,"""Execute SQL with $engine$ (get all the columns in the testtable table according to $id$), get the first piece of data, then set the assertion that the length of the query result is 1, and finally return the query result.","public Object testFirst(JdbcTemplate engine,String id){
List results = engine.query(""select * from testtable where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert results.size()==1;
return results.get(0);
}"
11270,"""Get the database engine via $db_connection_string$, execute the SQL statement (get the id column in 'places'based on $suggested_by$), get all the data, and finally return the query result.","public List connect(DataSource db_connection_string, String suggested_by){
JdbcTemplate engine = new JdbcTemplate(db_connection_string);
List Session = engine.query(""select id from places where suggested_by= ? "", new Object[]{suggested_by}, new BeanPropertyRowMapper(List.class));
return Session;
}"
13780,"""Execute SQL with $conn$ (query all columns in the courses table according to $universities$) and get all the query results. If the query results are not empty, return the rendered 'all_courses.html' page, where the parameter courses is set to the query results.","public String allCourses(JdbcTemplate conn,String universities,Model model){
List courses = conn.query(""select * from courses where universities = ?"", new Object[]{universities}, new BeanPropertyRowMapper(List.class));
if (courses.isEmpty()){
return null;
}else {
model.addAttribute(""courses"",courses);
return ""all_courses.html"";
}
}"
11672,"""Use $sql_engine$ to connect the database, execute SQL according to the java expression (get all the columns in the $ideas_table$ table where idea_id is $id$), get the first piece of data, then convert the 0th element of the query result to list type, and return False if the list content is None.","public boolean findIdea(EntityManager sql_engine, Root<Object> ideas_table,String id){
CriteriaBuilder cb = sql_engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ideas_table).where(cb.equal(ideas_table.get(""id""),id));
List<Object> results = sql_engine.createQuery(cq).getResultList();
Object idea_info =JSONObject.parseObject(results.get(0).toString()).get(0);
if (idea_info==null){
return false;
}else {
return true;
}
}"
11081,"""Try to use $conn$ to execute SQL (query the rank information in the ncbi_nodes table based on $tax_id$), get all the data, convert each item of the query result to a dict type and return. If an exception occurs, return False.","public Object queryPage(JdbcTemplate conn,String tax_id){
try {
List resrank = conn.query(""select rank from ncbi_nodes where tax_id= ?"", new Object[]{tax_id}, new BeanPropertyRowMapper(List.class));
return resrank;
}catch (Exception e){
return false;
}
}"
11300,"""Use $conn$ to execute SQL based on the java expression (get all the columns in the $Zoo$ table where 'Name' is $Name$) and get the first row of data. Set the assertion that the length of the query result is greater than 0, and return the query result.","public Object testBaseline6Editing(EntityManager conn, Root<Object> Zoo,String Name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Zoo).where(cb.equal(Zoo.get(""Name""),Name));
List<Object> res = conn.createQuery(cq).getResultList();
assert res.size()>0;
return res.get(0);
}"
13267,"""Try to execute the SQL statement (query all the columns in the mat where curso is $curso$) with $conn$ and return after getting all the data. If an Exception is thrown, the specific Exception information is printed and False is returned.","public Object listarMateriasNome(JdbcTemplate conn,String curso){
try {
List mats = conn.query(""select * from mat where curso = ?"", new Object[]{curso}, new BeanPropertyRowMapper(List.class));
return mats;
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
13291,"""Execute SQL with $conn$ (get all the columns in the Machines_sql where id is $id$) to get all the data, disconnect the database, and return the query results.","public List selectMachines(JdbcTemplate conn,String id){
List Machines_results = conn.query(""select * from machines_sql where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return Machines_results;
}"
13630,Experiment with $conn$ to execute SQL (querying the title information where movieId is $movieId$ in Movie) and get all the data. Converts each item in the query result to a dict type and return. Return False if an exception occurs.,"public Object getMovie(JdbcTemplate conn,String movieId){
try {
List res = conn.query(""select title from Movie where movieId= ?"", new Object[]{movieId}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
13734,"""Set SQL based on the java expression (query all columns in the $Zoo$ table based on $Name$). Execute SQL through $conn$, get all the data, set assertions to determine whether the length of the query results is not equal to 0, and return the query results.","public List<Object> testBaseline6Editing(EntityManager conn, Root<Object> Zoo, String Name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Zoo).where(cb.equal(Zoo.get(""Name""),Name));
List<Object> opens = conn.createQuery(cq).getResultList();
assert opens.size()!=0;
return opens;
}"
13120,"""Execute the SQL (get the id column in the reviews table where isbn is $isbn$) with $conn$ and get all the data, return False if the query result is None, otherwise return the query result.","public Object api(JdbcTemplate conn,String isbn){
List info = conn.query(""select id from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (info.isEmpty()){
return false;
}else {
return info;
}
}"
14016,"""Query all the columns in the indicators table through $conn$, get all the data, and return the query results.","public List findProject(JdbcTemplate conn){
List results = conn.query(""select * from indicators ?"", new BeanPropertyRowMapper(List.class));
return results;
}"
13758,"""Set SQL based on the java expression (query all columns in the $mytable$ table based on $name$). Execute SQL through $conn$, get all the data, and return the query result.","public List<Object> testSelectWithDictColumn(EntityManager conn, Root<Object> mytable, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(mytable).where(cb.equal(mytable.get(""name""),name));
List<Object> yes = conn.createQuery(cq).getResultList();
return yes;
}"
11218,"""Use $conn$ to get all 'name' with 'id': $id$ in $Country$ table by the way of ORM, set assertion to determine if the 0th element of the returned result is equal to ""Germany"", and finally return the 0th element.","public Object testCountryId3(EntityManager conn, Root<Object> Country, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Country).where(cb.equal(Country.get(""id""),id));
List<Object> country = conn.createQuery(cq).getResultList();
assert country.get(0).toString().equals(""Germany"");
return country.get(0);
}"
13561,"""Execute SQL with $conn$ (query all columns in the users table based on $email$) and get the first row of data. If no results are found, return the rendered ""error.html"" page; otherwise, return the query result.","public Object registerUser(JdbcTemplate conn,String email){
List users = conn.query(""select * from users where email= ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
return ""error.html"";
}else {
return users.get(0);
}
}"
11165,"""Execute the SQL statement using the $conn$ connection (get all the meta in user where the name of meta is $name_meta$) , store the 0th element of the query result, and return it.","public Object testNoneIsEncodedAsEmptyFict(JdbcTemplate conn,String name_meta){
List result = conn.query(""select meta from user where name_meta= ?"", new Object[]{name_meta}, new BeanPropertyRowMapper(List.class));
Object row = result.get(0);
return row;
}"
13227,"""Try to set up SQL (query all the books columns where isbn is $isbn$) , execute the SQL statement with $conn$, obtain all the data and return it. If an exception occurs, 'error' is printed.","public Object selectBooks(JdbcTemplate conn,String isbn){
try {
List result_book = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return result_book;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11264,"""Try to use ORM and by the way of $conn$ to get all the column data in the $tables$ table with 'column': $value_column$. If the data is not empty, return the query result. If an exception occurs during execution, return False.","public Object selectDb(EntityManager conn, Root<Object> select_db, String value_column){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(select_db).where(cb.equal(select_db.get(""column""),value_column));
List<Object> kueridb = conn.createQuery(cq).getResultList();
if (!kueridb.isEmpty()){
return kueridb;
}else {
return null;
}
}catch (Exception e){
return false;
}
}"
13238,Execute the SQL statement (query all the columns in the Likes) with $conn$ and get all the data. Convert each item of the query result to a dict and return it as a list.,"public List getLikes(JdbcTemplate conn){
List rs = conn.query(""select * from likes"", new BeanPropertyRowMapper(List.class));
return rs;
}"
13427,"""Connect to the database through $e$, then execute the SQL (get the id column in the JPY table), further use for loop to store the keywords and subscripts of each item of the query results processed by the cursor method as tuple. Compress the tuple and convert it to the dictionary type. Finally return 'data' and the contents of dictionary. ""","public List get(DataSource e){
JdbcTemplate engine = new JdbcTemplate(e);
List result = engine.query(""select id from jpy "", new BeanPropertyRowMapper(List.class));
return result;
}"
13407,"""Execute the first piece of SQL based on $db$ (get the reviews column processed by the counting method in the reviews table based on $isbn$) and get the first piece of data. Then execute the second piece of SQL through $db$ (get the rating column in the reviews table based on $isbn$) and get all the data. Further use for loop to print the 0th element of the second piece of SQL query result, and then count the number of the 0th element of the second piece of SQL query result. At the end of the for loop, compare the number of the 0th element of the second piece of SQL query result to the number of the 0th element of the first piece of SQL query result and finally return the ratio.","public int api(JdbcTemplate db,String isbn){
List review_counts = db.query(""select count(review) from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List rating = db.query(""select rating from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
int avg_rating = 0;
for (Object rate : rating) {
System.out.println(JSONObject.parseObject(rate.toString()).get(0));
avg_rating += Integer.parseInt(JSONObject.parseObject(rate.toString()).get(0).toString());
}
avg_rating = avg_rating/Integer.parseInt(JSONObject.parseObject(review_counts.get(0).toString()).get(0).toString());
return avg_rating;
}"
11261,"""Connect to the database via $db$, execute SQL (get all the columns processed by the counting method in the query_users table based on $user_id$) and get all the data. Set the length of the assertion query result to 0, and finally close the connection.","public void testNesting(DataSource db, String user_id){
JdbcTemplate connection = new JdbcTemplate(db);
List result = connection.query(""select count(*) from query_users where user_id= ? "", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
assert result.size()==0;
}"
13129,"""Execute the SQL with $conn$ (get all the columns in the books where isbn is $isbn$) and get the first data, return ""No Such A Book"" if the query result is None, otherwise return the query result.","public Object api(JdbcTemplate conn,String isbn){
List bdatas = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (bdatas.isEmpty()){
return ""No Such A Book"";
}else {
return bdatas.get(0);
}
}"
11160,Execute SQL with $conn$ (query job_id in the tasks where the index of task is $task_index$) and get all the data. Then print and return the query results.,"public List insertKeys(JdbcTemplate conn,String task_index){
List jobs = conn.query(""select job_id from tasks where task_index= ?"", new Object[]{task_index}, new BeanPropertyRowMapper(List.class));
System.out.println(jobs);
return jobs;
}"
11313,"""Try to use $conn$ to execute SQL (query all the data in the validISBN column of the books table based on $work_ratings_count$), return the query data if there is a query result; otherwise, return None. If an exception occurs during execution, return False.","public Object bookPage(JdbcTemplate conn,String work_ratings_count){
try {
List goodreads = conn.query(""select validISBN from books where work_ratings_count =?"", new Object[]{work_ratings_count}, new BeanPropertyRowMapper(List.class));
if (goodreads.isEmpty()){
return null;
}else {
return goodreads;
}
}catch (Exception e){
return false;
}
}"
13910,"""Set the SQL statement as follows: Query the origin column in the flights table through $destination$, use the $conn$ connection to execute SQL, get all the data, convert each item of the query result to dict, store it as list, and return.","public List selectOrigin(JdbcTemplate conn,String destination){
List origins = conn.query(""select origin from flights where destination = ?"", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
return origins;
}"
13867,Use the java expression to set up the SQL statement to: Select all the addr in $locati$ based on $trip_name$. Use the $conn$ connection to execute the SQL to get all the data and print them.,"public void apiCall(EntityManager conn, Root<Object> locati, String trip_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(locati).where(cb.equal(locati.get(""trip_name""),trip_name));
List<Object> finals = conn.createQuery(cq).getResultList();
System.out.println(finals);
}"
13322,"""Use $con$ to execute SQL (query the equation column in the samples table according to $id$), get all the query results, close the connection, and use for loop to store the 0th element of each article of the query result as list and return.","public List getEquations(JdbcTemplate conn,String id){
List result = conn.query(""select equation from samples where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object row : result) {
list.add(JSONObject.parseObject(row.toString()).get(0));
}
return list;
}"
11652,Use $db$ to execute SQL (get the amount column in the accounts table based on $name$ and $id$) and get the first record. Finally return the query result.,"public Object getAmount(JdbcTemplate db,String name,String id){
List ams = db.query(""select amount from accounts where name=? and id=?"", new Object[]{name,id}, new BeanPropertyRowMapper(List.class));
return ams.get(0);
}"
11457,"""Set up the SQL (query all columns in the email table based on $username$), execute the SQL based on $conn$ and get all the query results. Close the connection, use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List getRecords(JdbcTemplate conn,String username){
List results = conn.query(""select * from email where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
List emails =new ArrayList();
for (Object i : results) {
emails.add(i);
}
return emails;
}"
11520,"""Use the $conn$ to query all the columns in the stock table with date as $date$, get all the data, print the query result and return it.","public List setStockTradingDayList(JdbcTemplate conn,String date){
List info = conn.query(""select * from stock where date = ?"", new Object[]{date}, new BeanPropertyRowMapper(List.class));
System.out.println(info);
return info;
}"
13908,"""Create the database engine through $uri$, set the SQL statement: Get the id data in the 'testtable' table according to $name$, execute the SQL statement through the database engine, and set the assertion to determine that the length of the execution result is 2.","public void testKeys(DataSource uri, String name){
JdbcTemplate engine = new JdbcTemplate(uri);
List keys = engine.query(""select id from testtable where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
assert keys.size() == 2;
}"
13200,"""Get the database engine using $connection_string$, execute the SQL (get all the columns in the table where name is $name$) , get all the data, and finally return the query results.","public List getRes(DataSource connection_string, String name){
JdbcTemplate engine = new JdbcTemplate(connection_string);
List res = engine.query(""select * from table where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
11337,"""Use the ORM method and the params string matching method to set SQL (get all the columns in the $Week$ table where week_id is $week_id$), and use $session$ to get the first piece of data. If the query data is not empty, convert it to the value of 'week' key in the dictionary and the json structure, and return.","public JSONObject get(EntityManager session, Root<Object> Week, String week_id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Week).where(cb.equal(Week.get(""week_id""),week_id));
List<Object> weeks = session.createQuery(cq).getResultList();
JSONObject week_json = new JSONObject();
if (!weeks.isEmpty()){
week_json = JSONObject.parseObject(weeks.get(0).toString());
}
return week_json;
}"
13880,"""Set the SQL statement to: Get all the columns in the books table based on $isbn$, use $conn$ connection to execute the SQL and get the first piece of data. If the obtained result is empty or the query result is an empty list, set the query result to False; otherwise, set the query result to True. Render and return ""info_book.html"", where the info parameter is the query result.","public String queryBook(JdbcTemplate conn,String isbn,Model model){
List infos = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
boolean info ;
if (infos.isEmpty()){
info = false;
}else {
info = true;
}
model.addAttribute(""info"",info);
return ""info_book.html"";
}"
13933,"""Try to use the $conn$ connection to execute SQL: To query all the columns in the users table based on $username$ and $password$, get the first piece of data, and return the obtained data. If there is an Exception, use raise to throw an exception based on the error message.","public Object login(JdbcTemplate conn,String username,String password){
try {
List logs = conn.query(""select * from users where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
return logs.get(0);
} catch (Exception e){
e.printStackTrace();
return null;
}
}"
11214,"""Use $session$ to execute SQL (query 'id' in the User table based on $name$) and get all the data. Then execute commit method on $session$ and close, and finally return the query result.","public List tellData(JdbcTemplate session,String name){
List res = session.query(""select id from User where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
11617,"""Use $db$ to get the database engine, execute SQL (get all the columns in the 'Table' table according to $id$), get the first row of data, and finally return the query result.","public Object testFetchone(DataSource db, String id){
JdbcTemplate engine = new JdbcTemplate(db);
List results = engine.query(""select * from Table where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
13928,"""Set the SQL statement: Query the date in runs table based on $dist$, use the $conn$ connection to execute SQL and get all the data. Use for loop to store the second element of each item in the query result into list and return the list content.","public List index(JdbcTemplate conn,String dist){
List result = conn.query(""select date from runs where dist = ?"", new Object[]{dist}, new BeanPropertyRowMapper(List.class));
List recent_runs = new ArrayList();
for (Object row : result) {
recent_runs.add(JSONObject.parseObject(row.toString()).get(0));
}
return recent_runs;
}"
13979,"""Connect to the database through $db_connect$, set the SQL statement (query all the columns in the customers table according to $id$), execute the SQL statement to get all the data, convert each item of the execution result into dict, store it as list, and return the execution result through jsonify.","public JSONArray get(JdbcTemplate db_connect,String id){
List result = db_connect.query(""select * from customers where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(result.toString());
}"
11645,"""Use the $engine$ to connect the database, execute SQL according to the java expression (get the values column in the $regression$ table whose measure_id is $mid$), get all the data, and finally return the query result.","public List<Object> getValues(EntityManager engine, Root<Object> regression, String mid){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(regression).where(cb.equal(regression.get(""measure_id""),mid));
List<Object> vs = engine.createQuery(cq).getResultList();
return vs;
}"
13378,"""If username is not empty, use $conn$ to execute SQL (query all columns in the username table based on $username$), get all the query results, and return the rendered 'login.html' page, where the parameter users is the query result; otherwise, return the rendered 'error.html' page.","public String loginFunc(JdbcTemplate conn,String username,Model model){
if (username==null){
List users = conn.query(""select * from users where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""users"",users);
return ""login.html"";
}else {
return ""error.html"";
}
}"
13433,"""Get the database engine based on $DB_CONNECT_STRING$, where the max_overflow parameter is 5. Then execute the SQL (get the profileurl column in the portal_profile table) and get all the data. Use for loop to print each item of the query results.","public void startRequests(DataSource DB_CONNECT_STRING){
JdbcTemplate engine = new JdbcTemplate(DB_CONNECT_STRING);
List profileurls = engine.query(""select profileurl from portal_profile "", new BeanPropertyRowMapper(List.class));
for (Object i : profileurls) {
System.out.println(i);
}
}"
13443,Use $engine$ to connect to the database and execute SQL based on the java expression (get all columns in the $RESULT_TABLE$ table with time greater than $start$ and time less than $end$) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.,"public List getStates(EntityManager engine, Root<Object> RESULT_TABLE, String start,String end){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(RESULT_TABLE).where(cb.between(RESULT_TABLE.get(""time""),start,end));
List<Object> rows = engine.createQuery(cq).getResultList();
List ret = new ArrayList();
for (Object row : rows) {
ret.add(row);
}
return ret;
}"
13831,Use the java expression to set the SQL statement to get all the question_record in the $question$ table based on $question_id$. Use $conn$ connection to execute the SQL statement and return all the query results.,"public List getQuestion(EntityManager conn, Root<Object> question, String question_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(question).where(cb.equal(question.get(""url""),question_id));
List<Object> records = conn.createQuery(cq).getResultList();
return records;
}"
13503,"""Use $engine$ to execute SQL (query all columns in the data_dict table according to $LIMIT$), get all the query results, and set assertions to determine whether the query result length is not equal to 0. Use for loop to traverse all the query results obtained with for loop, insert each piece of data into a list, and return the list.","public List search(JdbcTemplate engine,String LIMIT){
List result = engine.query(""select * from data_dict where limit= ?"", new Object[]{LIMIT}, new BeanPropertyRowMapper(List.class));
assert result.size()!=0;
List fields_info = new ArrayList();
for (Object name : result) {
fields_info.add(name);
}
return fields_info;
}"
14144,"""Set up SQL statement: Query the id data in t table with 'name': $name$, execute SQL by $conn$ to get all the data, print and return the result of the execution statement.","public List test(JdbcTemplate conn,String name){
List result = conn.query(""select id from t where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
return result;
}"
13614,"""If the request method is POST, execute the following code: set SQL (querying $email$ in users where username is $username$ and password is $password$). Execute SQL with $conn$ and get all the data. If the query result is equal to None, return the rendered 'index.html' and pass the parameter of message into 'fail', otherwise, return to rendered 'search.html'.","public Object singIn(HttpRequest request, JdbcTemplate conn, String username, String password,Model model){
if (request.getMethod().equals(""POST"")){
List result = conn.query(""select email from users where username=? and password=?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
model.addAttribute(""message"",""fail"");
return ""index.html"";
}
else {
return ""search.html"";
}
} else {
return null;
}
}"
13232,"""Execute the SQL statement (query all columns in the flights) with $conn$, get all the data, and print it using the for loop.","public void searchFlight(JdbcTemplate conn){
List flights = conn.query(""select * from flights"", new BeanPropertyRowMapper(List.class));
for (Object flight : flights) {
System.out.println(flight);
}
}"
11197,"""Set up the SQL using a java expression (query all the data in $dbname$ where col is $col$) , execute the SQL over the $conn$ connection and return the acquired data.","public List<Object> queryTb(EntityManager conn, Root<Object> dbname, String col){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(dbname).where(cb.equal(dbname.get(""col""),col));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
11324,"""Get the database engine through $url$, where the echo parameter is assigned to False, and establish a connection. Try to execute the SQL statement (query all the columns in the test_data table according to $DbProp$) and get all the data, return the query results, and finally close the connection.","public List dbConnect(DataSource url, String DbProp){
try {
JdbcTemplate engine = new JdbcTemplate(url);
List kanou = engine.query(""select * from test_data where dbprop= ? "", new Object[]{DbProp}, new BeanPropertyRowMapper(List.class));
return kanou;
}finally {
return null;
}
}"
14042,"""Set the SQL statement: Query all the columns in the yelp_heartbeat table, use $conn$ to execute SQL to get the first piece of data, and return the obtained data.","public List getHeartbeatSerial(JdbcTemplate conn){
List result = conn.query(""select * from yelp_heartbeat"", new BeanPropertyRowMapper(List.class));
return result;
}"
14024,"""Use the java expression set the SQL statement: Query the id data in the $parent_plots$ table based on $plot_name$, use $con$ execute the SQL statement and get all the data. Use for loop to store the 0th element of each item in the query result into list and return the list content.","public List getPlotId(EntityManager con, Root<Object> parent_plots, String plot_name){
CriteriaBuilder cb = con.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(parent_plots).where(cb.equal(parent_plots.get(""plot_name""),plot_name));
List<Object> res = con.createQuery(cq).getResultList();
List id_l =new ArrayList();
for (Object result : res) {
id_l.add(JSONObject.parseObject(result.toString()).get(0));
}
return id_l;
}"
13865,"""Connect to the database through $db_connect$, set the SQL (query all columns in customers based on $name$). Execute the SQL statement to get all the data. Use jsonify to return all the query results.","public JSONArray getInfo(JdbcTemplate db_connect,String name){
List result = db_connect.query(""select * from table where datum= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(result.toString());
}"
13557,"""Connect the database with $engine$, try to execute SQL (query all columns in the stderr table based on $traceback$), get all the data, close the database, and return the query data. If an Exception occurs during execution, return False.","public Object worker(JdbcTemplate engine,String traceback){
try {
List res = engine.query(""select * from stderr where traceback= ?"", new Object[]{traceback}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return false;
}
}"
13543,"""Set up sql (query the clothes column in the tablename table based on $phone$), execute SQL with $cur$ and return all the obtained query results.","public List getTable(JdbcTemplate cur,String phone){
List res = cur.query(""select clothes from tablename where phone= ?"", new Object[]{phone}, new BeanPropertyRowMapper(List.class));
return res;
}"
14164,"""Create the database engine via $db_url$ (where the echo parameter is True) and establish a connection. Try to set up the SQL statement: Query the m_Table table with type $m_type$ for f_table_name data, execute the SQL statement to get all the data and return. If an Exception occurs, use 'raise' to throw an exception based on the error message. Finally, make sure the database connection is closed.","public List updateGeomSridSl(DataSource db_url, String m_type){
JdbcTemplate engine = new JdbcTemplate(db_url);
try {
List res = engine.query(""select f_table_name from m_table where type = ? "", new Object[]{m_type}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}finally {
return null;
}
}"
13290,""", use $engine$ to get the database connection. Execute the SQL statement (get all the columns of the transactions where name is $name$) to get all the data and return it directly if the query result is None, otherwise every item in the query result is converted to dict and return.","public List selectValue(DataSource engine, String name){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select * from transactions where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
return results;
}
}"
11318,"""Use the format string matching method to set the SQL (query the appel column in the services table based on $limit$), use $connection$ to execute the SQL, and get all the data. Return the query results.","public List getServices(JdbcTemplate connection,String limit){
List result = connection.query(""select appel from services where limit = ?"", new Object[]{limit}, new BeanPropertyRowMapper(List.class));
return result;
}"
11330,"Exception,""Try to use $conn$ to execute SQL (query the dbapi column in the 'connection' table based on $record$ and $proxy$), get the first piece of data, close the connection, return the query data, and if an exception occurs, trigger and execute Exception.","public Object pingConnection(JdbcTemplate conn,String record,String proxy){
try {
List cursor = conn.query(""select dbapi from connection where record=? and proxy=?"", new Object[]{record,proxy}, new BeanPropertyRowMapper(List.class));
return cursor;
}catch (Exception e){
return e;
}
}"
13565,"""Get the database engine through $postgresql$, execute the SQL statement (query the date_part column in the stock_data table according to $date$), get all the data, use for loop to traverse all the query results, insert each piece of data into a list, and convert the list to json and return.","public JSONArray getYears(DataSource postgresql, String date){
JdbcTemplate con = new JdbcTemplate(postgresql);
List data = con.query(""select date_part from stock_data where date= ? "", new Object[]{date}, new BeanPropertyRowMapper(List.class));
List newdata = new ArrayList();
for (Object x : data) {
newdata.add(x);
}
return JSONObject.parseArray(newdata.toString());
}"
14008,"""Set query all columns from the FRC_CUSTOMSIGNALS table to the SQL statement, use the $conn$ to execute the SQL statement to get the first piece of data and return.","public Object getSignals(JdbcTemplate conn){
List result_custom_signals = conn.query(""select * from frc_customsignals"", new BeanPropertyRowMapper(List.class));
return result_custom_signals.get(0);
}"
14270,"""Use $seafile_db$ to get the database engine. Use sessionmaker () to create a configured DB_Session class and bind the database engine through the 'bind' parameter. Instantiate DB_Session, and then use $conn$ to execute the SQL statement: Query the first piece of repo_id data in RepoOwner through $owner_id$. Use for loop traversal to query the results and return the 0th element.","public void getUserRepo(DataSource seafile_db, String owner_id){
JdbcTemplate engine = new JdbcTemplate(seafile_db);
List ret = engine.query(""select repo_id from RepoOwner where owner_id = ? "", new Object[]{owner_id}, new BeanPropertyRowMapper(List.class));
for (Object t : ret) {
System.out.println(JSONObject.parseObject(t.toString()).get(0));
}
}"
13334,"""Set SQL based on the java expression (query all columns in the $book_title$ table based on $id$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, count the data if there is any, and finally print the count result.","public void querySqlite(EntityManager conn, Root<Object> book_title, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(book_title).where(cb.equal(book_title.get(""id""),id));
List<Object> curs = conn.createQuery(cq).getResultList();
int count = 0;
for (Object record : curs) {
count++;
}
System.out.println(count);
}"
11308,Get the database engine and establish a connection through $conn_string$. Execute the SQL statement (query the first piece of data in the USERS table based on $user$ and $passwd$) and return the query results.,"public List connectToDatabase(DataSource conn_string, String user,String passwd){
JdbcTemplate connection = new JdbcTemplate(conn_string);
List u = connection.query(""select * from users where user = ? and passwd = ? "", new Object[]{user, passwd}, new BeanPropertyRowMapper(List.class));
return u;
}"
13284,"""Try to get the database engine and make the connection through $DB_HOST$, use the connection to execute the SQL statement (select all the columns in the TABLE) and get all the data. Return after converting the query result to a list using a for loop. Return False if an exception is generated.","public Object search(DataSource DB_HOST){
try {
JdbcTemplate connection = new JdbcTemplate(DB_HOST);
List result_set = connection.query(""select * from table "", new BeanPropertyRowMapper(List.class));
List result = new ArrayList();
for (Object item : result_set) {
result.add(item);
}
return result;
}catch (Exception e){
return false;
}
}"
14185,"""Set up the SQL statement: Query all columns from CUSTOMER table, execute SQL via $conn$ to get all the data and return.","public List getAllCustomers(JdbcTemplate conn){
List data = conn.query(""select * from customer"", new BeanPropertyRowMapper(List.class));
return data;
}"
13781,"""Set SQL (query the field column in the 'table' table according to $id$), execute SQL according to $conn$, get all the query results, and return the data.","public List simpleSelect(JdbcTemplate conn,String id){
List result = conn.query(""select field from table where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return result;
}"
13450,"""Use $call_center$ to get the database engine, where the echo parameter is True. Connect to the database, then execute the SQL (get all the columns in the technician table based on $tech_id$) and get all the data. Finally return the query results.","public List getTechInfoByTechId(DataSource call_center, String tech_id){
JdbcTemplate conn = new JdbcTemplate(call_center);
List results = conn.query(""select * from technician where tech_id = ? "", new Object[]{tech_id}, new BeanPropertyRowMapper(List.class));
return results;
}"
14023,"""Create the cursor through $conn$, execute the SQL statement: Get all the id, name, lastname data from the users table, return the query results, and finally: Close the cursor and database connection.","public List queryUsuario(DataSource conn, String tech_id){
try {
JdbcTemplate cur = new JdbcTemplate(conn);
List res = cur.query(""select id, name, lastname from users "", new BeanPropertyRowMapper(List.class));
return res;
}finally {
return null;
}
}"
14035,""" connect to the database according to $engine$. Set up the SQL query statement, which contains: Query the statistical values of all columns in the Transactions table according to $transactionID$ and $name$, execute the SQL statement to get the first piece of data, convert each item of the query result into dict, store it as list, and return.","public List getBarTopManu(DataSource engine, String transactionID,String name){
JdbcTemplate conn = new JdbcTemplate(engine);
List rs = conn.query(""select count(*) from transactions where transactionid = ? and name = ? "", new Object[]{transactionID, name}, new BeanPropertyRowMapper(List.class));
List results = new ArrayList();
for (Object row : rs) {
results.add(row);
}
return results;
}"
13750,"""Set up sql (query all the information in the hff_quote table based on $sito_q$, $area_q$ and $us_q$), use $conn$ to execute SQL, get all the query results, and return them.","public List selectQuoteFromDbSql(JdbcTemplate conn,String sito_q,String area_q,String us_q){
List res = conn.query(""select * from hff_quote where sito_q=? and area_q=? and us_q=?"", new Object[]{sito_q, area_q, us_q}, new BeanPropertyRowMapper(List.class));
return res;
}"
13691,"""Execute the SQL using $connects$ (query the information of name in the department table where id is $id$) and get the first data. If the length of the query result is greater than 0, return the query result [0][0] element. Otherwise, return False.","public Object getStudentDept(JdbcTemplate conn,String id){
List res = conn.query(""select name from department where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (!res.isEmpty()){
return JSONObject.parseObject(res.get(0).toString()).get(0);
}else {
return false;
}
}"
13298,"""If $cluster_id$ is not None, execute SQL with $conn$ (get all the columns in the clusters where the id of cluster is $cluster_id$) and get all the data. Print each item in the query result using a for loop.","public void selectValue(JdbcTemplate conn,String cluster_id){
if (cluster_id!=null){
List results = conn.query(""select * from clusters where cluster_id = ?"", new Object[]{cluster_id}, new BeanPropertyRowMapper(List.class));
for (Object result : results) {
System.out.println(result);
}
}
}"
11250,"""Get the database engine by $db_string$, try to execute the SQL statement (get all columns in sistema based on $id_fornecedor$) and get all the data. Otherwise return the result as False, and finally return the obtained result.","public Object addCompra(DataSource db_string, String id_fornecedor){
JdbcTemplate db = new JdbcTemplate(db_string);
try {
List res = db.query(""select * from sistema where id_fornecedor= ? "", new Object[]{id_fornecedor}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return false;
}
}"
11634,"Try to use $conn$ to execute SQL (get the data_year column in the vw_muertes_estado table where muertes_name is $name$), get all the data, return the query result, and print the exception if there is an exception during execution.","public List yearsEp(JdbcTemplate conn,String name){
try {
List years = conn.query(""select data_year from vw_muertes_estado where muertes_name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return years;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13522,"""Execute SQL with $conn$ (query the unit_found column in the Otu table based on $found$), get all the query results, use for loop to traverse the query results, insert a list, convert this list to json and return.","public JSONArray otu(JdbcTemplate conn, String found){
List tmp = conn.query(""select unit_found from otu where found= ?"", new Object[]{found}, new BeanPropertyRowMapper(List.class));
List otu_list = new ArrayList();
for (Object x : tmp) {
otu_list.add(x);
}
return JSONObject.parseArray(otu_list.toString());
}"
13280,"""Set the SQL statement to: query all the data in the TABLE where one_row is $value$. Execute the SQL statement and get all the data over the $conn$ connection. Use assertions to determine that the length of the query result is greater than 0. Finally, all the data is returned.","public List selectValue(JdbcTemplate conn, String value){
List results = conn.query(""select * from table where one_row = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
assert results.size()>0;
return results;
}"
14224,Set up the SQL statement (query the City in the users table based on $Phone$). Execute SQL to get all the data through the $conn$ connection and print it.,"public void readUser(JdbcTemplate conn, String Phone){
List exc = conn.query(""select city from users where phone= ?"", new Object[]{Phone}, new BeanPropertyRowMapper(List.class));
System.out.println(exc);
}"
13283,"If the request method is ""POST"", use $conn$ to execute the SQL statement (get all the columns in the gd where isbn is $isbn$) and get all the data. Finally, the query results are returned.","public List selectGds(HttpRequest request, JdbcTemplate conn, String isbn){
if (request.getMethod().equals(""POST"")){
List gds = conn.query(""select * from gd where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return gds;
} else {
return null;
}
}"
13101,"""Execute the SQL with $conn$ (get all the information in the places where postal_code is $q$, place_name is $q$, and admin_code1 is $q$) and get all the data, and finally return the content of the query processed by jsonify.","public JSONArray search(JdbcTemplate conn, String q){
List results = conn.query(""select * from places where postal_code =? and place_name =? and admin_code1 =?"", new Object[]{q,q,q}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(results.toString());
}"
14050,"""Use $conn$ to execute the SQL statement: Query all the 'src' in the edges table based on the $tgt$ query src, use for loop traversal to query all the results and return.","public void selectLinks(JdbcTemplate conn, String tgt){
List re = conn.query(""select src from edges where tgt = ?"", new Object[]{tgt}, new BeanPropertyRowMapper(List.class));
for (Object i : re) {
System.out.println(i);
}
}"
11101,"""Try to use $conn$ to query all the names in the passengers where the id of flight is $flight_id$, render and return 'success.html', where the text parameter is the result of the query. If a ValueError occurs, then render 'error.html', passing in the message parameter is 'Invalid flight number.'""","public String book(JdbcTemplate conn, String flight_id, Model model){
try {
List texts = conn.query(""select name from passengers where flight_id= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""texts"",texts);
return ""success.html"";
}catch (Exception e){
model.addAttribute(""message"",""Invalid flight number."");
return ""error.html"";
}
}"
11623,"""Try to use $session$ to execute SQL according to the java expression (get the student column in the $student$ table whose student_id is $student_id$) and get all the data, then close the $session$ connection and return the query result. If an exception occurs during execution, suspend the exception.","public List<Object> findStudent(EntityManager session, Root<Object> student, String student_id){
try {
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(student).where(cb.equal(student.get(""student_id""),student_id));
List<Object> studs = session.createQuery(cq).getResultList();
return studs;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13607,Set SQL: Query nextval in the SEQUENCE table where sequence_name is $sequence_name$. Execute the SQL using $db$ and get the first data. Return the result of the query.,"public List searchSeqNextVal(JdbcTemplate db,String sequence_name){
List res = db.query(""select nextval from SEQUENCE where sequence_name = ?"", new Object[]{sequence_name}, new BeanPropertyRowMapper(List.class));
return res;
}"
13836,Connect to the database through $engine$ and execute the SQL statement with the following contents: Query all the name in the friends table based on $fid$. Use the dispose() method to close the database and release resources. Convert each item of the query results into dict and store it as list and return it,"public List selectFriend(DataSource engine, String fid){
JdbcTemplate conn = new JdbcTemplate(engine);
List val = conn.query(""select name from friends where fid = ? "", new Object[]{fid}, new BeanPropertyRowMapper(List.class));
return val;
}"
11387,"""Use $conn$ to execute SQL (query the city column in the cities table according to $statecode$), get all the query results, use for loop to convert each of the query results to dict, and store them in list. Then convert this list to json, and return.","public JSONArray getMeFilteredCities(JdbcTemplate conn,String statecode){
List results = new ArrayList();
List rows = conn.query(""select nextval from SEQUENCE where sequence_name = ?"", new Object[]{statecode}, new BeanPropertyRowMapper(List.class));
for (Object city : rows) {
results.add(city);
}
return JSONObject.parseArray(results.toString());
}"
14265,"""Query all the columns in the flights table through $con$, get all the data, and return all the obtained data.","public List flights(JdbcTemplate con){
List flights = con.query(""select * from flights"", new BeanPropertyRowMapper(List.class));
return flights;
}"
13351,"""Try to use the ORM method and $conn$ to execute SQL (query all the information in the $User$ table based on the condition that id is $User_id$), get the first piece of queried data, and return the query result. If an Exception is caught, print the exception.","public Object selectRes(EntityManager conn, Root<Object> User, String User_id){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""User_id""),User_id));
List<Object> users = conn.createQuery(cq).getResultList();
return users.get(0);
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13231,"""Set the SQL using a java expression (query all columns in $tbl_friends$ where friend_uid1 is $UID$) . Execute the SQL with $conn$ and get all the data, store the query results as a list type using a for loop, and return.","public Object getFriends(EntityManager conn, Root<Object> tblFriends, String UID){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tblFriends).where(cb.equal(tblFriends.get(""friend_uid1""),UID));
List<Object> friendsInfo = conn.createQuery(cq).getResultList();
List friendsList = new ArrayList();
for (Object friend : friendsInfo) {
friendsList.add(friend);
}
return friendsList;
}"
11490,"""Set up SQL (query time column in Transactions table based on $transactionID$), use $conn$ to execute SQL and get all query results. Use for loop to convert each query result to dict, store in list and return.","public List selectValue(JdbcTemplate conn,String transactionID){
List results = conn.query(""select time from transactions where transactionid = ?"", new Object[]{transactionID}, new BeanPropertyRowMapper(List.class));
return results;
}"
14277,"""Query all the columns in the books table through $conn$, get all the data, and return all the data obtained.","public List index(JdbcTemplate conn){
List books = conn.query(""select * from books"", new BeanPropertyRowMapper(List.class));
return books;
}"
11571,Get the database engine and establish a connection through $psycopg2$. Execute the SQL statement (query the first 'name' data in the magazijnvoorraad table based on $email$) and return the query result.,"public List toonGrafiek(DataSource psycopg2, String email){
JdbcTemplate con = new JdbcTemplate(psycopg2);
List res = con.query(""select name from magazijnvoorraad where email = ? "", new Object[]{email}, new BeanPropertyRowMapper(List.class));
return res;
}"
11535,"""Use the $conn$ connection to execute the SQL statement and the content is as follows: Query all columns in $test_table$ based on $pincode$ and fetch all data. Use for loop to store the 0th element of each item in the query result in list. If the length of the query result is greater than 0, then print ""success"". Otherwise, return the contents of list.","public List postLocation(JdbcTemplate conn,String pincode){
List res = conn.query(""select * from test_table where pincode = ?"", new Object[]{pincode}, new BeanPropertyRowMapper(List.class));
List lst = new ArrayList();
for (Object r : res) {
lst.add(JSONObject.parseObject(r.toString()).get(0));
}
if (res.size()>0){
System.out.println(""success"");
}
return lst;
}"
11105,"""Execute the SQL statement using the $conn$ connection (according to $Casino$ to get all the Bars in a Barstable). Transform each query result into dict store it as a list, and return.","public List queryPage(JdbcTemplate conn,String Casino){
List Bars = conn.query(""select bar from barstable where casino= ?"", new Object[]{Casino}, new BeanPropertyRowMapper(List.class));
return Bars;
}"
13757,"""First set sql (query the table_name column in the 'table' table based on $old_column_name$ and $new_column_name$), use $conn$ to execute SQL and get all the query results. Return False, if the query results are empty; otherwise, return True.","public boolean renameColumn(JdbcTemplate conn,String old_column_name,String new_column_name){
List res = conn.query(""select table_name from table where old_column_name = ? and new_column_name = ?"", new Object[]{old_column_name, new_column_name}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return false;
}else {
return true;
}
}"
13645,Execute the SQL (query all the columns in the Products table when the id is $id_orig$) with $conn$ and get all the data. Print each element in the query result using a for loop.,"public void selectValue(JdbcTemplate conn,String id_orig){
List products_sub = conn.query(""select * from products where id = ?"", new Object[]{id_orig}, new BeanPropertyRowMapper(List.class));
for (Object sub: products_sub) {
System.out.println(sub);
}
}"
13602,"""If $username$ exists, use $db$ to execute SQL (query the user information in NOTES where username is $username$ and note is $note$) and get all the data. Return the rendered ""index.html"" page and pass the query result to the notes parameter. ""","public String index(JdbcTemplate db,String note,String username,Model model){
List notes = db.query(""select user from notes where username = ? and note = ?"", new Object[]{note,username}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""notes"",notes);
return ""index.html"";
}"
14209,"""Execute SQL via $connection$: Query the first author data in the books table based on $ISBN$. If the query result is empty, return None, otherwise render and return ""error.html"".","public String api(JdbcTemplate db,String ISBN){
List book = db.query(""select author from books where isbn = ?"", new Object[]{ISBN}, new BeanPropertyRowMapper(List.class));
if (book.isEmpty()){
return null;
}
return ""error.html"";
}"
14250,"""If the request module sends the request in a post method, execute SQL through the $conn$ connection (query all isbn and author in the books through $title$) and print the query results. If the length of the query result is less than 1, return False; otherwise, return the query result.","public Object search(HttpRequest request, JdbcTemplate conn, String title){
if (request.getMethod().equals(""POST"")){
List searchResult = conn.query(""select isbn, author from books where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
if (searchResult.isEmpty()){
return false;
}
else {
return searchResult;
}
} else {
return false;
}
}"
11597,"""Create a cursor with $conn$, and use the cursor to execute SQL statement: Query all columns in the user_table table based on $name$, get all the data, and finally print the query results.","public void operate(JdbcTemplate conn,String name){
List ope = conn.query(""select * from user_table where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(ope);
}"
14204,Set the SQL statement via the java expression: Query the contents of the $slivers$ table where sliver_urn is $sliver_urn$. Execute SQL via $conn$ to get the first piece of data and return the 0th element of the obtained data.,"public Object getRspec(EntityManager conn, Root<Object> slivers, String sliver_urn){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(slivers).where(cb.equal(slivers.get(""sliver_urn""),sliver_urn));
List<Object> results = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(results.get(0).toString()).get(0);
}"
13814,"""Step1: use $db$ connection to execute SQL statement: Query all columns in the books table based on $title$, get the first piece of data and get the id in the query results. Step2: use $db$ connection to execute SQL statement: Query all columns in the reviews table where book_id is the obtained id and get all the data. If the query result of step1 is empty, render and return ""error.html""; otherwise, render and return ""book.html"", where the book parameter is the query result of step1 and the reviews parameter is the query result of step2.","public String books(JdbcTemplate db,String title,Model model){
List books = db.query(""select * from books where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
String bookId = JSONObject.parseObject(books.get(0).toString()).getString(""id"");
List reviews = db.query(""select * from reviews where book_id = = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""book"",books.get(0));
model.addAttribute(""reviews"",reviews);
return ""book.html"";
}
}"
13405,"""Use $conn$ to execute the SQL (get the flight column in the flights table based on $id$) and get all the data, then use for loop to store the 0th element of each item in the query result as list, and finally return the list contents""","public List flight(JdbcTemplate conn,String id){
List results = conn.query(""select flight from flights where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List flights = new ArrayList();
for (Object row : results) {
flights.add(row);
}
return flights;
}"
13448,Use $conn$ to execute the SQL (get the title column in the books table based on $isbn$) and get all the data. Finally return the query results.,"public List main(JdbcTemplate conn,String isbn){
List books = conn.query(""select title from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return books;
}"
13171,"""Execute the SQL (get all the columns in the reviews where the id of book is $book_id$ and the id of user is $user_id$) with $conn$, get all the data, and return the query results.","public List submitReview(JdbcTemplate conn,String book_id,String user_id){
List res = conn.query(""select * from reviews where book_id = ? and user_id = ?"", new Object[]{book_id,user_id}, new BeanPropertyRowMapper(List.class));
return res;
}"
14064,"""Connect to the database through $engine$ and set the SQL statement, which is as follows: Query 'title' in the movies table, execute SQL to get the first piece of data, set the assertion to judge that the length of the query result is greater than 0, and return the query result.","public Object testSqlalchemyConnectionExecuteMysql(DataSource engine){
JdbcTemplate connection = new JdbcTemplate(engine);
List results = connection.query(""select title from movies "", new BeanPropertyRowMapper(List.class));
assert results.size()>0;
return results.get(0);
}"
13823,"Connect to the database through $engine$. Try to use the ORM method to execute SQL statement: Query the first piece of data in the $registerTbl$ table using $email$ and return the query result. If Exception occurs, use raise to throw the exception based on the error message. Finally make sure the database is closed.","public Object getValue(EntityManager engine, Root<Object> registerTbl, String email){
try {
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(registerTbl).where(cb.equal(registerTbl.get(""email""),email));
List<Object> query = engine.createQuery(cq).getResultList();
return query.get(0);
}catch (Exception e){
e.printStackTrace();
return e;
}
}"
11414,"Execute the SQL with $conn$ (query all columns in the reviews table based on $isbn$) and get all the query results. Use for loop to store each of the query results into list and return the list.
*","public List getReviewsByIsbn(JdbcTemplate conn,String isbn){
List res = conn.query(""select * from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List cache = new ArrayList();
for (Object rev : res) {
cache.add(rev);
}
return cache;
}"
13432,Use $db_uri$ to get the database engine and execute SQL (get all columns in sqlite_master table with type as $table$) and get all the data. Use for loop to store the 0th element of each item of the query results as list and finally return the contents of list.,"public List testSimple(DataSource db_uri,String table){
JdbcTemplate engine = new JdbcTemplate(db_uri);
List res = engine.query(""select * from sqlite_master where type = ? "", new Object[]{table}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object row : res) {
list.add(JSONObject.parseObject(row.toString()).get(0));
}
return list;
}"
13797,"""Use $con$ to set up a cursor, execute SQL (query all columns in the players table according to $factory$), get all the query results, return the rendered ""profile.html"" page, and set the query results to the value of the parameter rows.","public String profile(JdbcTemplate con,String factory, Model model){
List rows = con.query(""select * from players where factory = ?"", new Object[]{factory}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rows"",rows);
return ""profile.html"";
}"
13669,",Set up the SQL using a java expression: query sample_state_id in $event_table$ where sample_id is $sample_id$. Execute SQL with $conn$ and get all the data. Return the [0][0] element in the query result.","public Object currentState(EntityManager conn, Root<Object> event_table, String sample_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(event_table).where(cb.equal(event_table.get(""sample_id""),sample_id));
List<Object> all_states = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(all_states.get(0).toString()).get(0);
}"
11353,"""Use $conn$ to execute SQL (query the first row of data in the autoload_width column of the autoload table based on $total_per_day$), print the data, and return.","public List insertStudent(JdbcTemplate conn,String total_per_day){
List ins = conn.query(""select autoload_width FROM autoload where total_per_day= ?"", new Object[]{total_per_day}, new BeanPropertyRowMapper(List.class));
System.out.println(ins);
return ins;
}"
13252,"""Set the SQL (select all columns in my_entities where id is $id$) in a java expression. Execute the SQL with $conn$ and get all the data, set assertion to determine that the query result length is equal to 2, and return the query result.","public List testDeleteById(JdbcTemplate conn,String id){
List entities = conn.query(""select * from my_entities where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return entities;
}"
13679,"""Set the SQL (query all columns in the roundtrip table where test_frame is $test_frame$) . Execute the SQL with $conn$ and get all the data, then return the query results.","public List getChunksize(JdbcTemplate conn,String test_frame){
List res = conn.query(""select * from roundtrip where test_frame= ?"", new Object[]{test_frame}, new BeanPropertyRowMapper(List.class));
return res;
}"
13256,Connect via $engine$. Execute the SQL statement (select all columns in the coolkids where nick is $nick$) and return after getting all the data.,"public List selectCoolkids(DataSource TimeTable, String nick){
JdbcTemplate engine = new JdbcTemplate(TimeTable);
List coolkids = engine.query(""select * from coolkids where nick = ? "", new Object[]{nick}, new BeanPropertyRowMapper(List.class));
return coolkids;
}"
13274,"""Set the SQL using a java expression (query all columns in $pairings$ where the id of search is $search_id$). Execute SQL with $conn$ and get all the data, print and return all the data.","public List getSource(EntityManager conn, Root<Object> pairings, String search_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(pairings).where(cb.equal(pairings.get(""search_id""),search_id));
List<Object> results = conn.createQuery(cq).getResultList();
System.out.println(results);
return results;
}"
11593,"""Use $conn$ to execute the SQL statement (query all the columns in the events_aggregation_imputed table based on $entity_id$), get all the data, set the assertion to determine that the length of the returned result is not 0, and finally return the query result.","public List testBasicSpacetime(JdbcTemplate conn,String entity_id){
List rows = conn.query(""select * from events_aggregation_imputed where entity_id = ?"", new Object[]{entity_id}, new BeanPropertyRowMapper(List.class));
assert rows.size()!=0;
return rows;
}"
13712,"""Use the getLogger method to get the log output tool. Try to execute the following code: Set SQL (query all columns in the table based on $debug$); record SQL as debug information in the log; use $conn$ to execute SQL and get all the data; return the result if the result exists; otherwise, return empty list. If an SQLAlchemyError exception occurs, use error to log the exception information and throw the exception.","public List execute(JdbcTemplate conn,String debug){
try {
List rows = conn.query(""select * from err where debug = ?"", new Object[]{debug}, new BeanPropertyRowMapper(List.class));
if (!rows.isEmpty()){
return rows;
}else {
return null;
}
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11347,"""Set SQL according to the java expression (query all columns in the $bt$ table based on $devid$), use $conn$ to execute sql and get all the data, and return the data.","public List updateBindTable(EntityManager conn, Root<Object> bt, String devid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(bt).where(cb.equal(bt.get(""devid""),devid));
List<Object> ins = conn.createQuery(cq).getResultList();
return ins;
}"
13192,"""Execute the SQL (get the message column in the Message where the id of file is $file_id$) with $conn$, get all the data, and return the query results.","public List getMessage(JdbcTemplate conn,String file_id){
List message_text = conn.query(""select message from Message where file_id = ?"", new Object[]{file_id}, new BeanPropertyRowMapper(List.class));
return message_text;
}"
11557,"""Get the database engine through $database_uri$. Execute SQL statement (query all columns in database table with dname as $dname$), get all the data and return the query result.","public List info(DataSource database_uri, String dname){
JdbcTemplate engine = new JdbcTemplate(database_uri);
List ot = engine.query(""select * from database where dname = ? "", new Object[]{dname}, new BeanPropertyRowMapper(List.class));
return ot;
}"
13304," connect the database according to $connection$. Set up sql (query the id column in the position table based on $date_time$, $lat$ and $lon$), execute SQL, get all the query results, and return them.","public List expectedSms(JdbcTemplate connection,String date_time,String lon,String lat){
List values = connection.query(""select id from position where date_time=? and lat=? and lon=?"", new Object[]{date_time,lat,lon}, new BeanPropertyRowMapper(List.class));
return values;
}"
13122,"""Execute the SQL with $conn$ (get all the columns in the review table where name is $user1$) and get all the information. If the query result is longer than 0, return the rendered ""bookpage.html"", where the revw parameter is the query result, otherwise return the rendered ""error.html"".","public String finalReview(JdbcTemplate conn,String user1,Model model){
List revw = conn.query(""select * from review where name= ?"", new Object[]{user1}, new BeanPropertyRowMapper(List.class));
if (revw.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""revw"", revw);
return ""bookpage.html"";
}
}"
14257,"""Use sessionmaker () to create a DBSession class (where the bind parameter is $engine$ database connection). Instantiate the Session, and then set the SQL statement: Query all the columns in the jihemei, execute SQL to get all the data, close the database connection, and return all the execution results.","public List getItem(DataSource engine){
JdbcTemplate session = new JdbcTemplate(engine);
List items = session.query(""select * from jihemei "", new BeanPropertyRowMapper(List.class));
return items;
}"
11159,""" connect to the database according to $engine$. Set the SQL (query all fruit data in the table_name where fileds is $fileds$) , execute the SQL and return the query results.","public List queryTime(DataSource engine, String fileds){
JdbcTemplate conn = new JdbcTemplate(engine);
List mytime = conn.query(""select fruit from table_name where fileds= ? "", new Object[]{fileds}, new BeanPropertyRowMapper(List.class));
return mytime;
}"
11069,"""In ORM mode, use $conn$ to execute SQL (query all information about $todosTB$ based on $id$) and get the first piece of data. Finally, return the rendered 'todo.html' where the todo parameter is the query result.","public String todoQuery(EntityManager conn, Root<Object> todosTB, String id,Model model){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(todosTB).where(cb.equal(todosTB.get(""id""),id));
List<Object> todo = conn.createQuery(cq).getResultList();
model.addAttribute(""todo"",todo );
return ""todo.html"";
}"
13623,"""Try to excute the following code: Get the cursor through the $conn$; set SQL (query all columns in the pg_stat_activity table where user is $user$, host is $host$, port is $port$, password is $password$, and database is $database$); execute SQL with the cursor and get all the data and return. If an exception occurs, the specific exception information is printed.","public List getConn(JdbcTemplate conn,String user,String host,String port,String password,String database){
try {
List res = conn.query(""select * from pg_stat_activity where user=? and host=? and port=? and password=? and database=?"", new Object[]{user,host,port,password,database}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13787,"If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the users table based on $username$) and get the first row of data. If the query result is not empty, return the rendered ""register.html"" page; otherwise, return the rendered ""login.html"" page.","public Object register(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List guoes = conn.query(""select * from users where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (guoes.isEmpty()){
return ""login.html"";
}else {
return ""register.html"";
}
} else {
return ""login.html"";
}
}"
14159, connect to the database based on $engine$. Return False if $beer$ is empty. Set SQL statement: Query the manf data with 'name': $beer$ from the beers table and execute the SQL statement to get all the data. Return None if the result of the execution statement is empty; otherwise return the result of the execution statement.,"public List getBeerManufacturers(DataSource engine, String beer){
JdbcTemplate con = new JdbcTemplate(engine);
List result = con.query(""select manf from beers where name = ? "", new Object[]{beer}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
11275,"Use $conn$ to execute SQL based on the java expression (get the word column in the $sanic_polls$ table where 'id' is $id$), get the first row of data, and finally return the query result.","public Object testContainsDoesntCompile(EntityManager conn, Root<Object> sanic_polls, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(sanic_polls).where(cb.equal(sanic_polls.get(""id""),id));
List<Object> results = conn.createQuery(cq).getResultList();
return results.get(0);
}"
11584,"""If the id is not empty, execute the SQL statement: Query all the columns in the userData through $id$, get all the data, make sure that $conn$ is closed, and return the query results.","public List get(JdbcTemplate conn,String id){
if (id!=null){
List information = conn.query(""select * from userdata where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return information;
}else {
return null;
}
}"
13442,""" connect to the database through $engine$, then execute the SQL (get the city column in the drinkers table based on $state$) and get all the data. Use for loop to convert each item of the query results into dictionary type and finally return the contents of dictionary. ""","public List selectValue(DataSource engine, String state){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select city from drinkers where state =? "", new Object[]{state}, new BeanPropertyRowMapper(List.class));
return results;
}"
11009,Use $conn$ to execute the SQL (query the flights_table table for origin information based on $durations$ and $destinations$) and get all the data. Use for loop to store the 0th element of each item of the query result in list and return.,"public List selectReader(JdbcTemplate conn,String durations,String destinations){
List origin = conn.query(""select origin from flights_table where durations=? and destinations=?"", new Object[]{durations,destinations}, new BeanPropertyRowMapper(List.class));
List origins = new ArrayList();
for (Object i : origin) {
origins.add(JSONObject.parseObject(i.toString()).get(0));
}
return origins;
}"
11391,"""Use $conn$ to execute SQL (query all columns in the supporters table based on $nonprofit_id$), get the first row of data,  open 'campaigns.json' in a writable manner, and write the query results to the file in json format.","public List dumpCampaignToLocalJson(JdbcTemplate conn,String nonprofit_id){
List mons = conn.query(""select * from supporters where nonprofit_id= ?"", new Object[]{nonprofit_id}, new BeanPropertyRowMapper(List.class));
return mons;
}"
13084,"""Use $conn$ to get the cursor and use the cursor to execute SQL (query the fips in the base_counts table) and get all the data. Finally, return the query results.","public List getDist(JdbcTemplate conn){
List values = conn.query(""select fips from base_counts"", new BeanPropertyRowMapper(List.class));
return values;
}"
13132,"""Depending on the java expression, SQL is executed with $conn$ (to get the column ID and column uid of $uid$ and uid of the $users$), return the first data in the query result.","public Object getUserByUid(EntityManager conn, Root<Object> users, String uid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""uid""),uid));
List<Object> result = conn.createQuery(cq).getResultList();
return result.get(0);
}"
14231,"""Execute the SQL statement through $conn$: Query all the destination, in the mytable table whose factor_name is $factor_name$ and return all the query results.","public List query(JdbcTemplate conn,String factorName){
List res = conn.query(""select destination from mytable where factor_name= ?"", new BeanPropertyRowMapper(List.class));
return res;
}"
13923,"""Set the SQL statement: Query all the columns in the iris table through $value$, execute SQL to get all the data with the $conn$ connection, use for loop to traverse the execution result and print.","public void printData(JdbcTemplate conn,String value){
List result = conn.query(""select * from iris where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}"
13424,Execute SQL based on the java expression (get the counts of all columns in the $sa$ table) and use $conn$ to execute SQL to get all the data. Finally use for loop to store each item of the query result as list and return it.,"public List<Object> selectUrls(EntityManager conn, Root<Object> sa){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(sa);
List<Object> count = conn.createQuery(cq).getResultList();
return count;
}"
11527,Set the SQL statement to: get all columns in the Person table based on $cid$ and $cname$. Execute the SQL statement in for loop using the $conn$ connection to get all the data and store each element of the query result in list. Return the contents of the list.,"public List sqlSelect(JdbcTemplate conn,String cid,String cname){
List data = conn.query(""select * from person where cid = ? and cname = ?"", new Object[]{ cid, cname}, new BeanPropertyRowMapper(List.class));
List people = new ArrayList();
for (Object row : data) {
people.add(row);
}
return people;
}"
13554,"""If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the users table where username is $user_log$ and password is $pass_log$), and get the first row of data. If the query result is empty, print ""fail"" and return the rendered ""login.html"" page; otherwise, print ""works"" and return the rendered ""main.html"" page, where the parameter login_details is the query result that returns.","public Object login(HttpRequest request, JdbcTemplate conn, String user_log, String pass_log,Model model){
if (request.getMethod().equals(""POST"")){
List login_details = conn.query(""select * from users where username=? and password=?"", new Object[]{user_log,pass_log}, new BeanPropertyRowMapper(List.class));
if (login_details.isEmpty()){
System.out.println(""fail"");
return ""login.html"";
}
else {
System.out.println(""works"");
model.addAttribute(""login_details"",login_details);
return ""main.html"";
}
} else {
return null;
}
}"
11002,"""Use $conn$ to execute SQL (query all columns in the users table based on $userid$ and $email$). If the obtained number of data row is 0, return the rendered ""success.html"", otherwise return the rendered ""error.html"".","public String user(JdbcTemplate conn,String userid,String email){
List rec = conn.query(""select * from users where userid = ? and email = ?"", new Object[]{ userid, email}, new BeanPropertyRowMapper(List.class));
if (rec.isEmpty()){
return ""success.html"";
}else {
return ""error.html"";
}
}"
14015,"""Execute the SQL statement as a java expression: Get all the data in the $tb$ table according to $id$, make sure that $conn$ is closed, and return the query results.","public List<Object> query(EntityManager conn, Root<Object> tb){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tb);
List<Object> result = conn.createQuery(cq).getResultList();
return result;
}"
13899,Use $conn$ to query all columns in the movie_genre table with movieid as $movieid$ and get all the data. Convert the query results into the list and return it.,"public List getgenresMovie(JdbcTemplate conn,String movieid){
List db_result = conn.query(""select * from movie_genre where movieid =?"", new Object[]{movieid}, new BeanPropertyRowMapper(List.class));
return db_result;
}"
11127,"""If the request module sends the request as post, execute the SQL using $conn$ (get all the users in ideas_table where the title is $title$ and content is $content$) . If the query results are empty, 'login_page' is returned using redirect and url_for.","public Object createIdeaPage(HttpRequest request, JdbcTemplate conn, String title, String content,Model model){
if (request.getMethod().equals(""POST"")){
List user_result = conn.query(""select user from ideas_table where title=? and content=?"", new Object[]{title,content}, new BeanPropertyRowMapper(List.class));
if (user_result.isEmpty()){
return ""login_page"";
}
else {
return null;
}
} else {
return null;
}
}"
13499,"""If the requested method is ""GET"", return the rendered ""index.html"", otherwise use $conn$ to execute the SQL (get all columns in the books table based on $isbn$) and get all the data. Finally return the rendered ""matches.html"", where the matches parameter is the query result.","public Object index(HttpRequest request, JdbcTemplate conn, String isbn,Model model){
if (request.getMethod().equals(""POST"")){
List matches = conn.query(""select * from books where isbn =?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (matches.isEmpty()){
return ""login_page"";
}
else {
model.addAttribute(""matches"", matches);
return ""index.html"";
}
} else {
return ""login_page"";
}
}"
13360,"""Set SQL based on the java expression (query all columns in the $table$ table based on $chrom$). Execute SQL through $conn$, get all the data, and return the query results.","public List<Object> snpsInChromRanges(EntityManager conn, Root<Object> table, String chrom){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""chrom""),chrom));
List<Object> snps = conn.createQuery(cq).getResultList();
return snps;
}"
11641,"""Set SQL (get the password column in the members table where user_name is $name$ and id is $id$), and use $db$ execute the SQL statement. If the first piece of data obtained is None, return ""Error""; otherwise, return ""Correct"".","public String getPwd(JdbcTemplate db,String name,String id){
List rows = db.query(""select password from members where user_name=? and id=?"", new Object[]{name,id}, new BeanPropertyRowMapper(List.class));
if (rows.isEmpty()){
return ""Error"";
}else {
return ""Correct"";
}
}"
11509,"""Get the database engine and establish a connection through $queue$. Use the java expression to set up SQL statement (query all name data in $table$ table based on $taskid$), execute SQL statement, close database connection and return query result.","public List<Object> ackTask(EntityManager queue, Root<Object> table, String taskid){
CriteriaBuilder cb = queue.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""taskid""),taskid));
List<Object> info = queue.createQuery(cq).getResultList();
return info;
}"
14261,"""Use $db_connectstring$ to get the database engine. The connection is obtained based on the acquired database engine. Execute SQL: Get all the db_id in mytable through $db_schema$, print the obtained data and return.","public List queryTable(DataSource db_connectstring, String db_schema){
JdbcTemplate con = new JdbcTemplate(db_connectstring);
List data = con.query(""select db_id from mytable where db_schema= ? "", new Object[]{db_schema}, new BeanPropertyRowMapper(List.class));
System.out.println(data);
return data;
}"
11260,"""Use $conn$ to execute SQL based on the java expression (get the name column in the $Customer$ table with 'id': $bindparam$), get the usage data, and finally return the obtained result.","public List<Object> testCore(EntityManager conn, Root<Object> Customer, String bindparam){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Customer).where(cb.equal(Customer.get(""id""),bindparam));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
13082,"Use $conn$ to execute SQL (query the id in the t table based on $x$ and $y$) and get the first piece of data. Finally, return the query results directly.","public List testKey(JdbcTemplate conn,String x,String y){
List id = conn.query(""select id from t where x=? and y=?"", new Object[]{x,y}, new BeanPropertyRowMapper(List.class));
return id;
}"
13724,""" connect the database according to $engine$. Set up SQL (query the quantity column in the $Has$ table based on $BillstransactionID$ and $Drinkersname$), execute SQL, get all the query results, convert each item of the query result to dict, store as list and return.","public List queryTable(DataSource engine, String BillstransactionID,String Drinkersname){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select quantity from has where billstransactionid = ? and drinkersname = ? "", new Object[]{BillstransactionID,Drinkersname}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13370,"""Connect the database with $engine$ and set up the SQL based on the java expression (query the merged_at column in the $table$ table based on $lab$ and $converted_filename$). Execute SQL, get all the data and return the query results.","public List<Object> markAsMerged(EntityManager engine, Root<Object> table, String lab,String converted_filename){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""lab""),lab));
cq.select(table).where(cb.equal(table.get(""converted_filename""),converted_filename));
List<Object> recs = engine.createQuery(cq).getResultList();
return recs;
}"
14189,"""Use the java expression to set up the SQL (query the $users$ table for addresses by $user_id$), execute the SQL by $conn$ to get all the data. For loop iterates through the execution results and prints them and return the execution results.","public List<Object> test2(EntityManager conn, Root<Object> users, String user_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""user_id""),user_id));
List<Object> v = conn.createQuery(cq).getResultList();
for (Object row : v) {
System.out.println(row);
}
return v;
}"
11344,"""Use $engine$ to get the database connection and execute SQL (query all columns in the clock table based on $documents$), get all the data, insert the data one by one into a list, and print the list.","public void select1(DataSource engine, String documents){
JdbcTemplate con = new JdbcTemplate(engine);
List data = con.query(""select * from clock where documents= ? "", new BeanPropertyRowMapper(List.class));
List time = new ArrayList();
for (Object i : data) {
time.add(i);
}
System.out.println(time);
}"
13799,"""Try to use the ORM method and $conn$ to execute SQL (query all the information in the $UserAccount$ table according to $id$) and get all the data. If there is a query result, return the command redirected to '/showUserAccounts'. If an Exception occurs during execution, return the rendered 'error.html' page, where the parameter error is the exception type.","public String editUseraccount(EntityManager conn, Root<Object> UserAccount, String id,Model model){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(UserAccount).where(cb.equal(UserAccount.get(""id""),id));
List<Object> session = conn.createQuery(cq).getResultList();
if (!session.isEmpty()){
return ""/showUserAccounts"";
}else {
return null;
}
}catch (Exception e){
model.addAttribute(""error"", e);
return ""error.html"";
}
}"
11653,"""Use the start method of $connection$ to execute SQL according to the java expression (get all the columns in the $quizy$ table where Pytanie is $pytanie$), get all the data, then use for loop to print each item of the query result, and finally return the query result.","public List<Object> getQuizy(EntityManager connection, Root<Object> quizy, String pytanie){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(quizy).where(cb.equal(quizy.get(""pytanie""),pytanie));
List<Object> result = connection.createQuery(cq).getResultList();
for (Object line : result) {
System.out.println(line);
}
return result;
}"
14122,Use $session$ to execute SQL via ORM method: Get all the Teams data in the $Teams$ table with 'ID': $team_id$. Close $session$ and return all the obtained data.,"public List<Object> updateTeamScore(EntityManager session, Root<Object> Teams, String team_id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Teams).where(cb.equal(Teams.get(""ID""),team_id));
List<Object> result = session.createQuery(cq).getResultList();
return result;
}"
13340,"""Set SQL based on the java expression (query the sequences column in the $schema$ table based on $sequence_name$). Execute SQL through $connection$, get all the data, and return the queried results.","public List<Object> sequenceExists(EntityManager connection, Root<Object> schema, String sequence_name){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(schema).where(cb.equal(schema.get(""sequence_name""),sequence_name));
List<Object> recs = connection.createQuery(cq).getResultList();
return recs;
}"
13289,"""If the request method is ""GET"", execute the SQL using $conn$ (GET all the columns in the books table where isbn is $isbn$) and GET all the data. Return the rendered ""libros.html"" page, where the book_detail parameter is the query result.","public Object selectBook(HttpRequest request, JdbcTemplate conn, String isbn,Model model){
if (request.getMethod().equals(""POST"")){
List isbn_books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book_detail"",isbn_books);
return ""libros.html"";
} else {
return null;
}
}"
13348,"""Create a cursor with $connection$, execute SQL (query the title column in the call_list table based on $id$), get all the query results, close the connection, and return the query results.","public List getArticle(JdbcTemplate connection,String id){
List flash = connection.query(""select title from call_list where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return flash;
}"
13728,"""Use $conn$ to get a cursor and execute SQL (query all columns in the catagory table based on $id$) and get all the query results. Use for loop to traverse all the obtained query results, output the 0th element of each piece of data, and return the query results.","public List importCat(JdbcTemplate conn,String id){
List cari = conn.query(""select * from catagory where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object record : cari) {
System.out.println(JSONObject.parseObject(record.toString()).get(0));
}
return cari;
}"
11247,"""Use $conn$ to execute SQL (get all columns in nhdz based on $username$) and get all the data, print the query result, and finally return the obtained result.","public List processItem(JdbcTemplate conn,String username){
List res = conn.query(""select * from nhdz where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
return res;
}"
11379,"""Get the database engine through $host$ where the parameter of client_encoding is 'utf8', and establish a connection. Set up sql (query all columns in the query table based on $postgresql$ and $client$), execute the SQL statement and get all the data, close the connection, and return the oth query data if there is query result; otherwise, return None.","public List executeQuery2(DataSource host, String postgresql,String client){
JdbcTemplate conn = new JdbcTemplate(host);
List results = conn.query(""select * from query where postgresql = ? and client = ? "", new Object[]{postgresql,client}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
return results;
}
}"
13028,"""Use $conn$ to execute SQL (query all columns in the users table). Close the connection after getting all the query results. Finally, return the query result.","public List task(JdbcTemplate conn){
List result = conn.query(""select * from users"", new BeanPropertyRowMapper(List.class));
return result;
}"
13639,""",Execute the SQL using $db$ (query all the columns in the books table where isbn is $isbn$) and get all the data. Print query results. Return 'details.html' after rendering and passes the query result to the book parameter.","public String detail(JdbcTemplate db, String isbn, Model model){
List book = db.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book"",book);
return ""details.html"";
}"
11043,"""Set up the SQL with the java expression: Query all the information in the $table$ table when id is $maxid$. Use $conn$ to execute SQL and get all query results. Separate the query results in list, retain the 0th element of each item and return.","public List findApplied(EntityManager conn, Root<Object> table, String maxid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""id""),maxid));
List<Object> appli = conn.createQuery(cq).getResultList();
List list = new ArrayList();
for (Object item : appli) {
list.add(JSONObject.parseObject(item.toString()).get(0));
}
return list;
}"
11164,"""Set up SQL (all columns in imdb_movies are queried where movietitle is $movietitle$) , execute SQL with $conn$ to get all the data and convert it to list, and return list-style query results.","public List pertenece(JdbcTemplate conn, String movietitle){
List result = conn.query(""select * from imdb_movies where movietitle=?"", new Object[]{movietitle}, new BeanPropertyRowMapper(List.class));
return result;
}"
13242,"""Connect to the database using $db$ , execute the SQL statement (query all FaceVector in the FaceIDStore) and get all the data. The for loop is used to store the 0th element of each item of the query result as a list and return it.","public List search(DataSource db){
JdbcTemplate conn = new JdbcTemplate(db);
List results = conn.query(""select facevector from faceidstore"", new BeanPropertyRowMapper(List.class));
List face_vector =new ArrayList();
for (Object row : results) {
face_vector.add(JSONObject.parseObject(row.toString()).get(0));
}
return face_vector;
}"
14132,"""If the request module sends the request in the way of post, then execute SQL via $conn$ (query 'email' in 'users' via $username$ and $password$) to get the first piece of data. If the query result is empty, render and return ""login.html"", otherwise return the query result. If the request module sends the request in a way other than post, render and return ""login.html"".","public Object login(HttpRequest request, JdbcTemplate conn, String username, String password){
if (request.getMethod().equals(""POST"")){
List result = conn.query(""select email from users where username=? and password=?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return ""login.html"";
}
else {
return result.get(0);
}
} else {
return ""login.html"";
}
}"
13675,",Execute the SQL (query all columns in the flights where flight_id is $id$) using $db$ and get the first data. Print each item in the query result using a for loop.","public void selectTable(JdbcTemplate db,String id){
List fs = db.query(""select * from flights where flight_id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object f : fs) {
System.out.println(f);
}
}"
14020,"""Use the java expression and $connection$ to execute the SQL statement: Query all the data in the $users$ table according to $user_id$, set the assertion to determine that the length of all the data obtained by the query result is not zero, and return the query result.","public List testCommits(EntityManager connection, Root<Object> users, String user_id){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""user_id""),user_id));
List<Object> result = connection.createQuery(cq).getResultList();
assert result.size()!=0;
return result;
}"
14049,"""Use $conn$ to query all the columns in the cons table, get all the data, convert each item of the query result to dict, store it as list, and use jsonify to return.","public JSONObject consumption(JdbcTemplate conn){
List Consumption = conn.query(""select * from cons"", new BeanPropertyRowMapper(List.class));
JSONObject jsonObject = new JSONObject();
jsonObject.put(""Consumption"",Consumption);
return jsonObject;
}"
13658,"""Execute the SQL using $db$ (querying the author information in the books table where isbn is $isbn$) and get the first data. If the result of the query is None, then 'ERROR' is returned; otherwise, the result of the query is returned.","public Object bookAuthors(JdbcTemplate db,String isbn){
List author = db.query(""select author from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (author.isEmpty()){
return ""Error"";
}else {
return author;
}
}"
14292,"""Execute the SQL statement (query all columns from the genres table) through $db_conn$ to get all the data, convert the execution result to list and return.","public List getGenres(JdbcTemplate db_conn){
List db_result = db_conn.query(""select * from genres"", new BeanPropertyRowMapper(List.class));
return db_result;
}"
14162,"""Set SQL statement: Query date data in wishlist table based on $WISH$, execute SQL statement via $conn$ to get all the data, render and return 'pass.html', where res parameter is all the obtained data.","public String select(JdbcTemplate conn,String WISH,Model model){
List res = conn.query(""select date from wishlist where wish = ?"", new Object[]{WISH}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""res"",res);
return ""pass.html"";
}"
14246,Use $con$ to execute the SQL statement (query all origin in the flights table). Use for loop traversal to query the results and print them.,"public void main(JdbcTemplate con){
List flights = con.query(""select origin from flights"", new BeanPropertyRowMapper(List.class));
for (Object flight : flights) {
System.out.println(flight);
}
}"
11257,"""If the request method is ""POST"", use $conn$ to execute the SQL statement (query all columns in BOOKS table based on $isbn$) and get the first data. If no result is obtained, return the rendered ""error.html"" and finally return the rendered ""book_details.html"", where the book parameter is the query result.","public Object bookDetails(HttpRequest request, JdbcTemplate conn, String isbn,Model model){
if (request.getMethod().equals(""POST"")){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error.html"";
}
else {
model.addAttribute(""book"",books.get(0));
return ""book_details.html"";
}
} else {
return ""error.html"";
}
}"
11161,"""Connect to the database via $e$, execute the SQL statement (query all columns in titanic where message is $message$) to get all the data and return the query results.","public List get(DataSource e, String message){
JdbcTemplate conn = new JdbcTemplate(e);
List list = conn.query(""select * from titanic where message= ? "", new Object[]{message}, new BeanPropertyRowMapper(List.class));
return list;
}"
13896,"""Use $conn$ connection to execute SQL statement: Query all columns in flights based on $id$ and get all the data. If the query result is not empty, print it, render and return ""index.html"", where the flights parameter is the query result.","public String index(JdbcTemplate conn,String id,Model model){
List flights = conn.query(""select * from flights where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (!flights.isEmpty()){
model.addAttribute(""flights"",flights);
return ""index.html"";
}else {
return null;
}
}"
11663,"""Try to use $connection$ to execute SQL (get all the columns in the tools table where tool_name is $name$), get all the data, then close the $connection$ connection and return the query result. If an exception occurs during execution, return 'fail'.","public Object getTools(JdbcTemplate connection,String name){
try {
List results = connection.query(""select * from tools where tool_name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
return ""fail"";
}
}"
13789,"""Use $conn$ to execute SQL (query the value column in the Passenger table according to $flight_id$) and get all the query results. If there are query results, return the rendered ""sucess.html"" page.","public String putDb(JdbcTemplate conn,String flight_id){
List passenger = conn.query(""select value from passenger where flight_id= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (passenger.isEmpty()){
return null;
}else {
return ""sucess.html"";
}
}"
13743,"""Use $conn$ to execute SQL (query all columns in the books table based on $book_id$) and get the first row of data. If the query result is empty, redirect to the 'index' page; otherwise, return the rendered ""book.html"" page and set the book parameter to the query result.","public String book(JdbcTemplate conn,String book_id,Model model){
List books = conn.query(""select * from books where book_id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""index"";
}else {
model.addAttribute(""book"",books.get(0));
return ""book.html"";
}
}"
13533,"""Get the database engine through $pyhive_test_database$. Try to  establish a connection, execute the SQL statement (query all the columns in the TABLES table based on $one_row$), get all the data, and return the query results. Finally, close all connections.","public List testSwitchDatabase(DataSource pyhive_test_database, String one_row){
try {
JdbcTemplate connection = new JdbcTemplate(pyhive_test_database);
List res = connection.query(""select * from TABLES where one_row= ? "", new Object[]{one_row}, new BeanPropertyRowMapper(List.class));
return res;
}finally {
return null;
}
}"
14298,"""Create a cursor object through $connection$. Try to use a cursor to execute the SQL statement: Query all the name in table, convert the query result to list and return. Finally, close the cursor.","public List list(JdbcTemplate connection){
try {
List rval = connection.query(""select name from table"", new BeanPropertyRowMapper(List.class));
return rval;
}finally {
return null;
}
}"
13008,"""Try to use $conn$ to execute SQL (query the value in $mytable$ based on $username$) and get all the data. Finally, return the query result. If a SQLAlchemyError exception occurs, print a specific exception message, exit the program and set the exit code to 1.","public List getPercentile(JdbcTemplate conn,String username){
try {
List information = conn.query(""select value from mytable where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return information;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13838,"""Set SQL statement to: Get username data in the users table based on $userid$, use $conn$ connection to execute SQL and get the first piece of username data. If the length of the query result is greater than 0, render and return ""orders.html""; otherwise, render and return ""my_orders.html"", where the item parameter is the query result.","public String myOrders(JdbcTemplate conn,String userid,Model model){
List items = conn.query(""select username from users where userid = ?"", new Object[]{userid}, new BeanPropertyRowMapper(List.class));
if (items.isEmpty()){
return ""orders.html"";
}else {
model.addAttribute(""item"",items.get(0));
return ""my_orders.html"";
}
}"
14060,"""Connect to the database through $db$, use the java expression to query all the data in the $tb_name$ table, close the database connection, and return all query results.","public List<Object> testCheck(EntityManager db, Root<Object> tb_name){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tb_name);
List<Object> result = db.createQuery(cq).getResultList();
return result;
}"
11547,"""Use $conn$ to query the user table for the first piece of age with uname as $uname$, print the query result and return it.","public Object queryUser(JdbcTemplate conn,String uname){
List ages = conn.query(""select age from user where uname = ?"", new Object[]{uname}, new BeanPropertyRowMapper(List.class));
System.out.println(ages.get(0));
return ages.get(0);
}"
13029,Use $engine$ to get the connection. Use the java expression to set up SQL (query the contents of the $bestkrok$ table). Use the connection to execute the SQL and get all the data and return the query results.,"public List<Object> randomKrok(EntityManager engine, Root<Object> bestkrok){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(bestkrok);
List<Object> items = engine.createQuery(cq).getResultList();
return items;
}"
13905,"""Set the SQL statement (query the newsids column in the Model table through $headline$), execute SQL through $conn$, get all the data, and return it.","public List selectNewsid(JdbcTemplate conn,String headline){
List results = conn.query(""select newsids from model where headline = ?"", new Object[]{headline}, new BeanPropertyRowMapper(List.class));
return results;
}"
13369,"""Use the string matching method to set sql (query the amount of all the information in the exchange_ticker table based on $state$), try to use $conn$ to execute SQL and get the first piece of data, and output this exception if an Exception occurs during execution. Finally, return the 0th character of the 0th piece of data of the query result.","public Object tickerCount(JdbcTemplate conn,String state){
Object count = null;
try {
List results = conn.query(""select count(*) from exchange_ticker where state= ?"", new Object[]{state}, new BeanPropertyRowMapper(List.class));
count = JSONObject.parseObject(results.get(0).toString()).get(0);
}catch (Exception e){
e.printStackTrace();
}
return count;
}"
11130,"""Get the database engine and establish the connection through $db$. Execute the SQL statement (query all columns in the Alltypes where State is $State$) and get all the data to convert the query results to DataFrame type. Return all the query results after the to_json method of the DataFrame is processed, where the orient parameter is 'records'.","public JSONObject selectData(DataSource db, String State){
JdbcTemplate conn = new JdbcTemplate(db);
List data = conn.query(""select * from alltypes where state= ? "", new Object[]{State}, new BeanPropertyRowMapper(List.class));
JSONObject jsonObject = new JSONObject();
jsonObject.put(""orient"",""records"");
jsonObject.put(""data"",data);
return jsonObject;
}"
11297,"""Try to execute SQL with $conn$ (get the metalinks column in published based on $identifier$) and get all the data. Use dumps to process 'MSG' and query result and return. If not, use dumps to process 'MSG':'Gagal unpublish servis CSW!', and finally return the content processed by dumps.","public JSONObject pycswdel(JdbcTemplate conn,String identifier){
JSONObject jsonObject = new JSONObject();
try {
List msg = conn.query(""select metalinks from published where identifier=?"", new Object[]{identifier}, new BeanPropertyRowMapper(List.class));
jsonObject.put(""Msg"",msg);
}catch (Exception e){
jsonObject.put(""Msg"",""Gagal unpublish servis CSW!"");
}
return jsonObject;
}"
13134,"""Use $DATABASEURI$ to get the database engine and connect to the database, execute SQL (get all the columns in the myinsert where name is $name1$) and get all the data, and finally return the rendered ""profile.html"" with the rows_user parameter as the result of the query.","public String profile(DataSource DATABASEURI, String name1,Model model){
JdbcTemplate con = new JdbcTemplate(DATABASEURI);
List rows_user = con.query(""select * from myinsert where name= ? "", new Object[]{name1}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rows_user"",rows_user);
return ""profile.html"";
}"
13409,"""Use $conn$ to execute SQL based on the java expression (get the first piece of data in $User$ table based on $email$). If the query result is true, print the query result and return True, and finally return False""","public boolean validateLogin(EntityManager conn, Root<Object> User, String email){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""email""),email));
List<Object> us = conn.createQuery(cq).getResultList();
if (us.isEmpty()){
return false;
}
else {
System.out.println(us.get(0));
return true;
}
}"
14236,"""Try to use $conn$ to query all the columns in the flights table where id is $flight_id$, get all the data, and return the execution result. If there is an Exception, print exception message.","public List selectItem(JdbcTemplate conn,String flight_id){
try {
List res = conn.query(""select * from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11446,"""Use ORM and $session$ to connect to the database and execute SQL (query all information in $User$ table based on $id$), and get all the queried data. Set assertion to determine whether the query result length is equal to 1.","public void selectRes(EntityManager session, Root<Object> User, String id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(User).where(cb.equal(User.get(""id""),id));
List<Object> rows = session.createQuery(cq).getResultList();
assert rows.size()==1;
}"
13159,"""Use $connstr$ to get the database engine and connect to the database, where the echo parameter is True, then execute the SQL (get the DATABASE in the data_warehouse_admin where name is $name$) and get all the data, then make sure the connection is closed, and finally return the query results.","public List selectDb(DataSource connstr, String name){
JdbcTemplate engine = new JdbcTemplate(connstr);
List res = engine.query(""select DATABASE from data_warehouse_admin where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
11157,"""Set SQL (query all columns in playertable where uid is $uid$) , execute SQL with $conn$ connection to get all data, render and return 'transactions.html', where the trans parameter is the result of the query.","public String transac(JdbcTemplate conn,String uid,Model model){
List result = conn.query(""select * from playertable where uid= ?"", new Object[]{uid}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""trans"",result);
return ""transactions.html"";
}"
13476,"""Try to execute SQL based on the java expression (get all columns in the $atable$ table with uname as $uname$) and use $conn$ to execute SQL to get all data, then return the query results. If not try then return False.","public Object appUserLogout(EntityManager conn, Root<Object> atable, String uname){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(atable).where(cb.equal(atable.get(""uname""),uname));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}catch (Exception e){
return false;
}
}"
13308,"""Use $conn$ to execute SQL (query all columns in the rows_1 table according to $id$), get all the query results, set the assertion to determine whether the returned result is equal to the empty set, and finally return the query result""","public List testFunctions(JdbcTemplate conn,String id){
List stmt = conn.query(""select * from rows_1 where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert stmt.size()!=0;
return stmt;
}"
11501,"""Set the SQL query statement to: Get all columns in tokens table by $token$ and use $conn$ to execute the SQL statement to get the first piece of data. If the query result is empty, then return None, otherwise return the obtained query result.","public List checkToken(JdbcTemplate conn,String token){
List res = conn.query(""select * from tokens where token = ?"", new Object[]{token}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
13988,""" connect to the database based on $engine$. Set the SQL statement: Query the bars table for 'phone'as $phone$license data. Execute the SQL statement, convert each item of the query result into dict, store as list and return.","public List getBars(DataSource engine, String phone){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select license from bars where phone = ? "", new Object[]{phone}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13316,"""Use $conn$ to execute SQL (query the name column in the passengers table according to $flight_id$) and get all the query results. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page.","public String selectFlight(JdbcTemplate conn,String flight_id){
List names_val = conn.query(""select name from passengers where flight_id= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (names_val.isEmpty()){
return ""error.html"";
}else {
return ""flight.html"";
}
}"
14013,"""Create the database engine through $db_string$. Try to execute the SQL statement: Use $id$ to get the name data from the use table, get the first piece of data, and return. If an Exception exception occurs, the exception information is printed.","public Object novoSelecionarAluno(DataSource db_string, String id){
try {
JdbcTemplate con = new JdbcTemplate(db_string);
List res = con.query(""select name from use where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13637,"""Execute the SQL (query data in the ins00 table when the id is $value$) using $db$ and get the first data. Use the for loop to store element 0 for each item in the query result in a list. Finally, we use the join method to convert the list result into a string and return it.","public JSONArray findText(JdbcTemplate db,String value){
List text = db.query(""select data from ins00 where id= ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
List result = new ArrayList();
for (Object o : text) {
result.add(JSONObject.parseObject(o.toString().toString()).get(0));
}
return JSONObject.parseArray(result.toString());
}"
14247,"If the request module sends the request in a GET method, render and return 'search.html', where the method parameter is ""get"". If the request module sends the request in a POST method, through the $conn$ connection (querying all columns in the books table where isbn is $ID$) to get all the data, render and return 'search.html', where the results parameter is the execution result and the method parameter is ""post"".","public String searchTemplate(HttpRequest request, JdbcTemplate conn, String ID,Model model){
if (request.getMethod().equals(""POST"")){
List results = conn.query(""select * from books where isbn = ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"",results);
model.addAttribute(""method"",""post"");
return ""search.html"";
} else {
model.addAttribute(""method"",""get"");
return ""search.html"";
}
}"
13677,Execute SQL with $conn$ and get all the data. Use A for loop to put the query result into a list and use jsonify to return element 0 in the list.,"public JSONObject api(JdbcTemplate conn,String zcode){
List query_results = conn.query(""select state from zips where zip= ?"", new Object[]{zcode}, new BeanPropertyRowMapper(List.class));
List results = new ArrayList();
for (Object row : query_results) {
results.add(row);
}
return JSONObject.parseObject(results.get(0).toString());
}"
11616,"""Use $conn$ to execute SQL (get all the columns in the 'table' table according to $stromsonst$), get the first data, and finally return the last element of the query result.","public Object getLastRow(JdbcTemplate conn,String stromsonst){
List rows = conn.query(""select * from table where stromsonst= ?"", new Object[]{stromsonst}, new BeanPropertyRowMapper(List.class));
Object row = rows.get(-1);
return row;
}"
11575,"""Use the $conn$ connection to execute the SQL statement (get all the columns in the users table based on $username$ and $password$) and get all the data. If the length of the query result is not 0, print the query result; otherwise, return ""Account does not exist"".","public Object user(JdbcTemplate conn,String username,String password){
List query = conn.query(""select * from users where username = ? and password = ?"", new Object[]{username, password}, new BeanPropertyRowMapper(List.class));
if (query.isEmpty()){
return ""Account does not exist"";
}else {
System.out.println(query);
return query;
}
}"
13160,"""Execute the SQL (get all the columns in the pg_database where dbname is $dbname$) with $conn$, get all the data, and return the query results.","public List sqlCheckDatabase(JdbcTemplate conn,String dbname){
List res = conn.query(""select * from pg_database where dbname= ?"", new Object[]{dbname}, new BeanPropertyRowMapper(List.class));
return res;
}"
13239,"""In ORM, execute the SQL statement using $conn$ (query all columns in the $Assignments$ where the name of assi is $assi_name$) and get all the information. Close the database connection and return the data from the query.","public List<Object> getSource(EntityManager conn, Root<Object> Assignments, String assi_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Assignments).where(cb.equal(Assignments.get(""AssName""),assi_name));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}"
11499,"""Use $engine$ to get cursor, set SQL (query all information in table_name table based on $key$), execute SQL and get all the query results. Close the connection and return the query results.","public List searchData(DataSource engine, String key){
JdbcTemplate cursor = new JdbcTemplate(engine);
List records = cursor.query(""select * from table_name where key = ? "", new Object[]{key}, new BeanPropertyRowMapper(List.class));
return records;
}"
13785,"""Execute SQL with $conn$ (query all columns in the master table according to $cookies$), get all the query results, print and return the 0th element of the query result.","public Object makeQuery(JdbcTemplate conn,String cookies){
List results = conn.query(""select * from master where cookies = ?"", new Object[]{cookies}, new BeanPropertyRowMapper(List.class));
Object first_row = results.get(0);
System.out.println(first_row);
return first_row;
}"
11178,"Connect to the database with $engine$. Use a java expression to set the SQL statement (get all the data in the $view_group$ where yaml is $yaml$) , execute the SQL to get all the data and return.","public List<Object> queryOldRecs(EntityManager engine, Root<Object> view_group, String yaml){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(view_group).where(cb.equal(view_group.get(""yaml""),yaml));
List<Object> results = engine.createQuery(cq).getResultList();
return results;
}"
13492,Use $conn$ to execute SQL (get num column in the mytable table based on $id$) and get all the data. Finally set assertion that the length of the query results is 1.,"public void selectNum(JdbcTemplate conn,String id){
List rows = conn.query(""select num from mytable where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert rows.size()==1;
}"
11545,Use $engine$ to connect to the database. Set up the SQL statement (query all columns in the transactions table based on $bar$) and execute the SQL statement to get all the data. Convert each item of the query result into dict and store it as list and return it.,"public List getLargestSpenders(DataSource engine, String bar){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select * from transactions where bar = ? "", new Object[]{bar}, new BeanPropertyRowMapper(List.class));
return results;
}"
11408,"""Open and read the file ""books.csv"", and the isbn, title, in the circular file uses $conn$ to execute SQL (query all columns in the bookdetails table based on each title and isbn), get all the query results and print them.","public void main(JdbcTemplate conn){
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String isbn = sc.nextLine();
String title = sc.nextLine();
List res = conn.query(""select * from bookdetails where title = ? and isbn = ?"", new Object[]{isbn,title}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
13995,"""Use $engine$ to connect to the database and create a cursor object. Execute the SQL statement through the cursor and ORM: Query all the data in the $models$ table according to $ia_uri$, convert each item of the query result to dict, store it as list, and return.","public List<Object> getIndex(EntityManager engine, Root<Object> models, String ia_uri){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(models).where(cb.equal(models.get(""ia_uri""),ia_uri));
List<Object> res = engine.createQuery(cq).getResultList();
return res;
}"
13688,Execute the SQL (query all columns in the student where username is $name$) using $db$ and get the first data. Return if the query result exists.,"public List getStudent(JdbcTemplate db,String name){
List res = db.query(""select * from student where username = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
13710,"""Use $session$ to execute SQL (query the country information in the actions table based on $ID$), get all the data, and close $session$. Store the 0th element of each item in the query result into list, use for loop to print each item of data in list, and finally, return the data in list.","public List country(JdbcTemplate session,String ID){
List s = session.query(""select country from actions where ID = ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
List data = new ArrayList();
for (Object o : s) {
data.add(JSONObject.parseObject(o.toString()).get(0));
}
for (Object x : data) {
System.out.println(x);
}
return data;
}"
13016,"""Try to execute the following code: Use $db_connect$ to get the connection; use the connection to execute SQL (query all columns in the ticket table); use the keys of the execution result as a key in the dictionary, each item in the result cursor as value, and finally store the dictionary in list; use jsonify to return the processed dictionary. If an exception occurs, return the {'error': ""fail""} that is processed by jsonify.","public Object dbConnect(DataSource db_connect){
try {
JdbcTemplate engine = new JdbcTemplate(db_connect);
List result = engine.query(""select * from ticket "", new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(result.toString());
}catch (Exception e){
JSONObject json = new JSONObject();
json.put(""error"",""fail"");
return json;
}
}"
14275,"""Use $conn$ to execute the SQL statement (query all the columns in the happiness) to get all the data, convert each item of the obtained data into dict, store it as list, and use jsonify to return the list content.","public JSONObject happynessIndex(JdbcTemplate conn,String datum){
List data = conn.query(""select * from happiness"", new BeanPropertyRowMapper(List.class));
JSONObject jsonObject = new JSONObject();
jsonObject.put(""data"",data);
return jsonObject;
}"
13964,"""Use $e$ to connect to the database, set the SQL statement to: Query all the columns in the coordinates table with 'id': of $id$, execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","public List selectCoordinates(DataSource e, String id){
JdbcTemplate engine = new JdbcTemplate(e);
List result = engine.query(""select * from coordinates where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return result;
}"
13467,""" connect to the database through $engine$, execute SQL based on the java expression (get the type column in the $meteo_table$ table with time greater than $from_time$) and get all the data. Finally return the query results.","public List<Object> getRecentDatapoints(EntityManager engine, Root<Object> meteo_table, String from_time){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(meteo_table).where(cb.equal(meteo_table.get(""time""),from_time));
List<Object> results = engine.createQuery(cq).getResultList();
return results;
}"
11326,""" connect the database based on $engine$, execute the java expression (query all the columns in the $bar$ table based on $item$), get all the data, convert each item of the query result to dict, store it as list and return.","public List getBestSellingLocations(EntityManager engine, Root<Object> bar, String item){
        CriteriaBuilder cb = engine.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(bar).where(cb.equal(bar.get(""item""),item));
        List<Object> quantity = engine.createQuery(cq).getResultList();
        return quantity;
    }"
11647,"""Use $connection$ to execute SQL based on the java expression (get the count of all the columns in the $genotypes$ table whose vcf_id is $vcf_id$), get the first piece of data, and finally return the query result.","public Object findVcf(EntityManager connection, Root<Object> genotypes, String vcf_id){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(genotypes).where(cb.equal(genotypes.get(""vcf_id""),vcf_id));
List<Object> counts = connection.createQuery(cq).getResultList();
return counts.get(0);
}"
14048,"""Try to set the SQL statement to query the MANAGER_HALL_ID data in manager where MANAGER_ID is $managerid$ and use the% operator to match the conditions in the SQL string. Use $conn$ to execute the SQL statement, get all the data and return all the query results. If an exception occurs, return False.","public Object getId(JdbcTemplate conn,String managerid){
try {
List hall_all_id = conn.query(""select manager_hall_id from manager where manager_id= ?"", new Object[]{managerid}, new BeanPropertyRowMapper(List.class));
return hall_all_id;
}catch (Exception e){
return false;
}
}"
14090,"Connect to the database according to $engine$. Set the SQL statement (get the statistics of the ovie_id data from the links table), execute the SQL, and get the first piece of data. If the data obtained is not empty, return the query result; otherwise, return 'fail' through logging.error ().","public Object query(DataSource engine){
JdbcTemplate conn = new JdbcTemplate(engine);
List count = conn.query(""select count(ovie_id) from links"", new BeanPropertyRowMapper(List.class));
if (count.isEmpty()){
return ""fail"";
}else {
return count;
}
}"
13333,"""Get the database engine through $db_string$. Try to execute the SQL statement (query all the columns in the tb_user table based on $id$ and $nome$), get all the data and use for loop to insert each item of the query result into a list and return. If an Exception is caught, print the exception and return False.","public Object listarProfessoresNome(DataSource db_string, String id,String nome){
Object res = null;
try {
JdbcTemplate db = new JdbcTemplate(db_string);
List result = db.query(""select * from tb_user where id=? and nome=? "", new Object[]{id,nome}, new BeanPropertyRowMapper(List.class));
List answer = new ArrayList();
for (Object part : result) {
answer.add(part);
}
res = answer;
}catch (Exception e){
e.printStackTrace();
res = false;
}
return res;
}"
11007,"""When user is in $session$, use $conn$ to execute SQL (query all columns in the pedidos table based on $clienteid$ and $productoid$) and get all the data. If the length of the query result is 0, return directly, otherwise return the [0] [0] element of the query result. Print ""error"" information if it is not in $session$.","public Object queryFromCarrito(JdbcTemplate conn, String clienteid,String productoid, HttpSession session){
if (session.getAttribute(""user"")!=null){
List result = conn.query(""select * from pedidos where clienteid=? and productoid=?"", new Object[]{clienteid,productoid}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return JSONObject.parseObject(result.get(0).toString()).get(0);
}
}else {
System.out.println(""error"");
return null;
}
}"
13963,"""Get the database engine through $db_cnf$ and establish a connection. Use the java expression to set the SQL statement (query all the data in the $table$ table according to $id$), execute SQL to get all the data and return.","public List readAllResults(EntityManager db_cnf, Root<Object> table, String id){
CriteriaBuilder cb = db_cnf.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""id""),id));
List<Object> results = db_cnf.createQuery(cq).getResultList();
return results;
}"
11429,"""Set up SQL (query SQL column in sqlite_master table based on $type$), use $conn$ to execute SQL and get the first piece of data, and return the 0th element of the query result.","public Object getTableSchema(JdbcTemplate conn,String type){
List res = conn.query(""select sql from sqlite_master where type = ?"", new Object[]{type}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
11586,"Execute the SQL statement through $engine$, and the content is as follows: Query all the columns in the 'mytable' table based on $mid$ and get all the data. Set the assertion to determine that the length of the returned result is not 0 and return all query results.","public List testHasTable(JdbcTemplate engine,String mid){
List d = engine.query(""select * from mytable where mid = ?"", new Object[]{mid}, new BeanPropertyRowMapper(List.class));
assert d.size()!=0;
return d;
}"
11047,"""Use $conn$ to execute SQL (query the review information in the reviews table based on $user_id$ and $book_id$) and get all the data. Pass in the query result as the ""review"" parameter and navigate to the ""book"" page through url_for and redirect.","public Object submitReview(JdbcTemplate conn,String user_id,String book_id,Model model){
List review = conn.query(""select review from reviews where user_id=? and book_id=?"", new Object[]{user_id,book_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""review"",review);
return ""book"";
}"
11588,"Execute SQL through $conn$ (query the first title data in books based on $isbn$), render and return 'book_select.html', where the title parameter is the query result.","public Object bookSelect(JdbcTemplate conn,String isbn,Model model){
List result = conn.query(""select title from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""title"",result);
return ""book_select.html"";
}"
14233,Set the query statement: Get all the columns in getTopVentas and execute SQL to get all the data through the $db_conn$ connection. Use for loop to store each element in the query result into list and return the list content.,"public List getTop(JdbcTemplate db_conn){
List result = db_conn.query(""select * from gettopventas "", new BeanPropertyRowMapper(List.class));
List top = new ArrayList();
for (Object r : result) {
top.add(r);
}
return top;
}"
13430,Use $conn$ to execute the SQL (get the value column in stats_master table based on $id$). Then use for loop to convert each item of the query results into list and finally return the list.,"public List getStatsMaster(JdbcTemplate conn,String id){
List result_proxy = conn.query(""select value from stats_master where id =?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List a = new ArrayList();
for (Object r : result_proxy) {
a.add(r);
}
return a;
}"
14018,"Connect to the database through the $conn$ and execute the SQL statement: Query all tablename in the pg_tables table that a schemaname is $public$, store the 0th element of each item of the query result as list and return.","public void postgresqlTable(DataSource conn, String publics){
JdbcTemplate connection = new JdbcTemplate(conn);
List table_tup = connection.query(""select tablename from pg_tables where schemaname = ? "", new Object[]{publics}, new BeanPropertyRowMapper(List.class));
List tables = new ArrayList();
for (Object tup : table_tup) {
tables.add(JSONObject.parseObject(tup.toString()).get(0));
}
System.out.println(tables);
}"
11311,"Use $e$ to create a database connection and execute SQL (query all data in the distinct column of the salaries table based on $DEPARTMENT$). Store the 0th element of each item in the query result as list, and return as the value corresponding to departments in the dictionary.","public JSONObject get(DataSource e, String DEPARTMENT){
JdbcTemplate connection = new JdbcTemplate(e);
List query = connection.query(""select distinct from salaries where DEPARTMENT = ? "", new Object[]{DEPARTMENT}, new BeanPropertyRowMapper(List.class));
List tables = new ArrayList();
for (Object tup : query) {
tables.add(JSONObject.parseObject(tup.toString()).get(0));
}
JSONObject jsonObject = new JSONObject();
jsonObject.put(""departments"",tables);
return jsonObject;
}"
13801,"Establish the connection to the database through $appEngine$. Execute SQL statement: Query the number of all userName in the user table with id as $userId$, return the 0th element of the query results.","public Object getUserEntry(DataSource appEngine, String userId){
JdbcTemplate engine = new JdbcTemplate(appEngine);
List res = engine.query(""select count(username) from user where id = ? "", new Object[]{userId}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
13153,"Execute SQL with $conn$ (get the user_id column in the query_users table processed by the count method where name is $name$) and get the first data, then close the $Conn$ connection and return the query results.","public List testTransactionClose(JdbcTemplate conn,String name){
List result = conn.query(""select count(user_id) from query_users where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return result;
}"
14272,Connect the database through $engine$ and use the java expression to execute the SQL statement: Query all the data in the $formulario$ table and return the query results.,"public List table(EntityManager engine, Root<Object> formulario){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(formulario);
List<Object> s = engine.createQuery(cq).getResultList();
return s;
}"
14081,"""Use $conn$ to execute the SQL statement (get all the columns in the books table based on $isbn$ and get the first piece of data. If the query result is empty, return None; if the request module sends the request in a way that renders for post, return """"book.html"""", where the book parameter is the query result.""","public Object login(HttpRequest request, JdbcTemplate conn, String isbn,Model model){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return null;
}
if (request.getMethod().equals(""POST"")){
model.addAttribute(""book"",books.get(0));
return ""book.html"";
}
return null;
}"
13030,Set up SQL (query all columns in orderItem based on $orderId$). Use $conn$ to execute SQL and get all the data. Close the connection and return the query results.,"public List getOrder(JdbcTemplate conn,String orderId){
List execResults = conn.query(""select * from orderitem where orderid = ?"", new Object[]{orderId}, new BeanPropertyRowMapper(List.class));
return execResults;
}"
11495,"Use the string matching to set SQL (query all the information in the cars table based on $id$). Use $conn$ to execute SQL, get all the query results, and return the query results.","public List findById(JdbcTemplate conn,String id){
List cars = conn.query(""select * from cars where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return cars;
}"
13769,"Set SQL (query all columns in the tablesModel table based on $col$ and $func_length$), execute SQL based on $conn$, get the first piece of data, and return the 0th element of the data.","public Object getNaForAColumn(JdbcTemplate conn,String col,String func_length){
List qs = conn.query(""SELECT * FROM tablesModel WHERE col=? and func_length = ?"", new Object[]{col,func_length}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(qs.get(0).toString()).get(0);
}"
11273,"*"", connect with the acquisition method of $engine$, execute SQL (query the sanic_polls column of sanic_polls based on $id$), get all the data, and finally return the query result.""","public List prepareDb(DataSource engine, String id){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select sanic_polls from sanic_polls where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return res;
}"
11464,"""Use for loop to iterate through each element in $items$, set up SQL (query all the information in the 'table' table based on 'item' which is every piece of the result after iteration), use $conn$ to execute the SQL and get all the query results, store the obtained query results in a list, and finally return the list.""","public List getMasterData(JdbcTemplate conn,List items){
List to_return = new ArrayList();
for (Object item : items) {
List results = conn.query(""select * from table where item = ?"", new Object[]{item}, new BeanPropertyRowMapper(List.class));
to_return.add(results);
}
return to_return;
}"
14295,"""Set the SQL statement (query all the columns in the vocabulary table based on $word$) and use $conn$ to execute SQL to get the first piece of data. If the execution result exists, it is printed.""","public void dictate(JdbcTemplate conn,String word){
List vocabulary_rows = conn.query(""select * from vocabulary where word = ?"", new Object[]{word}, new BeanPropertyRowMapper(List.class));
if (!vocabulary_rows.isEmpty()){
System.out.println(vocabulary_rows.get(0));
}
}"
13698,"""Execute the SQL (query all columns in the flights where the flight_id is $id$) using $db$ and get all the data. Finally, print the query result.""","public void flights(JdbcTemplate db,String id){
List res = db.query(""select * from flights where flight_id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}"
11180,"""Use java expressions to set SQL (query the lang_code column in $table$ where id is $id$) , execute SQL with $conn$ to get all the data, and return it.""","public List queryOldRecs(EntityManager conn, Root<Object> table,String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""id""),id));
List<Object> task = conn.createQuery(cq).getResultList();
return task;
}"
13947,"""Set the SQL statement (get all the columns in the 'table' table based on $value$), use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result, print it, store each element of the execution result into list and return the list content.""","public List printTable(JdbcTemplate conn,String value){
List cols = conn.query(""select * from table where value =?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
List headers = new ArrayList();
for (Object col : cols) {
System.out.println(col);
headers.add(col);
}
return cols;
}"
13114,"""Execute the SQL (get the columns ID, origin, destination, duration in the flights where id is $flight_id$) with $conn$ and get all the data. If the length of the query result is 0, print """"No flights."""" and return directly to the query result.""","public List main(JdbcTemplate conn,String flight_id){
List res = conn.query(""select id, origin, destination, duration from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
System.out.println(""No flights."");
return null;
}else {
return res;
}
}"
14207,"""Set the SQL statement (use the format () function to format the output string, query all the columns in the users table through the string $id$), execute SQL to get the first piece of data via the $conn$ connection, convert the execution result to dict and use jsonify to return.""","public JSONObject getUserByid(JdbcTemplate conn,String id){
List users = conn.query(""select * from users where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(users.get(0).toString());
}"
13288,Set the SQL (get the id column in the $TelegramUsers$ where the telegram_user_id is $user_id$) under the java expression. Use $conn$ to get all the data and return the query results.,"public List getSource(EntityManager conn, Root<Object> TelegramUsers,String user_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(TelegramUsers).where(cb.equal(TelegramUsers.get(""telegram_user_id""),user_id));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}"
13247,"""Get the database connection from $engine$ and set the SQL (query all the columns in the Works when the Barsname is equal to $name$) . Execute the SQL using the database connection and get all the data. Convert each item in the query result to type dict and return None if the result is empty after processing, otherwise return the query result.""","public List findBartendersStartEnd(DataSource engine, String name){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select * from works where barsname = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return null;
}else {
return results;
}
}"
11050,"""If the method of request is """"POST"""", use $conn$ to execute SQL (query all columns in the users_ba table based on $id$ and $username$) and get all the data. If the query result length is not 1, print """"invalid username and/or password"""", otherwise redirect to the url of """"index"""". If method is not """"POST"""", return the rendered """"login.html"""" page.""","public Object loginSle(HttpRequest request, JdbcTemplate conn, String id, String username){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select * from users_ba where id=? and username= ?"", new Object[]{id,username}, new BeanPropertyRowMapper(List.class));
if (rows.size()!=1){
return ""invalid username and/or password"";
}
else {
return ""index"";
}
} else {
return ""login.html"";
}
}"
14012,"""If $t_id$ is not empty, try to use $conn$ to query all id data in the resources table that the t_id is $t_id$, make sure that $conn$ is closed, return all query results, and return False in case of an exception.""","public Object queryId(JdbcTemplate conn,String t_id){
try {
List res_ids = conn.query(""select id from resources where t_id = ?"", new Object[]{t_id}, new BeanPropertyRowMapper(List.class));
return res_ids;
}catch (Exception e){
return false;
}
}"
13818,Set the query statement to: Get all the columns in DUAL based on $type$. Execute the query statement with $engine$ to get all the data. Convert each item of the query results into dict and store it as list and return it.,"public List getUnicode(JdbcTemplate engine,String type){
List res = engine.query(""select * from dual where type = ?"", new Object[]{type}, new BeanPropertyRowMapper(List.class));
return res;
}"
14202,"""Use the java expression to set SQL: Query the contents of the $books$ table where id is $book_id$ and execute the SQL statement via $conn$ to get all the data. If the execution result is empty, return False; otherwise return True.""","public boolean bookExists(EntityManager conn, Root<Object> books,String book_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(books).where(cb.equal(books.get(""id""),book_id));
List<Object> rp = conn.createQuery(cq).getResultList();
if (rp.isEmpty()){
return false;
}else {
return true;
}
}"
13110,"connect to the database with where engine is $engine$ and execute the SQL（get all the information in the sells where price is $max_price$ and It is $max_price$) and get all the data, then use the for loop to convert each item of the query result to a dictionary type. Finally, the dictionary type is returned.","public List filterBeers(DataSource engine, String max_price){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""SELECT * FROM sells WHERE price=? and lt= ? "", new Object[]{max_price}, new BeanPropertyRowMapper(List.class));
return results;
}"
14192,"Execute SQL statement by $conn$: Query all columns in campaigns table and get all the data. If the execution result is empty, return None; otherwise, return all the execution results.","public List getCampaign(JdbcTemplate conn){
List result = conn.query(""select * from campaigns"", new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
13299,"Use $conn$ to execute SQL (get the datname column in the pg_database) to get all the data, store the 0th element of each item in the query result in a list and return.","public List searchName(JdbcTemplate conn){
List names = conn.query(""select datname from pg_database"", new BeanPropertyRowMapper(List.class));
List items = new ArrayList();
for (Object i : names) {
items.add(JSONObject.parseObject(i.toString()).get(0));
}
return items;
}"
11215,"Use $conn$ to execute SQL (query all columns in the pedidos table based on $clienteid$) and get all the data. Return empty if the length of the query result is 0, and use for loop to add each item in the query result to 'list' and return.","public List getHistorial(JdbcTemplate conn,String clienteid){
List result = conn.query(""select * from pedidos where clienteid = ?"", new Object[]{clienteid}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}
List historial =new ArrayList();
for (Object auxdic : result) {
historial.add(auxdic);
}
return historial;
}"
13439,Use $conn$ to execute SQL (get all columns in the players table based on $id$) and get all the data. Then set assertion that the length of query result is greater than 0.,"public void testEngineConnectExecute(JdbcTemplate conn,String id){
List results = conn.query(""select * from players where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert results.size()>0;
}"
11657,"connect the database through $engine$, execute SQL (get all the counted columns in the 'table' table where invoicedate is $date$), get all the data, and finally print the query result.","public void getTableNum(DataSource engine, String date){
JdbcTemplate connection = new JdbcTemplate(engine);
List num = connection.query(""select count(*) from table where invoicedate= ? "", new Object[]{date}, new BeanPropertyRowMapper(List.class));
System.out.println(num);
}"
14063,"Set SQL: To query all columns in the musei table where id is $museo$, use $con$ to execute the SQL statement and return the first piece of data obtained.","public Object findMuseo(JdbcTemplate con,String museo){
List res = con.query(""select * from musei where id = ?"", new Object[]{museo}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
13221,"Execute the SQL statement (query all the columns in neihan) with $conn$, get all the data and return.","public List searchNeihan(JdbcTemplate conn){
List neihan_results = conn.query(""select * from neihan"", new BeanPropertyRowMapper(List.class));
return neihan_results;
}"
13713,"""If $isbn$ exists, use $conn$ to execute SQL (query all columns in the books table based on $isbn$) and get the first piece of data. Use the serialization method to return the title and author properties in the query results; otherwise, return {""""error"""": """"Invalid isbn""""} with the serialization method.""","public JSONObject api(JdbcTemplate conn,String isbn){
JSONObject jsonObject = new JSONObject();
if (isbn!=null){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
JSONObject book = JSONObject.parseObject(books.get(0).toString());
jsonObject.put(""title"",book.getString(""title""));
jsonObject.put(""author"",book.getString(""author""));
}else {
jsonObject.put(""error"",""Invalid isbn"");
}
return jsonObject;

}"
13208,"Execute the SQL (query all the columns in content_table where title is $title$) with $conn$ and get all the data. Return False if the result is None, otherwise the query result is returned.","public Object selectEntry(JdbcTemplate conn,String title){
List testrow = conn.query(""select * from content_table where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
if (testrow.isEmpty()){
return false;
}else {
return testrow;
}
}"
11329,"Use $conn$ to execute SQL (query the values column in the card table based on $cardType_id$ and $cardType_name$), get the first row of data, and return the data.","public List insertDummyCardType(JdbcTemplate conn,String cardType_id,String cardType_name){
List ins = conn.query(""select values from card where cardType_id=? and cardType_name= ?"", new Object[]{cardType_id,cardType_name}, new BeanPropertyRowMapper(List.class));
return ins;
}"
11452,"Set up SQL (query all information in tbl table based on $value$), execute SQL with $conn$ and get the cursor, use for loop to iterate through the results, convert each piece of data and its 'keys' value into tuple and pack it in zip. Then convert it into dict and insert it into a list, and finally return the list.","public List selectValue(JdbcTemplate conn,String value){
List records = conn.query(""select * from tbl where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
List rs = new ArrayList();
for (Object record : records) {
rs.add(JSONObject.parseObject(record.toString()).getString(""keys""));
}
return rs;
}"
13356,"connect the database according to $teng$, set SQL according to the java expression (query all columns in the $table$ table based on $doc$), execute SQL, get all the data, and return the 0th element of the 0th query result.","public Object testJsonQuery(EntityManager teng, Root<Object> table, String doc){
CriteriaBuilder cb = teng.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""doc""),doc));
List<Object> results = teng.createQuery(cq).getResultList();
return JSONObject.parseObject(results.get(0).toString()).get(0);
}"
13270,"Set the SQL: query all titles in Books with $isbn$. Execute SQL with $conn$ and get all the data. If the query result is null and return False, otherwise the query result is converted to a list and return.","public Object selectTitle(JdbcTemplate conn,String isbn){
List titles = conn.query(""select title from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (titles.isEmpty()){
return false;
}else {
List res = new ArrayList();
for (Object item : titles) {
res.add(item);
}
return res;
}
}"
11281,"Use $conn$ to execute SQL (get the req_url_host column of httpreqs2 based on $devid$), get all the data, use for loop to print the 0th element of each item in the query result, and finally return the query result.","public Object getUrls(JdbcTemplate conn,String devid){
List res = conn.query(""select req_url_host from httpreqs2 where devid = ?"", new Object[]{devid}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return false;
}else {
for (Object r : res) {
System.out.println(JSONObject.parseObject(r.toString()));
}
return res;
}
}"
13736,"""Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement (query the INTO column in the project table according to $telefone$) and get the first piece of data. If data is obtained, return True. If an exception is caught, return False.""","public boolean getProvider(DataSource db_string, String telefone){
boolean res ;
JdbcTemplate db = new JdbcTemplate(db_string);
try {
List don = db.query(""select INTO from project where telefone = ? "", new Object[]{telefone}, new BeanPropertyRowMapper(List.class));
res = true;
}catch (Exception e){
res = false;
}
return res;
}"
13569,"Set up sql (query the name column in the users table according to $scores$), use $conn$ to execute SQL, get all the query results, and return them.","public List testAnyWithOperator(JdbcTemplate conn,String scores){
List res = conn.query(""select name from users where scores= ?"", new Object[]{scores}, new BeanPropertyRowMapper(List.class));
return res;
}"
13318,"If the request method is' POST', use $conn$ to execute SQL (query all columns in the users table where username is $user$). If get the data, jump to the 'login' page; otherwise, jump to the' home' page and return the rendered 'login.html'.","public Object login(HttpRequest request, JdbcTemplate conn, String user){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select * from users where username= ?"", new Object[]{user}, new BeanPropertyRowMapper(List.class));
if (rows.isEmpty()){
return ""login"";
}
else {
return ""home"";
}
} else {
return ""login.html"";
}
}"
11673,"Use $conn$ to execute SQL according to the java expression (get the student_id and progress columns in the $Students$ table whose student_id is $userid$), get the first piece of data, and finally return the progress content processed by jsonify, where the progress parameter is the progress column of the query result.","public Object quizStart(EntityManager conn, Root<Object> Students, String userid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Students).where(cb.equal(Students.get(""student_id""),userid));
List<Object> progress = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(progress.get(0).toString()).get(0);
}"
11290,Connect to the database with $engine$ and execute SQL (get all the columns in database based on $DATABASE_NAME$) and get all the data. Close the connection and finally return the query result.,"public List tearDown(DataSource engine, String DATABASE_NAME){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select * from database where DATABASE_NAME= ? "", new Object[]{DATABASE_NAME}, new BeanPropertyRowMapper(List.class));
return res;
}"
11234,"Get the database engine via $db_host$ and establish a connection, try to use ORM method to execute the SQL statement, get the Fuzzjob column in $models$ table with 'ID': $projId$, get the first piece of data and return. If an exception occurs during execution, print the exception and finally make sure the connection is closed.","public Object getResultOfStatement(EntityManager db_host, Root<Object> models, String projId){
try {
CriteriaBuilder cb = db_host.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(models).where(cb.equal(models.get(""projId""),projId));
List<Object> project = db_host.createQuery(cq).getResultList();
return project;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13918,"Use $url$ to get the database engine. Set the SQL statement: Query all columns in the pg_database table where datname is $datname$. Try to execute SQL, get all the data, and return True if an execution result exists. If an exception occurs, return False.","public boolean databaseExists(DataSource url, String datname){
JdbcTemplate conn = new JdbcTemplate(url);
try {
List data = conn.query(""select * from pg_database where datname = ? "", new Object[]{datname}, new BeanPropertyRowMapper(List.class));
if (data.isEmpty()){
return false;
}else {
return true;
}
}catch (Exception e){
return false;
}
}"
11576,"Execute the SQL statement through $conn$: Get the first name in the reviews table based on $book_id$. If the query result is empty, render and return ""error.html""; otherwise, use jsonify to return the query result.","public Object api(JdbcTemplate conn,String book_id){
List bkouts = conn.query(""select name from reviews where book_id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
if (bkouts.isEmpty()){
return ""error.html"";
}else {
return JSONObject.parseObject(bkouts.get(0).toString());
}
}"
13264,"Set the SQL statement (query all columns in BOOKS where id is $id$) . Execute the SQL statement with $conn$ and get all the data. If the query result is empty, render and return ""error"". Otherwise render and return ""book_detail.html"", where the parameter book is the result of the query.","public Object book(JdbcTemplate conn, String id, Model model){
List books_by_id = conn.query(""select * from books where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (books_by_id.isEmpty()){
return ""error"";
}else {
model.addAttribute(""book"",books_by_id);
return ""book_detail.html"";
}
}"
11110,"Get the database engine where the name of db_engine is $db_engine_name$. Connect to the database based on the acquired database engine. Try to use the connection to execute an SQL statement (query all year_id with an id of $id$ in the month table) , print all the data, and set the query state to True. If an exception occurs during SQL execution, the query state is set to False, and finally the query state is returned.","public boolean checkGED(DataSource db_engine_name, String id){
boolean go;
try {
JdbcTemplate engine = new JdbcTemplate(db_engine_name);
List texts = engine.query(""select year_id from month where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
System.out.println(texts);
go = true;
}catch (Exception e){
go = false;
}
return go;
}"
13310,"Use ORM method to get the database engine through $path$ and further get the Session object. Execute the SQL statement (query all the columns in the $Story$ table according to $story_id$), get the first piece of data, and return the query results.","public List<Object> selectStory(EntityManager path, Root<Object> Story, String story_id){
CriteriaBuilder cb = path.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Story).where(cb.equal(Story.get(""id""),story_id));
List<Object> story = path.createQuery(cq).getResultList();
return story;
}"
11456,"Establish a connection via $engine$. Set up SQL based on the java expression: (query $studentTbl$ table for isSuspended column based on 'email': $student$). Execute the SQL and get all the data, close the connection and return the query result.","public List<Object> getSource(EntityManager engine, Root<Object> studentTbl, String student){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(studentTbl).where(cb.equal(studentTbl.get(""student""),student));
List<Object> judges = engine.createQuery(cq).getResultList();
return judges;
}"
11057,Use the java expression to set up SQL: To query the updatetime information in the $table$ table based on $taskid$. Use $conn$ to execute SQL and get all the data. Store the 0th data of each item of the query result in list and return.,"public List getRecs(EntityManager conn, Root<Object> table, String taskid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""taskid""),taskid));
List<Object> recs_time = conn.createQuery(cq).getResultList();
List list = new ArrayList();
for (Object res : recs_time) {
list.add(res);
}
return list;
}"
13306,"Execute the SQL statement (query the data column in the ins00 table according to $lname$) and get all the data, use for loop to insert each item of the query result into a list, and return the result with an undelimited string fromat.""","public String readDbData(DataSource CONN_STRING, String lname){
JdbcTemplate engine = new JdbcTemplate(CONN_STRING);
List insurances = engine.query(""select data from ins00 where lname= ? "", new Object[]{lname}, new BeanPropertyRowMapper(List.class));
List results = new ArrayList();
for (Object ins : insurances) {
results.add(ins);
}
return results.toString();
}"
13595,"Set up SQL (query all columns in the orderdetail table based on $orderid$), execute SQL based on $conn$, get all the query results, and return the data.","public List updateOrderdetail(JdbcTemplate conn,String orderid){
List res = conn.query(""select * from orderdetail where orderid= ?"", new Object[]{orderid}, new BeanPropertyRowMapper(List.class));
return res;
}"
11027,"Open the ""flights.csv"" file. Use csv to read open files. For each origin information read, use $conn$ to execute the SQL statement (query the information of the duration in the flights based on the origin) and print the query results. Finally, close the open file.","public void readerSel(JdbcTemplate conn){
String filePath = ""flights.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String origin = sc.nextLine();
List result = conn.query(""select duration from flights where origin= ?"", new Object[]{origin}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
11008,"Use $conn$ to execute SQL: Query the password in the users table based on $username$. Loop through the query results and use the $check_password_hash$ function to verify that the password attribute of each element in the loop matches the $password$. If matches, return True, otherwise return False.","public boolean selsectPassword(JdbcTemplate conn,String username,String password){
boolean b = false;
List reclist = conn.query(""select password from users where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
for (Object i : reclist) {
if (JSONObject.parseObject(i.toString()).getString(""password"").equals(password)){
b = true;
}else {
b = false;
}
}
return b;
}"
13494,Use the java expression to execute SQL (get the word column in the $words$ table with id as $pkid$) and use $conn$ to execute SQL to get all the data. Finally return the query results.,"public List getSource(EntityManager conn, Root<Object> words, String pkid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(words).where(cb.equal(words.get(""id""),pkid));
List<Object> word = conn.createQuery(cq).getResultList();
return word;
}"
14123,Execute the SQL statement via $conn$: Query the first name data in the sqlite_master table based on $type$. For loop iterates through all query results and prints. Return the 0th element of the query result.,"public Object getCount(JdbcTemplate conn,String type){
List res = conn.query(""select name from sqlite_master where type= ?"", new Object[]{type}, new BeanPropertyRowMapper(List.class));
for (Object x : res) {
System.out.println(conn);
}
return res.get(0);
}"
13036,Use $conn$ to execute SQL (query all columns in the drop_table table). Use for loop to print each item of data in the query results.,"public void ResetTable(JdbcTemplate conn){
List res = conn.query(""select * from drop_table"", new BeanPropertyRowMapper(List.class));
for (Object i : res) {
System.out.println(i);
}
}"
13966,"Use the java expression to set the SQL statement: Query all the information in the $city_table$ table where city_name is $city_name$ and use $conn$ to execute SQL to get all the information. If the execution result exists, return the execution result, otherwise, return 0.","public Object getSource(EntityManager conn, Root<Object> city_table, String city_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(city_table).where(cb.equal(city_table.get(""city_name""),city_name));
List<Object> cities = conn.createQuery(cq).getResultList();
if (cities.isEmpty()){
return 0;
}else {
return cities;
}
}"
14285,Use the $con$ connection to execute the SQL statement (get the first origin and destination in the flights table based on $flight_id$). Return False if the execution result is empty. Use for loop traversal to execute the result and print it.,"public boolean main(JdbcTemplate conn,String flight_id){
List flights = conn.query(""select origin, destination from flights where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
for (Object f : flights) {
System.out.println(f);
}
if (flights.isEmpty()){
return false;
}else {
return true;
}
}"
14168,Create the database engine via $connection$. Execute SQL (query all the id data in the pg_tables table based on $name$). Use for loop to store each element in the query results into 'list' and return the list content.,"public List getId(DataSource connection, String name){
JdbcTemplate engine = new JdbcTemplate(connection);
List res = engine.query(""select id from pg_tables where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
List ret = new ArrayList();
for (Object row : res) {
ret.add(row);
}
return ret;
}"
11143,"Set up the SQL statement using a java expression, which use $id$ to query the address column in the $ico$. Execute an SQL statement with a $conn$ connection to get all the data and return all the query results.","public List<Object> queryOldRecs(EntityManager conn, Root<Object> ico, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ico).where(cb.equal(ico.get(""id""),id));
List<Object> recsinf = conn.createQuery(cq).getResultList();
return recsinf;
}"
11632,"Use $connection_string$ to get the database engine, try to execute SQL (get all the columns in the 'table' table where table_id is $tid$) and get all the data, return the query results, and print the exception if there is an exception during execution.","public List getTabel(DataSource connection_string, String tid){
try {
JdbcTemplate engine = new JdbcTemplate(connection_string);
List ret_data = engine.query(""select * from table where table_id = ? "", new Object[]{tid}, new BeanPropertyRowMapper(List.class));
return ret_data;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13824,"Set up the SQL statement with the following contents: Query all columns in the book_reviews table through $book_id$, use $conn$ connection to execute the SQL statement to get all the data. Convert each item of the query results into dict and store it as list and return it.","public List postComment(JdbcTemplate conn,String book_id){
List res= conn.query(""select * from book_reviews where book_id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
return res;
}"
11163,"If $type_t$ is not empty, try to use $conn$ to query all names in the sqlite_master where type_t is $type_t$. Return None when a $DBAPIError$ exception occurs.","public List getTableNames(JdbcTemplate conn,String type_t){
if (type_t!=null){
try {
List names = conn.query(""select name from sqlite_master where type_t=?"", new Object[]{type_t}, new BeanPropertyRowMapper(List.class));
return names;
}catch (Exception e){
return null;
}
}else {
return null;
}
}"
14079,"Use $conn$ to create a cursor object and execute a SQL statement through the cursor object (query all columns from the customer table), get all the data, and print the query results.","public void testSqlite3(JdbcTemplate conn){
List res = conn.query(""select * from customer"", new BeanPropertyRowMapper(List.class));
System.out.println(res);
}"
11075,"Use $engine$ to get the connection, and execute SQL based on the connection (query the fullname information in the users table when name is listed as $name$) and get the first piece of data. Finally, print the query results","public void nameInsert(DataSource engine, String name){
JdbcTemplate conn = new JdbcTemplate(engine);
List myfullname = conn.query(""select fullname from users where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(myfullname);
}"
13980,"Get the database engine by $db_string$. Try to set SQL statement: Get all columns in tb_professor according to $id$, execute SQL to get all the data. If the execution result exists, assign True to res; otherwise, assign False to res. If an Exception occurs, print the exception message and assign False to res. Finally, return res.","public boolean excluirProfessor(DataSource db_string, String id){
try {
JdbcTemplate db = new JdbcTemplate(db_string);
List results = db.query(""select * from tb_professor where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return false;
}else {
return true;
}
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
11625,"Get the database engine through $dburi$, where convert_unicode parameter is False and echo parameter is False, execute SQL (get the greylist_stamp column in the greylist table where greylist_id is $gid$), get all the data, and finally return the query result.","public List main(DataSource dburi, String gid){
JdbcTemplate engine = new JdbcTemplate(dburi);
List gstamps = engine.query(""select greylist_stamp from greylist where greylist_id= ? "", new Object[]{gid}, new BeanPropertyRowMapper(List.class));
return gstamps;
}"
13965,"Use $root_user$ to get the database engine and connect. Set the SQL statement: get all the columns in the database table based on $value$. Try to execute the SQL statement to get all the data, make sure the database connection is closed, and return the execution result. If an Exception occurs, use logging.warn() to return exception information.","public List selectData(DataSource root_user, String value) {
try {
JdbcTemplate engine = new JdbcTemplate(root_user);
List results = engine.query(""select * from database where value = ? "", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13994,"Set the SQL statement: Query the well_id, in the WITS_WELLBORE table through $id$ and use $conn$ to execute SQL to get all the data and return all the data obtained.","public List getWellByWellboreId(JdbcTemplate conn,String id){
List res = conn.query(""select well_id from wits_wellbore where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return res;
}"
13401,"Set the SQL (get the name column in the tbl table based on $id$), set the assertion to determine that $cursor$ is not closed. Execute the SQL statement through $cursor$. Use for loop to convert each item of data in $cursor$ into list and return it in the case of processing $cursor$.","public List testCursor(JdbcTemplate cursor,String id){
List ret = cursor.query(""select name from tbl where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return ret;
}"
14163,Create a database engine via $sql_str$. Execute the SQL statement (get the alembic in the migrations table according to $url$) to get all the data and return the obtained data.,"public List queryDb(DataSource sql_str, String url){
JdbcTemplate engine = new JdbcTemplate(sql_str);
List res = engine.query(""select alembic from migrations where url= ? "", new Object[]{url}, new BeanPropertyRowMapper(List.class));
return res;
}"
11662,"Use $conn$ to execute SQL (get the origin table in flights table where is destination $dest$ and duration is $dur$), get all the data, and finally print the query result.","public void main(JdbcTemplate conn,String dest,String dur){
List res = conn.query(""select origin from flights where destination=? and duration= ?"", new Object[]{dest,dur}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}"
13800,"Set sql (query the info column in the USERS table based on $first$ and $last$), use $conn$ to execute SQL, get all the query results, print the queried information and return.","public List sampleInsert(JdbcTemplate conn,String first,String last){
List red = conn.query(""SELECT info FROM USERS WHERE first = ? and last = ?"", new Object[]{first,last}, new BeanPropertyRowMapper(List.class));
System.out.println(red);
return red;
}"
13325,",""Try to connect the database through $db_engine$, use string matching to execute SQL (query the quantity column in the orderdetail table based on the serialized $orderid$ and the serialized $prodid$ corresponding to the prodid field), convert the query result to list, get its length and print. If the length is 0, return None; otherwise, use string matching to execute SQL (query the price column in the products table based on the serialized $prodid$ corresponding to the prod_id field) and return the query result. If an exception occurs during execution, and the connection is not empty, close the database connection.""","public List orderDetail(DataSource db_engine, String orderid,String prodid){
try {
JdbcTemplate db_conn = new JdbcTemplate(db_engine);
List lista = db_conn.query(""select quantity from orderdetail where orderid=? and prod_id= ? "", new Object[]{orderid, prodid}, new BeanPropertyRowMapper(List.class));
int quant = lista.size();
if (quant==0){
return null;
}else {
List price =db_conn.query(""select price from products where prod_id= ? "", new Object[]{prodid}, new BeanPropertyRowMapper(List.class));
return price;
}
}catch (Exception e){
return null;
}
}"
11031,"Use $connection_string$ to create a database engine. Set SQL with the java expression (when col is $too_old$, query all the id in the $string$ table), execute SQL and get all the data. Finally, return the query data.","public List<Object> connectToCloudsqlSqlalchemyBak(EntityManager connection_string, Root<Object> string, String too_old){
CriteriaBuilder cb = connection_string.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(string).where(cb.equal(string.get(""col""),too_old));
List<Object> res = connection_string.createQuery(cq).getResultList();
return res;
}"
13395,"Use $conn$ to execute SQL (query all columns in the secrets table based on $secret_uuid$) and get all the query data, use for loop to traverse all the obtained query results, convert the 0th element of each piece of data into a string and insert it into a list.","public List testActiveSecretNotDeleted(JdbcTemplate conn,String secret_uuid){
List results = conn.query(""select * from secrets where secret_uuid= ?"", new Object[]{secret_uuid}, new BeanPropertyRowMapper(List.class));
List secret_list = new ArrayList();
for (Object row : results) {
secret_list.add(JSONObject.parseObject(row.toString()).get(0).toString());
}
return secret_list;
}"
11292,"Use $tlengine$ to connect to the database, try to execute SQL (get the user_id column of users based on $user_name$) and get all the data. Return the query result and finally ensure that the connection is closed.","public List testmixednesting(DataSource tlengine, String user_name){
JdbcTemplate external_connection = new JdbcTemplate(tlengine);
try {
List res = external_connection.query(""select time from comments where summary = ? "", new Object[]{user_name}, new BeanPropertyRowMapper(List.class));
return res;
}finally {
return null;
}
}"
14243,"Try to use $SQLALCHEMY_DATABASE_URI$ to get the database engine. Query all the id in the genre table whose genrename is $genrename$ and return the query result. If an exception occurs, throw the exception information through 'raise'.","public List getGenre(DataSource SQLALCHEMY_DATABASE_URI, String genrename){
JdbcTemplate external_connection = new JdbcTemplate(SQLALCHEMY_DATABASE_URI);
try {
List result = external_connection.query(""select id from genre where genrename = ? "", new Object[]{genrename}, new BeanPropertyRowMapper(List.class));
return result;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11505,Set the SQL query statement that queries all columns with case $case$ in the my_cards table. Use $conn$ execute the SQL statement to get all the data. Set the assertion to determine that the returned result is not an empty list and return all the query results.,"public List subtype(JdbcTemplate conn,String cases){
List item = conn.query(""select * from my_cards where case = ?"", new Object[]{cases}, new BeanPropertyRowMapper(List.class));
assert item.size()!=0;
return item;
}"
13624,"Create the database engine using $host$ and get the connection. Experiment with using conn to execute SQL (query all the columns in the database based on $root_user$) and get the first result. Close the connection and return data. If an exception occurs, logging.warn is used to record 'Fail'.","public List getRootUser(DataSource host, String root_user){
JdbcTemplate conn = new JdbcTemplate(host);
try {
List user = conn.query(""select time from comments where summary = ? "", new Object[]{root_user}, new BeanPropertyRowMapper(List.class));
return user;
}catch (Exception e){
System.out.println(""Fail"");
return null;
}
}"
11514,"Get database engine through $SQLALCHEMY_SERVER_URI$, where echo parameter is True. Execute SQL statement (get the first piece of name data in model table through $mid$) and return query result.","public List queryInfo(DataSource SQLALCHEMY_SERVER_URI, String mid){
JdbcTemplate conn = new JdbcTemplate(SQLALCHEMY_SERVER_URI);
List ot = conn.query(""select name from model where mid = ? "", new Object[]{mid}, new BeanPropertyRowMapper(List.class));
return ot;
}"
11481,"Set up SQL (query the email column in the userdetails table based on $survey$), execute SQL based on $engine$ and get all the query result. Use for loop to convert each query result to dict, and store it in list and return.","public List getSurvey(JdbcTemplate engine,String survey){
List emails = engine.query(""select email from userdetails where survey = ?"", new Object[]{survey}, new BeanPropertyRowMapper(List.class));
return emails;
}"
13070,"If the request request method is POST, use $conn$ to execute SQL (query the password in the users table based on $username$) and get the first piece of data. If the query result is not None, return the rendered 'login.html'. Otherwise, return the query results.","public Object login(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List user_datas = conn.query(""select password from users where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (user_datas.isEmpty()){
return ""login.html"";
}
else {
return user_datas.get(0);
}
} else {
return ""login.html"";
}
}"
11052,"Try to use $conn$ to execute SQL (query the id in user_dataset when $name$ is $username$) and get the first piece of data. When the keyword is id, return the corresponding value in the query result. If an SQLAlchemyError exception occurs, print 'Failed'.","public String importUser(JdbcTemplate conn,String username){
try {
List rows = conn.query(""select id from user_dataset where name= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(rows.get(0).toString()).getString(""id"");
}catch (Exception e){
System.out.println(""Failed"");
return null;
}
}"
13163,"Execute the SQL (get all the columns in the flights where origin is $origin$, destination is $destination$, and duration is $duration$) with $conn$, get all the data, and return the query results.","public List main(JdbcTemplate conn,String origin,String destination,String duration){
List res = conn.query(""select * from flights where origin=? and destination=? and duration= ?"", new Object[]{origin,destination,duration}, new BeanPropertyRowMapper(List.class));
return res;
}"
13516,"Initialize the log module, try to set SQL (query all the information in the ts_basic_report table according to $quarter_list$), print the sql statement, use $conn$ to execute sql and get all the data, convert the query results to list. If the list length is less than 1, output the info log, and assign the parameter to ""no data""; otherwise, output the info log, and the parameter is the list length. If an Exception occurs during execution, return the error log and the parameter is ""fail"".","public void getReportList(JdbcTemplate conn,String quarter_list){
try {
String sql = ""select * from ts_basic_report where quarter_list = ?"";
System.out.println(sql);
List hava_df_list = conn.query(sql, new Object[]{quarter_list}, new BeanPropertyRowMapper(List.class));
int lenth = hava_df_list.size();
if (lenth<1){
System.out.println(""no data"");
}else{
System.out.println(lenth+"""");
}
}catch (Exception e){
System.out.println(""fail"");
}
}"
13498,Use $conn$ to execute the SQL (get the login column in the USER table based on $id$) and get all the data. Then use for loop to store each item of the query results as list and return the contents of the list.,"public List getEvent(JdbcTemplate conn,String id){
List logins = conn.query(""select login from user where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return logins;
}"
11360,"Try to use $conn$ to execute SQL (query all the information in the query_users table based on $tlengine$), get the first piece of data, return the query results, and finally close the connection.","public Object testMorerollback0ffConn(JdbcTemplate conn,String tlengine){
try {
List trans = conn.query(""select * from query_users where tlengine = ?"", new Object[]{tlengine}, new BeanPropertyRowMapper(List.class));
return trans.get(0);
}finally {
return null;
}
}"
11528,Use the $conn$ connection to execute the SQL statement with the following content: Query the number of all columns in stockdata based on $code$ and get all the data and return the query results.,"public void getData(JdbcTemplate conn,String code){
List result = conn.query(""select count(*) from stockdata where code = ?"", new Object[]{code}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
}"
11170,"Set the SQL statement to get all test_user in the mock_client based on $get_user$, execute the SQL using the $conn$ connection, and return the query results.","public List testUpdateAttributesName(JdbcTemplate conn,String get_user){
List myexpected = conn.query(""select test_user from mock_client where get_user= ?"", new Object[]{get_user}, new BeanPropertyRowMapper(List.class));
return myexpected;
}"
13606,"If the request method of request is POST, use redirect and url_for to go to the 'code' page. Otherwise, use $db_file$ to create the database engine and get the connection. Execute the SQL (query the description in the Course table where courseID is $courseID$) and get all the data. Close the connection and return the query results.","public Object editCourse(HttpRequest request, DataSource db_file, String courseID){
if (request.getMethod().equals(""POST"")){
JdbcTemplate connection = new JdbcTemplate(db_file);
List res = connection.query(""select description from course where courseid = ?"", new Object[]{courseID}, new BeanPropertyRowMapper(List.class));
return res;
} else {
return ""code"";
}
}"
11585,"Get the database engine and establish a connection through $call_center$. Execute the SQL statement (query all the columns in the technician table based on $chat_id$), get all the data, use for loop to store the 0th element of each item of the query result into list, and return the list content.","public List getTechInfoByChatId(DataSource call_center, String chat_id){
JdbcTemplate conn = new JdbcTemplate(call_center);
List result = conn.query(""select * from technician where chat_id = ? "", new Object[]{chat_id}, new BeanPropertyRowMapper(List.class));
List res = new ArrayList();
for (Object row : result) {
res.add(JSONObject.parseObject(row.toString()).get(0));
}
return res;
}"
13871,"If the request module sends the request as post, try to set up the SQL (query all columns in users through $login$), use the $conn$ connection to execute the SQL and get all the data. Convert each item of the query results into dict to store as list and return it. Otherwise, use raise to throw the exception.","public Object login(HttpRequest request, JdbcTemplate conn, String login){
if (request.getMethod().equals(""POST"")){
try {
List entries = conn.query(""select * from users where login = ?"", new Object[]{login}, new BeanPropertyRowMapper(List.class));
return entries;
}catch (Exception e){
return e;
}
} else {
return null;
}
}"
11332,"Get the database engine and establish a connection through $url$. Execute the SQL statement (query the form column in the odkform table according to $project_id$ and $form_id$), get the first result, close all connections, and return the query results.","public Object getFormDetails(DataSource url, String project_id,String form_id){
JdbcTemplate engine = new JdbcTemplate(url);
List results = engine.query(""select form from odkform where project_id=? and form_id= ? "", new Object[]{project_id, form_id}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
11242,"Use $conn$ to execute SQL (get all the columns in the user_rev1 based on $subtitle$), get all the data, print the query result, and finally return the rendered ""users.html"", where the users parameter is the query result.","public String registration(JdbcTemplate conn,String subtitle,Model model){
List users = conn.query(""select * from user_rev1 where subtitle= ?"", new Object[]{subtitle}, new BeanPropertyRowMapper(List.class));
System.out.println(users);
model.addAttribute(""Users"",users);
return ""users.html"";
}"
11410,"Establish a connection via $engine$. Set the SQL statement (query all the columns in the FLOWERS table based on $name$), use connection to execute SQL, close the connection, and return the rendered ""home.html"" page, where the flowers parameter is set to the query result.","public String getFlowers(DataSource engine, String name,Model model){
JdbcTemplate connection = new JdbcTemplate(engine);
List flowers = connection.query(""select * from flowers where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flowers"",flowers);
return ""home.html"";
}"
14068,"Open the books.csv file and read, use for loop traversal to read the content of the file, use $conn$ to execute SQL (query all 'author' in the books table through pubyear) and print the results.","public void main(JdbcTemplate conn){
String filePath = ""books.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) { //按行读取字符串
String pubyear = sc.nextLine();
List res = conn.query(""select author from books where pubyear = ?"", new Object[]{pubyear}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
11203,"Get database engine by $database_uri$ and establish connection, try to execute SQL statement (get user in USER according to 'PASSWORD': $password$), get all data after execution and return. If an Exception occurs during execution, return the error message ""Error assigning permissions"".","public List createUser(DataSource database_uri, String password){
JdbcTemplate conn = new JdbcTemplate(database_uri);
try {
List res = conn.query(""select user from USER where PASSWORD= ? "", new Object[]{password}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
System.out.println(""Error assigning permissions"");
return null;
}
}"
11510,"Get the database engine using $greencouriers$ and establish the connection (where echo parameter is True, encoding parameter is 'utf-8'). Try to execute the SQL statement (query the first piece of name data in the countries table based on $id$). Close the database connection and return the query result. If UnicodeDecodeError exception occurs, use raise to throw an Exception() exception.","public Object countries(DataSource greencouriers, String id){
JdbcTemplate conn = new JdbcTemplate(greencouriers);
try {
List out = conn.query(""select name from countries where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return out;
}catch (Exception e){
return e;
}
}"
11697,"Execute SQL with $session$ (get all the columns in the target table where id is $uuids$), get all the data, then close the $session$ connection, and finally return the query result.","public List getOgetTargetne(JdbcTemplate session,String uuids){
List targets = session.query(""select * from target where id = ?"", new Object[]{uuids}, new BeanPropertyRowMapper(List.class));
return targets;
}"
14195,"Set SQL statement: Query category data from iris table, execute SQL by $conn$ to get all data and return the execution result.","public List getDataframe(JdbcTemplate conn){
List result = conn.query(""select category from iris"", new BeanPropertyRowMapper(List.class));
return result;
}"
13417,Execute SQL through $pgconn$ (get the maximum value of id column in the 'table' table) and get the first piece of data. Finally return the 0th element of the query result.,"public Object getPkSequence(JdbcTemplate pgconn){
List rs = pgconn.query(""select max(id) from tables"", new BeanPropertyRowMapper(List.class));
return JSONObject.parseObject(rs.get(0).toString()).get(0);
}"
13759,"If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the logins table based on $username$ and $password$), get all the data, and return the query results; otherwise, return the rendered ""login.html"" page.","public Object login(HttpRequest request, JdbcTemplate conn, String username, String password){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select * from logins where username = ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
return rows;
} else {
return ""login.html"";
}
}"
11336,"Set up sql (query all the information in the 'Table' table based on $user_id$, $user_name$ and $extra_data$), use $conn$ to execute SQL, get the first row of data, and return the data.","public Object setupClass(JdbcTemplate conn,String user_id,String user_name,String extra_data){
List metadatas = conn.query(""select * from table where user_id=? and user_name=? and extra_data= ?"", new Object[]{user_id,user_name,extra_data}, new BeanPropertyRowMapper(List.class));
return metadatas.get(0);
}"
13149,"Execute SQL (get all the columns in USER_LIST where UID is $UID$ and LID is $LID$) with $conn$, get all the data, then close the $Conn$ connection and return the query results.","public List getUserList(JdbcTemplate conn,String UID,String LID){
List res = conn.query(""select * from USER_LIST where UID=? and LID= ?"", new Object[]{UID, LID}, new BeanPropertyRowMapper(List.class));
return res;
}"
11121,"Use a java expression to set the SQL statement to get the id column in $table$ where the name is $name$, execute the SQL using the $conn$ connection, and get all the data. Store the 0th element of each item of the query result as a list and return it.","public List getRecs(EntityManager conn, Root<Object> table, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""name""),name));
List<Object> recss = conn.createQuery(cq).getResultList();
List list = new ArrayList();
for (Object item : recss) {
list.add(JSONObject.parseObject(item.toString()).get(0));
}
return list;
}"
14268,"Use $conn$ to query the first origin,destination,duration in the fligts table where the id is $f_id$. If the query result is empty, print ""fail"" and return directly; otherwise, return the query result.","public Object main(JdbcTemplate conn,String f_id){
List flights = conn.query(""select origin,destination,duration from fligts where id = ?"", new Object[]{f_id}, new BeanPropertyRowMapper(List.class));
if (flights.isEmpty()){
System.out.println(""fail"");
return null;
}else {
return flights.get(0);
}
}"
13012,Use $engine$ to get the connection. Use the connection to execute the SQL (query all columns in the growth) and get all the data. Close the connection and return the query results.,"public List queryGrow(DataSource engine){
JdbcTemplate connection = new JdbcTemplate(engine);
List result = connection.query(""select * from growth"", new BeanPropertyRowMapper(List.class));
return result;
}"
11128,"Execute the SQL statement using the $conn$ connection: query all columns in users_again2 where the name of user is $username$ and get the first data. If the query result exists, the query result is returned.","public Object validateUsername(JdbcTemplate conn,String username){
List users = conn.query(""select * from users_again2 where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (users.isEmpty()){
return null;
}else {
return users.get(0);
}
}"
11229,"Try to execute SQL via $conn$ (get all the columns in the dbkoppelusers based on $dbnr$) and get all the data, return the query result, and print the exception if there is an exception.","public List getDBUsers(JdbcTemplate conn,String dbnr){
try {
List rows = conn.query(""select * from dbkoppelusers where dbnr = ?"", new Object[]{dbnr}, new BeanPropertyRowMapper(List.class));
return rows;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11474,"Set SQL based on the java expression: (query all columns in $slivers$ table based on $deleted$). Execute the SQL with $conn$ and get all the data, use for loop to iterate through each query result and store as a list, and finally return the list.","public List getSource(EntityManager conn, Root<Object> slivers, String deleted){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(slivers).where(cb.equal(slivers.get(""deleted""),deleted));
List<Object> results = conn.createQuery(cq).getResultList();
List sliveres = new ArrayList();
for (Object i : results) {
sliveres.add(i);
}
return sliveres;
}"
14253,Use the $conn$ connection to execute SQL (query all the name data in the falcon_portal_test table through $t_id$). Returns the query results.,"public List teardown(JdbcTemplate conn,String t_id){
List result = conn.query(""select name from falcon_portal_test where t_id = ?"", new Object[]{t_id}, new BeanPropertyRowMapper(List.class));
return result;
}"
14071,"Use ORM method to set the SQL statement through $session$: Query all data in the $CommandsOnHost$ table through $id$. If the length of the query result is greater than 0, use for loop to store each element in the query result into list; otherwise, assign -1 to the query result. Make sure $session$ is closed and return the list content.","public Object getIdCommandOnHost(EntityManager session, Root<Object> CommandsOnHost, String id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(CommandsOnHost).where(cb.equal(CommandsOnHost.get(""id""),id));
List<Object> query = session.createQuery(cq).getResultList();
if (query.isEmpty()){
return -1;
}else {
List ret = new ArrayList();
for (Object i : query) {
ret.add(i);
}
return ret;
}
}"
13511,"Execute SQL with $conn$ (query the isbn column in the books table according to $title$), get all the query results, print them, and return the query results.","public List importData(JdbcTemplate conn,String title){
List result = conn.query(""select isbn from books where title= ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
return result;
}"
13519,"Connect the database with $db$, try to execute SQL (query all columns in the users table according to $user_name$), get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection.","public List testWithInterface(DataSource db, String user_name){
JdbcTemplate engine = new JdbcTemplate(db);
try {
List res = engine.query(""select * from users where user_name= ? "", new Object[]{user_name}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13018,"In ORM mode, use $conn$ to execute SQL (query everything in the $shareGroup$ table when FK_users equals $user_id$ and FK_groups equals $group_id$) and get the first piece of data. If the query result is not None, return the query result.","public Object getIdCommandOnHost(EntityManager conn, Root<Object> shareGroup, String group_id, String user_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(shareGroup).where(cb.equal(shareGroup.get(""group_id""),group_id));
cq.select(shareGroup).where(cb.equal(shareGroup.get(""user_id""),user_id));
List<Object> share = conn.createQuery(cq).getResultList();
if (share.isEmpty()){
return null;
}else {
return share.get(0);
}
}"
13960,"Set the SQL statement (query all the data in $tbl$ according to $num$), use $conn$ to execute SQL to get all the data, set the assertion to determine that the length of the returned result is 1, and finally return the data.","public Object getSource(EntityManager conn, Root<Object> tbl, String num){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tbl).where(cb.equal(tbl.get(""num""),num));
List<Object> rows = conn.createQuery(cq).getResultList();
assert rows.size()==1;
return rows;
}"
11179,"Connect to the database with $engine$. Execute the SQL statement (query all s_id in the seasons table where id is $id$), and convert each query item into dict and store it as a list and return it.","public List queryPage(DataSource engine, String id){
JdbcTemplate conn = new JdbcTemplate(engine);
List s_idata = conn.query(""select s_id from seasons where id= ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return s_idata;
}"
13977,"Use the java expression to set up the SQL statemen: Query all the data in the $summary_item$ table with 'summary_id': $id$, use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return.","public Object getSource(EntityManager conn, Root<Object> summary_item, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(summary_item).where(cb.equal(summary_item.get(""id""),id));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
14072,"Set SQL: To query all columns from the fname table, and use $conn$ to execute SQL to get all the data and return.","public List test1(JdbcTemplate conn){
List res = conn.query(""select * from fname"", new BeanPropertyRowMapper(List.class));
return res;
}"
11187,"Set the SQL statement ( Format the output string with the format () function, query the grade data in the acceleration using the string $time_val$) , execute the SQL statement with the $conn$ join and get all the data. Then use jsonify to return the query results.","public JSONArray accelerationHour(JdbcTemplate conn, String time_val){
List time_data = conn.query(""select grade from acceleration where time_val= ?"", new Object[]{time_val}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(time_data.toString());
}"
11286,"Use $DSN$ to get the database engine, then connect to the database. Execute SQL based on the java expression to get all the columns in the $Contracts$ table with 'id' of $contract_id$ and get all the data, and finally return the query result.","public List getContractById(EntityManager DSN, Root<Object> Contracts, String contract_id){
CriteriaBuilder cb = DSN.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Contracts).where(cb.equal(Contracts.get(""id""),contract_id));
List<Object> result = DSN.createQuery(cq).getResultList();
return result;
}"
14152,"Set SQL: Query the number of 'id' in the urls table, execute SQL via $conn$ to get the first piece of data, and return the obtained data.","public Object getUrlCount(JdbcTemplate conn){
List res = conn.query(""select count(id) from urls"", new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
13295,Execute the SQL and get all the data (get all rows in the query_users) using $connection$. Close the database connection and return the result of the query.,"public Object searchCount(JdbcTemplate connection){
List count = connection.query(""select count(*) from query_users"", new BeanPropertyRowMapper(List.class));
return count;
}"
11635,"Use $testing$ to connect the database and execute SQL (get all the counted columns in the query_users table when user_id is $uid$) and get all the data, further set the assertion, the length of the query result is 1, and finally close the connection.","public void dbConnect(DataSource testing, String uid){
JdbcTemplate engine = new JdbcTemplate(testing);
List result = engine.query(""select count(*) from query_users where user_id= ? "", new Object[]{uid}, new BeanPropertyRowMapper(List.class));
assert result.size()==1;
}"
13747,"Connect the database through $e$ and execute SQL (query the statel column in the lsstate table according to $lettershop$), get all the query results, print them and return.","public List get(DataSource e, String lettershop){
JdbcTemplate engine = new JdbcTemplate(e);
List result = engine.query(""select statel from lsstate where lettershop = ? "", new Object[]{lettershop}, new BeanPropertyRowMapper(List.class));
System.out.println(result);
return result;
}"
11574,"get the database connection based on $engine$. Execute the SQL statement (query all the columns in the Sells table where price is $price$), get all the data, convert each item of the query result to dict, store it as list, and return the query result.","public List filterBeers(DataSource engine, String price){
JdbcTemplate con = new JdbcTemplate(engine);
List results = con.query(""select * from sells where price = ? "", new Object[]{price}, new BeanPropertyRowMapper(List.class));
return results;
}"
13148,"Execute the SQL (get the user_id column in the $users$ with where email is $email$) using $db$ as a java expression, then convert the query result to a list type, and finally return the list content.","public List keystonIdsFromEmail(EntityManager db, Root<Object> users, String email){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""email""),email));
List<Object> results = db.createQuery(cq).getResultList();
return results;
}"
13524,"Set SQL based on the java expression (query all columns in the $studentData$ table based on $Username$). Execute SQL through $conn$, get all the data and return the query results.","public List getReviewWaiver(EntityManager conn, Root<Object> studentData, String Username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(studentData).where(cb.equal(studentData.get(""Username""),Username));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
11631,"Use ORM method and $conn$ to get all the ip columns in the $RunningTb$ table where type is $type$ and username is $name$, and use for loop to print each item of the query result.","public void getIp(EntityManager conn, Root<Object> RunningTb, String type,String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(RunningTb).where(cb.equal(RunningTb.get(""type""),type));
cq.select(RunningTb).where(cb.equal(RunningTb.get(""username""),name));
List<Object> result = conn.createQuery(cq).getResultList();
for (Object item : result) {
System.out.println(item);
}
}"
11590,"If the request module sends the request in a post method, use $conn$ to execute SQL (query all the columns in the names table through $aname$, get all the data, and print the query results. Use redirect to return the 'index' spliced by url_for, where the names parameter is the query result.","public String index(HttpRequest request, JdbcTemplate conn, String aname, Model model){
if (request.getMethod().equals(""POST"")){
List names = conn.query(""select * from names where aname = ?"", new Object[]{aname}, new BeanPropertyRowMapper(List.class));
System.out.println(names);
model.addAttribute(""names"",names);
return ""index"";
} else {
return null;
}
}"
13312,"Try to use $conn$ to execute SQL (query the passwd column in the ROLE table according to $name$), get all the data, and return the query data. If an exception occurs during execution, return False.","public Object sqlGetUser(JdbcTemplate conn,String name){
try {
List comando = conn.query(""select passwd from role where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return comando;
}catch (Exception e){
return false;
}
}"
14269,"Execute the SQL statement through the $con$ connection, which reads: query the first fighter_id in the fighter table based on the $name$. Use for loop to store each element in the query result into list and return the list content.","public List searchFighter(JdbcTemplate conn,String name){
List bucket = new ArrayList();
List res = conn.query(""select fighter_id from fighter where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object i : res) {
bucket.add(i);
}
return bucket;
}"
11374,"Set sql according to the java expression (query all columns in the $mirco_devices$ table based on $tuid$), use $conn$ to execute sql and get all the data, and return False, if the query result is empty; otherwise, return the query data.","public Object getNewdevice(EntityManager conn, Root<Object> mirco_devices, String tuid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(mirco_devices).where(cb.equal(mirco_devices.get(""type""),tuid));
List<Object> s = conn.createQuery(cq).getResultList();
if (s.isEmpty()){
return false;
}else {
return s;
}
}"
11278,"Use $conn$ to execute SQL (get all the columns in the flights based on $index$), get all the data, and finally return the rendered 'index.html', where the flights parameter is the query result.","public String index(JdbcTemplate conn,String index,Model model){
List flights = conn.query(""select * from flights where index= ?"", new Object[]{index}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"",flights);
return ""index.html"";
}"
13337,"connect the database according to $engine$. Execute SQL (query the name column in the beers table according to $manf$), get all the query results, and convert each item of the query result to dict, store it as list, and return.","public List getBeers(DataSource engine, String manf){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select name from beers where manf= ? "", new Object[]{manf}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13751,"Execute SQL with $conn$ (query all columns in the imdb_movies table according to $genreid$), get all the data, convert the query results to list and return.","public List getMoviesByGenre(JdbcTemplate conn,String genreid){
List db_result = conn.query(""select * from imdb_movies where genreid = ?"", new Object[]{genreid}, new BeanPropertyRowMapper(List.class));
return db_result;
}"
11322,"Use $conn$ to execute SQL (query all the columns in the username table according to $autocommit$), get all the data, and output the query results.","public void testMixedTransactionClose(JdbcTemplate conn,String autocommit){
List eq = conn.query(""select * from username where autocommit = ?"", new Object[]{autocommit}, new BeanPropertyRowMapper(List.class));
System.out.println(eq);
}"
13431,Get database engine through $db_string$ and execute SQL (get all columns in tb_produtos table based on $id$) and get all the data. Finally return the query results.,"public List getProdutos(DataSource db_string, String id){
JdbcTemplate con = new JdbcTemplate(db_string);
List produtos = con.query(""select * from tb_produtos where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return produtos;
}"
13913,"Set the SQL statement with the java expression: Query the name data in the $users_table$ table based on $age$, execute SQL with the $conn$ connection, get all data, use for loop to traverse all the query results and print them.","public void getSource(EntityManager conn, Root<Object> users_table, String age){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users_table).where(cb.equal(users_table.get(""age""),age));
List<Object> names = conn.createQuery(cq).getResultList();
for (Object n : names) {
System.out.println(n);
}
}"
13891,Use the $conn$ connection to execute the SQL statement (query the statistical values of all columns in GEI_DNS_MANUAL based on $domain$) and get all the data. Set an assertion to determine that the length of the returned result is greater than 0.,"public void checkExistsDomain(JdbcTemplate conn,String domain){
List res = conn.query(""select count(*) from gei_dns_manual where domain =?"", new Object[]{domain}, new BeanPropertyRowMapper(List.class));
assert res.size()>0;
}"
11259,"Try to execute SQL by $conn$ (get all columns in vw_deaths table based on $data_year$) and get all the data. Use DataFrame method to format the query result and convert it to dictionary type, where orient parameter is 'records'. Print the dictionary type content and use jsonify to process the dictionary content and return. If the execution has an exception, print 'Error detected in file' in f format with the parameter being the string format of the exception, and finally ensure that $conn$ is closed.","public JSONObject deathByGender(JdbcTemplate conn,String data_year){
try {
List res = conn.query(""select * from vw_deaths where data_year =?"", new Object[]{data_year}, new BeanPropertyRowMapper(List.class));
JSONObject df = new JSONObject();
df.put(""records"",res);
System.out.println(df);
return df;
}catch (Exception e){
System.out.println(""Error detected in file""+e);
return null;
}finally {
return null;
}
}"
11478,"Use 'with' statement to connect to database based on $conn$begin method. Set SQL based on the java expression: (query all columns in $users_table$ table based on $name$), execute SQL and get all the query results. Use for loop to convert each item of query results into dict and store as list and return.","public List getSource(EntityManager conn, Root<Object> users_table, String name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users_table).where(cb.equal(users_table.get(""name""),name));
List<Object> users = conn.createQuery(cq).getResultList();
return users;
}"
13201,"Get the database engine with $postgresql_uri$, execute the SQL statement (get all the columns in the owner where asterisk is $asterisk$) , get all the data after execution and return.","public List selectOwner(DataSource postgresql_uri, String asterisk){
JdbcTemplate engine = new JdbcTemplate(postgresql_uri);
List results = engine.query(""select * from owner where asterisk =? "", new Object[]{asterisk}, new BeanPropertyRowMapper(List.class));
return results;
}"
14085,"Set the SQL statement and the content is as follows: Query the word_id data in the learning table where a user_id is $ID$. Use $conn$ to execute the SQL statement to get all the data, print the query results, and return them.","public List findLearning(JdbcTemplate conn,String ID){
List ret_value = conn.query(""select word_id from learning where user_id = ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
System.out.println(ret_value);
return ret_value;
}"
11191,"Use $conn$ to query all usernames in the users where name is $name$. If the length of the query result is 0, render and return 'login.html'. Otherwise, render and return ""signup.html"".","public String signUp(JdbcTemplate conn,String name){
List users_data = conn.query(""select username from users where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (users_data.isEmpty()){
return ""login.html"";
}else {
return ""signup.html"";
}
}"
13182,"Use the $DATABASEURI$ to get the database engine and connect to the database, then execute the SQL (get all the columns in the players where employees_ssn is $employees_ssn$) and get all the data, and finally return the query results.","public List initpSql(DataSource DATABASEURI, String employees_ssn){
JdbcTemplate conn = new JdbcTemplate(DATABASEURI);
List rows_player = conn.query(""select * from players where employees_ssn = ? "", new Object[]{employees_ssn}, new BeanPropertyRowMapper(List.class));
return rows_player;
}"
11686,"Use $db_connect$ to connect the database and execute SQL (get all the columns in the employee1 table according to $country$) and get all the data. If the length of the query result is 0, return None; otherwise, return the query result.","public List getEmployee(DataSource db_connect, String country){
JdbcTemplate conn = new JdbcTemplate(db_connect);
List result = conn.query(""select * from employee1 where country= ? "", new Object[]{country}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
14229,Execute the SQL statement through $session$: Query all firstname in the user table whose id is $id$. Set the assertion to determine that the length of the query result is greater than 0 and return the query result.,"public List test(JdbcTemplate session,String id){
List results = session.query(""select firstname from user where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
assert results.size()>0;
return results;
}"
13057,"Use java expressions to set SQL: Query the information in the $fraction$ table based on $experiment_id$. Use $connection$ to execute SQL and get all the data. Finally, return the query results.","public List fetchFractions(EntityManager connection, Root<Object> fraction, String experiment_id){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(fraction).where(cb.equal(fraction.get(""experiment_id""),experiment_id));
List<Object> texts = connection.createQuery(cq).getResultList();
return texts;
}"
14100,"Get the database engine and establish a connection through $BASEWEB$. Execute the SQL statement (get all the columns in the Offre based on $validation$), get all the data and close the database connection. Use for loop traversal to query the results, print them and returns.","public List newOffer(DataSource BASEWEB, String validation){
JdbcTemplate connection = new JdbcTemplate(BASEWEB);
List res = connection.query(""select * from Offre where validation= ? "", new Object[]{validation}, new BeanPropertyRowMapper(List.class));
for (Object ite : res) {
System.out.println(ite);
}
return res;
}"
13594,"Get the database engine and establish a connection through $url$. Set up the SQL statement (query all the columns in the Users table according to $username$), execute sql, get all the data, and return the query results.","public List createUser(DataSource url, String username){
JdbcTemplate connection = new JdbcTemplate(url);
List res = connection.query(""select * from Users where username= ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return res;
}"
13104,"Connect to the database using $testing$, execute the SQL (get the user_id column in the query_users table that was processed by the counting method) , get all the data, and finally return the result of the query.","public List testCommit(DataSource testing){
JdbcTemplate connection = new JdbcTemplate(testing);
List result = connection.query(""select count(user_id) from query_users "", new BeanPropertyRowMapper(List.class));
return result;
}"
11615,"Get the database engine and connect the database through $app$, execute SQL (get the partner_uni column in the mapping table whose nus_module_1 is $module$), get all the data, and finally return the query result.","public List moduleFilters(DataSource app, String module){
JdbcTemplate con = new JdbcTemplate(app);
List unis = con.query(""select partner_uni from mapping where nus_module_1= ? "", new Object[]{module}, new BeanPropertyRowMapper(List.class));
return unis;
}"
13716,"Use $conn$ to execute SQL (query the flight column in the passengers table based on $name$) and get the first piece of data. Return None if the query result is None; otherwise, use for loop to print the name attribute of each item of the query result.","public Object main(JdbcTemplate conn,String name){
List passengers = conn.query(""select flight from passengers where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (passengers.isEmpty()){
return null;
}
System.out.println(JSONObject.parseObject(passengers.get(0).toString()).getString(""name""));
return passengers.get(0);
}"
13612,Execute the SQL based on $db$ (querying the table information in the user_tables where tablename is $tablename$) and get the first data. Print and return query results.,"public Object searchTable(JdbcTemplate db,String tablename){
List res = db.query(""select table from user_tables where tablename = ?"", new Object[]{tablename}, new BeanPropertyRowMapper(List.class));
System.out.println(res.get(0));
return res.get(0);
}"
11342,"Use $conn$ to execute SQL (query all columns in the users table according to $transfer$), get all the data, return the rendered 'transfer.html' page, and pass the 'data' parameter as the returned data.","public Object transfer(JdbcTemplate conn,String transfer,Model model){
List data = conn.query(""select * from users where transfer= ?"", new Object[]{transfer}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""data"",data);
return ""transfer.html"";
}"
11630,"Use $db$ to execute SQL according to the java expression (get the hash_password column that converted to list type in the $reg_user$ table whose userid is $uid$) and get the first piece of data. If the request method is ""POST"", return the rendered ""successlogin.html"", where the flight parameter is the 0th element of the query result.","public String lsubmin(HttpRequest request,EntityManager db, Root<Object> reg_user, String uid,Model model){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(reg_user).where(cb.equal(reg_user.get(""userid""),uid));
List<Object> flights = db.createQuery(cq).getResultList();
if (request.getMethod().equals(""POST"")){
model.addAttribute(""flight"",JSONObject.parseObject(flights.get(0).toString()).get(0));
return ""successlogin.html"";
}else {
return null;
}
}"
13791,"connect the database according to $eng$. Set SQL according to the java expression (query all columns in the $cars$ table according to $record_id$), execute sql, get all the query results, and return the 0th element of the query results.","public Object getLast(EntityManager eng, Root<Object> cars, String record_id){
CriteriaBuilder cb = eng.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cars).where(cb.equal(cars.get(""record_id""),record_id));
List<Object> ans = eng.createQuery(cq).getResultList();
return ans.get(0);
}"
11142,Get the database engine with $db_conn_string$ and its echo parameter is True. Set the SQL statement using a java expression: look up all ids in the $ctx$ where property is $property$. Execute the SQL and return all the query results.,"public List<Object> queryOldRecs(EntityManager ctx, Root<Object> db_conn_string, String property){
CriteriaBuilder cb = ctx.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(db_conn_string).where(cb.equal(db_conn_string.get(""record_id""),property));
List<Object> recsinf = ctx.createQuery(cq).getResultList();
return recsinf;
}"
11560,"Use the java expression to set up a SQL statement with the following content: Query all id in the $vt$ table based on $vname$, use the $conn$ connection to execute the SQL statement and print the query result.","public void getInfo(EntityManager conn, Root<Object> vt, String vname){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(vt).where(cb.equal(vt.get(""vname""),vname));
List<Object> information = conn.createQuery(cq).getResultList();
System.out.println(information);
}"
13349,"Use the format string matching method to set sql (query all the information in the pcm_update table according to $each$), connect the database according to the begin method of $engine$, execute SQL, get all the query results, and return them.","public List sqlFunction(DataSource engine, String each){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select * from pcm_update where each= ? "", new Object[]{each}, new BeanPropertyRowMapper(List.class));
return res;
}"
13573,Execute SQL according to the java expression (query the id column in the $hostnames$ table based on $hostname$). Get all the data and return.,"public void hostnameGetId(EntityManager conn, Root<Object> hostnames, String hostname){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(hostnames).where(cb.equal(hostnames.get(""hostname""),hostname));
List<Object> res = conn.createQuery(cq).getResultList();
System.out.println(res);
}"
13919,Execute SQL through $conn$: Query the statistics of all columns in the books table and get the first piece of data. Take out the 0th element of the obtained data. Return the extracted element if the extracted element is not 0.,"public int search(JdbcTemplate conn){
List count_values = conn.query(""select count(*) from books"", new BeanPropertyRowMapper(List.class));
int count = Integer.parseInt(JSONObject.parseObject(count_values.get(0).toString()).get(0).toString());
if (count!=0){
return count;
}else {
return 0;
}
}"
13138,"Execute SQL with $conn$ (get the name column in the passengers table where the id of flight is $flight_id$) and get all the data. If the query result is None, return rendered ""error.html"" and finally rendered ""flight.html"" with the res parameter being the result of the query.","public String flight(JdbcTemplate conn,String flight_id,Model model){
List res = conn.query(""select name from passengers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""res"",res);
return ""flight.html"";
}
}"
13745,"Set SQL based on the java expression (query all columns in the $flowdetails$ table based on $parent_uuid$). Execute the SQL through $conn$, get all the data, and use for loop to traverse each query result and print it.","public void flowQueryIter(EntityManager conn, Root<Object> flowdetails, String parent_uuid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(flowdetails).where(cb.equal(flowdetails.get(""parent_uuid""),parent_uuid));
List<Object> ens = conn.createQuery(cq).getResultList();
for (Object row : ens) {
System.out.println(row);
}
}"
13853,"Connect to the database through $db$. Use the java expression to set up the SQL statement (get the data information in the $foo$ table based on $moredata$) and execute the SQL statement to get all the data. Make sure the database connection is closed and return all the query results.
*","public List getText(EntityManager db, Root<Object> foo, String moredata){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(foo).where(cb.equal(foo.get(""moredata""),moredata));
List<Object> res = db.createQuery(cq).getResultList();
return res;
}"
14271,"Through the $conn$ to get the connection, use ORM method to execute the SQL statement (the first piece of data in the $Survey$ table is queried according to $question$). If the execution result is not empty, return the execution result; otherwise, return None.","public Object addSurvey(EntityManager conn, Root<Object> Survey, String question){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Survey).where(cb.equal(Survey.get(""question""),question));
List<Object> sondages = conn.createQuery(cq).getResultList();
if (sondages.isEmpty()){
return null;
}else {
return sondages.get(0);
}
}"
11258,"Execute SQL via $conn$ (get server_info's sat_index column based on $state$), get all the data, and finally return the query result.","public List unpackFile(JdbcTemplate conn,String state){
List data_query = conn.query(""select sat_index from server_info where state = ?"", new Object[]{state}, new BeanPropertyRowMapper(List.class));
return data_query;
}"
14038,"connect to the database according to $engine$. Execute the SQL statement: Query all drinkerID, name, phone, address, state in the drinkers table. Convert each item of the query result to dict, store as list and return.","public List getDrinkers(DataSource engine){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select drinkerid, name, phone, address, state from drinkers "", new BeanPropertyRowMapper(List.class));
return rs;
}"
13004,"If $id_technician$ exists, execute the following code: Build the database engine based on $call_center$ and set the echo parameter to True; use the engine to get the connection; execute SQL (query the status information in the Technician table based on $id_technician$) and get the first piece of data. Otherwise, return 'ERROR'.","public Object getStatusTechByTechId(DataSource call_center, String id_technician){
if (id_technician!=null){
JdbcTemplate conn = new JdbcTemplate(call_center);
List status = conn.query(""select time from comments where summary = ? "", new Object[]{id_technician}, new BeanPropertyRowMapper(List.class));
return status;
}else {
return ""ERROR"";
}
}"
13346,"Set SQL based on the java expression (query the Username column in the $References$ table based on the condition that Email is $username$). Execute SQL with $conn$, get all the data, use for loop to traverse each item of the query results, store it as list, and finally return the list.","public List getStudents(EntityManager conn, Root<Object> References, String username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(References).where(cb.equal(References.get(""username""),username));
List<Object> result = conn.createQuery(cq).getResultList();
List list = new ArrayList();
for (Object x : result) {
list.add(JSONObject.parseObject(x.toString()).get(0));
}
return list;
}"
11511,"Query all columns in the student table with phone as $phone$ through $conn$ and get the first piece of data. Use the full_name and room attributes of the query result as the corresponding values of student_name and student_room in the dictionary, and return the dictionary.","public JSONObject feesRecord(JdbcTemplate conn,String phone){
List results = conn.query(""select * from student where phone = ?"", new Object[]{phone}, new BeanPropertyRowMapper(List.class));
JSONObject res_dict = new JSONObject();
res_dict.put(""student_name"",JSONObject.parseObject(results.get(0).toString()).getString(""full_name""));
res_dict.put(""student_room"",JSONObject.parseObject(results.get(0).toString()).getString(""room""));
return res_dict;
}"
13352,"According to the string matching to set sql (query the length of the id column in the glpi_computers table based on $value$), use $conn$ to execute SQL, get the first piece of data, use for loop to traverse the 0th element of the last data of the query result, and return.","public Object miniComputersCount(JdbcTemplate conn,String value){
List res = conn.query(""select count(id) from glpi_computers where value= ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
Object result = res.get(0);
return JSONObject.parseObject(result.toString()).get(0);
}"
14201,"Set SQL statement: Get 'images' in imagesAbout table based on $imageID$, execute SQL to get all the data via $connection$ and return execution result.","public List photoDescription(JdbcTemplate connection,String imageID){
List res = connection.query(""select images from imagesAbout WHERE imageID = ?"", new Object[]{imageID}, new BeanPropertyRowMapper(List.class));
return res;
}"
11216,"If the passed $lname$ is empty, return ""Unavailable"" directly; if the request method is ""POST"", use $conn$ to execute the SQL statement (query the title in the location table based on $lname$) and get all the data, and finally return the query result.","public Object event(HttpRequest request,JdbcTemplate conn,String lname){
if (lname==null){
return ""Unavailable"";
}else {
if (request.getMethod().equals(""POST"")){
List res = conn.query(""select title from location where lname= ?"", new Object[]{lname}, new BeanPropertyRowMapper(List.class));
return res;
}else {
return null;
}
}
}"
13135,"Use $conn$ to execute the SQL (get all columns in the users where username is $username$ and password is $password$) and get the first data if the method of the request is ""POST"" and return the query result if the result is true otherwise the method of the request is not ""POST"", return the rendered ""login.html"".","public Object login(HttpRequest request, JdbcTemplate conn, String username, String password){
if (request.getMethod().equals(""POST"")){
List check_login_credentials = conn.query(""select * from users where username=? and password= ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (check_login_credentials.isEmpty()){
return ""login.html"";
}
else {
return check_login_credentials;
}
} else {
return ""login.html"";
}
}"
11684,"Use $db$ to execute SQL according to the java expression (get the destination columns in the $flights$ table where origin is $origin$ and duration is $dur$), get all the data, and finally return the query result.","public List main(EntityManager db, Root<Object> flights, String origin,String dur){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(flights).where(cb.equal(flights.get(""origin""),origin));
cq.select(flights).where(cb.equal(flights.get(""dur""),dur));
List<Object> dest = db.createQuery(cq).getResultList();
return dest;
}"
13272,"If the request module sends the request as a post, execute the SQL statement using $conn$ (query all columns in books where author is $author$) and get all the query results. Return all the data from the query.","public List searchValue(HttpRequest request, JdbcTemplate conn, String author){
if (request.getMethod().equals(""POST"")){
List books_author = conn.query(""select * from books where author = ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
return books_author;
} else {
return null;
}
}"
14225,"Create a database engine and establish a connection through $prices$, and execute the SQL statement, which reads: Query all the symbol in the prices table through $exchange$ and return the query results.","public List queryPriceAll(DataSource prices, String exchange){
JdbcTemplate conn = new JdbcTemplate(prices);
List res = conn.query(""select symbol from prices where exchange= ? "", new Object[]{exchange}, new BeanPropertyRowMapper(List.class));
return res;
}"
14245,"Execute the SQL statement through the $con$ connection (query all columns in the tbl_user table based on $username$). If the number of rows of the query result is greater than or equal to 1, print ""find user"", render and return 'user/message.html'.","public String saveUser(JdbcTemplate con,String username){
List users_qry = con.query(""select * from tbl_user where username =?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (users_qry.size()>1){
System.out.println(""find user"");
return ""user/message.html"";
}else {
return null;
}
}"
13733,"If $username$ is empty, return the rendered ""log-in.html"" page; otherwise, use $conn$ to execute SQL (query the id column in the users table based on $username$), get the first row of data, return the rendered ""log-in.html"" page, and set the ids parameter to the query result.","public String loginCheck(JdbcTemplate conn,String username,Model model){
if (username==""""){
return ""log-in.html"";
}else {
List ids = conn.query(""select id from users where username =?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""ids"",ids);
return ""log-in.html"";
}
}"
11461,"Set up SQL (query all columns in the view table based on $value$), execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List selectValue(JdbcTemplate conn,String value){
List results = conn.query(""select * from view where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
List views = new ArrayList();
for (Object v : results) {
views.add(v);
}
return views;
}"
13705,"Use $connection$ to execute SQL (query the title in the books table based on $isbn$) and get the first piece of data. Print the query results, and finally use the jsonify method to return the query results.","public JSONObject getJson(JdbcTemplate connection,String isbn){
List rows = connection.query(""select title from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
System.out.println(rows.get(0));
return JSONObject.parseObject(rows.get(0).toString());
}"
14113,"Connect to the database through $engine$, and use the java expression to execute SQL: Query all the data in the $t$ table. For loop iterates through the queried data and prints.","public void sqlToIterator(EntityManager engine, Root<Object> t){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(t);
List<Object> result = engine.createQuery(cq).getResultList();
for (Object item : result) {
System.out.println(item);
}
}"
13532,"Set SQL based on the java expression (query all columns in the $locati$ table based on $trip_name$). Execute SQL through $conn$ and get all the data. If there is any data, return the query results.","public List optimize(EntityManager conn, Root<Object> locati, String trip_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(locati).where(cb.equal(locati.get(""origtrip_namein""),trip_name));
List<Object> res = conn.createQuery(cq).getResultList();
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
13904,"Set the SQL statement and the content is as follows: Query the time data in the sala table based on $user_id$. Execute SQL through $conn$, get all the data, render and return 'admin', where the time parameter is the execution result.","public String selectTime(JdbcTemplate conn,String user_id,Model model){
List time = conn.query(""select time from sala where user_id = ?"", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""time"",time);
return ""admin"";
}"
13022,"Use $conn$ to execute SQL (query the name in the passengers table based on $flight_id$) and get all the data. If the query result is None, print ""fail"" and return it directly. Otherwise, use for loop to print the name property of each item in the query result.","public void flight(JdbcTemplate conn,String flight_id){
List passengers = conn.query(""select name from passengers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (passengers.isEmpty()){
System.out.println(""fail"");
return;
}
for (Object passenger : passengers) {
System.out.println(JSONObject.parseObject(passenger.toString()).getString(""name""));
}
}"
13802,Query the first piece of id in the riders table with rname as $rname$ through $conn$. Set the assertion to determine the length of the query results is not 0. Return the query results.,"public List getRider(JdbcTemplate conn,String rname){
List riders = conn.query(""select id from riders where rname = ?"", new Object[]{rname}, new BeanPropertyRowMapper(List.class));
assert riders.size()!=0;
return riders;
}"
13144,"Use the $db_conn$ cursor method to execute SQL (get the TABLE_NAME column in the INFORMATION_SCHEMA based on $BASE_DB_DATABASE$) and get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","public List getTableInfoList(DataSource db_conn, String BASE_DB_DATABASE){
JdbcTemplate engine = new JdbcTemplate(db_conn);
List result = engine.query(""select table_name from information_schema where BASE_DB_DATABASE= ? "", new Object[]{BASE_DB_DATABASE}, new BeanPropertyRowMapper(List.class));
List tableInfoList = new ArrayList();
for (Object row : result) {
tableInfoList.add(row);
}
return tableInfoList;
}"
13727,"Get the database engine through $data_base$, initialize the log module, try to execute the SQL statement (query all the columns in the data_ base table according to $destination$), get all the data, and return the query results. If an Exception is caught, output the error log, and finally close all connections.","public List data(DataSource data_base, String destination){
JdbcTemplate engine = new JdbcTemplate(data_base);
try {
List rs = engine.query(""select * from data_base where destination = ? "", new Object[]{destination}, new BeanPropertyRowMapper(List.class));
return rs;
}catch (Exception e){
System.out.println(""error"");
return null;
}finally {
return null;
}
}"
13282,Execute the SQL statement (get the amount of data in the table) with $conn$ and get the first row of data. Return the result of the query.,"public Object searchCount(JdbcTemplate conn){
List counts = conn.query(""select count(*) from table"", new BeanPropertyRowMapper(List.class));
return counts.get(0);
}"
11065,"Use $conn$ to execute SQL (query all columns in the pg_database table based on $datname$) and get the first query results. If the query result does not exist, return False. Otherwise, return the query result.","public Object createDatabase(JdbcTemplate conn,String datname){
List pg_datas = conn.query(""select * from pg_database where datname= ?"", new Object[]{datname}, new BeanPropertyRowMapper(List.class));
if (pg_datas.isEmpty()){
return false;
}else {
return pg_datas.get(0);
}
}"
13812,Get the database engine through $root$. Use the ORM method to execute the SQL statement (query all the information in the $table$ table with maps as $maps$) and return all the query results.,"public List readSql(EntityManager root, Root<Object> table, String maps){
CriteriaBuilder cb = root.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table).where(cb.equal(table.get(""maps""),maps));
List<Object> values = root.createQuery(cq).getResultList();
return values;
}"
11018,"Try to run the following code: Open a connection via $engine$, execute SQL (query the timestamp in the extra_data table based on $client_ip$ and $server_ip$) and get all the data. Use for loop to store the query results as list and return the results. If an exception occurs in the operation, the exception information should be printed.","public List appendExtraData(DataSource engine, String client_ip,String server_ip){
try {
JdbcTemplate conn = new JdbcTemplate(engine);
List timestexts = conn.query(""select timestamp from extra_data where client_ip=? and server_ip= ? "", new Object[]{client_ip,server_ip}, new BeanPropertyRowMapper(List.class));
List recordtimes =new ArrayList();
for (Object i : timestexts) {
recordtimes.add(JSONObject.parseObject(i.toString()).get(0));
}
return recordtimes;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13570,"connect the database according to $engine$. Set SQL (query the number of userID columns in the proyecto_SI table based on $ratings$), get all the query results, and return the 0th item of the query results.","public Object getAllUserCount(DataSource engine, String ratings){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select count(userID) from proyecto_SI where ratings= ? "", new Object[]{ratings}, new BeanPropertyRowMapper(List.class));
return result.get(0);
}"
11388,Use $conn$ to execute SQL (query all columns in the obj table based on $nodes$) and return all obtained query results.,"public List composeNodeQuery(JdbcTemplate conn,String nodes){
List rows = conn.query(""select * from obj where nodes= ?"", new Object[]{nodes}, new BeanPropertyRowMapper(List.class));
return rows;
}"
13188,"Connect to the database with $e$, execute the SQL (get the lettershop column in lsstate where state is $state$) , get all the data, and finally return the query results.","public List get(DataSource e, String state){
JdbcTemplate conn = new JdbcTemplate(e);
List result = conn.query(""select lettershop from lsstate where state = ? "", new Object[]{state}, new BeanPropertyRowMapper(List.class));
return result;
}"
14172,"If the request module sends a request via POST, execute the SQL statement via $conn$ (query the first user_id in the users table based on $username$) and return the query results.","public Object review(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List user_ids = conn.query(""select user_id from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return user_ids.get(0);
} else {
return null;
}
}"
11020,"If the number of rows in the query result of using $conn$ to excute SQL (query the name information in the passengers table based on $flight_id$) is equal to 0, render ""error.html"" and input ""No flight with that id"" in the message field. Otherwise, render the 'success.html'.","public String namesPass(JdbcTemplate conn,String flight_id,Model model){
List rows = conn.query(""select name from passengers where flight_id= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (rows.isEmpty()){
model.addAttribute(""message"",""No flight with that id"");
return ""error.html"";
}else {
return ""success.html"";
}
}"
11001,"Get the database engine and establish a conection through $db_file$. Try to execute the SQL statement (get the cluster_name in the clusters based on $cluster_id$) and obtain all the data. Return acquired data. If a DatabaseError exception occurs during execution, the error message ""ERROR in truncate"" should be printed.","public List selectClusterFromDb(DataSource db_file, String cluster_id){
JdbcTemplate con = new JdbcTemplate(db_file);
try {
List texts = con.query(""select cluster_name from clusters where cluster_id= ? "", new Object[]{cluster_id}, new BeanPropertyRowMapper(List.class));
return texts;
}catch (Exception e){
System.out.println(""ERROR in truncate"");
return null;
}
}"
11404,Try to set SQL based on the java expression: (query all columns in $tattributes$ table based on $name$). Execute SQL with $conn$ and get the first piece of data. Throw KeyError if the query result is empty. Skip if there is an exception with KeyError.,"public Object getAttributeByName(EntityManager conn, Root<Object> tattributes, String name){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tattributes).where(cb.equal(tattributes.get(""name""),name));
List<Object> rows = conn.createQuery(cq).getResultList();
if (rows.isEmpty()){
return new Exception();
}else {
return null;
}
}catch (Exception e){
return null;
}
}"
13475,Use the cursor method of $db$ to execute the SQL (get the result column in the meishi_material table based on $taskid$) and get all the data. Use for loop to print the 0th element of each item of the query results.,"public void start(DataSource db, String taskid){
JdbcTemplate engine = new JdbcTemplate(db);
List allRows = engine.query(""select result from meishi_material where taskid = ? "", new Object[]{taskid}, new BeanPropertyRowMapper(List.class));
for (Object row : allRows) {
System.out.println(JSONObject.parseObject(row.toString()).get(0));
}
}"
11561,"Connect to the database through $db_connect$. Execute SQL statement: Query all columns in employee1 table through $last_name$, and get all the data. If the length of the query result is 0, then return ""not_found""; otherwise, use jsonify to return all the query results.","public Object get(DataSource db_connect, String last_name){
JdbcTemplate engine = new JdbcTemplate(db_connect);
List result = engine.query(""select * from employee1 where last_name = ? "", new Object[]{last_name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return ""not_found"";
}else {
return JSONObject.parseArray(result.toString());
}
}"
11118,"If the request module sends the request as post, then use $conn$ to query all the columns in the photos where the id of file is $file_id$ and get all the information and return all the query results.","public List webhook(HttpRequest request, JdbcTemplate conn, String file_id){
if (request.getMethod().equals(""POST"")){
List textsql = conn.query(""select * from photos where file_id= ?"", new Object[]{file_id}, new BeanPropertyRowMapper(List.class));
return textsql;
} else {
return null;
}
}"
14206,"Set the SQL: query the consumable statistics in the Bills table according to $bar$ and execute the SQL statement to get the first piece of data via the $con$ connection. If the execution result is empty, return None, convert each item of the query result to dict, store it as list and return.","public List topBeers(JdbcTemplate con,String bar){
List rs = con.query(""select count(consumable) from bills where bar= ?"", new Object[]{bar}, new BeanPropertyRowMapper(List.class));
if (rs.isEmpty()){
return null;
}else {
return JSONObject.parseArray(rs.get(0).toString());
}
}"
11689,"Execute SQL with $conn$ (get all the columns in the tb table whose table_name is $name$), get all the data, and then use for loop to print each item of the query result.","public void getTb(JdbcTemplate conn,String name){
List table = conn.query(""select * from tb where table_name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object row : table) {
System.out.println(row);
}
}"
13402,"Use $DATABASEURI$ to get the database engine and connect to the database, then execute SQL (get username column in the user table based on $id$) and get all the data, further close the connection and finally return the query result","public List selectUsername(DataSource DATABASEURI, String id){
JdbcTemplate conn = new JdbcTemplate(DATABASEURI);
List usernames = conn.query(""select username from user where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return usernames;
}"
11682,"Try to use $conn$ to execute SQL (get all the columns in the 'table' table where table_name is $name$) and get all the data. If the query result is true, return 'True'. If there is a SQLAlchemyError exception during execution, print the exception and return False.","public boolean getRows(JdbcTemplate conn,String name){
try{
List rows = conn.query(""select * from table where table_name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (rows.isEmpty()){
return false;
}else {
return true;
}
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
13647,"Use the % operator to set the SQL (to query the column in the database where table is $table$). Get the connection using $engine$. Try using the connection to execute the SQL and get all the data and return the result of the query. Finally, make sure the connection is closed. *getSampleData","public List getSampleData(DataSource engine, String table){
JdbcTemplate connection = new JdbcTemplate(engine);
try {
List result = connection.query(""select column from database where table= ? "", new Object[]{table}, new BeanPropertyRowMapper(List.class));
return result;
}finally {
return null;
}
}"
13900,"Query the first title in the books table with author as $author$ through $conn$. If the query result exists, print the query result and return it.","public Object queryTitle(JdbcTemplate conn,String author){
List infos = conn.query(""select title from books where author = ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
if (infos.isEmpty()){
return null;
}else {
System.out.println(infos.get(0));
return infos.get(0);
}
}"
14061,Get the database engine and establish a connection through $db_uri$. Execute the SQL statement (query all the columns in the db_uri table based on $uri$ and get the first piece of data. Close the database connection and return the query results.,"public List queryRes(DataSource db_uri, String uri){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List res = conn.query(""select * from db_uri where uri= ? "", new Object[]{uri}, new BeanPropertyRowMapper(List.class));
return res;
}"
13223,"Execute the SQL statement using $conn$ (query all columns in the books where id is $id$) and get all the data. Render and return ""result_detail.html"", where the book parameter is the result of the query.","public String selectBooks(JdbcTemplate conn,String id,Model model){
List book = conn.query(""select * from books where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book"",book);
return ""result_detail.html"";
}"
13140,"Connect to the database with $engine$, execute the SQL (get all the columns in the mark where the user is $username$) , get all the data, and then use the for loop to store each item of the query result as a list type, further closing the connection, finally, return the list content that jsonify has handled.","public List getExperienceUser(DataSource engine, String username){
JdbcTemplate con = new JdbcTemplate(engine);
List result = con.query(""select * from mark where user = ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
List returnData = new ArrayList();
for (Object row : result) {
returnData.add(row);
}
return JSONObject.parseArray(returnData.toString());
}"
13601,Set up SQL: query the fight information in the website table from website where fightid is $fightid$. Use $con$ to execute SQL and get the first data. Return the query result.,"public Object searchFight(JdbcTemplate con,String fightid){
List fights = con.query(""select fight from website where fightid = ?"", new Object[]{fightid}, new BeanPropertyRowMapper(List.class));
return fights.get(0);
}"
14234,"Query all name data in the passengers table where flightID is $flightID$ through $conn$, and return None if the query result is empty; otherwise, return the query result.","public List main(JdbcTemplate conn,String flightID){
List names = conn.query(""select name from passengers where flightid = ?"", new Object[]{flightID}, new BeanPropertyRowMapper(List.class));
if (names.isEmpty()){
return null;
}else {
return names;
}
}"
11591,"Use $session$ to execute the SQL statement: Query all the columns in the auction table based on $item_id$ and $timestamp$, get all the data, make sure that $session$ is closed, convert each item of the query result to dict, store it as list, and return.","public List getKMeansClassify(JdbcTemplate session,String item_id,String timestamp){
List ret = session.query(""select * from auction where item_id = ? and timestamp = ?"", new Object[]{item_id, timestamp}, new BeanPropertyRowMapper(List.class));
return ret;
}"
13920,"Set the SQL statement: Query the date in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. If the obtained data exists, return it.","public Object book(JdbcTemplate conn,String isbn){
List dates = conn.query(""select date from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (dates.isEmpty()){
return null;
}else {
return dates.get(0);
}
}"
13832,Use the ORM method to execute SQL statement through $session$: Query all data in the $Event$ table based on $id$. Convert the query results to dictionary and return it.,"public Object getValue(EntityManager session, Root<Object> Event, String id){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Event).where(cb.equal(Event.get(""id""),id));
List<Object> values = session.createQuery(cq).getResultList();
return values;
}"
13176,"Try to use $postgresql$ to get the DATABASE engine and connect to the DATABASE, then execute the SQL (get the size columns in the DATABASE where admin is $admin$) and get all the data, return the query results, and print the exception if an exception occurs during execution.","public List initDb(DataSource postgresql, String admin){
try {
JdbcTemplate conn = new JdbcTemplate(postgresql);
List res = conn.query(""select size from DATABASE where admin= ? "", new Object[]{admin}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13968,"Set SQL (query all columns in the BOOKS table based on $Isbn$), use $conn$ to execute SQL to get the first piece of data, render and return ""book.html"", where the book parameter is the execution result.","public String book(JdbcTemplate conn,String Isbn,Model model){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{Isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book"",books.get(0));
return ""book.html"";
}"
13463,Execute SQL through $conn$ (get name column in the data table with id as $idNumber$) and get all data. Finally return the query results.,"public List selectValue(JdbcTemplate conn, String idNumber){
List names = conn.query(""select name from data where id = ?"", new Object[]{idNumber}, new BeanPropertyRowMapper(List.class));
return names;
}"
13037,Use $conn$ to execute SQL (query all columns in test_table) and get all the data. Use for loop to store each item in the query result into list and return.,"public List queryTilelist(JdbcTemplate conn){
List the_tuple = conn.query(""select * from test_table"", new BeanPropertyRowMapper(List.class));
List querylist = new ArrayList();
for (Object tup : the_tuple) {
querylist.add(tup);
}
return querylist;
}"
13948,"Set the SQL query statement and the content is as follows: Query all the columns in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. Return False, if the acquired data is not empty; otherwise, return True.","public boolean bookApi(JdbcTemplate conn, String isbn){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return false;
}else {
return true;
}
}"
13094,Use $conn$ to execute SQL (query stock_name in the stock table) and get all the data. Close $conn$ and transfer each item of data in the query results to list and return.,"public List queryStock(JdbcTemplate conn){
List stock_names = conn.query(""select stock_name from stock"", new BeanPropertyRowMapper(List.class));
return stock_names;
}"
13123,"Using $db$ to connect to the database, try to execute SQL (get the user_id column in the query_users table processed by the counting method where user_name is $user1$) and get all the data, then return the query results, finally ensure that the connection is closed.","public List testBranch(DataSource db, String user1){
JdbcTemplate connection = new JdbcTemplate(db);
try {
List res = connection.query(""select count(user_id) from query_users where user_name= ? "", new Object[]{user1}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
return null;
}
}"
11154,"Set up SQL (query movietitle in the imdb_movies where year is $year$) , execute SQL with a $conn$ connection, and loop through the query results with a for loop and return.","public Object getMovies(JdbcTemplate conn,String year){
List resultproxy = conn.query(""select movietitle from imdb_movies where year= ?"", new Object[]{year}, new BeanPropertyRowMapper(List.class));
return resultproxy;
}"
13684,"Execute SQL (query address information in personal_info where id is $id$ and birth is $birth$) with $conn$ and get all the data. Finally, return the result of the query as a list.","public Object func1(JdbcTemplate conn,String id,String birth){
List addresses = conn.query(""select address from personal_info where id=? and birth= ?"", new Object[]{id, birth}, new BeanPropertyRowMapper(List.class));
return addresses;
}"
11688,"Try to use $db$ to execute SQL (get the scheduler column in the ModelSetting table according to $key$), get the first piece of data, and return the query result. If an exception occurs during execution, print the exception and return False.","public Object getSetting(JdbcTemplate db,String key){
try {
List res = db.query(""select scheduler from ModelSetting where key= ?"", new Object[]{key}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return false;
}
}"
11445,"Set up the SQL (query the id column in the flight table based on $name$), use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through all the obtained query results, and use the format string matching method to print the 'id' field of each piece of data and $name$.","public List getOne(JdbcTemplate conn,String datum){
List rows = conn.query(""select * from table where datum= ?"", new Object[]{datum}, new BeanPropertyRowMapper(List.class));
return rows;
}"
11546,"Execute the SQL statement (query the first piece of data in the $Country$ table based on $id$) using ORM method through the $conn$ connection, and set the assertion to determine the length of the returned result as 0.","public void testCountryIdNotNull(EntityManager conn, Root<Object> Country, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Country).where(cb.equal(Country.get(""url""),id));
List<Object> country_ids = conn.createQuery(cq).getResultList();
assert country_ids.size()==0;
}"
13536,"Execute SQL with $conn$ (query the WFREQ column in the samples_metadata table where sampleid is $query_param$), get the first row of data, print the query result, and return the 0th element of the query data.","public Object getWfreq(JdbcTemplate conn,String query_param){
List wfreq_data = conn.query(""select WFREQ from samples_metadata where sampleid= ?"", new Object[]{query_param}, new BeanPropertyRowMapper(List.class));
System.out.println(wfreq_data.get(0));
return JSONObject.parseObject(wfreq_data.get(0).toString()).get(0);
}"
11316,"Get the database engine and establish a connection through $pg_connstring$. Execute the SQL statement (query the first piece of data in the group column of the table table based on $count$), close the connection, and return the query results.","public List dbConnect(DataSource TimeTable, String summary){
JdbcTemplate engine = new JdbcTemplate(TimeTable);
List laten = engine.query(""select time from comments where summary = ? "", new Object[]{summary}, new BeanPropertyRowMapper(List.class));
return laten;
}"
13529,"Connect the database with $default_engine$, execute SQL (query all columns in the DATABASE table based on $name$), get all the query results, close the connection, and return the query results.","public List createDatabase(DataSource default_engine, String name){
JdbcTemplate engine = new JdbcTemplate(default_engine);
List res = engine.query(""select * from DATABASE where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
13583,"Use $db$ to execute SQL (query the jobid, jobdesc and companyname columns in the jobs table), get all the query results, convert them to list. Execute SQL (query the userid and username columns in the jobseekers table), get all the query results, convert them to list, return the rendered ""admin.html"" page, where the parameter jobs is the result of the first query and users is the result of the second query.","public String show(JdbcTemplate db, Model model){
List jobs = db.query(""select jobid, jobdesc, companyname from jobs"", new BeanPropertyRowMapper(List.class));
List users = db.query(""select userid, username from jobseekers"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""jobs"", jobs);
model.addAttribute(""users"", users);
return ""admin.html"";
}"
11285,Execute SQL with $conn$ (get all the columns in the products based on $id$) and get all the data. Store each item of the query result as dictionary type and return the dictionary content.,"public List crudesqlalchemySelect(JdbcTemplate conn,String id){
List selects = conn.query(""select * from products where id =?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List jsonList = new ArrayList();
for (Object r : selects) {
jsonList.add(r);
}
return jsonList;
}"
14151,"Create a database engine with $DSQLALCHEMY_DATABASE_URI$ and create a connection. Execute SQL: Query Name in users table, get all the data, close the database connection and return the obtained data.","public List usersList(DataSource DSQLALCHEMY_DATABASE_URI){
JdbcTemplate engine = new JdbcTemplate(DSQLALCHEMY_DATABASE_URI);
List Users = engine.query(""select name from users "", new BeanPropertyRowMapper(List.class));
return Users;
}"
11549,"If clause exists, then use $conn$ connection to execute SQL statement: get all columns in data based on $clause$, get all data and store query result as list and return it. Otherwise return None.","public Object findAll(JdbcTemplate conn,String clause){
if (clause!=null){
List rs = conn.query(""select * from data where clause = ?"", new Object[]{clause}, new BeanPropertyRowMapper(List.class));
return rs;
}else {
return null;
}
}"
13269,"If the requested method is ""POST"", set up the SQL statement, execute the SQL statement (query all columns in users where the name of user is $username$) with $conn$ and get all the data. The render returns ""adminlogin.html"" with the parameter user as the result of the query. Otherwise render and return ""adminlogin.html"".","public String adminLogin(HttpRequest request, JdbcTemplate conn, String username,Model model){
if (request.getMethod().equals(""POST"")){
List user = conn.query(""select * from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""user"", user);
return ""adminlogin.html"";
} else {
return ""adminlogin.html"";
}
}"
11172,"Use $conn$ to query all columns in the users where taname is $taname$. Return False if the query result is empty, or True if it is not.","public boolean queryPage(JdbcTemplate conn,String taname){
List user = conn.query(""select * from users where taname= ?"", new Object[]{taname}, new BeanPropertyRowMapper(List.class));
if (user.isEmpty()){
return false;
}else {
return true;
}
}"
13412,"Set the cursor method of $dbapi_connection$, then try to execute SQL (get all columns in items table based on $item_id$) and get all the data, further close the connection and return the query result. If not try then return False directly.","public Object dbApiConnection(DataSource dbapi_connection, String item_id){
JdbcTemplate engine = new JdbcTemplate(dbapi_connection);
try {
List results = engine.query(""select * from items where item_id = ? "", new Object[]{item_id}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
return false;
}
}"
14228,"connect to the database according to $engine$. Execute the SQL statement (get all the name and manufacture in the Items according to $type$), convert each item of the query result to dict, store it as list and return.","public List getBeers(DataSource engine, String type){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select name, manufacture from items where type = ? "", new Object[]{type}, new BeanPropertyRowMapper(List.class));
return rs;
}"
13353,"If $conId$ is not empty, set the SQL based on the java expression (query the oneSecBars column in the $equity_contracts$ table based on $conId$). Execute SQL through $conn$, get all the data and return the query results.","public List saveToDb(EntityManager conn, Root<Object> equity_contracts, String conId){
if (conId!=null){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(equity_contracts).where(cb.equal(equity_contracts.get(""conId""),conId));
List<Object> recs = conn.createQuery(cq).getResultList();
return recs;
}else {
return null;
}
}"
11059,"Use the java expression to set up SQL: To query all the information in the $table_name$ table based on $drop_id$. Use $conn$ to execute SQL and get all the data, and finally return the query results.","public List sqlAlchemy(EntityManager conn, Root<Object> table_name, String drop_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_name).where(cb.equal(table_name.get(""drop_id""),drop_id));
List<Object> drop_recs = conn.createQuery(cq).getResultList();
return drop_recs;
}"
11538,"Use the java expression to set the SQL statement to get all the category_id in the $articles_table$ table based on $year$, use $conn$ connection to execute the SQL and get the data. Store each element of the query result as list and return the contents of the list.","public List getIngetArticlesForRoundupfo(EntityManager conn, Root<Object> articles_table, String year){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(articles_table).where(cb.equal(articles_table.get(""year""),year));
List<Object> rp = conn.createQuery(cq).getResultList();
List articles_for_roundup = new ArrayList();
for (Object i : rp) {
articles_for_roundup.add(i);
}
return articles_for_roundup;
}"
13109,"Execute the SQL (get the value column in the metadata where name is $name$) with $conn$ and get all the data, return the query result if the query result is true, otherwise return None.","public List get(JdbcTemplate conn,String name){
List result = conn.query(""select value from metadata where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
11628,"Try to use $db$ to execute SQL according to the java expression (get the nombre column in the $clientes$ table where clienteid is $cid$, email is $email$, and password is $pwd$), get the first piece of data, return the query result, and return False if an exception occurs during execution.","public List finUser(EntityManager conn, Root<Object> table_name, String drop_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table_name).where(cb.equal(table_name.get(""drop_id""),drop_id));
List<Object> drop_recs = conn.createQuery(cq).getResultList();
return drop_recs;
}"
14251,Use $conn$ to execute the SQL statement (query all the title in the books table based on $author$) and return all the query results.,"public List main(JdbcTemplate conn,String author){
List res = conn.query(""select title from books where author = ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
return res;
}"
13690,"Execute the SQL using $db$(all columns in the passengers table where the flight_code is $flight_id$) and get all the data. If the length of the query result is equal to 0, return None. Otherwise,use for loop to print each item of data in the query result.","public List selectPassenger(JdbcTemplate db,String flight_id){
List passengers = db.query(""select * from passengers where flight_code= ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (passengers.isEmpty()){
return null;
}else {
for (Object passenger : passengers) {
System.out.println(passenger);
}
return passengers;
}
}"
13078,"If the request method is GET, use redirect to turn to the ""/login"" page. Otherwise execute the following code: Set SQL (query all columns in books table based on $isbn$, $title$ and $author$); use $conn$ to execute SQL and get all data and if query results exist, return directly, otherwise use redirect to ""/"".","public Object search(HttpRequest request, JdbcTemplate conn,String isbn, String title, String author){
if (request.getMethod().equals(""POST"")){
List rows = conn.query(""select * from books where isbn =? and title =? and author = ?"", new Object[]{isbn,title,author}, new BeanPropertyRowMapper(List.class));
if (rows.isEmpty()){
return ""/"";
}
else {
return rows;
}
} else {
return ""/login"";
}
}"
11291,"Get the database engine through $db$, where the echo parameter is True and establish a connection. Execute the SQL statement (get the Nombre_de_Places column in the projection based on $ProjectionId$) and get all the data. Close the connection and return the 'Place' and query result processed by jsonify.","public JSONObject rerservation(DataSource db, String ProjectionId){
JdbcTemplate connection = new JdbcTemplate(db);
List res = connection.query(""select Nombre_de_Places from projection where ProjectionId = ? "", new Object[]{ProjectionId}, new BeanPropertyRowMapper(List.class));
JSONObject jsonObject = new JSONObject();
jsonObject.put(""Place"", res);
return jsonObject;
}"
13788,"Execute SQL with $conn$ (query all columns in the users table according to $wcloud_creator$), get all the query results, and return True if there are query results.","public boolean destroyDb(JdbcTemplate conn,String wcloud_creator){
List check = conn.query(""select * from users where wcloud_creator= ?"", new Object[]{wcloud_creator}, new BeanPropertyRowMapper(List.class));
if (check.isEmpty()){
return false;
}else {
return true;
}
}"
13060,"Use the string format method to set SQL: Query all columns in the USERS table based on $user_id$ and $last_name$. Use $conn$ to execute SQL and get all the data. Finally, return the query results.","public List sampleQuery(JdbcTemplate conn,String user_id,String last_name){
List values = conn.query(""select * from users where user_id=? and last_name= ?"", new Object[]{user_id,last_name}, new BeanPropertyRowMapper(List.class));
return values;
}"
14230,Execute the SQL statement through the $conn$ connection and the content is as follows: Query all origin and destination information in the flights table. Use for loop to store each element in the query result into list and return the list content.,"public List main(JdbcTemplate conn){
List flights = conn.query(""select origin, destination from flights"", new BeanPropertyRowMapper(List.class));
List flights_list = new ArrayList();
for (Object flight : flights) {
flights_list.add(flight);
}
return flights_list;
}"
11113,Use $host$ to get the database engine and establish a connection. Execute the SQL statement (query login in the users table where the name of user is $username$). Print all the information line by line. Make sure the database connection is closed.,"public void func1(DataSource host, String username){
JdbcTemplate connection = new JdbcTemplate(host);
List result = connection.query(""select login from users where username= ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}"
14297,"Get a connection from the 'connection' pool through $db$, create a cursor object through the connection, and use the java expression to execute the SQL statement through the cursor object: Query all the id data in the $testing$ table and return the query results.","public List testIterable(EntityManager db, Root<Object> testing){
        CriteriaBuilder cb = db.getCriteriaBuilder();
        CriteriaQuery<Object> cq = cb.createQuery(Object.class);
        cq.select(testing);
        List<Object> data = db.createQuery(cq).getResultList();
        List re = new ArrayList();
        for (Object o : data) {
            re.add(JSONObject.parseObject(o.toString()).getString(""id""));
        }
        return re;
    }"
13379,"Set sql (query the number of the dist column in the runs table based on $user_id$, $dur_secs$ and $date_now$), use $conn$ to execute SQL, get the first piece of data, and return the query results.","public List index(JdbcTemplate conn,String user_id,String dur_secs,String date_now){
List res = conn.query(""select count(dist) from runs where user_id=? and dur_secs<? and date_now< ?"", new Object[]{user_id,dur_secs,date_now}, new BeanPropertyRowMapper(List.class));
return res;
}"
11236,"Try to use the ORM method to get all the columns in the $Customer$ table with 'id': $id$ via $session$. Then execute the submit method and return the obtained result, otherwise execute the rollback method, and finally make sure the $session$ connection is closed.","public List updateById(EntityManager session, Root<Object> Customer, String id){
try {
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Customer).where(cb.equal(Customer.get(""id""),id));
List<Object> res = session.createQuery(cq).getResultList();
return res;
}catch (Exception e){
return null;
}finally {
return null;
}
}"
13032,Use java expressions to set SQL (query the id in the $ranobe_table$ table when title equals $title_name$). Use $conn$ to execute SQL and get the first piece of data. Return 0th elementof the query result.,"public Object queryRanobe(EntityManager conn, Root<Object> ranobe_table, String title_name){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(ranobe_table).where(cb.equal(ranobe_table.get(""title""),title_name));
List<Object> results = conn.createQuery(cq).getResultList();
return JSONObject.parseObject(results.get(0).toString()).get(0);
}"
11066,"Use $conn$ to execute SQL (query the anons information in the col table based on $anonsid$). Take the keys of the query result as the first element in the tuple, and each item of the query result cursor as the second element in the tuple. Finally, convert each tuple to dict and store in list. Finally, retutn the data in list.","public List selectSamename(JdbcTemplate conn,String anonsid){
List res = conn.query(""select anons from col where anonsid= ?"", new Object[]{anonsid}, new BeanPropertyRowMapper(List.class));
List anonDict = new ArrayList();
for (Object o : res) {
JSONObject jsonObject =new JSONObject();
jsonObject.put(""keys"", JSONObject.parseObject(o.toString()).get(0));
jsonObject.put(""tuple"", JSONObject.parseObject(o.toString()).get(1));
anonDict.add(jsonObject);
}
return anonDict;
}"
13203,"If $name$ exists, use $conn$ to execute the SQL statement (get all the columns in the USER where name is $name$) and get all the data. Finally, all the results are returned. Otherwise ($name$ does not exist) return False.","public Object selectUser(JdbcTemplate conn,String name){
if (name!=null){
List results = conn.query(""select * from user where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return results;
}else {
return false;
}
}"
11544,"Use $db$ to connect to the database and create a cursor object with the cursor() method, execute the SQL (query all the columns in the cars table based on $votes$) and get all the data. Use for loop to store each element of the query result in list, and return the list contents.","public List getLeaderboard(DataSource db, String votes){
JdbcTemplate engine = new JdbcTemplate(db);
List results = engine.query(""select * from cars where votes = ? "", new Object[]{votes}, new BeanPropertyRowMapper(List.class));
List returnArray =new ArrayList();
for (Object result : results) {
returnArray.add(result);
}
return returnArray;
}"
11230,"Open the ""spis.csv"" file and read, use for loop on the read file, loop via $conn$ to execute the SQL (get all the columns in articles based on title, get all the data and print the query result.","public void main(JdbcTemplate conn){
String filePath = ""spis.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) {
String title = sc.nextLine();
List res = conn.query(""select * from articles where title= ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
System.out.println(res);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
13137,"Try to connect to the database using the start method of $engine$, execute the SQL (get all columns in the t_ccs table where the project_id is $p1$, the check_id is $c1$, and color is $green$) and get all the data, then return the result of the query if an exception occurs during execution, an exception is thrown on the basis of Error.","public List testCompositePrimaryKey(DataSource engine, String p1,String c1,String green){
JdbcTemplate conn = new JdbcTemplate(engine);
try {
List res = conn.query(""select * from t_ccs where project_id= ? and check_id=? and color= ? "", new Object[]{p1,c1,green}, new BeanPropertyRowMapper(List.class));
return res;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11421,"Set up SQL (query the reaction column in the reactions table based on $message_id$), use $conn$ to execute SQL, get all the query results, and return the query results.","public List submitVote(JdbcTemplate conn,String message_id){
List results = conn.query(""select reaction from reactions where message_id = ?"", new Object[]{message_id}, new BeanPropertyRowMapper(List.class));
return results;
}"
13894,"Set the query statement to: Get all the columns in jihemei based on $content$, use $conn$ connection to execute SQL to get all the data and return them.","public List searchContent(JdbcTemplate conn,String content){
List items = conn.query(""select * from jihemei where content = ?"", new Object[]{content}, new BeanPropertyRowMapper(List.class));
return items;
}"
11420,"Set SQL (query the manufacturer column in the Consumables table based on $consumable$), use $conn$ to execute SQL and get all the query results. If the query result is empty, return None, otherwise use for loop to convert each piece of the query result to dict, and store it in list, and then return the list.","public List findConsumable(JdbcTemplate conn,String consumable){
List rs = conn.query(""select manufacturer from consumables where consumable = ?"", new Object[]{consumable}, new BeanPropertyRowMapper(List.class));
if (rs.isEmpty()){
return null;
}else {
return rs;
}
}"
13302,"Use $db$ to create a cursor object, try to execute SQL (query the result column in the comic table based on $taskid$), get all the data, and return the query data; if an Exception occurs during execution, the exception is printed.","public List bookPage(DataSource db, String taskid){
JdbcTemplate engine = new JdbcTemplate(db);
try {
List allRows = engine.query(""select result from comic where taskid= ? "", new Object[]{taskid}, new BeanPropertyRowMapper(List.class));
return allRows;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13081,"Try to use $cursor$ to execute SQL (query all columns in pg_enum based on $enumtypid$) and get all the data. Close $cursor$ and return the query results as list. If an exception occurs, the specific exception information should be printed.","public List enumeration(JdbcTemplate cursor,String enumtypid){
try{
List enumera = cursor.query(""select * from table where datum= ?"", new Object[]{enumtypid}, new BeanPropertyRowMapper(List.class));
return enumera;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14208,"Use $db_uri$ to create the database engine and connect. Execute the SQL statement: query all the screen_name data in the $table$ table and for loop iterates through all the acquired data and prints. Open the test.txt file for write operation, and convert the execution result into a string to write into the file.","public void scrapeUsers(EntityManager db_uri, Root<Object> table){
CriteriaBuilder cb = db_uri.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table);
List<Object> rows = db_uri.createQuery(cq).getResultList();
for (Object row : rows) {
System.out.println(row);
}
try {
FileWriter fileWriter = new FileWriter(""test.txt"");
fileWriter.write(rows.toString());
} catch (IOException e) {
e.printStackTrace();
}
}"
11465,"Set up SQL (query all the information in the vuelos table based on $id$), use $conn$ to execute SQL and get all the query results, return the rendered ""index.html"" page with the vuelos parameter being the query result.","public String index(JdbcTemplate conn,String id,Model model){
List vuelos = conn.query(""select * from vuelos where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""vuelos"", vuelos);
return ""index.html"";
}"
11063,"If 'id' is in the cookies of request, use $conn$ to execute SQL (query all columns in the $queryRecommend$ table when uuid is $id$), get all the data, and return the rendered 'recommend.html', where the parameter result is the query result. If 'id' is not in cookies, use url_for and redirect to jump to 'index'.","public String selectRes(EntityManager conn, Root<Object> queryRecommend, String id, HttpSession session,Model model){
if (session.getAttribute(""id"")!=null){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(queryRecommend).where(cb.equal(queryRecommend.get(""uuid""),id));
List<Object> values = conn.createQuery(cq).getResultList();
model.addAttribute(""result"", values);
return ""recommend.html"";
}else {
return ""index"";
}
}"
11658," and $engine$ to connect the database and execute SQL (get the drinkerName column in the 'D' table where drinkerID is $dID$), get all the data, return None if the query result is None, use for loop to convert each item of the query result to a dictionary type and return.","public List getDrinkerTrans(DataSource engine, String dID){
JdbcTemplate con = new JdbcTemplate(engine);
List names = con.query(""select drinkerName from D where drinkerID = ? "", new Object[]{dID}, new BeanPropertyRowMapper(List.class));
if (names.isEmpty()){
return null;
}else {
return names;
}
}"
14116,Use the java expression to set up SQL: Query the cookie_name data in the $cookies$ table and execute SQL through $conn$ to get all the data. For loop iterates through all the query results and prints them. Return all the query results.,"public List<Object> queryObject(EntityManager conn, Root<Object> cookies){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cookies);
List<Object> res = conn.createQuery(cq).getResultList();
for (Object row : res) {
System.out.println(row);
}
return res;
}"
13922,"Connect the database through $db_connect$, try to set the SQL statement: Get all the columns in the indicados table according to $id$, execute the SQL statement, and get all the data.","public JSONArray getAllIndicados(DataSource db_connect, String id){
try {
JdbcTemplate engine = new JdbcTemplate(db_connect);
List query = engine.query(""select * from indicados where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(query.toString());
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11485,"Set SQL (query the name column in the data table based on restaurant_id = $id$), use $conn$ to execute the SQL. Use for loop to iterate through to get the cursor of the execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Store in a list, and return the list.","public List selectValue(JdbcTemplate conn,String id){
List results = conn.query(""select name from data where restaurant_id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return results;
}"
11614,"Use $testdb$ to get the database engine, execute SQL (get all the columns in the 'table_1' table when some_field is $field$), get all the data, and finally return the query result.","public List setUP(DataSource testdb, String field){
JdbcTemplate engine = new JdbcTemplate(testdb);
List fd = engine.query(""select * from table_1 where some_field= ? "", new Object[]{field}, new BeanPropertyRowMapper(List.class));
return fd;
}"
13982,"Set the SQL statement: query the title data in the books table where isbn is $id$, use $conn$ to execute SQL to get all the data. If the result does not exist, render and return ""error.html""; otherwise, render and return ""results.html"", where the results parameter is the execution result.","public String books(JdbcTemplate conn,String id,Model model){
List results = conn.query(""select title from books where isbn = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""results"", results);
return ""results.html"";
}
}"
13167,"Use $db_uri$ to get the DATABASE engine and connect to the DATABASE, then execute SQL (get the price column in the DATABASE where user1 is $user1$) and get the first data, further close the connection, and finally return the query results.","public List tearDown(DataSource db_uri, String user1){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List res = conn.query(""select price from DATABASE where user1= ? "", new Object[]{user1}, new BeanPropertyRowMapper(List.class));
return res;
}"
13549,"Create a cursor with $db$, try to execute SQL (query the number of taskid columns in the recipe_relation table based on $taskid$), and get the first piece of data. If an Exception occurs during execution, output the error log and return the 0th element of the query result.","public Object start(DataSource db, String taskid){
JdbcTemplate conn = new JdbcTemplate(db);
try {
List res = conn.query(""select count(taskid) from recipe_relation where taskid=? "", new Object[]{taskid}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11447,"Get the database engine via $db_url$, set the 'echo' parameter to True, and further get the Session object. Set up the SQL statement (query all the columns in the cron_dailyquote table based on $secucode$), execute SQL and get all the data, close the connection, and return the query result.","public List selectValue(DataSource db_url, String secucode){
JdbcTemplate session = new JdbcTemplate(db_url);
List results = session.query(""select * from cron_dailyquote where secucode = ? "", new Object[]{secucode}, new BeanPropertyRowMapper(List.class));
return results;
}"
13860,Use the java expression to set SQL statement to get ReviewWaiver data in $studentData$ based on $Username$ and use $conn$ connection to execute SQL to get all the data. Return the result in the form of the dictionary.,"public List<Object> getReferences(EntityManager conn, Root<Object> studentData, String Username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(studentData).where(cb.equal(studentData.get(""Username""),Username));
List<Object> out = conn.createQuery(cq).getResultList();
return out;
}"
13909,"Use $e$ to connect the database, set the SQL statement: Query the name column in the category table whose id is $id$, execute the SQL statement, get all the data through cursor, store the 0th element of each item of the obtained data as list and return.","public List get(DataSource e, String id){
JdbcTemplate conn = new JdbcTemplate(e);
List data = conn.query(""select name from category where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List result =new ArrayList();
for (Object i : data) {
result.add(JSONObject.parseObject(i.toString()).get(0));
}
return result;
}"
13935,"Set the SQL statement with the java expression: Query the feature_name in the $probabilities$ table according to $feature_value$, use the $conn$ connection to execute SQL and get all the data. If the data is not empty, print the obtained data.","public void getScore(EntityManager conn, Root<Object> probabilities, String feature_value){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(probabilities).where(cb.equal(probabilities.get(""feature_value""),feature_value));
List<Object> row = conn.createQuery(cq).getResultList();
if (!row.isEmpty()){
System.out.println(row);
}
}"
11271,"Execute the SQL with $conn$ (get the time column in CAPTURE based on $datetime$), get all the data, use for loop to store the 0th element of each item in the query result as string type and return the string content.","public String read(JdbcTemplate conn,String datetime){
List rows = conn.query(""select time from capture where datetime= ?"", new Object[]{datetime}, new BeanPropertyRowMapper(List.class));
String data = null;
for (Object row : rows) {
data += JSONObject.parseObject(row.toString()).get(0);
}
return data;
}"
14226,"Use the java expression to set the SQL statement: Query the eng_desc data in the $scop_des$ table according to $sccs$, execute the SQL statement through the $conn$ connection, and return the first piece of data obtained from the execution result.","public Object scopDesc(EntityManager conn, Root<Object> scop_des, String sccs){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(scop_des).where(cb.equal(scop_des.get(""sccs""),sccs));
List<Object> desc = conn.createQuery(cq).getResultList();
return desc.get(0);
}"
13527,"Use $db$ to execute SQL (query all columns in the flights table where the id value is $flight_id$) and get the first query result. If no data is obtained, return the rendered 'error.html', where parameter message is ""No such flight."". Otherwise, execute SQL (query the name column in the passangers table whose value of flight_id is $flight_id$) and return the rendered 'flight.html' page, where the parameter flight is the result of the first query and passangers is the result of the second query.","public String flight(JdbcTemplate db,String flight_id,Model model){
List flight = db.query(""select * from flights where id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
if (flight.isEmpty()){
model.addAttribute(""message"", ""No such flight."");
return ""error.html"";
}else {
List passangers = db.query(""select name from passangers where flight_id = ?"", new Object[]{flight_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""flight"", flight.get(0));
model.addAttribute(""passangers"", passangers);
return ""flight.html"";
}
}"
13194,"Execute the SQL (get the id column in the users where the name of user is $username$) with $conn$ and get the first data, return the query result if it is true.","public List submit(JdbcTemplate conn,String username){
List res = conn.query(""select id from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
13972,"Set the SQL statement: Get the id information in the posts table based on $category$, use $conn$ to execute SQL to get all the information and return.","public List selectPost(JdbcTemplate conn,String category){
List results = conn.query(""select id from posts where category = ?"", new Object[]{category}, new BeanPropertyRowMapper(List.class));
return results;
}"
13429,Execute the SQL based on $conn$ (get the name column in the sales table with city as $location$ and saleyear as $date$) and get all the data. Finally return the query results.,"public List pullSaleData(JdbcTemplate conn,String location,String date){
List response = conn.query(""select name from sales where city = ? and saleyear = ?"", new Object[]{location,date}, new BeanPropertyRowMapper(List.class));
return response;
}"
11341,"Set sql according to the java expression (query all columns in the $at$ table based on $uname$), use $conn$ to execute sql and get the first piece of data, close the connection, and return the query results.","public Object checkUserExist(EntityManager conn, Root<Object> at, String uname){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(at).where(cb.equal(at.get(""uname""),uname));
List<Object> tmt = conn.createQuery(cq).getResultList();
return tmt.get(0);
}"
13701,"Use $conn$ to execute SQL (get all the columns in 'table' table based on $ID$) and get all the data. Print the query result, store the 0th element of each item in the query result into list and return.","public Object getTableCursor(JdbcTemplate conn,String ID){
List cur = conn.query(""select * from table where id = ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object j : cur) {
list.add(JSONObject.parseObject(j.toString()).get(0));
}
return list;
}"
14299,Use the $connection$ connection to execute the SQL statement and the content is as follows: Query all the type in the query_test table and return the query results.,"public List test(JdbcTemplate connection){
List res = connection.query(""select type from query_test"", new BeanPropertyRowMapper(List.class));
return res;
}"
11181,"If the request module sends the request as a post, the SQL rendering (query all the body in the articles where title is $title$ and author is $author$) is performed using $connection$ and the 'article.html' is returned, where the form parameter is the result of the query.","public Object addArticle(HttpRequest request, JdbcTemplate connection, String title, String author,Model model){
if (request.getMethod().equals(""POST"")){
List res_data = connection.query(""select body from articles where title=? and author= ?"", new Object[]{title,author}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""form"", res_data);
return ""article.html"";
} else {
return null;
}
}"
13911,"Try to execute SQL: Query all the columns in the reviews table based on $isbn$, get all the data, and return. If an exception occurs, use redirect to return the 'error' spliced by url_for. Finally, make sure that $db$ is turned off.","public List book(JdbcTemplate conn,String isbn){
try {
List book = conn.query(""select * from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
return book;
}catch (Exception e){
System.out.println(""erroe"");
return null;
}finally {
return null;
}
}"
11425,"Set SQL based on the java expression: (query all columns in $audit$ table based on $id$). Execute SQL by $conn$ and get all the data, if query result length is greater than 0, return query result. Otherwise return False.","public Object getSource(EntityManager conn, Root<Object> audit, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(audit).where(cb.equal(audit.get(""id""),id));
List<Object> results = conn.createQuery(cq).getResultList();
if (results.isEmpty()){
return false;
}else {
return results;
}
}"
13835,Use the $conn$ connection to execute the SQL statement (query all columns in the TABLE table based on $tablename$) and get all the data. Print and return the query results.,"public List checkExistence(JdbcTemplate conn,String tablename){
List out = conn.query(""select * from table where tablename = ?"", new Object[]{tablename}, new BeanPropertyRowMapper(List.class));
System.out.println(out);
return out;
}"
13530,"Try to use $conn$ to execute SQL (query all the information in the reviews table based on $isbn$), get all the data, and return the rendered ""book.html"" page, where the review parameter is set to the query result. If an exception occurs during execution, return None.","public String book(JdbcTemplate conn,String isbn,Model model){
try {
List review = conn.query(""select * from reviews where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""review"", review);
return ""book.html"";
}catch (Exception e){
return null;
}
}"
11595,"Try to use $conn$ to query all the columns in the 'table' table where tid is $tid$, get all the data, make sure that $conn$ is turned off, set the assertion to determine that the length of the returned result is 1, and return the query result. If an Exception occurs, return the exception information.","public Object db(JdbcTemplate conn,String tid){
try {
List value = conn.query(""select * from table where tid = ?"", new Object[]{tid}, new BeanPropertyRowMapper(List.class));
assert value.size()==1;
return value;
}catch (Exception e){
return e;
}
}"
11350,"Set up sql (query all columns in the channeltags table based on $set_index$), execute sql with $conn$ and get the first piece of data, and return the query results.","public Object channelTagDf(JdbcTemplate conn,String set_index){
List yes = conn.query(""select * from channeltags where set_index= ?"", new Object[]{set_index}, new BeanPropertyRowMapper(List.class));
return yes.get(0);
}"
13746,"Execute SQL with $conn$ (query all columns in the new_pop_vs_price table according to $Price$), get all the query results, use for loop to traverse all the obtained query results, insert each piece of data into a list, convert the list to json and return.","public JSONArray price(JdbcTemplate conn,String Price){
List result = conn.query(""select * from new_pop_vs_price where price = ?"", new Object[]{Price}, new BeanPropertyRowMapper(List.class));
List all_data = new ArrayList();
for (Object row : result) {
all_data.add(row);
}
return JSONObject.parseArray(all_data.toString());
}"
14232,"Excute the SQL query statement through the $conn$ connection, which reads: Query all the columns in the flight table and get all the data, render and return ""index.html"", where the flights parameter is all the data obtained.","public String index(JdbcTemplate conn,Model model){
List flights = conn.query(""select * from flight"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""flights"", flights);
return ""index.html"";
}"
11620,"Use $db$ to execute SQL according to the java expression (get all the columns in the $flights$ table whose flight_id is $id$), get all the data, and finally return the rendered ""flights.html"", where the flights parameter is the query result.","public Object flights(EntityManager db, Root<Object> flights, String id,Model model){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(flights).where(cb.equal(flights.get(""id""),id));
List<Object> fs = db.createQuery(cq).getResultList();
model.addAttribute(""flights"", fs);
return ""flights.html"";
}"
11284,"If $keyword_id$ is empty, return $keyword_id$. Set SQL (get the id column in 'documents' based on $keyword_id$), connect to the database through $engine$ and execute the SQL statement to get all the data. Then make sure the connection is closed, and finally return the query result.","public Object run(DataSource engine, String keyword_id){
if (keyword_id==null){
return keyword_id;
}else {
JdbcTemplate con = new JdbcTemplate(engine);
List res = con.query(""select id from documents where keyword_id = ? "", new Object[]{keyword_id}, new BeanPropertyRowMapper(List.class));
return res;
}
}"
11212,"Use the java expression to set SQL (get the user_id in the $users$ table based on $user_id$), use $conn$ to execute and get all the data, and finally return the query result.","public List<Object> testNestedSubTransActionCommit(EntityManager conn, Root<Object> users, String user_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""user_id""),user_id));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
11385,"Use $conn$ to execute SQL (query all columns in the view_item_statistics table based on $date$ and $item_id$), get all the query results, and print them. Use for loop to convert each item of the query result to dict, store it in list, and return the list.","public List getItemStatistic(JdbcTemplate conn,String date,String item_id){
List ret = conn.query(""select * from view_item_statistic where date=? and item_id= ?"", new Object[]{date,item_id}, new BeanPropertyRowMapper(List.class));
System.out.println(ret);
return ret;
}"
14092,Use the java expression to execute the SQL statement through the $conn$ connection: Query all the data in the $Model$ table where timestamp is greater than $mydatevar$ and return the query result.,"public List<Object> sync(EntityManager conn, Root<Object> Model, int mydatevar){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Model).where(cb.gt(Model.get(""timestamp""), mydatevar));
List<Object> a = conn.createQuery(cq).getResultList();
return a;
}"
11422,"Set SQL (query all columns in the one_rows table based on $one_row_id$), execute SQL based on $conn$ and get the first piece of data. Set assertion to determine whether the query result length is equal to 1, and return the data.","public Object selectValue(JdbcTemplate conn,String one_row_id){
List one_row = conn.query(""select * from one_rows where one_row_id = ?"", new Object[]{one_row_id}, new BeanPropertyRowMapper(List.class));
assert one_row.size()==1;
return one_row.get(0);
}"
13752,Execute SQL with $conn$ (query the num_hh column in the households_temp table according to $zone_id$) and return all the obtained data.,"public List deleteHouseholds(JdbcTemplate conn,String zone_id){
List data = conn.query(""select num_hh FROM households_temp where zone_id = ?"", new Object[]{zone_id}, new BeanPropertyRowMapper(List.class));
return data;
}"
13604,Use java expressions to set up SQL: query the hazards in $tb$ where the type is $haz_type$. Use $conn$ to execute SQL and get all data. Use the for loop to convert the query result into a list and return it.,"public List<Object> getHazardsByType(EntityManager conn, Root<Object> tb, String haz_type){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(tb).where(cb.equal(tb.get(""type""),haz_type));
List<Object> result = conn.createQuery(cq).getResultList();
List hazards =new ArrayList();
for (Object o : result) {
hazards.add(o);
}
return hazards;
}"
13726,"Set SQL based on the java expression (query all columns in the $References$ table based on $Username$). Execute SQL through $conn$ and get all the data, set assertions to determine whether the query result length is not equal to 0, and return the query result.","public List<Object> selectThirdForm(EntityManager conn, Root<Object> References, String Username){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(References).where(cb.equal(References.get(""Username""),Username));
List<Object> rs = conn.createQuery(cq).getResultList();
assert rs.size()!=0;
return rs;
}"
13962,"Get the database engine through $db_uri$ and establish a connection. Set the SQL statement (query all columns in the computer table according to $name$), execute SQL to get all the data, make sure the database connection is closed, and return the execution result.","public List tearDown(DataSource db_uri, String name){
JdbcTemplate conn = new JdbcTemplate(db_uri);
List computers = conn.query(""select * from computer where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return computers;
}"
13128,"Execute SQL with $conn$ (get the username column in the users where id is $session$) and get the first piece of data, then return the rendered ""book_page.html"" with the row parameter as the 0th element of the query result.","public String bookPage(JdbcTemplate conn,String session,Model model){
List rows = conn.query(""select username from users where id = ?"", new Object[]{session}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""row"", JSONObject.parseObject(rows.get(0).toString()).get(0));
return ""book_page.html"";
}"
11367,"Use ORM method to execute SQL with $conn$ (query all the information in the $revobj$ table according to $revision$), and use for loop to print the query results one by one.","public void purgeRevision(EntityManager conn, Root<Object> revobj, String revision){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(revobj).where(cb.equal(revobj.get(""revision""),revision));
List<Object> items = conn.createQuery(cq).getResultList();
for (Object item : items) {
System.out.println(item);
}
}"
14213,"Use the java expression to set up the SQL statement: Query the PC_IP in the $pcinfor5$ table, execute the SQL through the $conn$ connection to get all the data, store the 0th element of each item of the query result as list and return.","public List selectDb(EntityManager conn, Root<Object> pcinfor5){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(pcinfor5);
List<Object> s = conn.createQuery(cq).getResultList();
List result =new ArrayList();
for (Object item : s) {
result.add(JSONObject.parseObject(item.toString()).get(0));
}
return result;
}"
13019,"Try to execute the following code: Use $DATABASE_URL$ to create a database engine; set up SQL (query all the information in the PROJECT_1_USERS table when USER_EMAIL equals $user_email$ and USER_PASSWORD equals $user_psswd$); execute SQL and get all the data; and finally return the query results. If an exception occurs, the exception information is printed.","public List loginUser(DataSource DATABASE_URL, String user_email,String user_psswd){
try {
JdbcTemplate engine = new JdbcTemplate(DATABASE_URL);
List user = engine.query(""select * from project_1_users where user_email = ? and user_password = ? "", new Object[]{user_email,user_psswd}, new BeanPropertyRowMapper(List.class));
return user;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
14066,"Use the $db$ to connect to the database, and use the java expression to execute SQL to query the data in the $table$ table, get all the data and return.","public List selectTable(EntityManager conn, Root<Object> table){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table);
List<Object> result = conn.createQuery(cq).getResultList();
return result;
}"
13025,"Set up SQL (query all columns in the users table based on $username$ and $password$). Use $conn$ to execute SQL and get the first piece of data. If the query result is None, return the rendered ""error.html"".Otherwise, return the rendered ""index.html"" and pass the query result to the user parameter.","public String sign(JdbcTemplate conn,String username,String password,Model model){
List user = conn.query(""select * from users where username= ? and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (user.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""user"", user);
return ""index.html"";
}
}"
13915,"Try to set SQL: Select the user_name data in query_users table according to $user_id$, use $db$ to execute SQL, get the first piece of data, set the assertion to determine that the length of the execution result is 0, close the database connection, and return the execution result. If there is an Exception, print exception message.","public Object selectUser(DataSource db, String user_id){
try {
JdbcTemplate engine = new JdbcTemplate(db);
List user_names = engine.query(""select user_name from query_users where user_id = ? "", new Object[]{user_id}, new BeanPropertyRowMapper(List.class));
assert user_names.size()==0;
return user_names.get(0);
} catch (Exception e){
e.printStackTrace();
return null;
}
}"
11135,"Create a configured Session class with a bind parameter of $engine$ and instantiate it. Use a java expression to set the SQL statement to query all the data in $incremental_record$ by $id$ and execute the SQL statement. The query results are iterated through the for loop, each item of the query results is converted to dict storage, and the converted storage results are printed. Finally, all query results are returned.","public List queryOldRecs(EntityManager engine, Root<Object> incremental_record, String id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(incremental_record).where(cb.equal(incremental_record.get(""id""),id));
List<Object> recs = engine.createQuery(cq).getResultList();
for (Object item : recs) {
System.out.println(item);
}
return recs;
}"
13470,"If the requested method is 'POST', then use $conn$ to execute the SQL (get the username column in the users table based on $id$), get all the data and return the query results. Finally return the rendered ""login.html"".","public Object index(HttpRequest request, JdbcTemplate conn, String id){
if (request.getMethod().equals(""POST"")){
List results = conn.query(""select username from users where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return ""login.html"";
}
else {
return results;
}
} else {
return ""login.html"";
}
}"
14244,"Connect the database through $db$. Use the java expression to execute the SQL statement (get the user_id in the $users$ table whose user_name is $name$) to get all the data, close the database connection, and return all the query results.","public List get(EntityManager db, Root<Object> users, String name){
CriteriaBuilder cb = db.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users).where(cb.equal(users.get(""user_name""),name));
List<Object> results = db.createQuery(cq).getResultList();
return results;
}"
11124,Use $host$ to get the database engine and establish a connection. Execute the SQL statement (query all columns in the Room where the ByggUnik is $ByggUnik$) to get all the data and return the query results.,"public List intPage(DataSource host, String ByggUnik){
JdbcTemplate engine = new JdbcTemplate(host);
List rooms = engine.query(""select * from room where byggunik= ? "", new Object[]{ByggUnik}, new BeanPropertyRowMapper(List.class));
return rooms;
}"
14216,"Create the database engine with $testdb_uri$ and execute the SQL (query all the id in the pgcrypto table based on $uri$), and return all the query results.","public List query(DataSource testdb_uri, String uri){
JdbcTemplate engine = new JdbcTemplate(testdb_uri);
List res = engine.query(""select id from pgcrypto where uri= ? "", new Object[]{uri}, new BeanPropertyRowMapper(List.class));
return res;
}"
13528,"Get the database engine through $app$ and connect the database. Set up SQL (query all columns in the users table according to $phone$), execute sql, get all the query results, and return the query results.","public List initializeDb(DataSource app, String phone){
JdbcTemplate con = new JdbcTemplate(app);
List res = con.query(""select * from users where phone= ? "", new Object[]{phone}, new BeanPropertyRowMapper(List.class));
return res;
}"
11399,"connect to the database according to $engine$. Execute SQL (query the team_name_abbr column in the team table according to $name$), get the first row of data, and return the 0th element of the query result.","public Object getTeamabbr(DataSource engine, String name){
JdbcTemplate conn = new JdbcTemplate(engine);
List res = conn.query(""select team_name_abbr from team where name = ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
13411,"Use $DATABASE_URL$ to get the database engine and execute the SQL (get the name column in the test table based on $id$) and get all the data, then use for loop to print each item of the query result","public void fetchTest(DataSource DATABASE_URL, String id){
JdbcTemplate conn = new JdbcTemplate(DATABASE_URL);
List test_rows = conn.query(""select name from test where id =? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object row : test_rows) {
System.out.println(row);
}
}"
11441,"If the request method is ""POST"", set SQL (query the title column in the posts table based on $category$), use $conn$ to execute SQL, get all the query results and return. Otherwise, return the rendered 'updateTable.html' page.","public Object selectTable(HttpRequest request, JdbcTemplate conn, String category){
if (request.getMethod().equals(""POST"")){
List titles = conn.query(""select title from posts where category = ?"", new Object[]{category}, new BeanPropertyRowMapper(List.class));
return titles;
} else {
return ""updateTable.html"";
}
}"
11664,"Use $pg_connstring$ to get the database engine and connect the database, then execute SQL (get the number of numunits column in the orderlines table where nodeid is $id$, totalprice is $price$ and YEAR is $year$), get all the data, then close the connection, and finally return the query statement.","public List searchNumunits(DataSource pg_connstring, String id,String price,String year){
JdbcTemplate conn = new JdbcTemplate(pg_connstring);
List nums = conn.query(""select count(numunits) from orderlines where nodeid=? and totalprice=? and YEAR=? "", new Object[]{id,price,year}, new BeanPropertyRowMapper(List.class));
return nums;
}"
11397,"If $user$ is not empty, set SQL based on the java expression: (query all columns in the $user_table$ table based on $user$). Execute SQL through $conn$ to get all the query results, and use for loop to traverse the query results, assign the 0th element to the value of the dictionary ""user"" key, assign the first element to the value of the ""sensor"" key, insert the dictionary containing the two key values into a list one by one, and return the list.","public List listAssociations(EntityManager conn, Root<Object> user_table, String user){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(user_table).where(cb.equal(user_table.get(""user""),user));
List<Object> results = conn.createQuery(cq).getResultList();
List toReturn = new ArrayList();
for (Object result : results) {
JSONObject jsonObject = new JSONObject();
jsonObject.put(""user"", JSONObject.parseObject(result.toString()).get(0));
jsonObject.put(""sensor"", JSONObject.parseObject(result.toString()).get(1));
toReturn.add(jsonObject);
}
return results;
}"
14031,Get the database engine and establish a connection through $db_url$. Execute the SQL statement (query all the blog_content data in the BLOG table according to $blog_id$) and ensure that the database connection is closed and return the query result.,"public List getQuery(DataSource db_url, String blog_id){
JdbcTemplate conn = new JdbcTemplate(db_url);
List items = conn.query(""select blog_content from BLOG where blog_id = ? "", new Object[]{blog_id}, new BeanPropertyRowMapper(List.class));
return items;
}"
11553,"Get the value of the parameter named book_id in the form. Use $conn$ to query all the columns in the books table with id as $id$ and get all the data, render and return ""review.html"", where the book_id parameter is the obtained book_id value and the book parameter is the query result.","public String review(JdbcTemplate conn, Model model, HttpRequest request){
String book_id = request.getMethodValue();
List book = conn.query(""select * from books where id = ?"", new Object[]{book_id}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book_id"", book_id);
model.addAttribute(""book"", book);
return ""review.html"";
}"
13389,"Use $conn$ to execute SQL (query all columns in the flights table according to $sunny$), get all the query results, output the query results, and return the rendered ""flights.html"" page, where the parameter sunny_val is set to the query results.","public String flightsFunc(JdbcTemplate conn,String sunny, Model model){
List sunny_val = conn.query(""select * from flights where sunny= ?"", new Object[]{sunny}, new BeanPropertyRowMapper(List.class));
System.out.println(sunny_val);
model.addAttribute(""sunny_val"", sunny_val);
return ""flights.html"";
}"
13883,Execute the SQL statement using $conn$ with the following contents: Query all name information in grp based on $username$ and $domain$. Use for loop to store each element of the query result in the list and return the contents of the list.,"public List getOne(JdbcTemplate conn,String username,String domain){
List res = conn.query(""select name from grp where username = ? and domain = ?"", new Object[]{username, domain}, new BeanPropertyRowMapper(List.class));
List res_list = new ArrayList();
for (Object row : res) {
res_list.add(row);
}
return res_list;
}"
11370,"Use $conn$ to execute SQL (query all the columns in the zones_all_distances_in_order table based on $orig_zone$), get all the data, use for loop to insert the query data one by one into a list and return this list.","public List getNearest5Zones(JdbcTemplate conn,String orig_zone){
List result = conn.query(""select * from zones_all_distances_in_order where orig_zone = ?"", new Object[]{orig_zone}, new BeanPropertyRowMapper(List.class));
List lst = new ArrayList();
for (Object row : result) {
lst.add(row);
}
return lst;
}"
13154,"Connect to the database using $db_connect$, execute the SQL (get all the columns in the customers where firstName is $firstName$, lastName is $lastName$, company is $company$, country is $country$, and email is $email$) , get the first data, and return the query result.","public List put(DataSource db_connect, String firstName,String lastName,String company,String country,String email){
JdbcTemplate conn = new JdbcTemplate(db_connect);
List res = conn.query(""select * from customers where firstName=? and lastName=? and company=? and country=? and email=? "", new Object[]{firstName,lastName,company,country,email}, new BeanPropertyRowMapper(List.class));
return res;
}"
13863,Use the $conn$ connection to execute the SQL statement with the following contents: Query the column in users through $uid$ and get the first piece of data. Return the query result.,"public List queryName(JdbcTemplate conn,String uid){
List userres = conn.query(""select * from users where id = ?"", new Object[]{uid}, new BeanPropertyRowMapper(List.class));
return userres;
}"
13888,Get the database engine through $DB_DOMAIN$ and establish the connection. Execute SQL statement (get all columns in database based on $new_db_name$) and fetch all data. Make sure database is closed and return all fetched data.,"public List selecTestDb(DataSource DB_DOMAIN, String new_db_name){
JdbcTemplate conn = new JdbcTemplate(DB_DOMAIN);
List out = conn.query(""select * from database where new_db_name = ? "", new Object[]{new_db_name}, new BeanPropertyRowMapper(List.class));
return out;
}"
14141,"Use the java expression to execute the SQL statement via $conn$: Query the cookie_name in the $cookies$ table and get the first piece of data, print the obtained data and return.","public List makeQueryOrdering(EntityManager conn, Root<Object> cookies){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(cookies);
List<Object> res = conn.createQuery(cq).getResultList();
System.out.println(res);
return res;
}"
11626,"If the request method is ""POST"", use $conn$ to execute SQL (get all the columns in the books table based on $title$) and get all the data. Use for loop to convert each item of the query result to a dictionary type and store it as a list type. If it is not a list type, return the rendered ""alert.html"", and finally return the rendered ""book.html"", where answer is the list content; otherwise, return the rendered ""index.html"".","public Object index(HttpRequest request, JdbcTemplate conn, String title,Model model){
if (request.getMethod().equals(""POST"")){
List result = conn.query(""select * from books where title = ?"", new Object[]{title}, new BeanPropertyRowMapper(List.class));
List answer = new ArrayList();
if (result.isEmpty()){
return ""alert.html"";
}
else {
model.addAttribute(""answer"",answer);
return ""book.html"";
}
} else {
return ""index.html"";
}
}"
13251,"If $experiment_id$ is None, return False, otherwise use $conn$ to execute the SQL statement (select the $cols$ column in the $modification$ where the id of experiment is $experiment_id$) and return after getting all the data.","public Object selectValue(EntityManager conn, Root<Object> modification, String experiment_id){
if (experiment_id==null){
return false;
}else {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(modification).where(cb.equal(modification.get(""experiment_id""),experiment_id));
List<Object> results = conn.createQuery(cq).getResultList();
return results;
}
}"
14184,"Execute SQL via $conn$: Query all columns in the sci_mod table and get all the data. For loop iterates through all query results, prints the 0th element by row and returns the 0th element of all query results.","public Object query(JdbcTemplate conn){
List data = conn.query(""select * from sci_mod"", new BeanPropertyRowMapper(List.class));
for (Object row : data) {
System.out.println(JSONObject.parseObject(row.toString()).get(0));
}
return data.get(0);
}"
13981,Set the SQL statement: Query all columns in the reviews table with signup_id of $signup_id$. Execute the SQL statement with $conn$ to get all the data. Convert each item of the query result into dict and store as list and return.,"public List api(JdbcTemplate conn,String signup_id){
List res = conn.query(""select * from reviews where signup_id = ?"", new Object[]{signup_id}, new BeanPropertyRowMapper(List.class));
return res;
}"
13774,"Use $conn$ to execute SQL (query the reviewtext column in the reviews table based on $book_id$ and $rating$), get all the query results, return the rendered ""book.html"" page, and set the parameter reviews as the query result.","public String booksWithId(JdbcTemplate conn,String book_id,String rating,Model model){
List reviews = conn.query(""select reviewtext from reviews where book_id = :book_id and rating = ?"", new Object[]{book_id,rating}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""reviews"",reviews);
return ""book.html"";
}"
13324,"If the request method is ""POST"", use $conn$ to execute SQL (query the information column in the users table based on the condition that username is $user$), get the first row of data, and return the query results; otherwise, redirect to the 'index' page.","public Object query_login(HttpRequest request, JdbcTemplate conn, String user){
if (request.getMethod().equals(""POST"")){
List user_infs = conn.query(""select information from users where username = ?"", new Object[]{user}, new BeanPropertyRowMapper(List.class));
return user_infs.get(0);
} else {
return ""index"";
}
}"
13847,"connect to the database based on $engine$. Execute the SQL statement with the following contents: Query the first piece of name in the t1 table based on $type$. If the query result is empty, return None; otherwise return the query results in the form of the dictionary.","public List findBeer(DataSource engine, String type){
JdbcTemplate con = new JdbcTemplate(engine);
List result = con.query(""select name from t1 where type = ? "", new Object[]{type}, new BeanPropertyRowMapper(List.class));
if (result.isEmpty()){
return null;
}else {
return result;
}
}"
14029,"Use the java expression to set the SQL statement (query all the data in the $Model$ table based on $ticker_id$), and use $conn$ to execute SQL to get all the data and return.","public List<Object> func3(EntityManager conn, Root<Object> Model, String ticker_id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(Model).where(cb.equal(Model.get(""ticker_id""),ticker_id));
List<Object> res = conn.createQuery(cq).getResultList();
return res;
}"
14091,"Query all the columns in the books table where the isbn is $isbn$ through $conn$, and get the first piece of data. If the query result is empty, return ""error"" through jsonify, and its content is ""Invalid isbn""; otherwise, return the query result through jsonify.","public JSONObject apiBookInfo(JdbcTemplate conn,String isbn){
List books = conn.query(""select * from books where isbn = ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
JSONObject jsonObject = new JSONObject();
jsonObject.put(""error"",""Invalid isbn"");
return jsonObject;
}else {
return JSONObject.parseObject(books.get(0).toString());
}
}"
14293,"Use $conn$ to query the first review_count in the books table whose isbn is $isbn$. Return ""error"" if there is no query result; otherwise, return the query result.","public Object bookApi(JdbcTemplate conn,String isbn){
List books = conn.query(""select review_count from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
if (books.isEmpty()){
return ""error"";
}else {
return books.get(0);
}
}"
11507,"Use $conn$ connection to execute SQL (query all columns in reviews by $user_id$ and $isbn$) and get all data, return all query results.","public List getReview(JdbcTemplate conn,String user_id,String isbn){
List reviews = conn.query(""select * from reviews where user_id = ? and isbn = ?"", new Object[]{user_id,isbn}, new BeanPropertyRowMapper(List.class));
return reviews;
}"
13829,"Execute SQL through $conn$ connection: Query all columns in the user table with $username$ and $password$ and get the first piece of data. If there is no query result, use raise to throw the exception with ""Error"" message; otherwise return the query result.","public String user(JdbcTemplate conn,String username,String password){
List<String> results = conn.query(""select * from user where username = ?and password = ?"", new Object[]{username,password}, new BeanPropertyRowMapper(List.class));
if (results.isEmpty()){
return ""Error"";
}else {
return results.get(0);
}
}"
11061,"Try to use $conn$ to execute SQL (query the pwd information in the bt table based on $devid$) and return the execution result. If an exception occurs, pass directly. Finally, close the connection.","public List bindTable(JdbcTemplate conn,String devid){
try {
List pwds = conn.query(""select pwd from bt where devid= ?"", new Object[]{devid}, new BeanPropertyRowMapper(List.class));
return pwds;
}catch (Exception e){
return null;
}
}"
11412,"Open and read the file ""flights.csv"", loop the 'origin' and 'destination' in the file, use $conn$ to execute the SQL (query the duration column in the flights table based on 'origin' and 'destination' of each piece), get all the query results and print.","public void main(JdbcTemplate conn){
String filePath = ""flights.csv"";
try (Scanner sc = new Scanner(new FileReader(filePath))) {
while (sc.hasNextLine()) {
String origin = sc.nextLine();
String destination = sc.nextLine();
List time = conn.query(""select duration from flights where origin = ? and destination = ?"", new Object[]{origin,destination}, new BeanPropertyRowMapper(List.class));
System.out.println(time);
}
}catch (FileNotFoundException e) {
e.printStackTrace();
}
}"
14033,"Use $conn$ to execute the SQL statement: Query all sampleid data in the Samples_metadata table. If the query result length in list is 1, return the query result; otherwise, use for loop to store every element in the query result intolist, use jsonify to process list content and return.","public List names(JdbcTemplate conn){
List new_name_list =new ArrayList();
List name_list = conn.query(""select sampleid from samples_metadata"", new BeanPropertyRowMapper(List.class));
if (name_list.size()==1){
return name_list;
}else {
for (Object name : name_list) {
new_name_list.add(name);

}
return JSONObject.parseArray(new_name_list.toString());
}
}"
13196,"Use $admin_uri$ to get the database engine and connect to the database, then execute the SQL (get all the columns in the database table where $database='transit'$ is $database='transit'$ and $owner='transit'$ is $owner='transit'$) and get all the data, and finally return the query results.","public List createDatabase(DataSource admin_uri, String owner,String database){
JdbcTemplate conn = new JdbcTemplate(admin_uri);
List res = conn.query(""select * from database where database=? and owner= ? "", new Object[]{owner,database}, new BeanPropertyRowMapper(List.class));
return res;
}"
13347,"connect the database according to $engine$. Execute the SQL statement (query all the columns in the Bars table according to $bar_id$), get all the data, use for loop to convert each item of the query results to dict, store it in list and return.","public List getBars(DataSource engine, String bar_id){
JdbcTemplate con = new JdbcTemplate(engine);
List rs = con.query(""select * from bars where bar_id= ? "", new Object[]{bar_id}, new BeanPropertyRowMapper(List.class));
return rs;
}"
14238,Get the database engine (the echo parameter is False) through $databaseUrl$ and establish a connection. Execute the SQL statement (query all the location data in the earthquake table based on $name$) and return the query results.,"public List getData(DataSource databaseUrl, String name){
JdbcTemplate conn = new JdbcTemplate(databaseUrl);
List res = conn.query(""select location from earthquake where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
return res;
}"
13985,"Set the SQL statement: Query the origin data in the flights table with 'destination': $des$, and use $conn$ to execute the SQL statement to get all the data. For loop iterates through the execution result and prints.","public void selectOrigin(JdbcTemplate conn,String des){
List res = conn.query(""select origin from flights where destination = ?"", new Object[]{des}, new BeanPropertyRowMapper(List.class));
for (Object r : res) {
System.out.println(r);
}
}"
13783,"If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the reviewbooks table based on $avg_rating$ and $message$), get all the query results. Return the query results if there is query data; otherwise, return False.","public Object books(HttpRequest request, JdbcTemplate conn, String avg_rating, String message){
if (request.getMethod().equals(""POST"")){
List check = conn.query(""select * from reviewbooks where avg_rating=? and message= ?"", new Object[]{avg_rating,message}, new BeanPropertyRowMapper(List.class));
if (check.isEmpty()){
return false;
}
else {
return check;
}
} else {
return false;
}
}"
13164,"Use $databasePath$ to get the database engine and connect to the database, where the echo parameter is True, execute SQL (get the week column intableh where id is $id$) , get the first data, and return the query result.","public Object select(DataSource databasePath, String id){
JdbcTemplate connection = new JdbcTemplate(databasePath);
List results = connection.query(""select week from tableh where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return results.get(0);
}"
13820," connect to the database based on $engine$, query all columns in the users table based on $email$ and get all the data. Store the query results as list. If the length of list is 0, then return False; otherwise return the list.","public Object selectSignin(DataSource engine, String email){
JdbcTemplate con = new JdbcTemplate(engine);
List im = con.query(""select * from users where email = ? "", new Object[]{email}, new BeanPropertyRowMapper(List.class));
List l =new ArrayList();
for (Object item : im) {
l.add(item);
}
if (l.size()==0){
return false;
}else {
return l;
}
}"
13707,"Use $engine$ to get the connection and set the SQL with the java expression (query all columns in $parameters$ table based on $id$). Use the acquired connection to execute the SQL and get all the data. Finally, return the query result.","public List<Object> dnsEdit(EntityManager engine, Root<Object> parameters, String id){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(parameters).where(cb.equal(parameters.get(""id""),id));
List<Object> result = engine.createQuery(cq).getResultList();
return result;
}"
14171,"Execute the SQL statement via with $engine$ (query all columns in the us_healthcare table) to get all the data. Use for loop to iterate through the query results. Assign the 0th and 1st element of each item in the query to 'year_cost' and 'per_cap_cost' respectively, and store them in 'list'. Use jsonify to process the list content and return it.","public JSONArray healthcareCost(JdbcTemplate engine){
List healthcareData = engine.query(""select * from us_healthcare"", new BeanPropertyRowMapper(List.class));
List returnData = new ArrayList();
for (Object row : healthcareData) {
JSONObject jsonObject = new JSONObject();
jsonObject.put(""year_cost"", JSONObject.parseObject(row.toString()).get(0));
jsonObject.put(""per_cap_cost"", JSONObject.parseObject(row.toString()).get(1));
returnData.add(jsonObject);
}
return JSONObject.parseArray(returnData.toString());
}"
11235,"Get the database engine via $host$, execute the SQL statement (get all the columns in the ROLE based on $dirk_gently$), get all the data, and finally return the obtained result.","public List teardownModule(DataSource host, String dirk_gently){
JdbcTemplate engine = new JdbcTemplate(host);
List res = engine.query(""select * from ROLE where dirk_gently= ? "", new Object[]{dirk_gently}, new BeanPropertyRowMapper(List.class));
return res;
}"
13146,"Execute the SQL (get the date column in the books where the name of user is $username$) with $conn$ and get all the data, return the query results if they are true.","public List main(JdbcTemplate conn,String username){
List res = conn.query(""select date from books where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
14039,"Use $conn$ to execute the SQL statement: get all the columns from the messfee table, get all the data, render and return 'transaction.html', where the result parameter is the query result.","public String transaction(JdbcTemplate conn,Model model){
List result = conn.query(""select * from messfee"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""result"", result);
return ""transaction.html"";
}"
11536,"Try to use the java expression to Set up SQL: Query all value in the $meta$ table with key as $key$, use $conn$ connection to execute SQL statement to get data and return query results. If ValueError exception occurs, print the exception message.","public List<Object> getInfo(EntityManager conn, Root<Object> meta, String key){
try {
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(meta).where(cb.equal(meta.get(""key""),key));
List<Object> result = conn.createQuery(cq).getResultList();
return result;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13717,"Get the database engine through $url$ and set the echo parameter to True. Set sql (query the values column in the zoo table based on $critter$, $count$ and $damages$), execute SQL, get the first piece of data, and return the query results.","public Object makeDbtable(DataSource url, String critter,String count,String damages){
JdbcTemplate engine = new JdbcTemplate(url);
List res = engine.query(""select values from zoo where critter = ? and count = ? and damages = ? "", new Object[]{critter,count,damages}, new BeanPropertyRowMapper(List.class));
return res.get(0);
}"
13205,"Try to use $conn$ to execute SQL (get all the columns in the TABLE where value is $value$) to get all the data and return. If Exception Exception Exception occurs during execution, pass directly.","public List selectValue(JdbcTemplate conn,String value){
try {
List results = conn.query(""select * from table where value = ?"", new Object[]{value}, new BeanPropertyRowMapper(List.class));
return results;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
13553,"Execute SQL with $conn$ (query all columns in the school table where username is $user_log$) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""flight.html"" page, where the parameter flight is the query result that returns.","public String login(JdbcTemplate conn,String user_log,Model model){
List schools = conn.query(""select * from school where username= ?"", new Object[]{user_log}, new BeanPropertyRowMapper(List.class));
if (schools.isEmpty()){
return ""error.html"";
}else {
model.addAttribute(""flight"", schools.get(0));
return ""flight.html"";
}
}"
13643,"If the username exists, the subsequent code is executed. Set the SQL (query for password information in the User table when the Username is $username$) , execute the SQL using $db$ and get the first data. If the result of the query is None, the rendered 'error.html' is returned. Otherwise, return the rendered ""success.html"".","public String login(JdbcTemplate db,String username){
if (username==null){
return ""error.html"";
}else {
List valid = db.query(""select password from user where username= ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (valid.isEmpty()){
return ""error.html"";
}else {
return ""success.html"";
}
}
}"
11248,"Use $conn$ to execute SQL (get geoguide_id column in dataset based on $idr$) and get all the data, finally store the 0th element of each item of query result as list and return.","public List getPointsIdInIdr(JdbcTemplate conn,String idr){
List cursor = conn.query(""select geoguide_id from dataset where idr = ?"", new Object[]{idr}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object r : cursor) {
list.add(JSONObject.parseObject(r.toString()).get(0));
}
return list;
}"
14282,"Use $sqlEngine$ to connect to the database and execute the SQL statement: Query the title data in the redditWeightTable table based on $username$, convert all acquired data to DataFrame type and return it.","public List loadData(DataSource sqlEngine, String username){
JdbcTemplate con = new JdbcTemplate(sqlEngine);
List df = con.query(""select title from redditweighttable where username= ? "", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return df;
}"
13371,"Use $connection$ to get a cursor, execute SQL (query the password column in the users table based on $username$ and $phone$), get all the query results, close the connection, and return the query results.","public List adminAccount(JdbcTemplate connection,String username,String phone){
List account = connection.query(""select password from users where username=? and phone= ?"", new Object[]{username,phone}, new BeanPropertyRowMapper(List.class));
return account;
}"
11352,"Use $db$ to execute SQL (query the first piece of data of all the information in the books table based on $isbn$) as the value of the parameter book; use $db$ to execute SQL (query the first row of data in the reviews table based on $isbn$ and $review_user$) as the value of the parameter exist_review, and return the rendered 'result.html' page, where the parameters are book and exist_review.","public String review(JdbcTemplate db,String isbn,String review_user,Model model){
List books = db.query(""select * from books where isbn= ?"", new Object[]{isbn}, new BeanPropertyRowMapper(List.class));
List exist_reviews = db.query(""select * from reviews where isbn=? and review_user= ?"", new Object[]{isbn, review_user}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""book"", books.get(0));
model.addAttribute(""exist_review"",exist_reviews.get(0) );
return ""result.html"";
}"
13096,Set SQL in java expressions: Query bar in $test$ table based on $id$. Use $conn$ to execute SQL and get all data. Finally return the query results.,"public List<Object> testComputed(EntityManager conn, Root<Object> test, String id){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(test).where(cb.equal(test.get(""id""),id));
List<Object> bars = conn.createQuery(cq).getResultList();
return bars;
}"
14267,"Set up SQL (query the webpage data in the Website table), execute SQL to get all the data through the $connection$ connection, and return the obtained data.","public List insertWebsite(JdbcTemplate connection){
List res = connection.query(""select webpage from Website"", new BeanPropertyRowMapper(List.class));
return res;
}"
11480,"If the request method is ""POST"", set SQL (query all the information in the users table based on $username$). Use $conn$ to execute SQL, get the first piece of data, and return the query result. Otherwise, return the rendered ""register.html"" page.","public Object selectValue(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List users = conn.query(""select * from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
return users.get(0);
} else {
return ""register.html"";
}
}"
13421,"connect to the database through $engine$, then use the ORM method to get the counts of all the columns in the $table$ table and get all the data. Finally return the result obtained by the SQL statement.","public List<Object> getCount(EntityManager engine, Root<Object> table){
CriteriaBuilder cb = engine.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(table);
List<Object> r = engine.createQuery(cq).getResultList();
return r;
}"
11400,"Use $conn$ to execute SQL (query the pearlin column in the flights table according to $nation$), get the first query result, output the data, and return the rendered 'index.html' page, where the parameter flights is the query result.","public String index(JdbcTemplate conn,String nation,Model model){
List results = conn.query(""select pearlin from flights where nation = ?"", new Object[]{nation}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
model.addAttribute(""flights"", results);
return ""index.html"";
}"
13215,"If the request method is 'GET', render and return ""index.html"". If the request method is ""POST"", then use $conn$ to execute the SQL statement (query all the columns in the books where isbn is $isbn$ and title is $title$) , get all the data, render and return ""search.html"" with the rows parameter as the result of the query.","public Object selectValue(HttpRequest request, JdbcTemplate conn, String isbn,String title,Model model){
if (request.getMethod().equals(""POST"")){
List results = conn.query(""select * from books where isbn =? and title = ?"", new Object[]{isbn, title}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rows"", results);
return ""search.html"";
} else {
return ""index.html"";
}
}"
13577,"Establish a connection through $e$. Execute the SQL statement (query the date column in the JPY table according to $user$) and get all the data. Use for loop to convert each item of the query result into dict, and store it in list, and return the list.","public List get(DataSource e, String user){
JdbcTemplate engine = new JdbcTemplate(e);
List query = engine.query(""select date from JPY where user= ? "", new Object[]{user}, new BeanPropertyRowMapper(List.class));
return query;
}"
11112,"Get the database engine using $address$. Start a connection based on the database engine obtained. Then query all player_headshot in the players table where name is $name$, and print all query results row by row through the for loop.","public void getPlayerImage(DataSource address, String name){
JdbcTemplate conn = new JdbcTemplate(address);
List headshot = conn.query(""select player_headshot from players where name= ? "", new Object[]{name}, new BeanPropertyRowMapper(List.class));
for (Object row : headshot) {
System.out.println(row);
}
}"
13875,"Try to use $conn$ connection to execute SQL statement: Query all columns in the meishi_collection table through $id$ and get all the data. Output the query results using logging.info(), store the 0th element of each item of the query results as list and return it. If Exception occurs, output the exception message through logging.error().","public List selectValue(JdbcTemplate conn,String id){
List allRows = conn.query(""select * from meishi_collection where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
try {
List list = new ArrayList();
for (Object item : allRows) {
list.add(JSONObject.parseObject(item.toString()).get(0));
}
return list;
}catch (Exception e){
e.printStackTrace();
return null;
}
}"
11532,"Use the java expression to set the SQL statement to get all the id in $users_table$ based on $name$ , execute the SQL and get the data through $connection$ connection, and make sure the database connection is closed. If no data is fetched, return None; otherwise return all results in dict form.","public List<Object> getUser(EntityManager connection, Root<Object> users_table, String name){
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(users_table).where(cb.equal(users_table.get(""name""),name));
List<Object> found = connection.createQuery(cq).getResultList();
if (found.isEmpty()){
return null;
}else {
return found;
}
}"
13703,"Use $conn$ to execute SQL (query the crows information in the series table based on $name$), get all the data and print the query results.","public void test(JdbcTemplate conn,String name){
List yang = conn.query(""select crows from series where name = ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
System.out.println(yang);
}"
14051,"Connect to the database through $db_engine$, set the SQL statement: Query all the columns in the customers table based on $username$ and $password$, and execute the SQL statement to get the first piece of data. If the query result is empty, return None; otherwise return the query result.","public List getCustomer(DataSource db_engine, String username,String password){
JdbcTemplate engine = new JdbcTemplate(db_engine);
List res = engine.query(""select * from customers where username=? and password= ? "", new Object[]{ username, password}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
11413,"Set up the SQL (query the ticker_name column in the forecast table based on $future_date$), execute the SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list.","public List saveForecast(JdbcTemplate conn,String future_date){
List results = conn.query(""select ticker_name from forecast where future_date = ?"", new Object[]{future_date}, new BeanPropertyRowMapper(List.class));
List names = new ArrayList();
for (Object i : results) {
names.add(i);
}
return names;
}"
11025,"create a database connection based on $engine$. Try to execute the following code: Use, connect and execute SQL (query the result data in the result_dict table based on $status$) and get all the data. Set up a new dictionary, and store ""SUCCESS"" in the corresponding value of status in the dictionary. Store the 0th element of all query results in list. If an exception occurs, the exception information should be printed and the ""FAIL"" should be stored in the corresponding value of status in the dictionary. Finally, return the new dictionary and the generated list data.","public JSONObject executeSimple(DataSource engine, String status){
JSONObject jsonObject = new JSONObject();
List results = new ArrayList();
try {
JdbcTemplate conn = new JdbcTemplate(engine);
List texts = conn.query(""select result from result_dict where status= ? "", new Object[]{status}, new BeanPropertyRowMapper(List.class));
for (Object i : texts) {
results.add(JSONObject.parseObject(i.toString()).get(0));
}
jsonObject.put(""status"", ""SUCCESS"");
jsonObject.put(""results"", results);
}catch (Exception e){
e.printStackTrace();
jsonObject.put(""status"", ""SUCCESS"");
jsonObject.put(""results"", results);
}
return jsonObject;
}"
13671,"Create the database engine from the $DATABASEURI$ and get the connection.Execute the SQL (query all columns in the players table where ssn is $ssn$) according to $conn$ and get all the data. Return the rendered ""listplayer.html"" and passe query result to the rows parameter.","public String listPlayer(DataSource DATABASEURI, String ssn,Model model){
JdbcTemplate conn = new JdbcTemplate(DATABASEURI);
List player = conn.query(""select * from players where ssn = ? "", new Object[]{ssn}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""rows"", player);
return ""listplayer.html"";
}"
13927,"Set the SQL statement, which contains the following contents: Query the job data in the zhilian table whose company is $company$, use the $session$ connection to execute the SQL statement,get all the data, and print all the obtained data.","public void processItem(JdbcTemplate session,String company){
List results = session.query(""select job from zhilian where company =?"", new Object[]{company}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
}"
13119,"Use $conn$ to execute SQL (get all the columns in the secrets where id is $id$) and get all the data, then use the for loop to convert the tenth element of each item in the query result into a string type to be stored as a list, and then return the list content.","public List testSoft(JdbcTemplate conn,String id){
List results = conn.query(""select * from secrets where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
List secret_list = new ArrayList();
for (Object result : results) {
secret_list.add(JSONObject.parseObject(result.toString()).get(0));
}
return secret_list;
}"
13133,"Execute the SQL (get the column_name and column_type in the table_name where name is $name1$) with $conn$ and get all the data, and return the query results if they are true.","public List addColumnIfNotExist(JdbcTemplate conn,String name1){
List res = conn.query(""select column_name, column_type from table_name where name= ?"", new Object[]{name1}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res;
}
}"
14218,"Set the SQL statement (get the unique_id data in the ic_user table according to $email$), execute the SQL statement to get all the data through the $con$ connection, and return None iif there is no execution result. Otherwise, return the 0th element of the execution result.","public Object getUserIdFromEmail(JdbcTemplate conn,String email){
List res = conn.query(""select unique_id from ic_user where email = ?"", new Object[]{email}, new BeanPropertyRowMapper(List.class));
if (res.isEmpty()){
return null;
}else {
return res.get(0);
}
}"
11649,"Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, execute SQL (get the id column in the jam_post table where url is $url$, username is $uname$, and keyword is $word$), get all the data, and finally return the query result.","public List getPostid(DataSource DB_CONNECT_STRING, String url,String uname,String word){
JdbcTemplate engine = new JdbcTemplate(DB_CONNECT_STRING);
List pid = engine.query(""select id from jam_post where url=? and username=? and keyword= ? "", new Object[]{url,uname,word}, new BeanPropertyRowMapper(List.class));
return pid;
}"
14198,"If the request module sends the request as 'post', the SQL is executed via $conn$ (query the first email in users via $username$). If the query result is not empty, return the query result.","public Object register(HttpRequest request, JdbcTemplate conn, String username){
if (request.getMethod().equals(""POST"")){
List us = conn.query(""select email from users where username = ?"", new Object[]{username}, new BeanPropertyRowMapper(List.class));
if (us.isEmpty()){
return null;
}else {
return us.get(0);
}
} else {
return null;
}
}"
13821,"Use $connection$ to execute the SQL statement (query all columns in the TABLE table based on $Backends$) and get all the data. Make sure $connection$ is closed, store the query results as list and return it.","public List tearDown(JdbcTemplate connection,String Backends){
List res = connection.query(""select * from table where Backends = ?"", new Object[]{Backends}, new BeanPropertyRowMapper(List.class));
return res;
}"
13368,"Set sql with the string matching method (query the table_name column in the infor_tables table based on $table_schema$), execute SQL with $conn$, get all the query results, use for loop to traverse all the query results, insert them into a list and return the list.","public List getMergedTable(JdbcTemplate conn,String table_schema){
List rows = conn.query(""select table_name from infor_tables where table_schema= ?"", new Object[]{table_schema}, new BeanPropertyRowMapper(List.class));
List table_list = new ArrayList();
for (Object row : rows) {
table_list.add(row);
}
return table_list;
}"
14145,"Set up SQL statement: Query all 'name' with 'id': $ID$ in crawl_files table, execute SQL by $conn$ to get all the data, use logging.debug() method to process the result of execution statement and return the result of execution statement.","public List getQuery(JdbcTemplate conn,String ID){
List results = conn.query(""select name from crawl_files where id= ?"", new Object[]{ID}, new BeanPropertyRowMapper(List.class));
System.out.println(results);
return results;
}"
14149,"Execute SQL via $conn$ (query all columns from the reviews table) to get the first data, render and return ""index.html"", where the res parameter is the first obtained data.","public String index(JdbcTemplate conn,Model model){
List rt = conn.query(""select * from reviews"", new BeanPropertyRowMapper(List.class));
model.addAttribute(""res"",rt);
return ""index.html"";
}"
13228,"Get the database engine using $db_conn$. Try to connect to the DATABASE and use the connection to execute the SQL statement (query all columns in the DATABASE) to get all the data and return it. Finally, use the dispose method to disconnect the database.","public List searchDATABASE(DataSource db_conn){
JdbcTemplate engine = new JdbcTemplate(db_conn);
try {
List DATABASEresults = engine.query(""select * from database "", new BeanPropertyRowMapper(List.class));
return DATABASEresults;
}finally {
return null;
}
}"
11079,Use $conn$ to execute SQL (query the ID in the Students table based on $StuName$) and get all the data. Close the data connection and convert each item in the query result to a dict and return.,"public List queryPage(JdbcTemplate conn,String StuName){
List resID = conn.query(""select id from students where stuname= ?"", new Object[]{StuName}, new BeanPropertyRowMapper(List.class));
return resID;
}"
11431,"Set up SQL based on the java expression: (query country column in $wigle$ table based on $ssid$). Execute the SQL with $conn$ and get all the data, use for loop to iterate through and print the results of each query result.""","public void getSource(EntityManager conn, Root<Object> wigle, String ssid){
CriteriaBuilder cb = conn.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(wigle).where(cb.equal(wigle.get(""ssid""),ssid));
List<Object> countries = conn.createQuery(cq).getResultList();
for (Object res : countries) {
System.out.println(res);
}
}"
14105,"Set up the SQL statement (use the format () function to output string in a format way and query all columns in the string $table$). Use $db_engine$ to connect the database and try to execute the SQL statement, if Exception, print the abnormal information; otherwise, use for loop traversal to query the results, print the query results, and close them.""","public void printAllData(DataSource db_engine, String table){
JdbcTemplate connection = new JdbcTemplate(db_engine);
try {
List result = connection.query(""select * from ? "", new Object[]{table}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(row);
}
}catch (Exception e){
e.printStackTrace();
}
}"
14055,"Try to use the java expression to set up SQL: To query the data in $articles_table$ through $author_snippet$, use $connection$ to execute SQL, get all the data, and return the obtained data. If Exception occurs, prints the exception message and return.""","public List<Object> displayArticlesByAuthor(EntityManager connection, Root<Object> articles_table, String author_snippet){
try {
CriteriaBuilder cb = connection.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(articles_table).where(cb.equal(articles_table.get(""author""),author_snippet));
List<Object> rp = connection.createQuery(cq).getResultList();
return rp;
} catch (Exception e){
e.printStackTrace();
return null;
}
}"
13864,"""Use $conn$ to execute SQL (get all columns in the noodles table based on $id$) and get all the data. Use for loop iterate through all query results, add the value corresponding to the stuff in each row to the string, and space it with newlines. Finally return the processed results.""","public String hello(JdbcTemplate conn,String id){
List result = conn.query(""select * from noodles where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
String return_value = """";
for (Object row : result) {
return_value += JSONObject.parseObject(row.toString()).getString(""stuff"")+""\n"";
}
return return_value;
}"
14056,"Use $url$ to get the database engine. Get the connection. Then set SQL: To query all columns in the event_details table that the 'email' is $email$, and execute SQL to get all the data. Use for loop to store each element in the query result into list and return the list content.""","public List viewMyEvents(DataSource url, String email){
JdbcTemplate conn = new JdbcTemplate(url);
List events = conn.query(""select * from event_details where email = ? "", new Object[]{email}, new BeanPropertyRowMapper(List.class));
List events_json = new ArrayList();
for (Object event : events) {
events_json.add(event);
}
return events_json;
}"
11013,"Execute SQL with $conn$ (query price in test table based on $name$) and get all query results. If the query data exists, use redirect to redirect to the '/' page.""","public String get(JdbcTemplate conn,String name){
List price = conn.query(""select price from test where name= ?"", new Object[]{name}, new BeanPropertyRowMapper(List.class));
if (price.isEmpty()){
return null;
}else {
return ""/"";
}
}"
13952,"Set the SQL statement: Query the TABLE_NAME column in the TABLES table where TABLE_SCHEMA is $TABLE_SCHEMA$, execute SQL through $conn$ and get all the data.""","public List tableNames(JdbcTemplate conn,String TABLE_SCHEMA){
List tables = conn.query(""select table_name from tables wherE TABLE_SCHEMA = ?"", new Object[]{TABLE_SCHEMA}, new BeanPropertyRowMapper(List.class));
List names = new ArrayList();
for (Object table : tables) {
names.add(JSONObject.parseObject(table.toString()).getString(""TABLE_NAME""));
}
return names;
}"
13213,"If the request method is 'GET', render and return 'main.html'. Otherwise execute the SQL statement (query all columns in the books table when type equals $input$) using $conn$ and get all the data. Render and return 'main.html', where the results parameter is the result of the query.""","public String index(HttpRequest request, JdbcTemplate conn, String input,Model model){
if (request.getMethod().equals(""POST"")){
List results = conn.query(""select * from books where type = ?"", new Object[]{input}, new BeanPropertyRowMapper(List.class));
model.addAttribute(""results"", results);
return ""main.html"";
} else {
return ""main.html"";
}
}"
13906,"If $type_id$ is not empty, set the SQL statement: Query the id column in the options table according to $type_id$, use $conn$ to execute SQL statement, get all data, use for loop to convert each element in the query result to dict, store it in list, and return the list content.""","public List getListOption(JdbcTemplate conn,String type_id){
if (type_id != null){
List entries = conn.query(""select id from options where type_id = ?"", new Object[]{type_id}, new BeanPropertyRowMapper(List.class));
List json_row = new ArrayList();
for (Object en : entries) {
json_row.add(en);
}
return json_row;
}else {
return null;
}
}"
11627,"Use $db_string$ to get the database engine, execute SQL (get the venue_id column in the Show table according to $artist_id$), get all the data, and finally return the query result.""","public List upgrade(DataSource db_string, String artist_id){
JdbcTemplate engine = new JdbcTemplate(db_string);
List ids = engine.query(""select venue_id from Show where artist_id= ? "", new Object[]{artist_id}, new BeanPropertyRowMapper(List.class));
return ids;
}"
13555,"Set SQL based on the java expression (query the id column in the $status_of_table$ table based on $status$). Execute SQL through $session$ and get the first piece of data, print the query result, and return the 0th element of the query result.""","public Object insertStatus(EntityManager session, Root<Object> status_of_table, String status){
CriteriaBuilder cb = session.getCriteriaBuilder();
CriteriaQuery<Object> cq = cb.createQuery(Object.class);
cq.select(status_of_table).where(cb.equal(status_of_table.get(""status""),status));
List<Object> results = session.createQuery(cq).getResultList();
System.out.println(results.get(0));
return JSONObject.parseObject(results.get(0).toString()).get(0);
}"
13056,"Set SQL (query all columns in the model_evaltable when features equals $gen_age_features$,test_score equals $test_score$). Use $conn$ to execute SQL and get all the data. Finally, return the results after being processed by jsonify.""","public JSONArray model(JdbcTemplate conn,String gen_age_features,String test_score){
List texts = conn.query(""select * from model_eval where features = ? and test_score = ?"", new Object[]{gen_age_features,test_score}, new BeanPropertyRowMapper(List.class));
return JSONObject.parseArray(texts.toString());
}"
13105,"Execute the SQL using $conn$ (get all the information in the table from Bars where b is $b$ and casino is $casino$) and grab all the data, then return the query results.""","public List getBar(JdbcTemplate conn,String b,String casino){
List rs = conn.query(""select * from Bars where Bar=? and casino= ?"", new Object[]{b,casino}, new BeanPropertyRowMapper(List.class));
return rs;
}"
11320,"Try to use the format string matching method to set SQL (query all columns in the mysql table according to $result_set$), use $conn$ to execute the SQL to query for the first piece of data, and return the query result. If an exception occurs during execution, return """"Query failed"""".""","public Object sqlalchemyMysqlQuery(JdbcTemplate conn,String result_set){
try {
List msg = conn.query(""select * from mysql where result_set = ?"", new Object[]{result_set}, new BeanPropertyRowMapper(List.class));
return msg.get(0);
}catch (Exception e){
String msg = ""Query failed."";
return msg;
}
}"
11371,"Set up sql (query all columns in the MetaData table based on $engine$ and $testtable$), execute SQL with $conn$ and get all the data, use for loop to convert the data into list and return.""","public List testInsertedPrimaryKey(JdbcTemplate conn,String engine,String testtable){
List le = conn.query(""select * from MetaData where engine = ? and testtable = ?"", new Object[]{engine,testtable}, new BeanPropertyRowMapper(List.class));
List list = new ArrayList();
for (Object l : le) {
list.add(l);
}
return list;
}"
13957,"connect the database through $engine$. Set SQL (get the description data in the Customer table based on $id$). Execute SQL, get all the data, use for loop to traverse the execution result, and print the 0th element of the execution result.""","public void testCoreFetchall(DataSource engine, String id){
JdbcTemplate conn = new JdbcTemplate(engine);
List result = conn.query(""select description from customer where id = ? "", new Object[]{id}, new BeanPropertyRowMapper(List.class));
for (Object row : result) {
System.out.println(JSONObject.parseObject(row.toString()).get(0));
}
}"
13925,"If the request module sends the request in a GET method, set the statement to: Query the average_score data in the books table where author is $author$, use the $conn$ connection to execute SQL, get all the data and return all the obtained data.""","public List jsonApi(HttpRequest request, JdbcTemplate conn, String author){
if (request.getMethod().equals(""GET"")){
List average_scores = conn.query(""select average_score from books where author = ?"", new Object[]{author}, new BeanPropertyRowMapper(List.class));
return average_scores;
} else {
return null;
}
}"
13229,"Try to set up SQL (query all columns of TABLE where id is $id$) , execute the SQL statement with $conn$, obtain all the data and return. If an Exception occurs, return False.""","public Object selectData(JdbcTemplate conn,String id){
try {
List data_results = conn.query(""select * from table where id = ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return data_results;
}catch (Exception e){
return false;
}
}"
11674,"Use the cursor method of $db$ to execute SQL (get the totalvotes column in the cars table according to $id$), get the first piece of data, and finally return the query result.""","public List findTotalVotes(JdbcTemplate db,String id){
List ts = db.query(""select totalvotes from cars where id= ?"", new Object[]{id}, new BeanPropertyRowMapper(List.class));
return ts;
}"
