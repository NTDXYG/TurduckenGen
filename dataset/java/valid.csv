nl,code,syntax_nl,syntax_code
"Generate origin code: Use $engine$ to get the database connection. Use the connection to execute SQL ( query all columns in the sometable table ) and get all the data. Finally, return the query results in json.","public JSONObject testInvalidate ( DataSource engine ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > res = conn . query ( "" select * from sometable "" , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user "" , res ) ; } } ) ; return json ; }","Generate syntax code: Use $engine$ to get the database connection. Use the connection to execute SQL ( query all columns in the sometable table ) and get all the data. Finally, return the query results in json.","<met> <mod> public </mod> type_identifier testInvalidate <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and make the connection via $host$, execute the SQL statement ( query all the weight_col in the TABLE where arm_col is $arm_col$ ) and get all the data. Return the result of the query in json.","public JSONObject selectValue ( DataSource host , String armcol ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List < Object > res = conn . query ( "" select weight_col from where arm_col = ? "" , new Object [ ] { armcol } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user "" , res ) ; } } ) ; return json ; }","Generate syntax code: Get the database engine and make the connection via $host$, execute the SQL statement ( query all the weight_col in the TABLE where arm_col is $arm_col$ ) and get all the data. Return the result of the query in json.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier host </for> , <for> type_identifier armcol </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { armcol } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $url$. Execute the SQL statement ( query the glass column in the DATABASE table according to $db_name$ ) , get all the data, and use for loop to convert each query result to map, store it in list and return.","public List getSqlalchemyEngine ( DataSource url , String dbname ) { JdbcTemplate conn = new JdbcTemplate ( url ) ; List < Object > query = conn . query ( "" select glass from database where db_name = ? "" , new Object [ ] { dbname } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > glasses = new ArrayList < > ( ) ; for ( Object r : query ) { glasses . add ( new HashMap ( ) { { put ( "" glass "" , r ) ; } } ) ; } return glasses ; }","Generate syntax code: Get the database engine through $url$. Execute the SQL statement ( query the glass column in the DATABASE table according to $db_name$ ) , get all the data, and use for loop to convert each query result to map, store it in list and return.","<met> <mod> public </mod> type_identifier getSqlalchemyEngine <for> ( <for> type_identifier url </for> , <for> type_identifier dbname </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( url ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { dbname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> glasses = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : query ) <blo> { <exp> <met> glasses . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return glasses ; </ret> } </blo> </met>"
"Generate origin code: Use the Java expression to set up a SQL statement: Query the $table$ table for the id data with 'name': $name$, and execute the SQL to get the first data by $conn$. Finally, return the execution result.","public List < Object > write ( EntityManager conn , Root < Object > table , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( table . get ( "" c "" ) . get ( "" id "" ) ) . where ( cb . equal ( table . get ( "" c "" ) . get ( "" name "" ) , name ) ) ; List < Object > record = conn . createQuery ( cq ) . getResultList ( ) ; return ( List < Object > ) record . get ( 0 ) ; }","Generate syntax code: Use the Java expression to set up a SQL statement: Query the $table$ table for the id data with 'name': $name$, and execute the SQL to get the first data by $conn$. Finally, return the execution result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> write <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( <met> <met> table . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> table . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> record = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <cas> ( <gen> type_identifier <typ> < type_identifier > </typ> </gen> ) <met> record . get <arg> ( decimal_integer_literal ) </arg> </met> </cas> ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement to get all columns in the youtube_video table based on $data$, use $conn$ connection to execute SQL and get all the data. Render and return 'index.html', where the cpl parameter is all the query results.","public String getData ( Model model , JdbcTemplate conn , String data ) { String register_sql = "" select * from youtube_video where data = ? "" ; List < Object > alldata = conn . query ( register_sql , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" cpl "" , alldata ) ; return "" index.html "" ; }","Generate syntax code: Set the SQL statement to get all columns in the youtube_video table based on $data$, use $conn$ connection to execute SQL and get all the data. Render and return 'index.html', where the cpl parameter is all the query results.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier data </for> ) </for> <blo> { <loc> type_identifier <var> register_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> alldata = <met> conn . query <arg> ( register_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { data } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , alldata ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to connect to the database using $connection$, executSQL SQL ( query all names in the student table where score is $score$ ) , and get and print all query results. If a BaseException exception occurs during execution, the Error message 'Connection Error!'.","public void getScoreIn ( JdbcTemplate connection , String score ) { try { List < Object > res = connection . query ( "" select name from student where score = ? "" , new Object [ ] { score } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res ) ; } catch ( Exception e ) { System . out . println ( "" Connection Error! "" ) ; } }","Generate syntax code: Try to connect to the database using $connection$, executSQL SQL ( query all names in the student table where score is $score$ ) , and get and print all query results. If a BaseException exception occurs during execution, the Error message 'Connection Error!'.","<met> <mod> public </mod> void_type getScoreIn <for> ( <for> type_identifier connection </for> , <for> type_identifier score </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { score } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $DBUSER$ to create the database engine. Try to use the engine to execute SQL ( query all the columns in the $fluffi_gm$ table based on $stmt$ ) , get all the data, and return the query results. If an exception occurs, print the specific exception information.","public List < Object > getResult ( DataSource DBUSER , String stmt ) { try { JdbcTemplate engine = new JdbcTemplate ( DBUSER ) ; List < Object > res = engine . query ( "" select * from fluffi_gm where stmt = ? "" , new Object [ ] { stmt } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Use $DBUSER$ to create the database engine. Try to use the engine to execute SQL ( query all the columns in the $fluffi_gm$ table based on $stmt$ ) , get all the data, and return the query results. If an exception occurs, print the specific exception information.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getResult <for> ( <for> type_identifier DBUSER </for> , <for> type_identifier stmt </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( DBUSER ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { stmt } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the typname column in the pg_catalog table based on $sqlite$ ) , get the first row of data, and return the query results in json.","public JSONObject typeLookup ( JdbcTemplate conn , String sqlite ) { List < Object > res = conn . query ( "" select typname from pg_catalog where sqlite = ? "" , new Object [ ] { sqlite } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" typname "" , res . get ( 0 ) ) ; } } ) ; return json ; }","Generate syntax code: Use $conn$ to execute SQL ( query the typname column in the pg_catalog table based on $sqlite$ ) , get the first row of data, and return the query results in json.","<met> <mod> public </mod> type_identifier typeLookup <for> ( <for> type_identifier conn </for> , <for> type_identifier sqlite </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sqlite } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
Generate origin code: Query all columns in CourseData where Name is $name$. Execute SQL with $conn$ and get all the data. Use A for loop to convert the result to a list and return.,"public List getAllCourseData ( JdbcTemplate conn , String name ) { List < Object > query = conn . query ( "" select * from CourseData where Name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > queries = new ArrayList < > ( ) ; for ( Object r : query ) { queries . add ( new HashMap ( ) { { put ( "" allcoursedata "" , r ) ; } } ) ; } return queries ; }",Generate syntax code: Query all columns in CourseData where Name is $name$. Execute SQL with $conn$ and get all the data. Use A for loop to convert the result to a list and return.,"<met> <mod> public </mod> type_identifier getAllCourseData <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> queries = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : query ) <blo> { <exp> <met> queries . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return queries ; </ret> } </blo> </met>"
"Generate origin code: Try to set SQL statement: Query all columns in habiencia table according to $year$, execute SQL to get all the data and return. If an Exception occurs, print the exception message.","public List < Object > derechohabientesByYear ( JdbcTemplate conn , String year ) { try { List < Object > res = conn . query ( "" select * from habiencia where year = ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Try to set SQL statement: Query all columns in habiencia table according to $year$, execute SQL to get all the data and return. If an Exception occurs, print the exception message.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> derechohabientesByYear <for> ( <for> type_identifier conn </for> , <for> type_identifier year </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get all the columns in the users_autoinc table where user_name is $name$ ) , get all the data, and use for loop to convert each item of the query result to a mapionary type and return.","public JSONArray searchAutonic ( JdbcTemplate db , String name ) { String sql = "" select * from users_autoinc where user_name = ? "" ; List < Object > res = db . query ( sql , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" autonic "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }","Generate syntax code: Use $db$ to execute SQL ( get all the columns in the users_autoinc table where user_name is $name$ ) , get all the data, and use for loop to convert each item of the query result to a mapionary type and return.","<met> <mod> public </mod> type_identifier searchAutonic <for> ( <for> type_identifier db </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> db . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <obj> new type_identifier <arg> ( result ) </arg> </obj> ; </ret> } </blo> </met>"
"Generate origin code: Establish a connection to the database through $db$. Set the SQL statement as a java expression: Get the data in the $users$ table based on $u_id$, and use database connection to execute the SQL statement to get all the data and return.","public List < Object > testKeys ( EntityManager conn , Root < Object > users , Integer uid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( users ) . where ( cb . equal ( users . get ( "" c "" ) . get ( "" user_id "" ) , uid ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; }","Generate syntax code: Establish a connection to the database through $db$. Set the SQL statement as a java expression: Get the data in the $users$ table based on $u_id$, and use database connection to execute the SQL statement to get all the data and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testKeys <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> users . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , uid ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Try to set up sql ( query the setval column in the data table based on $azienda_dest$ and $id_seq$ ) , use $conn$ to execute SQL and get all the data, and return the list that uses for loop to store the query results. If an exception occurs during execution, ""Fail!"" is printed.","public List syncaSequence ( JdbcTemplate conn , String azienda_dest , String id_seq ) { try { List < Object > query = conn . query ( "" select setval from data where lat = ? and lon = ? "" , new Object [ ] { azienda_dest , id_seq } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > seqs = new ArrayList < > ( ) ; for ( Object r : query ) { seqs . add ( new HashMap ( ) { { put ( "" seq "" , r ) ; } } ) ; } return seqs ; } catch ( Exception e ) { System . out . println ( "" Fail! "" ) ; return null ; } }","Generate syntax code: Try to set up sql ( query the setval column in the data table based on $azienda_dest$ and $id_seq$ ) , use $conn$ to execute SQL and get all the data, and return the list that uses for loop to store the query results. If an exception occurs during execution, ""Fail!"" is printed.","<met> <mod> public </mod> type_identifier syncaSequence <for> ( <for> type_identifier conn </for> , <for> type_identifier azienda_dest </for> , <for> type_identifier id_seq </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { azienda_dest , id_seq } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> seqs = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : query ) <blo> { <exp> <met> seqs . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return seqs ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute the SQL ( get all the columns in the flights where id is $id$ ) and get all the data, then return the query results, return the rendered 'error.html' if a ValueError occurs while executing.","public String book ( Model model , JdbcTemplate conn , Integer id ) { try { String register_sql = "" select * from flights where id = ? "" ; List < Object > res = conn . query ( register_sql , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" res "" , res ) ; return "" res.html "" ; } catch ( Error e ) { return "" error.html "" ; } }","Generate syntax code: Try to use $conn$ to execute the SQL ( get all the columns in the flights where id is $id$ ) and get all the data, then return the query results, return the rendered 'error.html' if a ValueError occurs while executing.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> register_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( register_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$ ( get all columns in the books table via $isbn$ ) and get all the data. If the obtained data does not exist, return Null; otherwise return all query results in json.","public JSONObject api ( JdbcTemplate conn , String isbn ) { List < Object > res = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( res == null ) { return null ; } else { json = new JSONObject ( new HashMap ( ) { { put ( "" res "" , res ) ; } } ) ; } return json ; }","Generate syntax code: Execute SQL via $conn$ ( get all columns in the books table via $isbn$ ) and get all the data. If the obtained data does not exist, return Null; otherwise return all query results in json.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <bin> res == null_literal </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement ( query all the col_string in the one_row_complex table where param is $param$ ) , set the assertion to determine that the length of the query result is greater than 0, and return all the query results in json.","public JSONObject testContain ( JdbcTemplate conn , String param ) { List < Object > res = conn . query ( "" select col_string from one_row_complex where param = ? "" , new Object [ ] { param } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" res "" , res ) ; } } ) ; return json ; }","Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query all the col_string in the one_row_complex table where param is $param$ ) , set the assertion to determine that the length of the query result is greater than 0, and return all the query results in json.","<met> <mod> public </mod> type_identifier testContain <for> ( <for> type_identifier conn </for> , <for> type_identifier param </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { param } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to execute SQL ( get all the columns in the users table based on $brand$ ) , get all the data and return the query result.","public List testSqlA ( DataSource engine , String brand ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > query = connection . query ( "" select * from users where brand = ? "" , new Object [ ] { brand } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > users = new ArrayList < > ( ) ; for ( Object r : query ) { users . add ( new HashMap ( ) { { put ( "" user "" , r ) ; } } ) ; } return users ; }","Generate syntax code: Use $engine$ to execute SQL ( get all the columns in the users table based on $brand$ ) , get all the data and return the query result.","<met> <mod> public </mod> type_identifier testSqlA <for> ( <for> type_identifier engine </for> , <for> type_identifier brand </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { brand } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : query ) <blo> { <exp> <met> users . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return users ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through $conn$ ( query all id in the pg_extension table whose extname is $extension$ ) . Set the assertion to determine the length of the query result is greater than 0, and return the query result in json.","public JSONObject testContain ( JdbcTemplate conn , String extension ) { List < Object > res = conn . query ( "" select id from pg_extension where extname = ? "" , new Object [ ] { extension } , new BeanPropertyRowMapper ( List . class ) ) ; assert res . size ( ) > 0 ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" res "" , res ) ; } } ) ; return json ; }","Generate syntax code: Execute the SQL statement through $conn$ ( query all id in the pg_extension table whose extname is $extension$ ) . Set the assertion to determine the length of the query result is greater than 0, and return the query result in json.","<met> <mod> public </mod> type_identifier testContain <for> ( <for> type_identifier conn </for> , <for> type_identifier extension </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { extension } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL according to the java expression ( get all the columns in the $table$ table where scorecolumn is $sc$ ) , get all the data, and finally return the query result.","public List < Object > getScorecolumn ( EntityManager db , Root < Object > table , String sc ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( table ) . where ( cb . equal ( table . get ( "" c "" ) . get ( "" scorecolumn "" ) , sc ) ) ; List < Object > datas = db . createQuery ( cq ) . getResultList ( ) ; return datas ; }","Generate syntax code: Use $db$ to execute SQL according to the java expression ( get all the columns in the $table$ table where scorecolumn is $sc$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getScorecolumn <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier sc </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> table . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , sc ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> datas = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return datas ; </ret> } </blo> </met>"
Generate origin code: Use $host$ to get the database connection. Execute SQL statement with the following content: query all columns in the tbl table based on $username$ and $password$ and get all data. Print the query results.,"public JSONArray example ( DataSource host , String username , String password ) { JdbcTemplate connection = new JdbcTemplate ( host ) ; String sql = "" select * from tbl where username = ? and password = ? "" ; List < Object > res = connection . query ( sql , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" res "" , r ) ; } } ) ; } System . out . println ( result ) ; return new JSONArray ( result ) ; }",Generate syntax code: Use $host$ to get the database connection. Execute SQL statement with the following content: query all columns in the tbl table based on $username$ and $password$ and get all data. Print the query results.,"<met> <mod> public </mod> type_identifier example <for> ( <for> type_identifier host </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> connection . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> <fie> System . out </fie> . println <arg> ( result ) </arg> </met> ; </exp> <ret> return <obj> new type_identifier <arg> ( result ) </arg> </obj> ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression: ( query $users$ table user_id column based on $displayname$ ) . Execute the SQL with $conn$ and get all the data, use for loop to iterate through each query result and print, and return the query result.","public List < Object > getSource ( EntityManager conn , Root < Object > users , String displayname ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( users . get ( "" c "" ) . get ( "" user_id "" ) ) . where ( cb . equal ( users . get ( "" c "" ) . get ( "" displayname "" ) , displayname ) ) ; List < Object > user_ids = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object row : user_ids ) { System . out . println ( row ) ; } return user_ids ; }","Generate syntax code: Set SQL based on the java expression: ( query $users$ table user_id column based on $displayname$ ) . Execute the SQL with $conn$ and get all the data, use for loop to iterate through each query result and print, and return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getSource <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier displayname </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( <met> <met> users . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> users . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , displayname ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user_ids = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row : user_ids ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <ret> return user_ids ; </ret> } </blo> </met>"
"Generate origin code: Connect the database with $engine$ and set SQL based on the java expression ( query all columns in the $parameters$ table based on $exp_id$ ) . Execute SQL and get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","public List < Object > gatherParams ( EntityManager engine , Root < Object > parameters , String exp_id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( parameters ) . where ( cb . equal ( parameters . get ( "" c "" ) . get ( "" exp_id "" ) , exp_id ) ) ; List < Object > recs = engine . createQuery ( cq ) . getResultList ( ) ; return recs ; }","Generate syntax code: Connect the database with $engine$ and set SQL based on the java expression ( query all columns in the $parameters$ table based on $exp_id$ ) . Execute SQL and get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> gatherParams <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> parameters </for> , <for> type_identifier exp_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( parameters ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> parameters . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , exp_id ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> recs = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return recs ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the books table based on $isbn$ ) and get all the data. If the query result length is equal to 0, return the {""error"": ""Invalid ISBN""} in json, otherwise return the query results in json.","public JSONObject api ( JdbcTemplate conn , String isbn ) { List < Object > apiresult = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( apiresult . size ( ) == 0 ) { json = new JSONObject ( new HashMap ( ) { { put ( "" error "" , "" Invalid ISBN "" ) ; } } ) ; } else { json = new JSONObject ( new HashMap ( ) { { put ( "" book "" , apiresult ) ; } } ) ; } return json ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the books table based on $isbn$ ) and get all the data. If the query result length is equal to 0, return the {""error"": ""Invalid ISBN""} in json, otherwise return the query results in json.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> apiresult = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <bin> <met> apiresult . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> else <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , apiresult ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement as follows: Query the id column in flight table whose name is $flightname$, use the $conn$ connection to execute SQL, get all the data, convert each item of the execution result to map, store it as list, and return.","public List selectValue ( JdbcTemplate conn , String flightname ) { List < Object > query = conn . query ( "" select id from flight where name = ? "" , new Object [ ] { flightname } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > ids = new ArrayList < > ( ) ; for ( Object r : query ) { ids . add ( new HashMap ( ) { { put ( "" id "" , r ) ; } } ) ; } return ids ; }","Generate syntax code: Set the SQL statement as follows: Query the id column in flight table whose name is $flightname$, use the $conn$ connection to execute SQL, get all the data, convert each item of the execution result to map, store it as list, and return.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier flightname </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flightname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ids = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : query ) <blo> { <exp> <met> ids . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ids ; </ret> } </blo> </met>"
Generate origin code: Set the SQL statement: query the tablename data in pg_tables where the name of schema is $schemaname$. Execute the SQL statement and return all query results using the $conn$ connection.,"public JSONObject getListOfTablesInDatabase ( JdbcTemplate conn , String schemaname ) { List < Object > res = conn . query ( "" select tablename from pg_tables where schemaname = ? "" , new Object [ ] { schemaname } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" table "" , res ) ; } } ) ; return json ; }",Generate syntax code: Set the SQL statement: query the tablename data in pg_tables where the name of schema is $schemaname$. Execute the SQL statement and return all query results using the $conn$ connection.,"<met> <mod> public </mod> type_identifier getListOfTablesInDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier schemaname </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schemaname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( query all the columns in the books where the ISBN is $book_isbn$ ) using $db$ and get the first data. Print query results. Return the rendered ""book.html"" and passe the query result to the result parameter.","public String book ( Model model , JdbcTemplate db , String book_isbn ) { String sql = "" select * from books where isbn = ? "" ; List < Object > result = db . query ( sql , new Object [ ] { book_isbn } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( result . get ( 0 ) ) ; model . addAttribute ( "" result "" , result ) ; return "" book.html "" ; }","Generate syntax code: Execute the SQL ( query all the columns in the books where the ISBN is $book_isbn$ ) using $db$ and get the first data. Print query results. Return the rendered ""book.html"" and passe the query result to the result parameter.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier book_isbn </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> db . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, set the SQL ( query all columns in the reviews through $book_id$ and $user_name$ ) . Use the $conn$ connection to execute the SQL to get all the data and return it.","public List getBarCounts ( HttpRequest request , JdbcTemplate conn , String book_id , String user_name ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { String sql = "" select * from reviews where book_id = ? and user_name = ? "" ; List < Object > info = conn . query ( sql , new Object [ ] { book_id , user_name } , new BeanPropertyRowMapper ( List . class ) ) ; return info ; } return null ; }","Generate syntax code: If the request module sends the request as post, set the SQL ( query all columns in the reviews through $book_id$ and $user_name$ ) . Use the $conn$ connection to execute the SQL to get all the data and return it.","<met> <mod> public </mod> type_identifier getBarCounts <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier book_id </for> , <for> type_identifier user_name </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> info = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id , user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return info ; </ret> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Try to use $testing$ to get a connection. Use the connection to execute SQL ( query user_id in the users table based on $user_name$ ) , get the first data and return the query results.","public JSONObject example ( DataSource testing , String user_name ) { JdbcTemplate connection = new JdbcTemplate ( testing ) ; String sql = "" select user_id from users where user_name = ? "" ; List < Object > res = connection . query ( sql , new Object [ ] { user_name } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user_id "" , res . get ( 0 ) ) ; } } ) ; return json ; }","Generate syntax code: Try to use $testing$ to get a connection. Use the connection to execute SQL ( query user_id in the users table based on $user_name$ ) , get the first data and return the query results.","<met> <mod> public </mod> type_identifier example <for> ( <for> type_identifier testing </for> , <for> type_identifier user_name </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( testing ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> connection . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: If $name$ is not empty, use $conn$ to query all columns in the users table with 'name' as $name$ and get all the data. Return the query result in json.","public JSONObject users ( JdbcTemplate conn , String name ) { JSONObject json = null ; if ( name != null ) { List < Object > res = conn . query ( "" select * from users where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; json = new JSONObject ( new HashMap ( ) { { put ( "" users "" , res ) ; } } ) ; } else { return null ; } return json ; }","Generate syntax code: If $name$ is not empty, use $conn$ to query all columns in the users table with 'name' as $name$ and get all the data. Return the query result in json.","<met> <mod> public </mod> type_identifier users <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <bin> name != null_literal </bin> ) </par> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , res ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement via $conn$: Query all the columns in the drug table and get all the data. Each item of the query result is converted to map, stored as 'list', and returned in json.","public JSONArray drugData ( JdbcTemplate conn ) { String sql = "" select * from drug "" ; List < Object > res = conn . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" Drugs "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }","Generate syntax code: Execute the SQL statement via $conn$: Query all the columns in the drug table and get all the data. Each item of the query result is converted to map, stored as 'list', and returned in json.","<met> <mod> public </mod> type_identifier drugData <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( sql , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <obj> new type_identifier <arg> ( result ) </arg> </obj> ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( get the right_answer column in the learning table based on $user_id$ ) , then try to execute the SQL statement with $conn$, get all the data and return the query result. If exception occurs during execution, return null.","public List < Object > getRightAnswer ( JdbcTemplate conn , String user_id ) { try { List < Object > res = conn . query ( "" select right_answer from learning where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Set up the SQL ( get the right_answer column in the learning table based on $user_id$ ) , then try to execute the SQL statement with $conn$, get all the data and return the query result. If exception occurs during execution, return null.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getRightAnswer <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get database engine by $conn_info$, execute SQL statement ( get all columns in db_session based on $tb_compras$ ) and get all the data. Finally return the obtained data.","public List dbConn ( DataSource conn_info , String tb_compras ) { JdbcTemplate connection = new JdbcTemplate ( conn_info ) ; String sql = "" select * from db_session where tb_compras = ? "" ; List < Object > res = connection . query ( sql , new Object [ ] { tb_compras } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get database engine by $conn_info$, execute SQL statement ( get all columns in db_session based on $tb_compras$ ) and get all the data. Finally return the obtained data.","<met> <mod> public </mod> type_identifier dbConn <for> ( <for> type_identifier conn_info </for> , <for> type_identifier tb_compras </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( conn_info ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> connection . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { tb_compras } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: create a connection based on $engine$, execute SQL ( query the amount of data in the frequents table based on $bar$ ) and get the first piece of data, and finally return the query result in json.","public JSONObject getBarFrequentCounts ( DataSource engine , String bar ) { JdbcTemplate con = new JdbcTemplate ( engine ) ; List < Object > res = con . query ( "" select count(*) from frequents where bar = ? "" , new Object [ ] { bar } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" counts "" , res . get ( 0 ) ) ; } } ) ; return json ; }","Generate syntax code: create a connection based on $engine$, execute SQL ( query the amount of data in the frequents table based on $bar$ ) and get the first piece of data, and finally return the query result in json.","<met> <mod> public </mod> type_identifier getBarFrequentCounts <for> ( <for> type_identifier engine </for> , <for> type_identifier bar </for> ) </for> <blo> { <loc> type_identifier <var> con = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bar } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to connect the database, execute SQL ( get all the columns in the dialect table when the statement_compiler is $statement$ ) and get the first data. Finally return the query result in json.","public JSONObject testNoParamsOption ( DataSource db , String statement ) { JdbcTemplate conn = new JdbcTemplate ( db ) ; String sql = "" select * from dialect where statement_compiler = ? "" ; List < Object > res = conn . query ( sql , new Object [ ] { statement } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" statement "" , res . get ( 0 ) ) ; } } ) ; return json ; }","Generate syntax code: Use $db$ to connect the database, execute SQL ( get all the columns in the dialect table when the statement_compiler is $statement$ ) and get the first data. Finally return the query result in json.","<met> <mod> public </mod> type_identifier testNoParamsOption <for> ( <for> type_identifier db </for> , <for> type_identifier statement </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( db ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { statement } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( get all columns in the sales table with city as $location$ and saleyear as $date$ ) and get all the data. Then use for loop to store each item of the query results as list and finally process the list content in json and return it.,"public JSONArray dataPullSales ( JdbcTemplate conn , String location , Date date ) { String sql = "" select * from sales where city = ? and saleyear = ? "" ; List < Object > res = conn . query ( sql , new Object [ ] { location , date } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" sales "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }",Generate syntax code: Use $conn$ to execute SQL ( get all columns in the sales table with city as $location$ and saleyear as $date$ ) and get all the data. Then use for loop to store each item of the query results as list and finally process the list content in json and return it.,"<met> <mod> public </mod> type_identifier dataPullSales <for> ( <for> type_identifier conn </for> , <for> type_identifier location </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { location , date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <obj> new type_identifier <arg> ( result ) </arg> </obj> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( fetch the name column in the results where year is $year$ ) and get all the data, then print each item of the query result using the for loop, and return the query result.","public List selectRecords ( JdbcTemplate db , String year ) { List < Object > clause = db . query ( "" select name from results where year = ? "" , new Object [ ] { year } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : clause ) { System . out . println ( r . toString ( ) ) ; } return clause ; }","Generate syntax code: Execute the SQL using $db$ ( fetch the name column in the results where year is $year$ ) and get all the data, then print each item of the query result using the for loop, and return the query result.","<met> <mod> public </mod> type_identifier selectRecords <for> ( <for> type_identifier db </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> clause = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : clause ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return clause ; </ret> } </blo> </met>"
"Generate origin code: Set SQL: query comment in the reviews where the user_id is $uid$. Execute the SQL using $db$ and get all the data. Return null if the query result length is equal to 0, otherwise, return the query result in json.","public JSONObject getReviewsComment ( JdbcTemplate db , String uid ) { List < Object > comments = db . query ( "" select comment from reviews where user_id = ? "" , new Object [ ] { uid } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( comments . size ( ) == 0 ) { return null ; } else { json = new JSONObject ( new HashMap ( ) { { put ( "" comments "" , comments ) ; } } ) ; } return json ; }","Generate syntax code: Set SQL: query comment in the reviews where the user_id is $uid$. Execute the SQL using $db$ and get all the data. Return null if the query result length is equal to 0, otherwise, return the query result in json.","<met> <mod> public </mod> type_identifier getReviewsComment <for> ( <for> type_identifier db </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> comments = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <bin> <met> comments . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> else <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , comments ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute SQL: Query the first piece of name data in the user table using $id$ and $age$. Return the query results in json.,"public JSONObject queryUser ( JdbcTemplate conn , String id , String age ) { List < Object > res = conn . query ( "" select name from user where id = ? and age = ? "" , new Object [ ] { id , age } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; json = new JSONObject ( new HashMap ( ) { { put ( "" user "" , res . get ( 0 ) ) ; } } ) ; return json ; }",Generate syntax code: Use the $conn$ connection to execute SQL: Query the first piece of name data in the user table using $id$ and $age$. Return the query results in json.,"<met> <mod> public </mod> type_identifier queryUser <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> , <for> type_identifier age </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id , age } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use $dbDir$ to get the database engine, then use the ORM to query all the columns in the $csvtable$ table with DATE as $date$ and get all the data, finally return the query results.","public List < Object > getCount ( EntityManager dbDir , Root < Object > csvtable , Date date ) { CriteriaBuilder cb = dbDir . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( csvtable ) . where ( cb . equal ( csvtable . get ( "" c "" ) . get ( "" DATE "" ) , date ) ) ; List < Object > count = dbDir . createQuery ( cq ) . getResultList ( ) ; return count ; }","Generate syntax code: Use $dbDir$ to get the database engine, then use the ORM to query all the columns in the $csvtable$ table with DATE as $date$ and get all the data, finally return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getCount <for> ( <for> type_identifier dbDir </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> csvtable </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> dbDir . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( csvtable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> csvtable . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , date ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> count = <met> <met> dbDir . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return count ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $db$ ( get all columns in flights table with id as $flight_id$ ) and get the first piece of data. If the obtained result is null, then return the rendered ""error.html"", further use $db$ to execute SQL again ( get the name column in passengers table based on $flight_id$ ) and get all data and finally return the rendered ""flight.html"", where the flight parameter is the query result of the first piece of SQL statement and the passengers parameter is the query result of the second piece of SQL statement.","public String selectValue ( Model model , JdbcTemplate db , String flight_id ) { String sql = "" select * from flights where id = ? "" ; List < Object > flight = db . query ( sql , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( flight . get ( 0 ) == null ) { return "" error.html "" ; } List < Object > passengers = db . query ( "" select name from passengers where flight_id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" flight "" , flight ) ; model . addAttribute ( "" passengers "" , passengers ) ; return "" flight.html "" ; }","Generate syntax code: Execute SQL through $db$ ( get all columns in flights table with id as $flight_id$ ) and get the first piece of data. If the obtained result is null, then return the rendered ""error.html"", further use $db$ to execute SQL again ( get the name column in passengers table based on $flight_id$ ) and get all data and finally return the rendered ""flight.html"", where the flight parameter is the query result of the first piece of SQL statement and the passengers parameter is the query result of the second piece of SQL statement.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> flight = <met> db . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> flight . get <arg> ( decimal_integer_literal ) </arg> </met> == null_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> </if_> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> passengers = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , flight ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , passengers ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database via $e$, execute the SQL ( query all columns in the RInd table ) to get all the data and return all the obtained data.","public List < Object > get ( DataSource e ) { JdbcTemplate conn = new JdbcTemplate ( e ) ; List < Object > res = conn . query ( "" select * from RInd "" , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Connect to the database via $e$, execute the SQL ( query all columns in the RInd table ) to get all the data and return all the obtained data.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> get <for> ( <for> type_identifier e </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( e ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get all columns in the books table based on $id$ ) and get the first piece of data, further use $db$ to execute SQL ( get all columns in the bookcomments table based on isbn ) and get all the data. Finally return the rendered 'book.html', where the selection parameter is the first piece of SQL statement query results, notes parameter is the second piece of SQL statement query results.","public String book ( Model model , JdbcTemplate db , String id ) { List < Object > selection = db . query ( "" select * from books where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; String isbn = "" selection.isbn "" ; List < Object > bookNotes = db . query ( "" select * from bookcomments where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" selection "" , selection ) ; model . addAttribute ( "" notes "" , bookNotes ) ; return "" book.html "" ; }","Generate syntax code: Use $db$ to execute SQL ( get all columns in the books table based on $id$ ) and get the first piece of data, further use $db$ to execute SQL ( get all columns in the bookcomments table based on isbn ) and get all the data. Finally return the rendered 'book.html', where the selection parameter is the first piece of SQL statement query results, notes parameter is the second piece of SQL statement query results.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> selection = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> isbn = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> bookNotes = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , selection ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , bookNotes ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all the columns in the 'Table' table based on $rowid$ ) , get all the data, use for loop to convert each item of the query result to map, store it in list and return.","public List testRowid ( JdbcTemplate conn , String rowid ) { List < Object > sq = conn . query ( "" select * from Table where rowid = ? "" , new Object [ ] { rowid } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : sq ) { result . add ( new HashMap ( ) { { put ( "" res "" , r ) ; } } ) ; } return result ; }","Generate syntax code: Use $conn$ to execute SQL ( query all the columns in the 'Table' table based on $rowid$ ) , get all the data, use for loop to convert each item of the query result to map, store it in list and return.","<met> <mod> public </mod> type_identifier testRowid <for> ( <for> type_identifier conn </for> , <for> type_identifier rowid </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> sq = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { rowid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : sq ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database using $db_connect$, and execute the SQL statement using $conn$ ( get all trackids in the tracks ) .Then use for loop to store each item of the query results as list and finally process the list content in json and return it.","public JSONArray search ( DataSource db_connect ) { JdbcTemplate connection = new JdbcTemplate ( db_connect ) ; String sql = "" select trackid from tracks "" ; List < Object > query = connection . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : query ) { result . add ( new HashMap ( ) { { put ( "" data "" , r ) ; } } ) ; } return new JSONArray ( result ) ; }","Generate syntax code: Connect to the database using $db_connect$, and execute the SQL statement using $conn$ ( get all trackids in the tracks ) .Then use for loop to store each item of the query results as list and finally process the list content in json and return it.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier db_connect </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> query = <met> connection . query <arg> ( sql , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : query ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return <obj> new type_identifier <arg> ( result ) </arg> </obj> ; </ret> } </blo> </met>"
Generate origin code: Connect to the database using $db$. Execute the SQL statement: Query the number of all columns in the tv table. Use for loop to print the obtained data.,"public void search ( JdbcTemplate db ) { List < Object > clause = db . query ( "" select count(*) from tv "" , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : clause ) { System . out . println ( r . toString ( ) ) ; } }",Generate syntax code: Connect to the database using $db$. Execute the SQL statement: Query the number of all columns in the tv table. Use for loop to print the obtained data.,"<met> <mod> public </mod> void_type search <for> ( <for> type_identifier db </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> clause = <met> db . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : clause ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to execute the SQL using $conn$ ( query the first piece of task in the horse table based on $tid$ ) . Print and return all query results. If Exception occurs, print the exception message.","public List < Object > structure ( JdbcTemplate conn , String tid ) { try { List < Object > taskrs = conn . query ( "" select task from horse where tid = ? "" , new Object [ ] { tid } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( taskrs ) ; return taskrs ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Try to execute the SQL using $conn$ ( query the first piece of task in the horse table based on $tid$ ) . Print and return all query results. If Exception occurs, print the exception message.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> structure <for> ( <for> type_identifier conn </for> , <for> type_identifier tid </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> taskrs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( taskrs ) </arg> </met> ; </exp> <ret> return taskrs ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Connect to the database via $dbraw_engine$. Try to execute the SQL statement ( get all columns in the world table based on $ID$ ) to get the first piece of data and return.,"public List < Object > rawUpdates ( DataSource dbraw_engine , String ID ) { JdbcTemplate connection = new JdbcTemplate ( dbraw_engine ) ; List < Object > world = connection . query ( "" select * from world w ID = ? "" , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; return ( List < Object > ) world . get ( 0 ) ; }",Generate syntax code: Connect to the database via $dbraw_engine$. Try to execute the SQL statement ( get all columns in the world table based on $ID$ ) to get the first piece of data and return.,"<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> rawUpdates <for> ( <for> type_identifier dbraw_engine </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( dbraw_engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> world = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <cas> ( <gen> type_identifier <typ> < type_identifier > </typ> </gen> ) <met> world . get <arg> ( decimal_integer_literal ) </arg> </met> </cas> ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table based on $wallets$ ) , get all the data, and output the obtained data.","public void main ( JdbcTemplate conn , String wallets ) { List < Object > flights = conn . query ( "" select * from flights where wallets = ? "" , new Object [ ] { wallets } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : flights ) { System . out . println ( r . toString ( ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table based on $wallets$ ) , get all the data, and output the obtained data.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier wallets </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { wallets } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get all columns in the reviews table with isbn as $isbn$ and userid as $id$ ) and get all the data. Finally, return the query result.","public List review ( JdbcTemplate conn , String isbn , Integer id ) { List < Object > item = conn . query ( "" select * from reviews where isbn = ? and userid = ? "" , new Object [ ] { isbn , id } , new BeanPropertyRowMapper ( List . class ) ) ; return item ; }","Generate syntax code: Use $conn$ to execute SQL ( get all columns in the reviews table with isbn as $isbn$ and userid as $id$ ) and get all the data. Finally, return the query result.","<met> <mod> public </mod> type_identifier review <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> item = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return item ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement and the content is as follows: Query the ar_role data in the gsys_admin_role based on $ip$, and use $conn$ to execute SQL to get all the data. Use for loop traversal to execute and print the query results, and return them.","public List getHostname ( JdbcTemplate conn , String ip ) { List < Object > ress = conn . query ( "" select ar_role from gsys_admin_role where ip = ? "" , new Object [ ] { ip } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : ress ) { System . out . println ( r . toString ( ) ) ; } return ress ; }","Generate syntax code: Set the SQL statement and the content is as follows: Query the ar_role data in the gsys_admin_role based on $ip$, and use $conn$ to execute SQL to get all the data. Use for loop traversal to execute and print the query results, and return them.","<met> <mod> public </mod> type_identifier getHostname <for> ( <for> type_identifier conn </for> , <for> type_identifier ip </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ress = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ip } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : ress ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ress ; </ret> } </blo> </met>"
"Generate origin code: Try to execute the following code: Create a database connection based on $mssql$; set SQL ( query all columns in mytable when AbstractID equals $id_str$, string equals $token_str$, TFValue equals $tf_str$ and DFValue equals $df_str$ ) ; use $conn$ to execute SQL and get all data; return query results.","public List queryToken ( DataSource mssql , Integer id_str , String token_str , String tf_str , String df_str ) { JdbcTemplate conn = new JdbcTemplate ( mssql ) ; List < Object > results = conn . query ( "" select * from mytable where AbstractID = ? and string = ? and TFValue = ? and DFValue = ? "" , new Object [ ] { id_str , token_str , tf_str , df_str } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Try to execute the following code: Create a database connection based on $mssql$; set SQL ( query all columns in mytable when AbstractID equals $id_str$, string equals $token_str$, TFValue equals $tf_str$ and DFValue equals $df_str$ ) ; use $conn$ to execute SQL and get all data; return query results.","<met> <mod> public </mod> type_identifier queryToken <for> ( <for> type_identifier mssql </for> , <for> type_identifier id_str </for> , <for> type_identifier token_str </for> , <for> type_identifier tf_str </for> , <for> type_identifier df_str </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( mssql ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id_str , token_str , tf_str , df_str } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Use $host$ to get the database connection and execute SQL ( get all the columns in the DATABASE based on $db_name$ ) , get all the data, and finally return the query result.","public List < Object > getSqlalchemyEngine ( DataSource host , String db_name ) { JdbcTemplate connection = new JdbcTemplate ( host ) ; List < Object > res = connection . query ( "" select * from DATABASE where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $host$ to get the database connection and execute SQL ( get all the columns in the DATABASE based on $db_name$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getSqlalchemyEngine <for> ( <for> type_identifier host </for> , <for> type_identifier db_name </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( query the password column in the student table based on username $itemname$ ) , use $conn$ to execute SQL and get all the query results. Return the query result if the length of the query result is 1, else return null.","public List getWord ( JdbcTemplate conn , String itemname ) { List < Object > passwords = conn . query ( "" select password from student where username = ? "" , new Object [ ] { itemname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( passwords . size ( ) == 1 ) { return passwords ; } return null ; }","Generate syntax code: Set SQL ( query the password column in the student table based on username $itemname$ ) , use $conn$ to execute SQL and get all the query results. Return the query result if the length of the query result is 1, else return null.","<met> <mod> public </mod> type_identifier getWord <for> ( <for> type_identifier conn </for> , <for> type_identifier itemname </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> passwords = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { itemname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> passwords . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return passwords ; </ret> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the origin column in the flight table according to $id$ ) , get the first row of data, use for loop to traverse all the obtained query results, print and return the query results.","public List main ( JdbcTemplate conn , Integer id ) { List < Object > flights = conn . query ( "" select origin from flight where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > pokemons = new ArrayList < > ( ) ; for ( Object r : flights ) { System . out . println ( r . toString ( ) ) ; } return pokemons ; }","Generate syntax code: Use $conn$ to execute SQL ( query the origin column in the flight table according to $id$ ) , get the first row of data, use for loop to traverse all the obtained query results, print and return the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> pokemons = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return pokemons ; </ret> } </blo> </met>"
"Generate origin code: Use $db$ to execute SQL ( get the class column in the Classtabel table where user_name is $uname$ and user_id is $uid$ ) , get all the data, and finally return the query result.","public List getClass ( JdbcTemplate db , String uname , Integer uid ) { List < Object > classes = db . query ( "" select class from Classtabel where user_name = ? and user_id = ? "" , new Object [ ] { uname , uid } , new BeanPropertyRowMapper ( List . class ) ) ; return classes ; }","Generate syntax code: Use $db$ to execute SQL ( get the class column in the Classtabel table where user_name is $uname$ and user_id is $uid$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier getClass <for> ( <for> type_identifier db </for> , <for> type_identifier uname </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> classes = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname , uid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return classes ; </ret> } </blo> </met>"
"Generate origin code: Try to set the SQL statement: Get the imgur_id in the item table through $local_thumbnail$ and use $conn$ to execute SQL to get all the data and print. If an Exception occurs, print the exception information.","public void upload ( JdbcTemplate conn , String local_thumbnail ) { try { List < Object > results = conn . query ( "" select imgur_id from item where local_thumbnail = ? "" , new Object [ ] { local_thumbnail } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( results ) ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } }","Generate syntax code: Try to set the SQL statement: Get the imgur_id in the item table through $local_thumbnail$ and use $conn$ to execute SQL to get all the data and print. If an Exception occurs, print the exception information.","<met> <mod> public </mod> void_type upload <for> ( <for> type_identifier conn </for> , <for> type_identifier local_thumbnail </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { local_thumbnail } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( results ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Use $conn$ to execute the SQL ( get the state column in the combined table based on $month_year$ ) and get all the data and return them.,"public List states ( JdbcTemplate conn , String month_year ) { List < Object > Combined = conn . query ( "" select state from combined where month_year = ? "" , new Object [ ] { month_year } , new BeanPropertyRowMapper ( List . class ) ) ; return Combined ; }",Generate syntax code: Use $conn$ to execute the SQL ( get the state column in the combined table based on $month_year$ ) and get all the data and return them.,"<met> <mod> public </mod> type_identifier states <for> ( <for> type_identifier conn </for> , <for> type_identifier month_year </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> Combined = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { month_year } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return Combined ; </ret> } </blo> </met>"
Generate origin code: Use $session$to execute SQL ( get auth_name column in the spatial_ref_sys table based on $srid$ ) and get all the data. Finally return the query results.,"public List setUp ( JdbcTemplate session , Integer srid ) { List < Object > results = session . query ( "" select auth_name from spatial_ref_sys where srid = ? "" , new Object [ ] { srid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }",Generate syntax code: Use $session$to execute SQL ( get auth_name column in the spatial_ref_sys table based on $srid$ ) and get all the data. Finally return the query results.,"<met> <mod> public </mod> type_identifier setUp <for> ( <for> type_identifier session </for> , <for> type_identifier srid </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> session . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { srid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""GET"", use $db$ to execute SQL ( query all columns in the books table ) and return the rendered ""user.html"" page, where the parameter result is the execution result. Otherwise, try to use $db$ to execute SQL ( query the shape column in the books table according to $search$ ) , get all the query results, and return the rendered ""user.html"" page where the parameter search_result is the execution result. If an Exception is caught, print the exception.","public String bookpage ( Model model , HttpRequest request , JdbcTemplate db , String search ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { String sql = "" select * from books "" ; List < Object > result = db . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" result "" , result ) ; return "" user.html "" ; } else { try { List < Object > results = db . query ( "" select shape from books where search = ? "" , new Object [ ] { search } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" search_result "" , results ) ; return "" user.html "" ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } } return null ; }","Generate syntax code: If the request method is ""GET"", use $db$ to execute SQL ( query all columns in the books table ) and return the rendered ""user.html"" page, where the parameter result is the execution result. Otherwise, try to use $db$ to execute SQL ( query the shape column in the books table according to $search$ ) , get all the query results, and return the rendered ""user.html"" page where the parameter search_result is the execution result. If an Exception is caught, print the exception.","<met> <mod> public </mod> type_identifier bookpage <for> ( <for> type_identifier model </for> , <for> type_identifier request </for> , <for> type_identifier db </for> , <for> type_identifier search </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> db . query <arg> ( sql , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , result ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { search } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the ID column in the database table based on $TITLE$ ) , get all the query results, use for loop to traverse each item of the query results, and print them.","public void blogIter ( JdbcTemplate conn , String TITLE ) { List < Object > results = conn . query ( "" select ID from database where TITLE = ? "" , new Object [ ] { TITLE } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : results ) { System . out . println ( r . toString ( ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query the ID column in the database table based on $TITLE$ ) , get all the query results, use for loop to traverse each item of the query results, and print them.","<met> <mod> public </mod> void_type blogIter <for> ( <for> type_identifier conn </for> , <for> type_identifier TITLE </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { TITLE } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : results ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( get year column in books table based on $author$ ) and get all the data, then use for loop to print each item in the query result, and finally return the query result.","public List < Object > main ( JdbcTemplate conn , String author ) { List < Object > res = conn . query ( "" select year from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object r : res ) { System . out . println ( r . toString ( ) ) ; } return res ; }","Generate syntax code: Use $conn$ to execute SQL ( get year column in books table based on $author$ ) and get all the data, then use for loop to print each item in the query result, and finally return the query result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> main <for> ( <for> type_identifier conn </for> , <for> type_identifier author </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> r . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the number of id columns in the $table_t$ table based on $name$ ) . Execute SQL through $conn$ and get all the data, and return the obtained result.","public List < Object > count ( EntityManager conn , Root < Object > table_t , String name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( cb . count ( table_t . get ( "" c "" ) . get ( "" id "" ) ) ) . where ( cb . equal ( table_t . get ( "" c "" ) . get ( "" name "" ) , name ) ) ; List < Object > r = conn . createQuery ( cq ) . getResultList ( ) ; return r ; }","Generate syntax code: Set SQL based on the java expression ( query the number of id columns in the $table_t$ table based on $name$ ) . Execute SQL through $conn$ and get all the data, and return the obtained result.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> count <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table_t </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( <met> cb . count <arg> ( <met> <met> table_t . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> table_t . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> r = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return r ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL: Query the ime in the osebe table based on $priimek$, $starost$ and $kupil$. Use $conn$ to execute the SQL and get all the data. Finally close the connection and return the query results.","public List suroviSql ( JdbcTemplate conn , String priimek , String starost , String kupil ) { List < Object > values = conn . query ( "" select ime from osebe where priimek = ? and starost = ? and kupil = ? "" , new Object [ ] { priimek , starost , kupil } , new BeanPropertyRowMapper ( List . class ) ) ; return values ; }","Generate syntax code: Set up the SQL: Query the ime in the osebe table based on $priimek$, $starost$ and $kupil$. Use $conn$ to execute the SQL and get all the data. Finally close the connection and return the query results.","<met> <mod> public </mod> type_identifier suroviSql <for> ( <for> type_identifier conn </for> , <for> type_identifier priimek </for> , <for> type_identifier starost </for> , <for> type_identifier kupil </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { priimek , starost , kupil } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database through $engine$ and execute the SQL statement: All city statistics from the Accidents table. Convert each item of the query result to map, store as list and return.","public List cityData ( DataSource engine ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String sql = "" select count(city) from Accidents "" ; List < Object > ResultProxy = connection . query ( sql , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : ResultProxy ) { result . add ( new HashMap ( ) { { put ( "" res "" , r ) ; } } ) ; } return result ; }","Generate syntax code: Connect to the database through $engine$ and execute the SQL statement: All city statistics from the Accidents table. Convert each item of the query result to map, store as list and return.","<met> <mod> public </mod> type_identifier cityData <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ResultProxy = <met> connection . query <arg> ( sql , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : ResultProxy ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to get the connection. Use the connection to execute SQL ( query all columns in the makes table based on $drinker$ ) and get all the data. Each item in the query result is converted to map and stored in list. Use for loop to print each result after processing, and finally return it.","public List getDrinker ( DataSource engine , String drinker ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String sql = "" select * from makes where drinker = ? "" ; List < Object > drinkers = connection . query ( sql , new Object [ ] { drinker } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < > ( ) ; for ( Object r : drinkers ) { results . add ( new HashMap ( ) { { put ( "" drinker "" , r ) ; } } ) ; } return results ; }","Generate syntax code: Use $engine$ to get the connection. Use the connection to execute SQL ( query all columns in the makes table based on $drinker$ ) and get all the data. Each item in the query result is converted to map and stored in list. Use for loop to print each result after processing, and finally return it.","<met> <mod> public </mod> type_identifier getDrinker <for> ( <for> type_identifier engine </for> , <for> type_identifier drinker </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> drinkers = <met> connection . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { drinker } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : drinkers ) <blo> { <exp> <met> results . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Get the database connection where sql_url is $sql_url$. Set the SQL statement using a java expression ( query all information in the $received_msg$ where the msgid is $msgid$ ) , execute the SQL statement and return the result of the query.","public List < Object > queryOldRecs ( EntityManager sql_url , Root < Object > received_msg , Integer msgid ) { CriteriaBuilder cb = sql_url . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( received_msg ) . where ( cb . equal ( received_msg . get ( "" c "" ) . get ( "" msgid "" ) , msgid ) ) ; List < Object > msgidrecs = sql_url . createQuery ( cq ) . getResultList ( ) ; return msgidrecs ; }","Generate syntax code: Get the database connection where sql_url is $sql_url$. Set the SQL statement using a java expression ( query all information in the $received_msg$ where the msgid is $msgid$ ) , execute the SQL statement and return the result of the query.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> queryOldRecs <for> ( <for> type_identifier sql_url </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> received_msg </for> , <for> type_identifier msgid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sql_url . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( received_msg ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> received_msg . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , msgid ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> msgidrecs = <met> <met> sql_url . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return msgidrecs ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""POST"", use $conn$ to execute the SQL statement ( query the id data in the users table based on $username$ ) and get the first piece of data. If the query result is empty, trender ""error.html"" and pass 'Username not found' into message parameter; otherwise, trender ""user.html"".","public String login ( HttpRequest request , JdbcTemplate conn , String username , Model model ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { String sql = "" select id from users where username = ? "" ; List < Object > account = conn . query ( sql , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( account == null ) { String message = "" Username not found "" ; model . addAttribute ( "" message "" , message ) ; return "" error.html "" ; } else { return "" user.html "" ; } } return null ; }","Generate syntax code: If the request method is ""POST"", use $conn$ to execute the SQL statement ( query the id data in the users table based on $username$ ) and get the first piece of data. If the query result is empty, trender ""error.html"" and pass 'Username not found' into message parameter; otherwise, trender ""user.html"".","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier model </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> account = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> account == null_literal </bin> ) </par> <blo> { <loc> type_identifier <var> message = string_literal </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , message ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the Java expression ( get the id column in the $users$ table based on $uid$ ) and get all the data. Finally, return the query results.","public List < Object > getUserCount ( EntityManager conn , Root < Object > users , Integer uid ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( users . get ( "" c "" ) . get ( "" id "" ) ) . where ( cb . equal ( users . get ( "" c "" ) . get ( "" id "" ) , uid ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; return result ; }","Generate syntax code: Use $conn$ to execute SQL based on the Java expression ( get the id column in the $users$ table based on $uid$ ) and get all the data. Finally, return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> getUserCount <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier uid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( <met> <met> users . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> users . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , uid ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: If there is no $table$ table, return null directly; try to use the Java expression to set SQL through $connection$: To query all the data in $table$ based on $key$, execute the SQL statement to get all the data and return, if Exception occurs, print the exception message.","public List < Object > selectT ( EntityManager connection , Root < Object > table , String key ) { if ( table == null ) { return null ; } try { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( table ) . where ( cb . equal ( table . get ( "" c "" ) . get ( "" key "" ) , key ) ) ; List < Object > res = connection . createQuery ( cq ) . getResultList ( ) ; return res ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; } return null ; }","Generate syntax code: If there is no $table$ table, return null directly; try to use the Java expression to set SQL through $connection$: To query all the data in $table$ based on $key$, execute the SQL statement to get all the data and return, if Exception occurs, print the exception message.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectT <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier key </for> ) </for> <blo> { <if_> if <par> ( <bin> table == null_literal </bin> ) </par> <blo> { <ret> return null_literal ; </ret> } </blo> </if_> <try> try <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> table . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , key ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </cat> </try> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: By the way of ORM, use $conn$ to get all the Employee in the $empl_table$ table with manager_id of $manager_id$. Print the result and return.","public List < Object > testSelects ( EntityManager conn , Root < Object > empl_table , Integer manager_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( empl_table . get ( "" c "" ) . get ( "" Employee "" ) ) . where ( cb . equal ( empl_table . get ( "" c "" ) . get ( "" manager_id "" ) , manager_id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( res ) ; return res ; }","Generate syntax code: By the way of ORM, use $conn$ to get all the Employee in the $empl_table$ table with manager_id of $manager_id$. Print the result and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> testSelects <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> empl_table </for> , <for> type_identifier manager_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( <met> <met> empl_table . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> <met> empl_table . get <arg> ( string_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> , manager_id ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $conn$ ( get all the columns in the 'table_name' where id is $data$ ) and get the first piece of data, return true if the query result is not null, else return false.","public Boolean handleStandardTable ( JdbcTemplate conn , String data ) { List < Object > data_exists = conn . query ( "" select * from table_name where id = ? "" , new Object [ ] { data } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data_exists . get ( 0 ) != null ) { return true ; } else { return false ; } }","Generate syntax code: Execute the SQL using $conn$ ( get all the columns in the 'table_name' where id is $data$ ) and get the first piece of data, return true if the query result is not null, else return false.","<met> <mod> public </mod> type_identifier handleStandardTable <for> ( <for> type_identifier conn </for> , <for> type_identifier data </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data_exists = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { data } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> data_exists . get <arg> ( decimal_integer_literal ) </arg> </met> != null_literal </bin> ) </par> <blo> { <ret> return true ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL based on the Java expression ( get the number of url_list in the $url_list$ table based on $id$ counting method ) and get the first piece of data. If the result is equal to 1000000, return 0, otherwise return 1.","public Integer addUrlList ( EntityManager conn , Root < Object > url_list , Integer id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq = cq . select ( cb . count ( url_list ) ) . where ( cb . equal ( url_list . get ( "" id "" ) , id ) ) ; List < Object > ret = conn . createQuery ( cq ) . getResultList ( ) ; if ( ( Integer ) ret . get ( 0 ) == 100000 ) { return 0 ; } else { return 1 ; } }","Generate syntax code: Use $conn$ to execute SQL based on the Java expression ( get the number of url_list in the $url_list$ table based on $id$ counting method ) and get the first piece of data. If the result is equal to 1000000, return 0, otherwise return 1.","<met> <mod> public </mod> type_identifier addUrlList <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> url_list </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <ass> cq = <met> <met> cq . select <arg> ( <met> cb . count <arg> ( url_list ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> url_list . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> </ass> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ret = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <cas> ( type_identifier ) <met> ret . get <arg> ( decimal_integer_literal ) </arg> </met> </cas> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> else <blo> { <ret> return decimal_integer_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Print the $time$ and set sql ( query the name column in the tableName table according to $time$ ) , use $conn$ to execute the SQL and get all the query results, and return the query results.","public List selectChiaPetCluster ( JdbcTemplate conn , String time ) { System . out . println ( time ) ; List < Object > rows = conn . query ( "" select name from tableName where time = ? "" , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; return rows ; }","Generate syntax code: Print the $time$ and set sql ( query the name column in the tableName table according to $time$ ) , use $conn$ to execute the SQL and get all the query results, and return the query results.","<met> <mod> public </mod> type_identifier selectChiaPetCluster <for> ( <for> type_identifier conn </for> , <for> type_identifier time </for> ) </for> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( time ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { time } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rows ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement through the $conn$ connection: Query the title in the books table based on $book_id$. If the size of the query is greater than 0, render and return ""book.html""; otherwise render and return ""error.html"".","public String book ( JdbcTemplate conn , String book_id ) { String sql = "" select title from books where book_id = ? "" ; List < Object > titles = conn . query ( sql , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( titles . size ( ) > 0 ) { return "" book.html "" ; } else { return "" error.html "" ; } }","Generate syntax code: Execute the SQL statement through the $conn$ connection: Query the title in the books table based on $book_id$. If the size of the query is greater than 0, render and return ""book.html""; otherwise render and return ""error.html"".","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> titles = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> titles . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use $conn$ to query all columns in the books table with isbn as $isbn$ and get all the data. Store each item of the query results as list and return it.,"public List main ( JdbcTemplate conn , String isbn ) { List < Object > res = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList < > ( ) ; for ( Object r : res ) { result . add ( new HashMap ( ) { { put ( "" res "" , r ) ; } } ) ; } return result ; }",Generate syntax code: Use $conn$ to query all columns in the books table with isbn as $isbn$ and get all the data. Store each item of the query results as list and return it.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier r : res ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , r ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set up the SQL ( get all the columns in the 'table' table based on $aid$ ) , then try to execute the SQL statement with $conn$ and get all the data. Then return the query results. If exception occurs during execution, print the exception.","public List < Object > blockingSelect ( JdbcTemplate conn , Integer aid ) { try { List < Object > results = conn . query ( "" select * from table where aid = ? "" , new Object [ ] { aid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Set up the SQL ( get all the columns in the 'table' table based on $aid$ ) , then try to execute the SQL statement with $conn$ and get all the data. Then return the query results. If exception occurs during execution, print the exception.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> blockingSelect <for> ( <for> type_identifier conn </for> , <for> type_identifier aid </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { aid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to connect to the database through $engine$. Execute SQL statement ( query all columns in 'table' based on $column$ ) , get all data and return all query results. If Exception occurs, return null.","public List < Object > selectFromDB ( DataSource engine , String column ) { try { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > result = conn . query ( "" select * from table where column = ? "" , new Object [ ] { column } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to connect to the database through $engine$. Execute SQL statement ( query all columns in 'table' based on $column$ ) , get all data and return all query results. If Exception occurs, return null.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectFromDB <for> ( <for> type_identifier engine </for> , <for> type_identifier column </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { column } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the BOOKS table according to $bneq$ ) , get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","public void main ( JdbcTemplate conn , String bneq ) { List < Object > ve = conn . query ( "" select * from BOOKS where bneq = ? "" , new Object [ ] { bneq } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object i : ve ) { System . out . println ( i ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the BOOKS table according to $bneq$ ) , get all the query results, use for loop to traverse all the obtained query results, and print each piece of data.","<met> <mod> public </mod> void_type main <for> ( <for> type_identifier conn </for> , <for> type_identifier bneq </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> ve = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { bneq } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : ve ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all the columns in the books table with isbn of $int_query$, and get all the data. If there is an exception, render and return ""error.html""; otherwise, render and return ""searchresults.html"", where the results parameter is the query result.","public String searchresults ( Model model , JdbcTemplate conn , String int_query ) { try { String sql = "" select * from books where isbn = ? "" ; List < Object > results = conn . query ( sql , new Object [ ] { int_query } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" results "" , results ) ; } catch ( Exception e ) { return "" error.html "" ; } return "" searchresults.html "" ; }","Generate syntax code: Try to use $conn$ to query all the columns in the books table with isbn of $int_query$, and get all the data. If there is an exception, render and return ""error.html""; otherwise, render and return ""searchresults.html"", where the results parameter is the query result.","<met> <mod> public </mod> type_identifier searchresults <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier int_query </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { int_query } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If request module sends the request in a post method, use $conn$ to execute the SQL statement: Get the id and password, in the users table according to $email$ and return the obtained data.","public List login ( HttpRequest request , JdbcTemplate conn , String email ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { String sql = "" select id, password from users where email = ? "" ; List < Object > user = conn . query ( sql , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } return null ; }","Generate syntax code: If request module sends the request in a post method, use $conn$ to execute the SQL statement: Get the id and password, in the users table according to $email$ and return the obtained data.","<met> <mod> public </mod> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return user ; </ret> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL to: Get all the columns in the book through $isbn$, use $conn$ connection to execute the SQL and get the first piece of data. Render and return ""bookDetails.html"", where the info parameter is the query result.","public String renderBook ( Model model , JdbcTemplate jdbcTemplate , String isbn ) { String query = "" select * from book where isbn = ? "" ; List < Object > info = jdbcTemplate . query ( query , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" info "" , info . get ( 0 ) ) ; return "" bookDetails.html "" ; }","Generate syntax code: Set the SQL to: Get all the columns in the book through $isbn$, use $conn$ connection to execute the SQL and get the first piece of data. Render and return ""bookDetails.html"", where the info parameter is the query result.","<met> <mod> public </mod> type_identifier renderBook <for> ( <for> type_identifier model </for> , <for> type_identifier jdbcTemplate </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> type_identifier <var> query = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> info = <met> jdbcTemplate . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , <met> info . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $test$. Execute the SQL statement ( query all the name data in the users table according to $id$ ) , close the database connection, and return all the query results.","public List getData ( DataSource test , String id ) { JdbcTemplate conn = new JdbcTemplate ( test ) ; List < Object > rs = conn . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return rs ; }","Generate syntax code: Get the database engine and establish a connection through $test$. Execute the SQL statement ( query all the name data in the users table according to $id$ ) , close the database connection, and return all the query results.","<met> <mod> public </mod> type_identifier getData <for> ( <for> type_identifier test </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( test ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Account$ table according to $strategy_log_id$ ) , get all the data queried, use for loop to traverse all the obtained query results, insert each piece of data into a list, close the connection, and return the list.","public List getStrategyAccountList ( EntityManager db , Root < Object > Account , String strategy_log_id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Account ) . where ( cb . equal ( Account . get ( "" strategy_log_id "" ) , strategy_log_id ) ) ; List < Object > rs = db . createQuery ( cq ) . getResultList ( ) ; return rs ; }","Generate syntax code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Account$ table according to $strategy_log_id$ ) , get all the data queried, use for loop to traverse all the obtained query results, insert each piece of data into a list, close the connection, and return the list.","<met> <mod> public </mod> type_identifier getStrategyAccountList <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Account </for> , <for> type_identifier strategy_log_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Account ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Account . get <arg> ( string_literal ) </arg> </met> , strategy_log_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Try the following code: If the request method is ""GET"", return the rendered ""search.html"" page; otherwise, use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ and $title$ ) and get all the query results. If no data is obtained, return the rendered ""search.html"" page, where the error parameter is set to ""Fail""; otherwise, return the rendered ""search.html"" page, where the results parameter is set to the query result. If an exception is caught, return False.","public String search ( HttpRequest request , Model model , JdbcTemplate conn , String isbn , String title ) { try { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" search.html "" ; } else { String sql = "" select * from books where isbn = ? "" ; List < Object > results = conn . query ( sql , new Object [ ] { isbn , title } , new BeanPropertyRowMapper ( Object . class ) ) ; if ( results == null ) { model . addAttribute ( "" Fail "" , "" Fail "" ) ; return "" search.html "" ; } else { model . addAttribute ( "" results "" , results ) ; return "" search.html "" ; } } } catch ( Exception e ) { return "" False "" ; } }","Generate syntax code: Try the following code: If the request method is ""GET"", return the rendered ""search.html"" page; otherwise, use $conn$ to execute SQL ( query all columns in the books table according to $isbn$ and $title$ ) and get all the query results. If no data is obtained, return the rendered ""search.html"" page, where the error parameter is set to ""Fail""; otherwise, return the rendered ""search.html"" page, where the results parameter is set to the query result. If an exception is caught, return False.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> ) </for> <blo> { <try> try <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> Object . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> results == null_literal </bin> ) </par> <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , results ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </if_> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the books table based on $isbn$ ) and get the first row of data. If the query result is empty, return the data in json format, where result is ""error"" and message is ""book not found!"". Otherwise, return the data in json format, where title, author, year and isbn, corresponds to the fields for title, author, year, isbn of the query result.","public JSONObject isbnApi ( JdbcTemplate conn , String isbn ) { final List < Object > book = conn . query ( "" select * from books where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( book == null ) { json = new JSONObject ( new HashMap ( ) { { put ( "" error "" , "" book not found! "" ) ; } } ) ; } else { json = new JSONObject ( new HashMap ( ) { { put ( "" book "" , book . get ( 0 ) ) ; } } ) ; } return json ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the books table based on $isbn$ ) and get the first row of data. If the query result is empty, return the data in json format, where result is ""error"" and message is ""book not found!"". Otherwise, return the data in json format, where title, author, year and isbn, corresponds to the fields for title, author, year, isbn of the query result.","<met> <mod> public </mod> type_identifier isbnApi <for> ( <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <loc> <mod> final </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <bin> book == null_literal </bin> ) </par> <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> else <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> book . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: If the request method is 'GET': Return the rendered 'search_recipe.html' page; otherwise, use $conn$ to execute SQL ( query all columns in the recipes table based on $time$ ) , get all the query results, return the rendered' search_recipe.html' page, and set the all_recipes parameter to the query result.","public String searchRecipe ( HttpRequest httpRequest , Model model , JdbcTemplate conn , String time ) { if ( httpRequest . getMethod ( ) . equals ( "" GET "" ) ) { return "" search_recipe.html "" ; } else { List < Object > all_recipes = conn . query ( "" select * from recipes where time = ? "" , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" all_recipes "" , all_recipes ) ; return "" search_recipe.html "" ; } }","Generate syntax code: If the request method is 'GET': Return the rendered 'search_recipe.html' page; otherwise, use $conn$ to execute SQL ( query all columns in the recipes table based on $time$ ) , get all the query results, return the rendered' search_recipe.html' page, and set the all_recipes parameter to the query result.","<met> <mod> public </mod> type_identifier searchRecipe <for> ( <for> type_identifier httpRequest </for> , <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier time </for> ) </for> <blo> { <if_> if <par> ( <met> <met> httpRequest . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> all_recipes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { time } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , all_recipes ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: If $frame_id$ is not empty, use $connection$ to execute SQL ( query the taozi column in the collection table based on $frame_id$ ) , get all the query results. Return the length of the query results.","public Integer collectionAddFramesViaQuery ( JdbcTemplate connection , String frame_id ) { if ( null != frame_id ) { List < Object > data = connection . query ( "" select taozi from collection where frame_id = ? "" , new Object [ ] { frame_id } , new BeanPropertyRowMapper ( List . class ) ) ; return data . size ( ) ; } else { return null ; } }","Generate syntax code: If $frame_id$ is not empty, use $connection$ to execute SQL ( query the taozi column in the collection table based on $frame_id$ ) , get all the query results. Return the length of the query results.","<met> <mod> public </mod> type_identifier collectionAddFramesViaQuery <for> ( <for> type_identifier connection </for> , <for> type_identifier frame_id </for> ) </for> <blo> { <if_> if <par> ( <bin> null_literal != frame_id </bin> ) </par> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { frame_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> data . size <arg> ( ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use a java expression to set the SQL ( query all the information in the $jobs_t$ where next_run_time is $time$ ) . Execute SQL with $conn$ and get the first data. Finally, return the query results.","public Object getNetxRunTime ( EntityManager db , Root < Object > jobs_t , String time ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( jobs_t ) . where ( cb . equal ( jobs_t . get ( "" time "" ) , time ) ) ; List < Object > run_time = db . createQuery ( cq ) . getResultList ( ) ; return run_time . get ( 0 ) ; }","Generate syntax code: Use a java expression to set the SQL ( query all the information in the $jobs_t$ where next_run_time is $time$ ) . Execute SQL with $conn$ and get the first data. Finally, return the query results.","<met> <mod> public </mod> type_identifier getNetxRunTime <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> jobs_t </for> , <for> type_identifier time </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( jobs_t ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> jobs_t . get <arg> ( string_literal ) </arg> </met> , time ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> run_time = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> run_time . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query all columns in books_table based on $isbn$ ) and get the first piece of data, return the rendered 'book.html' and pass the query results to the vals parameter. If an exception occurs, return the rendered 'book.html'and pass False to the vals parameter.","public String bookSql ( Model model , JdbcTemplate conn , String isbn ) { try { List < Object > vals = conn . query ( "" select * from books_table where isbn = ? "" , new Object [ ] { isbn } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" vals "" , vals ) ; return "" book.html "" ; } catch ( Exception e ) { model . addAttribute ( "" vals "" , "" False "" ) ; return "" book.html "" ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query all columns in books_table based on $isbn$ ) and get the first piece of data, return the rendered 'book.html' and pass the query results to the vals parameter. If an exception occurs, return the rendered 'book.html'and pass False to the vals parameter.","<met> <mod> public </mod> type_identifier bookSql <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> vals = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , vals ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users table based on $username$ ) . If the query result length is not equal to 0, return the json version of ""false""; otherwise, return the json version of ""true"".","public JSONObject check ( JdbcTemplate conn , String username ) { List < Object > rows = conn . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; JSONObject json = null ; if ( rows . size ( ) != 0 ) { json . put ( "" true "" , "" true "" ) ; return json ; } else { json . put ( "" false "" , "" false "" ) ; } return json ; }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users table based on $username$ ) . If the query result length is not equal to 0, return the json version of ""false""; otherwise, return the json version of ""true"".","<met> <mod> public </mod> type_identifier check <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = null_literal </var> ; </loc> <if_> if <par> ( <bin> <met> rows . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ) </par> <blo> { <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <ret> return json ; </ret> } </blo> else <blo> { <exp> <met> json . put <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> } </blo> </if_> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL statement in ORM using the $conn$ connection, which queries all information in $Video$ where the id of video is $videoID$. Use A for loop to store each element in the query result in a list and return the list content.","public List setVideoDeleted ( EntityManager db , Root < Object > Video , String videoID ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Video ) . where ( cb . equal ( Video . get ( "" strategy_log_id "" ) , videoID ) ) ; List < Object > values = db . createQuery ( cq ) . getResultList ( ) ; return values ; }","Generate syntax code: Execute the SQL statement in ORM using the $conn$ connection, which queries all information in $Video$ where the id of video is $videoID$. Use A for loop to store each element in the query result in a list and return the list content.","<met> <mod> public </mod> type_identifier setVideoDeleted <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Video </for> , <for> type_identifier videoID </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Video ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Video . get <arg> ( string_literal ) </arg> </met> , videoID ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return values ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL with $conn$ ( query all columns in the pg_database table according to $pg_catalog$ ) , get the first row of data, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and return the list.","public List dbNamesGet ( JdbcTemplate conn , String catalog ) { List < List > r = conn . query ( "" select * from pg_database where pg_catalg = ? "" , new Object [ ] { catalog } , new BeanPropertyRowMapper ( List . class ) ) ; List r2 = null ; for ( List i : r ) { r2 . add ( i . get ( 0 ) ) ; } return r2 ; }","Generate syntax code: Execute SQL with $conn$ ( query all columns in the pg_database table according to $pg_catalog$ ) , get the first row of data, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier dbNamesGet <for> ( <for> type_identifier conn </for> , <for> type_identifier catalog </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> r = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { catalog } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> r2 = null_literal </var> ; </loc> <enh> for ( type_identifier i : r ) <blo> { <exp> <met> r2 . add <arg> ( <met> i . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return r2 ; </ret> } </blo> </met>"
Generate origin code: Set SQL using a java expression: query article information in the $articles_table$ where article_name is $article_name$. Execute SQL with $conn$ and get all the data. Converts each item in the query result to a map type and return.,"public List getAllArticles ( EntityManager db , Root < Object > articles_table , String article_name ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( articles_table ) . where ( cb . equal ( articles_table . get ( "" article_name "" ) , article_name ) ) ; List < Object > rp = db . createQuery ( cq ) . getResultList ( ) ; List < Map > res = new ArrayList < Map > ( ) ; for ( Object i : rp ) { Map map = new HashMap ( ) ; map . put ( "" data "" , i ) ; res . add ( map ) ; } return res ; }",Generate syntax code: Set SQL using a java expression: query article information in the $articles_table$ where article_name is $article_name$. Execute SQL with $conn$ and get all the data. Converts each item in the query result to a map type and return.,"<met> <mod> public </mod> type_identifier getAllArticles <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> articles_table </for> , <for> type_identifier article_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( articles_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> articles_table . get <arg> ( string_literal ) </arg> </met> , article_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rp = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <obj> new <gen> type_identifier <typ> < type_identifier > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : rp ) <blo> { <loc> type_identifier <var> map = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> map . put <arg> ( string_literal , i ) </arg> </met> ; </exp> <exp> <met> res . add <arg> ( map ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request ""GET"", the rendered ""registration.html"" is returned. If the request module sends the request as ""POST"", execute the SQL statement ( query all columns in users where the name of user is $username$ ) , execute the SQL statement with $conn$ and get all the data. Return ""success.html"" after rendering, where the users parameter is the query data.","public String selectUsers ( HttpRequest httpRequest , Model model , JdbcTemplate conn , String username ) { if ( httpRequest . getMethod ( ) . equals ( "" GET "" ) ) { return "" registration.html "" ; } else if ( httpRequest . getMethod ( ) . equals ( "" POST "" ) ) { String user_sql = "" select * from users where username = ? "" ; List < Object > users = conn . query ( user_sql , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" users "" , users ) ; return "" success.html "" ; } return null ; }","Generate syntax code: If the request module sends the request ""GET"", the rendered ""registration.html"" is returned. If the request module sends the request as ""POST"", execute the SQL statement ( query all columns in users where the name of user is $username$ ) , execute the SQL statement with $conn$ and get all the data. Return ""success.html"" after rendering, where the users parameter is the query data.","<met> <mod> public </mod> type_identifier selectUsers <for> ( <for> type_identifier httpRequest </for> , <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> httpRequest . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <if_> if <par> ( <met> <met> httpRequest . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> type_identifier <var> user_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> conn . query <arg> ( user_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $engine$. Set the SQL statement ( query all the columns in the Vendeur table according to $email$ and $mdp$ ) , execute sql and get all the data. Return -1 if the length of the query data is not 1; otherwise, return the 0th element of the oth query result.","public Object verifLoginBd ( DataSource engine , String email , String mdp ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String qry = "" select * from Vendeur where email = ? and mdp = ? "" ; List < List > data = connection . query ( qry , new Object [ ] { email , mdp } , new BeanPropertyRowMapper ( List . class ) ) ; if ( data . size ( ) != 1 ) { return - 1 ; } else { return data . get ( 0 ) . get ( 0 ) ; } }","Generate syntax code: Get the database engine and establish a connection through $engine$. Set the SQL statement ( query all the columns in the Vendeur table according to $email$ and $mdp$ ) , execute sql and get all the data. Return -1 if the length of the query data is not 1; otherwise, return the 0th element of the oth query result.","<met> <mod> public </mod> type_identifier verifLoginBd <for> ( <for> type_identifier engine </for> , <for> type_identifier email </for> , <for> type_identifier mdp </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> qry = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> connection . query <arg> ( qry , <arr> new type_identifier <dim> [ ] </dim> <arr> { email , mdp } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> data . size <arg> ( ) </arg> </met> != decimal_integer_literal </bin> ) </par> <blo> { <ret> return <una> - decimal_integer_literal </una> ; </ret> } </blo> else <blo> { <ret> return <met> <met> data . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up SQL statement: Get the information of 'a' in foo according to $b$, use $conn$ to execute SQL to get all information, store each item of query result as list and return.","public List testColumnCollectionOrdered ( JdbcTemplate conn , String b ) { String foo_sql = "" select a from foo where b = ? "" ; List < Object > foos = conn . query ( foo_sql , new Object [ ] { b } , new BeanPropertyRowMapper ( List . class ) ) ; return foos ; }","Generate syntax code: Set up SQL statement: Get the information of 'a' in foo according to $b$, use $conn$ to execute SQL to get all information, store each item of query result as list and return.","<met> <mod> public </mod> type_identifier testColumnCollectionOrdered <for> ( <for> type_identifier conn </for> , <for> type_identifier b </for> ) </for> <blo> { <loc> type_identifier <var> foo_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> foos = <met> conn . query <arg> ( foo_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { b } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return foos ; </ret> } </blo> </met>"
Generate origin code: Use a java expression to set the SQL statement to use $State$ to query all the data in $schedule_table$. Return all data after SQL execution using $conn$.,"public Object getNetxRunTime ( EntityManager db , Root < Object > jobs_t , String time ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( jobs_t ) . where ( cb . equal ( jobs_t . get ( "" time "" ) , time ) ) ; List < Object > run_time = db . createQuery ( cq ) . getResultList ( ) ; return run_time . get ( 0 ) ; }",Generate syntax code: Use a java expression to set the SQL statement to use $State$ to query all the data in $schedule_table$. Return all data after SQL execution using $conn$.,"<met> <mod> public </mod> type_identifier getNetxRunTime <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> jobs_t </for> , <for> type_identifier time </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( jobs_t ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> jobs_t . get <arg> ( string_literal ) </arg> </met> , time ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> run_time = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> run_time . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the eis_user table based on $USERNAME$ ) and get all the data. Print the 0th element in the query result.,"public void selectUser ( JdbcTemplate conn , String USERNAME ) { List < List > rows1 = conn . query ( "" select * from eis_user where username = ? "" , new Object [ ] { USERNAME } , new BeanPropertyRowMapper ( List . class ) ) ; for ( List row_0 : rows1 ) { System . out . println ( row_0 . get ( 0 ) . toString ( ) ) ; } }",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the eis_user table based on $USERNAME$ ) and get all the data. Print the 0th element in the query result.,"<met> <mod> public </mod> void_type selectUser <for> ( <for> type_identifier conn </for> , <for> type_identifier USERNAME </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows1 = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { USERNAME } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier row_0 : rows1 ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> <met> row_0 . get <arg> ( decimal_integer_literal ) </arg> </met> . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Use $conn$ to execute the SQL statement: Query all columns from the flights table and get all the data. Render and return ""flights.html"", where the title parameter is ""Flights"" and the flights parameter is the query result.","public String flights ( JdbcTemplate conn , Model model ) { List < Object > flights = conn . query ( "" select * from flights "" , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" title "" , "" Flights "" ) ; model . addAttribute ( "" flights "" , flights ) ; return "" flights.html "" ; }","Generate syntax code: Use $conn$ to execute the SQL statement: Query all columns from the flights table and get all the data. Render and return ""flights.html"", where the title parameter is ""Flights"" and the flights parameter is the query result.","<met> <mod> public </mod> type_identifier flights <for> ( <for> type_identifier conn </for> , <for> type_identifier model </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> flights = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , flights ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query the oid column in the pg_class table based on $relname$ ) , execute SQL with $conn$ and get all the query results. Use for loop to iterate through all obtained the query results, insert the 0th element of each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String relname ) { String query_sql = "" select oid from pg_class where relname = ? "" ; List < List > oids = conn . query ( query_sql , new Object [ ] { relname } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > rs = null ; for ( List o : oids ) { rs . add ( o . get ( 0 ) ) ; } return rs ; }","Generate syntax code: Set up SQL ( query the oid column in the pg_class table based on $relname$ ) , execute SQL with $conn$ and get all the query results. Use for loop to iterate through all obtained the query results, insert the 0th element of each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier relname </for> ) </for> <blo> { <loc> type_identifier <var> query_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> oids = <met> conn . query <arg> ( query_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { relname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = null_literal </var> ; </loc> <enh> for ( type_identifier o : oids ) <blo> { <exp> <met> rs . add <arg> ( <met> o . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return rs ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( query all columns in the pyunitastratigrafiche based on $scavo_s$, $tipo_doc$ and $nome_doc$ ) , execute the SQL using $engine$ and get the first data. Return the result of the query.","public Object getDoc ( JdbcTemplate engine , String scavo_s , String tipo_doc , String nome_doc ) { String sql_query_string = "" select * from pyunitastratigrafiche where scavo_s = ? and tipo_doc = ? and nome_doc = ? "" ; List < Object > res = engine . query ( sql_query_string , new Object [ ] { scavo_s , tipo_doc , nome_doc } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Set the SQL ( query all columns in the pyunitastratigrafiche based on $scavo_s$, $tipo_doc$ and $nome_doc$ ) , execute the SQL using $engine$ and get the first data. Return the result of the query.","<met> <mod> public </mod> type_identifier getDoc <for> ( <for> type_identifier engine </for> , <for> type_identifier scavo_s </for> , <for> type_identifier tipo_doc </for> , <for> type_identifier nome_doc </for> ) </for> <blo> { <loc> type_identifier <var> sql_query_string = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> engine . query <arg> ( sql_query_string , <arr> new type_identifier <dim> [ ] </dim> <arr> { scavo_s , tipo_doc , nome_doc } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to the begin method of $engine$. Execute SQL ( query all columns in the 'table' table based on $games$ ) , get the first piece of data, and return the query result.","public Object getTupleCount ( JdbcTemplate engine , String games ) { List < Object > cd = engine . query ( "" select * from table where games = ? "" , new Object [ ] { games } , new BeanPropertyRowMapper ( List . class ) ) ; return cd . get ( 0 ) ; }","Generate syntax code: connect the database according to the begin method of $engine$. Execute SQL ( query all columns in the 'table' table based on $games$ ) , get the first piece of data, and return the query result.","<met> <mod> public </mod> type_identifier getTupleCount <for> ( <for> type_identifier engine </for> , <for> type_identifier games </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cd = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { games } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> cd . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Use $db$ to connect to the database and use the java expression to set the SQL statement to query all data in the $foo$ table based on $moredata$ and execute the SQL to get the data. Make sure the database is closed. Convert each item of the query results into map and store it as list and return it.,"public List testExplicitText ( EntityManager db , Root < Object > foo , String moredata ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( foo ) . where ( cb . equal ( foo . get ( "" moredata "" ) , moredata ) ) ; List < Object > datas = db . createQuery ( cq ) . getResultList ( ) ; List < Map > res = new ArrayList < Map > ( ) ; for ( Object row : res ) { Map map = new HashMap ( ) ; map . put ( "" data "" , row ) ; res . add ( map ) ; } return res ; }",Generate syntax code: Use $db$ to connect to the database and use the java expression to set the SQL statement to query all data in the $foo$ table based on $moredata$ and execute the SQL to get the data. Make sure the database is closed. Convert each item of the query results into map and store it as list and return it.,"<met> <mod> public </mod> type_identifier testExplicitText <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> foo </for> , <for> type_identifier moredata </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( foo ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> foo . get <arg> ( string_literal ) </arg> </met> , moredata ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> datas = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <obj> new <gen> type_identifier <typ> < type_identifier > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : res ) <blo> { <loc> type_identifier <var> map = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> map . put <arg> ( string_literal , row ) </arg> </met> ; </exp> <exp> <met> res . add <arg> ( map ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: If $user_id$ is empty, return the command redirected to ""/ login""; otherwise, use $conn$ to execute SQL ( query all columns in the reviews table based on $user_id$ ) , get all the query results, and return the rendered ""myreviews.html"" page, where the parameter reviews is set to the query result.","public String myreviews ( Model model , JdbcTemplate conn , String user_id ) { if ( null == user_id ) { return "" /login "" ; } else { List < Object > reviews = conn . query ( "" select * from reviews where user_id = ? "" , new Object [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" reviews "" , reviews ) ; return "" myreviews.html "" ; } }","Generate syntax code: If $user_id$ is empty, return the command redirected to ""/ login""; otherwise, use $conn$ to execute SQL ( query all columns in the reviews table based on $user_id$ ) , get all the query results, and return the rendered ""myreviews.html"" page, where the parameter reviews is set to the query result.","<met> <mod> public </mod> type_identifier myreviews <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <if_> if <par> ( <bin> null_literal == user_id </bin> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> reviews = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , reviews ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table based on $duration$ and $destination$ ) and get all the results. For each piece of data queried, each element is printed in a for loop, represented as from the origin attribute of the query result to the destination attribute.","public void queryFlights ( JdbcTemplate conn , String duration , String destination ) { List < Map > flights = conn . query ( "" select * from flights where duration = ? and destination = ? "" , new Object [ ] { duration , destination } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Map flight : flights ) { System . out . println ( flight . get ( "" origin "" ) + "" to "" + flight . get ( "" destination "" ) ) ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table based on $duration$ and $destination$ ) and get all the results. For each piece of data queried, each element is printed in a for loop, represented as from the origin attribute of the query result to the destination attribute.","<met> <mod> public </mod> void_type queryFlights <for> ( <for> type_identifier conn </for> , <for> type_identifier duration </for> , <for> type_identifier destination </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> flights = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { duration , destination } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier flight : flights ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <bin> <bin> <met> flight . get <arg> ( string_literal ) </arg> </met> + string_literal </bin> + <met> flight . get <arg> ( string_literal ) </arg> </met> </bin> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set SQL based on the java expression ( query the word column in the $words$ table based on $id$ ) . Execute SQL through $conn$, get the first piece of data, and return the 0th element of the query result.","public Object getWord ( EntityManager db , Root < Object > words , String id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( words ) . where ( cb . equal ( words . get ( "" id "" ) , id ) ) ; List < Object > result_word = db . createQuery ( cq ) . getResultList ( ) ; return result_word . get ( 0 ) ; }","Generate syntax code: Set SQL based on the java expression ( query the word column in the $words$ table based on $id$ ) . Execute SQL through $conn$, get the first piece of data, and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier getWord <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> words </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( words ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> words . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result_word = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> result_word . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to set up SQL ( query all columns in the users table where email is $email$ ) , execute SQL with $conn$, get all the results and return True. Return False if an exception occurs.","public Boolean userExists ( JdbcTemplate conn , String email ) { try { String users_sql = "" select * from users where email = ? "" ; List < Object > users = conn . query ( users_sql , new Object [ ] { email } , new BeanPropertyRowMapper ( List . class ) ) ; return Boolean . TRUE ; } catch ( Exception e ) { return Boolean . FALSE ; } }","Generate syntax code: Try to set up SQL ( query all columns in the users table where email is $email$ ) , execute SQL with $conn$, get all the results and return True. Return False if an exception occurs.","<met> <mod> public </mod> type_identifier userExists <for> ( <for> type_identifier conn </for> , <for> type_identifier email </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> users_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> conn . query <arg> ( users_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { email } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <fie> Boolean . TRUE </fie> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return <fie> Boolean . FALSE </fie> ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL ( get all the columns in the epi table where model_version_id is $mvid$ ) with $conn$, get all the data, and return the query results.","public List getModelVersion ( JdbcTemplate conn , String mvid ) { String query = "" select * from epi where model_version_id = ? "" ; List < Object > df = conn . query ( query , new Object [ ] { mvid } , new BeanPropertyRowMapper ( List . class ) ) ; return df ; }","Generate syntax code: Execute the SQL ( get all the columns in the epi table where model_version_id is $mvid$ ) with $conn$, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier getModelVersion <for> ( <for> type_identifier conn </for> , <for> type_identifier mvid </for> ) </for> <blo> { <loc> type_identifier <var> query = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> df = <met> conn . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { mvid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return df ; </ret> } </blo> </met>"
"Generate origin code: connect to the database with $engine$, execute the SQL ( get the version column in the POSTGRES_SCHEMA_NAME where version is $version$ ) , get the first data, and finally return the query results.","public Object testCreatesUserVersionPostgresqlTable ( DataSource engine , String version ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < Object > res = conn . query ( "" select version from POSTGRES_SCHEMA_NAME where version = ? "" , new Object [ ] { version } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: connect to the database with $engine$, execute the SQL ( get the version column in the POSTGRES_SCHEMA_NAME where version is $version$ ) , get the first data, and finally return the query results.","<met> <mod> public </mod> type_identifier testCreatesUserVersionPostgresqlTable <for> ( <for> type_identifier engine </for> , <for> type_identifier version </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { version } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statement: Query the request_id data in the $sample_table$ table based on $sample_id$, use $conn$ to execute the SQL to get all the data, and return the 0th row and 0th column element of the execution result.","public Object getRequestId ( EntityManager db , Root < List > sample_table , String sample_id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < List > cq = cb . createQuery ( List . class ) ; cq . select ( sample_table ) . where ( cb . equal ( sample_table . get ( "" sample_id "" ) , sample_id ) ) ; List < List > rs = db . createQuery ( cq ) . getResultList ( ) ; return rs . get ( 0 ) . get ( 0 ) ; }","Generate syntax code: Use the java expression to set up the SQL statement: Query the request_id data in the $sample_table$ table based on $sample_id$, use $conn$ to execute the SQL to get all the data, and return the 0th row and 0th column element of the execution result.","<met> <mod> public </mod> type_identifier getRequestId <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> sample_table </for> , <for> type_identifier sample_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> List . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( sample_table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> sample_table . get <arg> ( string_literal ) </arg> </met> , sample_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> rs . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Query all the columns in the iris table through $conn$, get all the data, and set the assertion to determine that the length of the query result is greater than 0.","public void testUquery ( JdbcTemplate conn ) { List < Object > rows = conn . query ( "" select * from iris "" , new BeanPropertyRowMapper ( List . class ) ) ; assert rows . size ( ) > 0 ; }","Generate syntax code: Query all the columns in the iris table through $conn$, get all the data, and set the assertion to determine that the length of the query result is greater than 0.","<met> <mod> public </mod> void_type testUquery <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ass> assert <bin> <met> rows . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ; </ass> } </blo> </met>"
"Generate origin code: Step 1: executes SQL via $conn$ ( query all the columns in the books table based on $book_id$ ) to get the first piece of data. Step 2: executes SQL via $conn$ ( query all columns in the review table based on the id value of the execution result in step1 ) to get all the data. Use for loop to store each element in the query result into list. Render and return ""detail_books.html"", where the book parameter is the execution result of step1 and the users parameter is the list content.","public String detailBooks ( Model model , JdbcTemplate conn , String book_id ) { List < Object > book = conn . query ( "" select * from books where id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > users = conn . query ( "" select * from review where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" book "" , book ) ; model . addAttribute ( "" users "" , users ) ; return "" detail_books.html "" ; }","Generate syntax code: Step 1: executes SQL via $conn$ ( query all the columns in the books table based on $book_id$ ) to get the first piece of data. Step 2: executes SQL via $conn$ ( query all columns in the review table based on the id value of the execution result in step1 ) to get all the data. Use for loop to store each element in the query result into list. Render and return ""detail_books.html"", where the book parameter is the execution result of step1 and the users parameter is the list content.","<met> <mod> public </mod> type_identifier detailBooks <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> book = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Execute SQL through $conn$ ( query all columns in the pos_incidents table according to $time$ ) , get all the query results, print the length of the query results, and return the query results.","public List < Object > selectPosIncidents ( JdbcTemplate conn , String time ) { List < Object > res = conn . query ( "" select * from pos_incidents where time = ? "" , new Object [ ] { time } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( res . size ( ) ) ; return res ; }","Generate syntax code: Execute SQL through $conn$ ( query all columns in the pos_incidents table according to $time$ ) , get all the query results, print the length of the query results, and return the query results.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> selectPosIncidents <for> ( <for> type_identifier conn </for> , <for> type_identifier time </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { time } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> res . size <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Connect to the database with $engine$ and execute SQL ( query all columns in cdcTweet where tweet is $tweet$ ) , use the for loop to store the second element of each item in the query result into a list. Use jsonify to handle the list content and return.","public JSONObject cdcTweet ( JdbcTemplate engine , String tweet ) { JSONObject json = null ; List < List > result = engine . query ( "" select * from cdcTweet where tweet = ? "" , new Object [ ] { tweet } , new BeanPropertyRowMapper ( List . class ) ) ; for ( final List row : result ) { json = new JSONObject ( new HashMap ( ) { { put ( "" row[2] "" , row . get ( 1 ) ) ; } } ) ; } return json ; }","Generate syntax code: Connect to the database with $engine$ and execute SQL ( query all columns in cdcTweet where tweet is $tweet$ ) , use the for loop to store the second element of each item in the query result into a list. Use jsonify to handle the list content and return.","<met> <mod> public </mod> type_identifier cdcTweet <for> ( <for> type_identifier engine </for> , <for> type_identifier tweet </for> ) </for> <blo> { <loc> type_identifier <var> json = null_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { tweet } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( <mod> final </mod> type_identifier row : result ) <blo> { <exp> <ass> json = <obj> new type_identifier <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , <met> row . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </obj> </ass> ; </exp> } </blo> </enh> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query the city information in the geojson table based on $latitude$ and $longitude$ ) . Use for loop to add the execution result to the list. Take the list data as the corresponding value of ""res"" in the mapionary and return.","public List detectCity ( JdbcTemplate conn , String latitude , String longitude ) { List < Object > res = conn . query ( "" select city from geojson where longitude = ? and latitude = ? "" , new Object [ ] { longitude , latitude } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use $conn$ to execute SQL ( query the city information in the geojson table based on $latitude$ and $longitude$ ) . Use for loop to add the execution result to the list. Take the list data as the corresponding value of ""res"" in the mapionary and return.","<met> <mod> public </mod> type_identifier detectCity <for> ( <for> type_identifier conn </for> , <for> type_identifier latitude </for> , <for> type_identifier longitude </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { longitude , latitude } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database. Execute the SQL statement ( query the first piece of name data in the database based on $ident$ ) . If the query result exists, return the query result.","public List getNameDatabase ( DataSource engine , String ident ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < List > res = conn . query ( "" select name from database where ident = ? "" , new Object [ ] { ident } , new BeanPropertyRowMapper ( List . class ) ) ; if ( ! res . get ( 0 ) . isEmpty ( ) ) { return res . get ( 0 ) ; } else { return new ArrayList ( ) ; } }","Generate syntax code: Use $engine$ to connect to the database. Execute the SQL statement ( query the first piece of name data in the database based on $ident$ ) . If the query result exists, return the query result.","<met> <mod> public </mod> type_identifier getNameDatabase <for> ( <for> type_identifier engine </for> , <for> type_identifier ident </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { ident } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <una> ! <met> <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> else <blo> { <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Execute SQL via $conn$: Query all columns in ZIPCODE table with 'zip': $zipy$, and get all the data. If no data is obtained, render and return ""error.html""; otherwise, render and return ""zips.html"", where the zips parameter is the obtained data.","public String zips ( Model model , JdbcTemplate conn , String zipy ) { List < Object > zips = conn . query ( "" selct * from ZIPCODE where zip = ? "" , new Object [ ] { zipy } , new BeanPropertyRowMapper ( List . class ) ) ; if ( zips . isEmpty ( ) ) { return "" error.html "" ; } else { model . addAttribute ( "" zips "" , zips ) ; return "" zips.html "" ; } }","Generate syntax code: Execute SQL via $conn$: Query all columns in ZIPCODE table with 'zip': $zipy$, and get all the data. If no data is obtained, render and return ""error.html""; otherwise, render and return ""zips.html"", where the zips parameter is the obtained data.","<met> <mod> public </mod> type_identifier zips <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier zipy </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> zips = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { zipy } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> zips . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , zips ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Establish a connection through $engine$. Execute the SQL statement ( query all the columns in the tochka_insider table according to $trader_name$ ) , get all the data, close the connection, and return the result of the execution statement.","public List insiderNameApi ( DataSource engine , String trader_name ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > result = connection . query ( "" select * from tochka_insider where trader_name = ? "" , new Object [ ] { trader_name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }","Generate syntax code: Establish a connection through $engine$. Execute the SQL statement ( query all the columns in the tochka_insider table according to $trader_name$ ) , get all the data, close the connection, and return the result of the execution statement.","<met> <mod> public </mod> type_identifier insiderNameApi <for> ( <for> type_identifier engine </for> , <for> type_identifier trader_name </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { trader_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL statement: Query the round data in the users table where the user_id is $ID$. Try to use $conn$ to execute the SQL statement, get the first piece of data, and return the obtained data. Return False if an exception occurs.","public Object changeCountAnswer ( JdbcTemplate conn , String ID ) { String query = "" select round from users where user_id = ? "" ; try { List < Object > res = conn . query ( query , new Object [ ] { ID } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; } catch ( Exception e ) { return Boolean . FALSE ; } }","Generate syntax code: Set the SQL statement: Query the round data in the users table where the user_id is $ID$. Try to use $conn$ to execute the SQL statement, get the first piece of data, and return the obtained data. Return False if an exception occurs.","<met> <mod> public </mod> type_identifier changeCountAnswer <for> ( <for> type_identifier conn </for> , <for> type_identifier ID </for> ) </for> <blo> { <loc> type_identifier <var> query = string_literal </var> ; </loc> <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { ID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return <fie> Boolean . FALSE </fie> ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: If the request method is ""GET"", return the rendered ""login.html"". Otherwise, use $db$ to execute SQL ( get all the columns in the users table where username is $uname$, id is $uid$, and password is $pwd$ ) and return the rendered ""index.html"", where user parameter is the query result.","String login ( HttpRequest request , Model model , JdbcTemplate db , String uname , String uid , String pwd ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { return "" login.html "" ; } else { String sql = "" select * from users where username = ? and id = ? and password = ? "" ; List < Object > user = db . query ( sql , new Object [ ] { uname , uid , pwd } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" user "" , user ) ; return "" index.html "" ; } }","Generate syntax code: If the request method is ""GET"", return the rendered ""login.html"". Otherwise, use $db$ to execute SQL ( get all the columns in the users table where username is $uname$, id is $uid$, and password is $pwd$ ) and return the rendered ""index.html"", where user parameter is the query result.","<met> type_identifier login <for> ( <for> type_identifier request </for> , <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier uname </for> , <for> type_identifier uid </for> , <for> type_identifier pwd </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <met> db . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { uname , uid , pwd } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , user ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Get the database engine via $postgresql$. Execute SQL statement ( query all columns in stock_data table based on $id$ and $date$ ) and get all the data. Use for loop to iterate through query result and store in list. Convert list to json and return.,"public Object stockData ( DataSource postgresql , String id , String date ) { JdbcTemplate engine = new JdbcTemplate ( postgresql ) ; List < Object > stock = engine . query ( "" select * from stock_data where id = ? and date = ? "" , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; JSONArray json = new JSONArray ( stock ) ; return json ; }",Generate syntax code: Get the database engine via $postgresql$. Execute SQL statement ( query all columns in stock_data table based on $id$ and $date$ ) and get all the data. Use for loop to iterate through query result and store in list. Convert list to json and return.,"<met> <mod> public </mod> type_identifier stockData <for> ( <for> type_identifier postgresql </for> , <for> type_identifier id </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( postgresql ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> stock = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> json = <obj> new type_identifier <arg> ( stock ) </arg> </obj> </var> ; </loc> <ret> return json ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL using $db$ ( get the name column in the users where id is $id$ ) and get all the data, then print the query results, make sure the $db$ connection is closed, and finally return the rendered ""viewallusers.html"" with the data parameter as the result of the query.","public String doTransfer ( Model model , JdbcTemplate db , String id ) { List < Object > data = db . query ( "" select name from users where id = ? "" , new Object [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( data . toString ( ) ) ; model . addAttribute ( "" data "" , data ) ; return "" viewallusers.html "" ; }","Generate syntax code: Execute the SQL using $db$ ( get the name column in the users where id is $id$ ) and get all the data, then print the query results, make sure the $db$ connection is closed, and finally return the rendered ""viewallusers.html"" with the data parameter as the result of the query.","<met> <mod> public </mod> type_identifier doTransfer <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( <met> data . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , data ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $rwurl$, execute SQL, which reads: Query all the columns in the domain table, get all the data, and return all the query results.","public List domainShowdb ( DataSource rwurl ) { JdbcTemplate e = new JdbcTemplate ( rwurl ) ; List < Object > data = e . query ( "" select * from domain "" , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }","Generate syntax code: Get the database engine through $rwurl$, execute SQL, which reads: Query all the columns in the domain table, get all the data, and return all the query results.","<met> <mod> public </mod> type_identifier domainShowdb <for> ( <for> type_identifier rwurl </for> ) </for> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( rwurl ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> e . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
Generate origin code: Execute the SQL ( query all columns in the passengers table where passenger_name is $passenger_name$ ) using $db$ and get all the data. Print each piece of data using a for loop.,"public void main ( JdbcTemplate db , String passenger_name ) { List < Object > passengers = db . query ( "" select * from passenegers where passenger_name = ? "" , new Object [ ] { passenger_name } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object p : passengers ) { System . out . println ( p . toString ( ) ) ; } }",Generate syntax code: Execute the SQL ( query all columns in the passengers table where passenger_name is $passenger_name$ ) using $db$ and get all the data. Print each piece of data using a for loop.,"<met> <mod> public </mod> void_type main <for> ( <for> type_identifier db </for> , <for> type_identifier passenger_name </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> passengers = <met> db . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { passenger_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier p : passengers ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> p . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Try to use $conn$ to query all columns in the passengers table with id as $flight_id$ and get all the data. If the query result exists, render and return ""success.html"". If Exception occurs, print the exception message.","public String book ( JdbcTemplate conn , String flight_id ) { List < Object > value = new ArrayList < Object > ( ) ; try { value = conn . query ( "" select * from passengers where id = ? "" , new Object [ ] { flight_id } , new BeanPropertyRowMapper ( List . class ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } if ( ! value . isEmpty ( ) ) { return "" success.html "" ; } else { return null ; } }","Generate syntax code: Try to use $conn$ to query all columns in the passengers table with id as $flight_id$ and get all the data. If the query result exists, render and return ""success.html"". If Exception occurs, print the exception message.","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier conn </for> , <for> type_identifier flight_id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> value = <obj> new <gen> type_identifier <typ> < type_identifier > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <try> try <blo> { <exp> <ass> value = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flight_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </ass> ; </exp> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> } </blo> </cat> </try> <if_> if <par> ( <una> ! <met> value . isEmpty <arg> ( ) </arg> </met> </una> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use ORM mode and $conn$ to execute SQL: Query all data information about WED_trigger in the $database$ table according to $story$. Use for loop to print each element in the query result.,"public void selectTrigger ( EntityManager db , Root < Object > database , String story ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( database ) . where ( cb . equal ( database . get ( "" story "" ) , story ) ) ; List < Object > values = db . createQuery ( cq ) . getResultList ( ) ; for ( Object i : values ) { System . out . println ( i . toString ( ) ) ; } }",Generate syntax code: Use ORM mode and $conn$ to execute SQL: Query all data information about WED_trigger in the $database$ table according to $story$. Use for loop to print each element in the query result.,"<met> <mod> public </mod> void_type selectTrigger <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> database </for> , <for> type_identifier story </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( database ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> database . get <arg> ( string_literal ) </arg> </met> , story ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> values = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : values ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> i . toString <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: Set up SQL ( query all the information in the db_name table based on $db_uri$ ) , execute SQL with $conn$ and get all query results. Close the connection, use for loop to iterate through all query results, insert each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate conn , String db_uri ) { String query_sql = "" select * from db_name where db_uri = ? "" ; List < Object > db_names = conn . query ( query_sql , new Object [ ] { db_uri } , new BeanPropertyRowMapper ( List . class ) ) ; return db_names ; }","Generate syntax code: Set up SQL ( query all the information in the db_name table based on $db_uri$ ) , execute SQL with $conn$ and get all query results. Close the connection, use for loop to iterate through all query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier conn </for> , <for> type_identifier db_uri </for> ) </for> <blo> { <loc> type_identifier <var> query_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> db_names = <met> conn . query <arg> ( query_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_uri } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return db_names ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to query all ST_GeometryType in the tablename table with 'shape': $shape$, and return the 0th element of the query result.","public Object findGisDatatypeOftable ( JdbcTemplate conn , String shape ) { String sql = "" select ST_GeometryType from tablename where shape = ? "" ; List < Object > st_type = conn . query ( sql , new Object [ ] { shape } , new BeanPropertyRowMapper ( List . class ) ) ; return st_type . get ( 0 ) ; }","Generate syntax code: Use $conn$ to query all ST_GeometryType in the tablename table with 'shape': $shape$, and return the 0th element of the query result.","<met> <mod> public </mod> type_identifier findGisDatatypeOftable <for> ( <for> type_identifier conn </for> , <for> type_identifier shape </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> st_type = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { shape } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> st_type . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the name column in the databases table ) through $conn$ and get all the data. If the length of the query result is 0, return False, otherwise return the query result.","public Object processInput ( JdbcTemplate conn ) { List < Object > names = conn . query ( "" select * from databases "" , new BeanPropertyRowMapper ( List . class ) ) ; if ( names . size ( ) == 0 ) { return Boolean . FALSE ; } else { return names ; } }","Generate syntax code: Execute the SQL ( get the name column in the databases table ) through $conn$ and get all the data. If the length of the query result is 0, return False, otherwise return the query result.","<met> <mod> public </mod> type_identifier processInput <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> names = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> names . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return <fie> Boolean . FALSE </fie> ; </ret> } </blo> else <blo> { <ret> return names ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine via $host$ and establish the connection, where the parameter of isolation_level is set to 'AUTOCOMMIT'. Execute the SQL statement ( query all columns in the postgresql table based on $name$ ) and get all data, return the results of all queries.","public List queryPostgresql ( DataSource host , String name ) { JdbcTemplate conn = new JdbcTemplate ( host ) ; List < Object > out1 = conn . query ( "" select * from postgresql where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return out1 ; }","Generate syntax code: Get the database engine via $host$ and establish the connection, where the parameter of isolation_level is set to 'AUTOCOMMIT'. Execute the SQL statement ( query all columns in the postgresql table based on $name$ ) and get all data, return the results of all queries.","<met> <mod> public </mod> type_identifier queryPostgresql <for> ( <for> type_identifier host </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> out1 = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return out1 ; </ret> } </blo> </met>"
"Generate origin code: Try to execute SQL by $conn$ ( get all columns in user_info table based on $name$ ) to get all the data and return the execution result. If an Exception occurs, returnthe query result as a string.","public Object query ( JdbcTemplate conn , String name ) { try { List < Object > res = conn . query ( "" select * from user_info where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return e . toString ( ) ; } }","Generate syntax code: Try to execute SQL by $conn$ ( get all columns in user_info table based on $name$ ) to get all the data and return the execution result. If an Exception occurs, returnthe query result as a string.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return <met> e . toString <arg> ( ) </arg> </met> ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: Set SQL using string concatenation: query all columns in Color where color is $color$. Execute SQL with $conn$ and get the first data. Return the result of the query.,"public Object getColor ( JdbcTemplate conn , String color ) { String query = "" select * from Color where color = ? "" ; List < Object > res = conn . query ( query , new Object [ ] { color } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }",Generate syntax code: Set SQL using string concatenation: query all columns in Color where color is $color$. Execute SQL with $conn$ and get the first data. Return the result of the query.,"<met> <mod> public </mod> type_identifier getColor <for> ( <for> type_identifier conn </for> , <for> type_identifier color </for> ) </for> <blo> { <loc> type_identifier <var> query = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { color } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: By the method of ORM, use $conn$ to get the first piece of data of all the columns in the $Users$ table whose 'email' is $login_session$, and finally return the id column of the query result.","public Object createUser ( EntityManager db , Root < Map > user , String login_session ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Map > cq = cb . createQuery ( Map . class ) ; cq . select ( user ) . where ( cb . equal ( user . get ( "" email "" ) , login_session ) ) ; List < Map > rs = db . createQuery ( cq ) . getResultList ( ) ; return rs . get ( 0 ) . get ( "" id "" ) ; }","Generate syntax code: By the method of ORM, use $conn$ to get the first piece of data of all the columns in the $Users$ table whose 'email' is $login_session$, and finally return the id column of the query result.","<met> <mod> public </mod> type_identifier createUser <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> user </for> , <for> type_identifier login_session </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Map . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( user ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> user . get <arg> ( string_literal ) </arg> </met> , login_session ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> <met> rs . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use ORM method to get the database engine through $localhost$ and further get the Session object. Execute the SQL statement ( query the contents of the $File$ table based on $id$ ) and get all the query results. If the query data is empty, return the rendered '404.html' page; otherwise, return the rendered 'file.html' page, where the article parameter is the result stored in the mapionary by the content, created_time, category, tags column in the query result.","public String selectFile ( Model model , EntityManager db , Root < Map > File , String id ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Map > cq = cb . createQuery ( Map . class ) ; cq . select ( File ) . where ( cb . equal ( File . get ( "" id "" ) , id ) ) ; List < Map > file = db . createQuery ( cq ) . getResultList ( ) ; if ( file . isEmpty ( ) ) { return "" 404.html "" ; } else { Map article = new HashMap ( ) ; article . put ( "" context "" , file . get ( 0 ) . get ( "" context "" ) ) ; article . put ( "" created_time "" , file . get ( 0 ) . get ( "" created_time "" ) ) ; article . put ( "" catagory "" , file . get ( 0 ) . get ( "" catagory "" ) ) ; article . put ( "" tags "" , file . get ( 0 ) . get ( "" tags "" ) ) ; model . addAttribute ( "" article "" , article ) ; return "" file.html "" ; } }","Generate syntax code: Use ORM method to get the database engine through $localhost$ and further get the Session object. Execute the SQL statement ( query the contents of the $File$ table based on $id$ ) and get all the query results. If the query data is empty, return the rendered '404.html' page; otherwise, return the rendered 'file.html' page, where the article parameter is the result stored in the mapionary by the content, created_time, category, tags column in the query result.","<met> <mod> public </mod> type_identifier selectFile <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> File </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Map . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( File ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> File . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> file = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> file . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> article = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <exp> <met> article . put <arg> ( string_literal , <met> <met> file . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> article . put <arg> ( string_literal , <met> <met> file . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> article . put <arg> ( string_literal , <met> <met> file . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> article . put <arg> ( string_literal , <met> <met> file . get <arg> ( decimal_integer_literal ) </arg> </met> . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , article ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $engine$ to connect to the database, execute the SQL statement: Get the first id and name data from the fc_leads table, close the database connection, and return the query results.","public List query ( DataSource engine ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < List > result = connection . query ( "" select id,name from fc_leads "" , new BeanPropertyRowMapper ( List . class ) ) ; return result . get ( 0 ) ; }","Generate syntax code: Use $engine$ to connect to the database, execute the SQL statement: Get the first id and name data from the fc_leads table, close the database connection, and return the query results.","<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier engine </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> connection . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If $new_table_name$ is not None, use $conn$ to execute SQL, ( query all oid information in the schema table based on $new_table_name$ ) and get all the data. Close the connection, convert each element in the query result to a map type and return. Otherwise, pass directly.","public List opusRun ( JdbcTemplate conn , String new_table_name ) { if ( null == new_table_name ) { return new ArrayList ( ) ; } else { List < Object > res = conn . query ( "" select * from schema where new_table_name = ? "" , new Object [ ] { new_table_name } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > result = new ArrayList ( ) ; for ( final Object row : res ) { result . add ( new HashMap ( ) { { put ( "" data "" , row ) ; } } ) ; } return result ; } }","Generate syntax code: If $new_table_name$ is not None, use $conn$ to execute SQL, ( query all oid information in the schema table based on $new_table_name$ ) and get all the data. Close the connection, convert each element in the query result to a map type and return. Otherwise, pass directly.","<met> <mod> public </mod> type_identifier opusRun <for> ( <for> type_identifier conn </for> , <for> type_identifier new_table_name </for> ) </for> <blo> { <if_> if <par> ( <bin> null_literal == new_table_name </bin> ) </par> <blo> { <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> else <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { new_table_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( <mod> final </mod> type_identifier row : res ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , row ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set sql ( query all the information in the books table according to $isbn$, $author$ and $title$ ) , use $conn$ to execute SQL and get all the query results. If the query result is not empty, return the rendered ""result.html"" page, where the books parameter is set to the query result; otherwise, return the rendered ""index.html"" page.","public String search ( Model model , JdbcTemplate conn , String isbn , String author , String title ) { String sql_q = "" select * from books where isbn = ? and author = ? and title = ? "" ; List < Object > res = conn . query ( sql_q , new Object [ ] { isbn , author , title } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . isEmpty ( ) ) { return "" index.html "" ; } else { model . addAttribute ( "" books "" , res ) ; return "" result.html "" ; } }","Generate syntax code: Set sql ( query all the information in the books table according to $isbn$, $author$ and $title$ ) , use $conn$ to execute SQL and get all the query results. If the query result is not empty, return the rendered ""result.html"" page, where the books parameter is set to the query result; otherwise, return the rendered ""index.html"" page.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier isbn </for> , <for> type_identifier author </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> sql_q = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( sql_q , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , author , title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> res . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <exp> <met> model . addAttribute <arg> ( string_literal , res ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the reviews_query table based on $book_id$ ) and get the first piece of data. Return ""Error"" if the query result is None, otherwise, return the query result.","public Object api ( JdbcTemplate conn , String book_id ) { List < Object > review_inf = conn . query ( "" select * from reviews_query where book_id = ? "" , new Object [ ] { book_id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( review_inf . isEmpty ( ) ) { return "" Error "" ; } else { return review_inf ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the reviews_query table based on $book_id$ ) and get the first piece of data. Return ""Error"" if the query result is None, otherwise, return the query result.","<met> <mod> public </mod> type_identifier api <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> review_inf = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> review_inf . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return string_literal ; </ret> } </blo> else <blo> { <ret> return review_inf ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use java expressions to set up SQL and query all the columns in the $locati$ where the name of trip is $trip_name$. Execute SQL with $conn$ and get the first data. Print and return query results.,"public List setupDatabase ( JdbcTemplate conn , String user ) { try { List < Object > datapass = conn . query ( "" select password from database where user = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return datapass ; } catch ( Exception e ) { System . out . println ( "" Failed "" ) ; return null ; } }",Generate syntax code: Use java expressions to set up SQL and query all the columns in the $locati$ where the name of trip is $trip_name$. Execute SQL with $conn$ and get the first data. Print and return query results.,"<met> <mod> public </mod> type_identifier setupDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier user </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> datapass = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return datapass ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL ( query password in database based on $user$ ) and get the first piece of data. Close the connection and return the result. If Exception appears, print ""Failed"" directly.","public List setDatabase ( JdbcTemplate conn , String user ) { try { List < List > datapass = conn . query ( "" select password from database where user = ? "" , new Object [ ] { user } , new BeanPropertyRowMapper ( List . class ) ) ; return datapass ; } catch ( Exception e ) { System . out . println ( "" Failed "" ) ; return new ArrayList ( ) ; } }","Generate syntax code: Try to use $conn$ to execute SQL ( query password in database based on $user$ ) and get the first piece of data. Close the connection and return the result. If Exception appears, print ""Failed"" directly.","<met> <mod> public </mod> type_identifier setDatabase <for> ( <for> type_identifier conn </for> , <for> type_identifier user </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> datapass = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return datapass ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the $localhost$ to get the database engine and execute SQL ( get all the columns in the DATABASE table according to $db_name$ ) , get the first piece of data, and finally return the query result.","public Object findDatabase ( DataSource localhost , String db_name ) { JdbcTemplate connection = new JdbcTemplate ( localhost ) ; String stm = "" select * from DATABASE where db_name = ? "" ; List < Object > res = connection . query ( stm , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Use the $localhost$ to get the database engine and execute SQL ( get all the columns in the DATABASE table according to $db_name$ ) , get the first piece of data, and finally return the query result.","<met> <mod> public </mod> type_identifier findDatabase <for> ( <for> type_identifier localhost </for> , <for> type_identifier db_name </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( localhost ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> stm = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> connection . query <arg> ( stm , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement with the following contents: Query all columns in the Drinker table based on $phone$, $addr$ and $city$ and get all the data. Use for loop to store each element of the query results in the list and return the contents of the list.","public List queryDrinker ( JdbcTemplate conn , String phone , String addr , String city ) { List < Object > res = conn . query ( "" select * from Drinker where phone = ? and addr = ? and city = ? "" , new Object [ ] { phone , addr , city } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Use the $conn$ connection to execute the SQL statement with the following contents: Query all columns in the Drinker table based on $phone$, $addr$ and $city$ and get all the data. Use for loop to store each element of the query results in the list and return the contents of the list.","<met> <mod> public </mod> type_identifier queryDrinker <for> ( <for> type_identifier conn </for> , <for> type_identifier phone </for> , <for> type_identifier addr </for> , <for> type_identifier city </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { phone , addr , city } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: In ORM mode, use $conn$ to execute SQL ( query the author information in $books$ based on $isbn$ and $year$ ) and get the first piece of data. Finally, return the query result.","public Object selectRes ( EntityManager db , Root < Object > books , String isbn , String year ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( books ) . where ( cb . equal ( books . get ( "" isbn "" ) , isbn ) , cb . equal ( books . get ( "" year "" ) , year ) ) ; List < Object > rs = db . createQuery ( cq ) . getResultList ( ) ; return rs . get ( 0 ) ; }","Generate syntax code: In ORM mode, use $conn$ to execute SQL ( query the author information in $books$ based on $isbn$ and $year$ ) and get the first piece of data. Finally, return the query result.","<met> <mod> public </mod> type_identifier selectRes <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> books </for> , <for> type_identifier isbn </for> , <for> type_identifier year </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( books ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> books . get <arg> ( string_literal ) </arg> </met> , isbn ) </arg> </met> , <met> cb . equal <arg> ( <met> books . get <arg> ( string_literal ) </arg> </met> , year ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rs = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> rs . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Get database engine by $db_url$ with echo parameter being False, set SQL statement ( query all columns in 'table' table based on $bind$ ) , execute SQL and get all the data. Return the query result.","public List selectValue ( DataSource db_url , String bind ) { JdbcTemplate engine = new JdbcTemplate ( db_url ) ; String query_sql = "" select * from table where bind = ? "" ; List < Object > data = engine . query ( query_sql , new Object [ ] { bind } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; }","Generate syntax code: Get database engine by $db_url$ with echo parameter being False, set SQL statement ( query all columns in 'table' table based on $bind$ ) , execute SQL and get all the data. Return the query result.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier db_url </for> , <for> type_identifier bind </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_url ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query_sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> engine . query <arg> ( query_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { bind } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in a post method, use $con$ to execute SQL ( query all the message in the books through $author$ ) , and return all the query results.","public List index ( HttpRequest request , JdbcTemplate con , String author ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List < Object > data = con . query ( "" select message from books where author = ? "" , new Object [ ] { author } , new BeanPropertyRowMapper ( List . class ) ) ; return data ; } else { return new ArrayList ( ) ; } }","Generate syntax code: If the request module sends the request in a post method, use $con$ to execute SQL ( query all the message in the books through $author$ ) , and return all the query results.","<met> <mod> public </mod> type_identifier index <for> ( <for> type_identifier request </for> , <for> type_identifier con </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return data ; </ret> } </blo> else <blo> { <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute SQL statement under the ORM mode: Get all name data of type $m_type$ in $Table$ table and return the obtained data. If an Exception occurs, return the exception information via logging.error ( ) method.","public List queryData ( EntityManager db , Root < Object > Table , String m_type , Logger logger ) { try { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Table ) . where ( cb . equal ( Table . get ( "" type "" ) , m_type ) ) ; List < Object > res = db . createQuery ( cq ) . getResultList ( ) ; return res ; } catch ( Exception e ) { logger . info ( e . getMessage ( ) ) ; return new ArrayList ( ) ; } }","Generate syntax code: Try to use $conn$ to execute SQL statement under the ORM mode: Get all name data of type $m_type$ in $Table$ table and return the obtained data. If an Exception occurs, return the exception information via logging.error ( ) method.","<met> <mod> public </mod> type_identifier queryData <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Table </for> , <for> type_identifier m_type </for> , <for> type_identifier logger </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Table . get <arg> ( string_literal ) </arg> </met> , m_type ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> logger . info <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the java expression to set up the SQL statement: Select the id data in the $customers$ table with customer_name as $customer_name$ and execute the SQL statement using $conn$ connection. Use for loop to take out the 0th element of each item in the fetched data. If the data retrieved by the for loop is not empty, return it; otherwise, return None.","public Object getCustomerPk ( EntityManager db , Root < List > customers , String customer_name ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < List > cq = cb . createQuery ( List . class ) ; cq . select ( customers ) . where ( cb . equal ( customers . get ( "" customer_name "" ) , customer_name ) ) ; List < List > res = db . createQuery ( cq ) . getResultList ( ) ; List customer_pk = new ArrayList ( ) ; for ( List result : res ) { customer_pk . add ( result . get ( 0 ) ) ; } if ( customer_pk . size ( ) > 0 ) { return customer_pk ; } else { return null ; } }","Generate syntax code: Use the java expression to set up the SQL statement: Select the id data in the $customers$ table with customer_name as $customer_name$ and execute the SQL statement using $conn$ connection. Use for loop to take out the 0th element of each item in the fetched data. If the data retrieved by the for loop is not empty, return it; otherwise, return None.","<met> <mod> public </mod> type_identifier getCustomerPk <for> ( <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> customers </for> , <for> type_identifier customer_name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> List . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( customers ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> customers . get <arg> ( string_literal ) </arg> </met> , customer_name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> customer_pk = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier result : res ) <blo> { <exp> <met> customer_pk . add <arg> ( <met> result . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <bin> <met> customer_pk . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <ret> return customer_pk ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine through $connection_string$ and establish a connection. Execute the SQL statement ( query all the columns in the pg_tables table according to $schemaname$ ) and get all the data. Return True, if the result is queried; otherwise, return False.","public Boolean checkIfTableExists ( DataSource connection_string , String schemaname ) { JdbcTemplate conn = new JdbcTemplate ( connection_string ) ; List < Object > t = conn . query ( "" select * from pg_tables where schemaname = ? "" , new Object [ ] { schemaname } , new BeanPropertyRowMapper ( List . class ) ) ; if ( t . isEmpty ( ) ) { return Boolean . FALSE ; } else { return Boolean . TRUE ; } }","Generate syntax code: Get the database engine through $connection_string$ and establish a connection. Execute the SQL statement ( query all the columns in the pg_tables table according to $schemaname$ ) and get all the data. Return True, if the result is queried; otherwise, return False.","<met> <mod> public </mod> type_identifier checkIfTableExists <for> ( <for> type_identifier connection_string </for> , <for> type_identifier schemaname </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( connection_string ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> t = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { schemaname } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> t . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <fie> Boolean . FALSE </fie> ; </ret> } </blo> else <blo> { <ret> return <fie> Boolean . TRUE </fie> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute the SQL statement ( query all columns in the users table based on $name$ and $id$ ) to get the first piece of data and return the execution result. If an exception occurs, pass.","public List populateDb ( JdbcTemplate conn , String name , String id ) { try { List < Object > user = conn . query ( "" select * from users where name = ? and id = ? "" , new Object [ ] { name , id } , new BeanPropertyRowMapper ( List . class ) ) ; return user ; } catch ( Exception e ) { e . printStackTrace ( ) ; return new ArrayList ( ) ; } }","Generate syntax code: Try to use $conn$ to execute the SQL statement ( query all columns in the users table based on $name$ and $id$ ) to get the first piece of data and return the execution result. If an exception occurs, pass.","<met> <mod> public </mod> type_identifier populateDb <for> ( <for> type_identifier conn </for> , <for> type_identifier name </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name , id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return user ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> e . printStackTrace <arg> ( ) </arg> </met> ; </exp> <ret> return <obj> new type_identifier <arg> ( ) </arg> </obj> ; </ret> } </blo> </cat> </try> } </blo> </met>"
Generate origin code: connect to the database with $engine$. Execute the SQL ( query all city in bars_table where barsid is $barsid$ ) . Store the 0th element of each item in the query result as a list and return.,"public List getBarCities ( DataSource engine , String barsid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List < List > infor = conn . query ( "" select * from bars_table where barsid = ? "" , new Object [ ] { barsid } , new BeanPropertyRowMapper ( List . class ) ) ; List result = new ArrayList ( ) ; for ( List city : infor ) { result . add ( city . get ( 0 ) ) ; } return result ; }",Generate syntax code: connect to the database with $engine$. Execute the SQL ( query all city in bars_table where barsid is $barsid$ ) . Store the 0th element of each item in the query result as a list and return.,"<met> <mod> public </mod> type_identifier getBarCities <for> ( <for> type_identifier engine </for> , <for> type_identifier barsid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> infor = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { barsid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier city : infor ) <blo> { <exp> <met> result . add <arg> ( <met> city . get <arg> ( decimal_integer_literal ) </arg> </met> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
Generate origin code: Query the first 'author' in the books table where the title is $title$ through $conn$ and return the query result.,"public Object main ( JdbcTemplate conn , String title ) { List < Object > res = conn . query ( "" select author from books where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }",Generate syntax code: Query the first 'author' in the books table where the title is $title$ through $conn$ and return the query result.,"<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL with $conn$ ( get all the columns in the books where the id of book is $book_id$ ) and get all the data, print ""No book found"" and return ( ""No Book found"" ) if the length of the query is 0, and finally print the query results.","public String main ( JdbcTemplate conn , String book_id ) { List book = conn . queryForObject ( "" select * from books where book_id = ? "" , new Object [ ] { book_id } , List . class ) ; if ( book . size ( ) == 0 ) { System . out . println ( "" NO book found "" ) ; return "" No Book found "" ; } return null ; }","Generate syntax code: Execute the SQL with $conn$ ( get all the columns in the books where the id of book is $book_id$ ) and get all the data, print ""No book found"" and return ( ""No Book found"" ) if the length of the query is 0, and finally print the query results.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier book_id </for> ) </for> <blo> { <loc> type_identifier <var> book = <met> conn . queryForObject <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { book_id } </arr> </arr> , <fie> List . class </fie> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> book . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </if_> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request as post, then use $con$ to execute SQL ( query all columns in the users through $username$ ) , get all the data, and return False. If the query result does not exist, return False; otherwise, return the query result.","public Object register ( HttpRequest request , JdbcTemplate con , String username ) { if ( request . getMethod ( ) . equals ( "" POST "" ) ) { List < Object > rows = con . query ( "" select * from users where username = ? "" , new Object [ ] { username } , new BeanPropertyRowMapper ( List . class ) ) ; if ( rows . isEmpty ( ) ) { return Boolean . FALSE ; } else { return rows ; } } else { return null ; } }","Generate syntax code: If the request module sends the request as post, then use $con$ to execute SQL ( query all columns in the users through $username$ ) , get all the data, and return False. If the query result does not exist, return False; otherwise, return the query result.","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier con </for> , <for> type_identifier username </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> rows = <met> con . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <met> rows . isEmpty <arg> ( ) </arg> </met> ) </par> <blo> { <ret> return <fie> Boolean . FALSE </fie> ; </ret> } </blo> else <blo> { <ret> return rows ; </ret> } </blo> </if_> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Use the $conn$ connection to execute the SQL statement: Get the first 'name' in the student table based on $sid$ and return the obtained data.,"public Object getTable ( JdbcTemplate conn , String sid ) { List < Object > output = conn . query ( "" select name from student where sid = ? "" , new Object [ ] { sid } , new BeanPropertyRowMapper ( List . class ) ) ; return output . get ( 0 ) ; }",Generate syntax code: Use the $conn$ connection to execute the SQL statement: Get the first 'name' in the student table based on $sid$ and return the obtained data.,"<met> <mod> public </mod> type_identifier getTable <for> ( <for> type_identifier conn </for> , <for> type_identifier sid </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> output = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { sid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> output . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
Generate origin code: Set the SQL statement: Query all columns from the userTable table and execute SQL to get all the data through the $connection$ connection. Use for loop to store each element in the query result into list and return the list content.,"public List query ( JdbcTemplate connection ) { String selectStr = "" select * from userTable "" ; List < Object > result = connection . query ( selectStr , new Object [ ] { connection } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; }",Generate syntax code: Set the SQL statement: Query all columns from the userTable table and execute SQL to get all the data through the $connection$ connection. Use for loop to store each element in the query result into list and return the list content.,"<met> <mod> public </mod> type_identifier query <for> ( <for> type_identifier connection </for> ) </for> <blo> { <loc> type_identifier <var> selectStr = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> connection . query <arg> ( selectStr , <arr> new type_identifier <dim> [ ] </dim> <arr> { connection } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Query the number of id in the book table through $conn$, get the first piece of data, and return the 0th element of the obtained data.","public Integer getBookCount ( JdbcTemplate conn ) { List < Integer > res = conn . query ( "" select count(id) from book "" , new BeanPropertyRowMapper ( List . class ) ) ; return res . get ( 0 ) ; }","Generate syntax code: Query the number of id in the book table through $conn$, get the first piece of data, and return the 0th element of the obtained data.","<met> <mod> public </mod> type_identifier getBookCount <for> ( <for> type_identifier conn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> conn . query <arg> ( string_literal , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: If the request module sends the request in the form of post, try to use $conn$ to query the first piece of id in the users table based on $username$ and $password$, and return the query results. If exception occurs, render and return ""error.html"".","public Object register ( HttpRequest request , JdbcTemplate conn , String username , String password ) { List < Object > user = new ArrayList < Object > ( ) ; if ( request . getMethod ( ) . equals ( "" POST "" ) ) { try { user = conn . query ( "" select id from users where username = ? and password = ? "" , new Object [ ] { username , password } , new BeanPropertyRowMapper ( List . class ) ) ; return user . get ( 0 ) ; } catch ( Exception e ) { return "" error.html "" ; } } return user ; }","Generate syntax code: If the request module sends the request in the form of post, try to use $conn$ to query the first piece of id in the users table based on $username$ and $password$, and return the query results. If exception occurs, render and return ""error.html"".","<met> <mod> public </mod> type_identifier register <for> ( <for> type_identifier request </for> , <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <obj> new <gen> type_identifier <typ> < type_identifier > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <exp> <ass> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </ass> ; </exp> <ret> return <met> user . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </if_> <ret> return user ; </ret> } </blo> </met>"
"Generate origin code: By the way of ORM, use $conn$ to get all the columns in the $Book$ table with 'search_criteria': $search_criteria$, and then return the rendered ""search.html"", where the from_login parameter is False and the books parameter is the query result.","public String searchResults ( Model model , EntityManager db , Root < Object > Book , String search_criteria ) { CriteriaBuilder cb = db . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Book ) . where ( cb . equal ( Book . get ( "" search_criteria "" ) , search_criteria ) ) ; List < Object > books = db . createQuery ( cq ) . getResultList ( ) ; model . addAttribute ( "" from_login "" , "" False "" ) ; model . addAttribute ( "" books "" , books ) ; return "" search.html "" ; }","Generate syntax code: By the way of ORM, use $conn$ to get all the columns in the $Book$ table with 'search_criteria': $search_criteria$, and then return the rendered ""search.html"", where the from_login parameter is False and the books parameter is the query result.","<met> <mod> public </mod> type_identifier searchResults <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Book </for> , <for> type_identifier search_criteria </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> db . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Book ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Book . get <arg> ( string_literal ) </arg> </met> , search_criteria ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> books = <met> <met> db . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , string_literal ) </arg> </met> ; </exp> <exp> <met> model . addAttribute <arg> ( string_literal , books ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the schema_migrations table based on $version$ ) , get the first row of data, and return True if the query data is not empty.","public Boolean handleSchemaMigrations ( JdbcTemplate conn , String version ) { List data_exists = conn . queryForObject ( "" select * from schema_migrations where version = ? "" , new Object [ ] { version } , List . class ) ; if ( data_exists . size ( ) > 0 ) { return Boolean . TRUE ; } else { return Boolean . FALSE ; } }","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the schema_migrations table based on $version$ ) , get the first row of data, and return True if the query data is not empty.","<met> <mod> public </mod> type_identifier handleSchemaMigrations <for> ( <for> type_identifier conn </for> , <for> type_identifier version </for> ) </for> <blo> { <loc> type_identifier <var> data_exists = <met> conn . queryForObject <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { version } </arr> </arr> , <fie> List . class </fie> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> data_exists . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <ret> return <fie> Boolean . TRUE </fie> ; </ret> } </blo> else <blo> { <ret> return <fie> Boolean . FALSE </fie> ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use ORM method to execute SQL with $session$ ( query the id column in the $kownicy$ table according to $Haslo$ the condition that Login is $login$ ) , get the first piece of data, and finally print the result of the execution statement.","public void sprawdz ( EntityManager session , Root < Object > kownicy , Object login , Object Haslo ) { CriteriaBuilder cb = session . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( kownicy . get ( "" id "" ) ) . where ( cb . equal ( kownicy . get ( "" Login "" ) , login ) ) ; cq . select ( kownicy . get ( "" id "" ) ) . where ( cb . equal ( kownicy . get ( "" Haslo "" ) , Haslo ) ) ; List < Object > res = session . createQuery ( cq ) . getResultList ( ) ; System . out . println ( res ) ; }","Generate syntax code: Use ORM method to execute SQL with $session$ ( query the id column in the $kownicy$ table according to $Haslo$ the condition that Login is $login$ ) , get the first piece of data, and finally print the result of the execution statement.","<met> <mod> public </mod> void_type sprawdz <for> ( <for> type_identifier session </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> kownicy </for> , <for> type_identifier login </for> , <for> type_identifier Haslo </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> session . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( <met> kownicy . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> kownicy . get <arg> ( string_literal ) </arg> </met> , login ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( <met> kownicy . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> kownicy . get <arg> ( string_literal ) </arg> </met> , Haslo ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> session . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> } </blo> </met>"
"Generate origin code: Try to use $conn$ to execute the SQL ( query all the emails in the address where user_id is $user_id$ ) and return the query results. If an Exception Exception occurs, the Exception information is printed.","public Object queryEmail ( JdbcTemplate conn , Integer user_id ) { try { List < Object > email = conn . query ( "" select email from address where user_id = ? "" , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; return email ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Try to use $conn$ to execute the SQL ( query all the emails in the address where user_id is $user_id$ ) and return the query results. If an Exception Exception occurs, the Exception information is printed.","<met> <mod> public </mod> type_identifier queryEmail <for> ( <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <try> try <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> email = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return email ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Execute the SQL statement via $conn$ ( get 'name' in the phone table based on $manufacturer$ ) and get the first piece of data. Print the obtained data and close the $conn$ connection, and finally return the obtained result.","public List main ( JdbcTemplate conn , Object manufacturer ) { List account = conn . query ( "" select name from phone where manufacturer = ? "" , new Object [ ] { manufacturer } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( account ) ; return account ; }","Generate syntax code: Execute the SQL statement via $conn$ ( get 'name' in the phone table based on $manufacturer$ ) and get the first piece of data. Print the obtained data and close the $conn$ connection, and finally return the obtained result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier conn </for> , <for> type_identifier manufacturer </for> ) </for> <blo> { <loc> type_identifier <var> account = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { manufacturer } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( account ) </arg> </met> ; </exp> <ret> return account ; </ret> } </blo> </met>"
"Generate origin code: Get the connection via $engine$. Execute the SQL ( query the nome information in the dados table based on $nome_normalizado$ and $bolsa$ ) and get all the data. Return False if the query results in an empty list, otherwise return the query results.","public Object nomeSelect ( DataSource engine , Object nome_normalizado , Object bolsa ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; List nomes = conn . query ( "" select nome from dados where nome_normalizado = ? and bolsa = ? "" , new Object [ ] { nome_normalizado , bolsa } , new BeanPropertyRowMapper ( List . class ) ) ; if ( nomes . size ( ) == 0 ) { return false ; } return nomes ; }","Generate syntax code: Get the connection via $engine$. Execute the SQL ( query the nome information in the dados table based on $nome_normalizado$ and $bolsa$ ) and get all the data. Return False if the query results in an empty list, otherwise return the query results.","<met> <mod> public </mod> type_identifier nomeSelect <for> ( <for> type_identifier engine </for> , <for> type_identifier nome_normalizado </for> , <for> type_identifier bolsa </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> nomes = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { nome_normalizado , bolsa } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> nomes . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> </if_> <ret> return nomes ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the color column in the listname where id is $id$ ) with $conn$ and get all the data, then close the $conn$ connection and return the query results if they are longer than 0.","public List deleteSingle ( JdbcTemplate conn , Integer id ) { String sql = "" select color from listname where id = ? "" ; List result = conn . query ( sql , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; if ( result . size ( ) > 0 ) { return result ; } else { return null ; } }","Generate syntax code: Execute the SQL ( get the color column in the listname where id is $id$ ) with $conn$ and get all the data, then close the $conn$ connection and return the query results if they are longer than 0.","<met> <mod> public </mod> type_identifier deleteSingle <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> type_identifier <var> result = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> result . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <ret> return result ; </ret> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Set up sql ( query the maximum value of the screen_id column in the screens table based on $group$ ) , use $conn$ to execute SQL, get all the query results, and return the 0th item of the query results.","public Object getLastScreenId ( JdbcTemplate conn , Object group ) { List sel = conn . query ( "" select max(screen_id) from screens where group = ? "" , new Object [ ] { group } , new BeanPropertyRowMapper ( List . class ) ) ; return sel . get ( 0 ) ; }","Generate syntax code: Set up sql ( query the maximum value of the screen_id column in the screens table based on $group$ ) , use $conn$ to execute SQL, get all the query results, and return the 0th item of the query results.","<met> <mod> public </mod> type_identifier getLastScreenId <for> ( <for> type_identifier conn </for> , <for> type_identifier group </for> ) </for> <blo> { <loc> type_identifier <var> sel = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { group } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> sel . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Pet$ table based on $name$ ) , and get all the queried data. If the query result is empty, print ""Error"". Otherwise, use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","public List getLastScreenId ( EntityManager conn , Root < Object > Pet , Object name ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( Pet ) . where ( cb . equal ( Pet . get ( "" name "" ) , name ) ) ; List < Object > pets = conn . createQuery ( cq ) . getResultList ( ) ; if ( pets . size ( ) == 0 ) { System . out . println ( "" Error "" ) ; return null ; } else { List res_pet = new ArrayList ( ) ; for ( Object pet : pets ) { res_pet . add ( pet ) ; } return res_pet ; } }","Generate syntax code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $Pet$ table based on $name$ ) , and get all the queried data. If the query result is empty, print ""Error"". Otherwise, use for loop to iterate through all the query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier getLastScreenId <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> Pet </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( Pet ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> Pet . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> pets = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> pets . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> else <blo> { <loc> type_identifier <var> res_pet = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier pet : pets ) <blo> { <exp> <met> res_pet . add <arg> ( pet ) </arg> </met> ; </exp> } </blo> </enh> <ret> return res_pet ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $sql_url$. Set SQL according to the java expression ( query all columns in the $users$ table based on $userid$ ) , execute sql, get the first piece of data, use for loop to convert each piece of query result to dict, store it in list, and return the list.","public List getLastScreenId ( EntityManager sql_url , Root < Object > users , Integer userid ) { CriteriaBuilder cb = sql_url . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( users ) . where ( cb . equal ( users . get ( "" userid "" ) , userid ) ) ; List < Object > a = sql_url . createQuery ( cq ) . getResultList ( ) ; List < Object > result = new ArrayList ( ) ; for ( final Object row : a ) { result . add ( new HashMap ( ) { { put ( "" user "" , row ) ; } } ) ; } return result ; }","Generate syntax code: Get the database engine and establish a connection through $sql_url$. Set SQL according to the java expression ( query all columns in the $users$ table based on $userid$ ) , execute sql, get the first piece of data, use for loop to convert each piece of query result to dict, store it in list, and return the list.","<met> <mod> public </mod> type_identifier getLastScreenId <for> ( <for> type_identifier sql_url </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> users </for> , <for> type_identifier userid </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> sql_url . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( users ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> users . get <arg> ( string_literal ) </arg> </met> , userid ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> a = <met> <met> sql_url . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( <mod> final </mod> type_identifier row : a ) <blo> { <exp> <met> result . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , row ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return result ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $host$, execute SQL ( get all the columns in the db table according to $db_name$ ) , get all the data, and finally return the query result.","public List initSession ( DataSource host , Object db_name ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; List res = engine . query ( "" select * from db where db_name = ? "" , new Object [ ] { db_name } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine through $host$, execute SQL ( get all the columns in the db table according to $db_name$ ) , get all the data, and finally return the query result.","<met> <mod> public </mod> type_identifier initSession <for> ( <for> type_identifier host </for> , <for> type_identifier db_name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { db_name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $connection_string$ and further get the Session object. Execute the SQL statement ( query all the columns in the Session table according to $token$ ) , get all the data, and return the query result.","public List makeSession ( DataSource connection_string , Object token ) { JdbcTemplate engine = new JdbcTemplate ( connection_string ) ; List ns = engine . query ( "" select * from Session where token = ? "" , new Object [ ] { token } , new BeanPropertyRowMapper ( List . class ) ) ; return ns ; }","Generate syntax code: Get the database engine through $connection_string$ and further get the Session object. Execute the SQL statement ( query all the columns in the Session table according to $token$ ) , get all the data, and return the query result.","<met> <mod> public </mod> type_identifier makeSession <for> ( <for> type_identifier connection_string </for> , <for> type_identifier token </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( connection_string ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ns = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { token } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ns ; </ret> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL: To query all columns from the userss table, get all the data, render and return ""users.html"", where the users parameter is the query result.","public String users ( Model model , JdbcTemplate conn ) { List < Object > users = Collections . singletonList ( conn . queryForList ( "" select * from userss "" ) ) ; model . addAttribute ( "" users "" , users ) ; return "" users.html "" ; }","Generate syntax code: Use $conn$ to execute SQL: To query all columns from the userss table, get all the data, render and return ""users.html"", where the users parameter is the query result.","<met> <mod> public </mod> type_identifier users <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> users = <met> Collections . singletonList <arg> ( <met> conn . queryForList <arg> ( string_literal ) </arg> </met> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , users ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If $user_id$ has a value, use $conn$ to execute SQL ( query the color column in the users table based on $user_id$ ) , get the first row of data, and return the rendered ""index.html"" page, where the parameter user is the query result.","public String main ( Model model , JdbcTemplate conn , Integer user_id ) { List < Object > user = conn . query ( "" select color from users where user_id = ? "" , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" user "" , user ) ; return "" index.html "" ; }","Generate syntax code: If $user_id$ has a value, use $conn$ to execute SQL ( query the color column in the users table based on $user_id$ ) , get the first row of data, and return the rendered ""index.html"" page, where the parameter user is the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> user = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , user ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: Set the query statement to: Query all columns in the pyunitastratigrafiche table using $scavo$ and $area$ processed by the % operator, and execute the SQL statement using the $engine$ connection to get all the data and return the query results.","public List selectUsFromDbSql ( JdbcTemplate engine , Object scavo , Object area ) { List res = engine . query ( "" select * from pyunitastratigrafiche where scavo = ? and area = ? "" , new Object [ ] { scavo , area } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; }","Generate syntax code: Set the query statement to: Query all columns in the pyunitastratigrafiche table using $scavo$ and $area$ processed by the % operator, and execute the SQL statement using the $engine$ connection to get all the data and return the query results.","<met> <mod> public </mod> type_identifier selectUsFromDbSql <for> ( <for> type_identifier engine </for> , <for> type_identifier scavo </for> , <for> type_identifier area </for> ) </for> <blo> { <loc> type_identifier <var> res = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { scavo , area } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Execute SQL ( query all the data in the 'columns' column of the table_name table according to $language$ ) , convert each item of the query result to dict, store it as list, and return.","public List < Object > maybeInTheTable ( DataSource engine , Object language ) { JdbcTemplate connection = new JdbcTemplate ( engine ) ; List < Object > data = connection . query ( "" select columns from table_name where language = ? "" , new Object [ ] { language } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object row : data ) { results . add ( new HashMap ( ) { { put ( "" columns "" , row ) ; } } ) ; } return results ; }","Generate syntax code: connect the database according to $engine$. Execute SQL ( query all the data in the 'columns' column of the table_name table according to $language$ ) , convert each item of the query result to dict, store it as list, and return.","<met> <mod> public </mod> <gen> type_identifier <typ> < type_identifier > </typ> </gen> maybeInTheTable <for> ( <for> type_identifier engine </for> , <for> type_identifier language </for> ) </for> <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> data = <met> connection . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { language } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <obj> new <gen> type_identifier <typ> < type_identifier > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : data ) <blo> { <exp> <met> results . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , row ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> </met>"
"Generate origin code: Set SQL ( Format the output string using the format ( ) function, query the index in the 'name_table' with the string $others$ ) , and execute the SQL statement over the $conn$ connection. Return True if the query result exists. Otherwise, return False.","public Boolean getIndex ( JdbcTemplate conn , Object others ) { String query = "" select index from name_table where others = ? "" ; List res = conn . query ( query , new Object [ ] { others } , new BeanPropertyRowMapper ( List . class ) ) ; if ( res . size ( ) > 0 ) { return true ; } else { return false ; } }","Generate syntax code: Set SQL ( Format the output string using the format ( ) function, query the index in the 'name_table' with the string $others$ ) , and execute the SQL statement over the $conn$ connection. Return True if the query result exists. Otherwise, return False.","<met> <mod> public </mod> type_identifier getIndex <for> ( <for> type_identifier conn </for> , <for> type_identifier others </for> ) </for> <blo> { <loc> type_identifier <var> query = string_literal </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { others } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <if_> if <par> ( <bin> <met> res . size <arg> ( ) </arg> </met> > decimal_integer_literal </bin> ) </par> <blo> { <ret> return true ; </ret> } </blo> else <blo> { <ret> return false ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Try to use $engine$ to get the database engine, set up SQL ( query the title column in the test table according to $name$ ) , execute sql, get all the data, and return the query data. If an exception occurs during execution, return False.","public List getIndex ( DataSource engine , Object name ) { try { JdbcTemplate connection = new JdbcTemplate ( engine ) ; String query = "" select title from test where name = ? "" ; List result = connection . query ( query , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return result ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to use $engine$ to get the database engine, set up SQL ( query the title column in the test table according to $name$ ) , execute sql, get all the data, and return the query data. If an exception occurs during execution, return False.","<met> <mod> public </mod> type_identifier getIndex <for> ( <for> type_identifier engine </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> connection = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = string_literal </var> ; </loc> <loc> type_identifier <var> result = <met> connection . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return result ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $localhost$ to get the database engine and execute SQL ( get all the columns in the Flie table according to $id$ ) , get the first piece of data, and finally return the rendered 'file.html', where the article parameter is the query result.","public String main ( Model model , DataSource localhost , Integer id ) { JdbcTemplate engine = new JdbcTemplate ( localhost ) ; List < Object > file = engine . query ( "" select * from Flie where id = ? "" , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" article "" , file ) ; return "" file.html "" ; }","Generate syntax code: Use $localhost$ to get the database engine and execute SQL ( get all the columns in the Flie table according to $id$ ) , get the first piece of data, and finally return the rendered 'file.html', where the article parameter is the query result.","<met> <mod> public </mod> type_identifier main <for> ( <for> type_identifier model </for> , <for> type_identifier localhost </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( localhost ) </arg> </obj> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> file = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , file ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
"Generate origin code: If the request method is ""GET"", try to use $db$ to execute SQL ( get all the columns in the books table based on $isbn$, $title$ and $author$ ) , get the first piece of data, and return the rendered ""search.html"", where the result parameter is the query result; otherwise, return the rendered ""error.html"".","public String search ( HttpRequest request , Model model , JdbcTemplate db , Object isbn , Object title , Object author ) { if ( request . getMethod ( ) . equals ( "" GET "" ) ) { try { String query = "" select * from books where isbn = ? and title = ? and author = ? "" ; List book = db . query ( query , new Object [ ] { isbn , title , author } , new BeanPropertyRowMapper ( List . class ) ) ; model . addAttribute ( "" result "" , book ) ; return "" search.html "" ; } catch ( Exception e ) { return "" error.html "" ; } } else { return null ; } }","Generate syntax code: If the request method is ""GET"", try to use $db$ to execute SQL ( get all the columns in the books table based on $isbn$, $title$ and $author$ ) , get the first piece of data, and return the rendered ""search.html"", where the result parameter is the query result; otherwise, return the rendered ""error.html"".","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier request </for> , <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier isbn </for> , <for> type_identifier title </for> , <for> type_identifier author </for> ) </for> <blo> { <if_> if <par> ( <met> <met> request . getMethod <arg> ( ) </arg> </met> . equals <arg> ( string_literal ) </arg> </met> ) </par> <blo> { <try> try <blo> { <loc> type_identifier <var> query = string_literal </var> ; </loc> <loc> type_identifier <var> book = <met> db . query <arg> ( query , <arr> new type_identifier <dim> [ ] </dim> <arr> { isbn , title , author } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> model . addAttribute <arg> ( string_literal , book ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> else <blo> { <ret> return null_literal ; </ret> } </blo> </if_> } </blo> </met>"
"Generate origin code: Use $connection$ to create a cursor object, and use the cursor object to execute SQL ( get 'id' in the customer table based on $name$ ) to get the first piece of data and return the obtained data.","public List querySqlite3 ( DataSource connection , Object name ) { JdbcTemplate c = new JdbcTemplate ( connection ) ; List ns = c . query ( "" select id from customer where name = ? "" , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return ns ; }","Generate syntax code: Use $connection$ to create a cursor object, and use the cursor object to execute SQL ( get 'id' in the customer table based on $name$ ) to get the first piece of data and return the obtained data.","<met> <mod> public </mod> type_identifier querySqlite3 <for> ( <for> type_identifier connection </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> c = <obj> new type_identifier <arg> ( connection ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> ns = <met> c . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return ns ; </ret> } </blo> </met>"
"Generate origin code: Set the SQL ( query the date information in the runs where user_id is $user_id$ ) . Execute the SQL using $db$ and get the first data. Use A for loop to store the query results in a list. Finally, return rendered 'all_runs.html' and pass the query results to the runs parameter.","public String allRuns ( Model model , JdbcTemplate db , Integer user_id ) { String sql = "" select date from runs where user_id = ? "" ; List result = db . query ( sql , new Integer [ ] { user_id } , new BeanPropertyRowMapper ( List . class ) ) ; List runs = new ArrayList ( ) ; for ( Object row : result ) { runs . add ( row ) ; } model . addAttribute ( "" runs "" , runs ) ; return "" all_runs.html "" ; }","Generate syntax code: Set the SQL ( query the date information in the runs where user_id is $user_id$ ) . Execute the SQL using $db$ and get the first data. Use A for loop to store the query results in a list. Finally, return rendered 'all_runs.html' and pass the query results to the runs parameter.","<met> <mod> public </mod> type_identifier allRuns <for> ( <for> type_identifier model </for> , <for> type_identifier db </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> type_identifier <var> result = <met> db . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { user_id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> runs = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : result ) <blo> { <exp> <met> runs . add <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> <exp> <met> model . addAttribute <arg> ( string_literal , runs ) </arg> </met> ; </exp> <ret> return string_literal ; </ret> } </blo> </met>"
Generate origin code: Use the java expression to execute SQL ( get all columns in the $from_tbl$ table with id greater than $last$ ) and use $conn$ to execute SQL to get all the data. Then use for loop to print each item of the query results.,"public void mirrorTable ( EntityManager conn , Root < Object > from_tbl , Object last ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( from_tbl ) . where ( cb . equal ( from_tbl . get ( "" id "" ) , last ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; for ( final Object row : result ) { System . out . println ( row ) ; } }",Generate syntax code: Use the java expression to execute SQL ( get all columns in the $from_tbl$ table with id greater than $last$ ) and use $conn$ to execute SQL to get all the data. Then use for loop to print each item of the query results.,"<met> <mod> public </mod> void_type mirrorTable <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> from_tbl </for> , <for> type_identifier last </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( from_tbl ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> from_tbl . get <arg> ( string_literal ) </arg> </met> , last ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( <mod> final </mod> type_identifier row : result ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( row ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
"Generate origin code: connect the database according to $engine$. Set SQL according to the java expression ( query all columns in the $DSWriterMetrics$ table whose metrics_id is $id$ ) , execute sql, get all the query results, and return the query results.","public List functionToRun ( EntityManager engine , Root < Object > DSWriterMetrics , Integer id ) { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( DSWriterMetrics ) . where ( cb . equal ( DSWriterMetrics . get ( "" metrics_id "" ) , id ) ) ; List < Object > res = engine . createQuery ( cq ) . getResultList ( ) ; return res ; }","Generate syntax code: connect the database according to $engine$. Set SQL according to the java expression ( query all columns in the $DSWriterMetrics$ table whose metrics_id is $id$ ) , execute sql, get all the query results, and return the query results.","<met> <mod> public </mod> type_identifier functionToRun <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> DSWriterMetrics </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( DSWriterMetrics ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> DSWriterMetrics . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Set up SQL ( query all columns in the app table based on $date$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all query results, insert each piece of data into a list, and return the list.","public List selectValue ( JdbcTemplate connection , Object date ) { String query_sql = "" select * from app where date = ? "" ; List results = connection . query ( query_sql , new Object [ ] { date } , new BeanPropertyRowMapper ( List . class ) ) ; List apps = new ArrayList ( ) ; for ( Object i : results ) { apps . add ( i ) ; } return apps ; }","Generate syntax code: Set up SQL ( query all columns in the app table based on $date$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all query results, insert each piece of data into a list, and return the list.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier connection </for> , <for> type_identifier date </for> ) </for> <blo> { <loc> type_identifier <var> query_sql = string_literal </var> ; </loc> <loc> type_identifier <var> results = <met> connection . query <arg> ( query_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { date } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> apps = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> apps . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return apps ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine through $rwurl$ and execute the SQL statement: Query all columns from the tlscfg table, get all the data, and return the query results.","public List tlsShowdb ( DataSource rwurl ) { JdbcTemplate e = new JdbcTemplate ( rwurl ) ; List res = e . query ( "" select * from tlscfg "" , new BeanPropertyRowMapper < > ( List . class ) ) ; return res ; }","Generate syntax code: Get the database engine through $rwurl$ and execute the SQL statement: Query all columns from the tlscfg table, get all the data, and return the query results.","<met> <mod> public </mod> type_identifier tlsShowdb <for> ( <for> type_identifier rwurl </for> ) </for> <blo> { <loc> type_identifier <var> e = <obj> new type_identifier <arg> ( rwurl ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> res = <met> e . query <arg> ( string_literal , <obj> new <gen> type_identifier <typ> < > </typ> </gen> <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Try to set up SQL based on the java expression: ( query id column in $bestkrok$ table based on $quote$ ) , execute sql with $conn$ and get all the data. Use for loop to iterate through all the obtained query results, insert each data into a list and return the list. If an exception occurs during execution, return False.","public List Source ( EntityManager conn , Root < Object > bestkrok , Object quote ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; try { cq . select ( bestkrok . get ( "" id "" ) ) . where ( cb . equal ( bestkrok . get ( "" quote "" ) , quote ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; List ids = new ArrayList ( ) ; for ( Object i : results ) { ids . add ( i ) ; } return ids ; } catch ( Exception e ) { return null ; } }","Generate syntax code: Try to set up SQL based on the java expression: ( query id column in $bestkrok$ table based on $quote$ ) , execute sql with $conn$ and get all the data. Use for loop to iterate through all the obtained query results, insert each data into a list and return the list. If an exception occurs during execution, return False.","<met> <mod> public </mod> type_identifier Source <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> bestkrok </for> , <for> type_identifier quote </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <try> try <blo> { <exp> <met> <met> cq . select <arg> ( <met> bestkrok . get <arg> ( string_literal ) </arg> </met> ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> bestkrok . get <arg> ( string_literal ) </arg> </met> , quote ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> ids = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> ids . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return ids ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use the java expression to set up SQL statement: Query the $documents$ table with 'id': $id$, execute SQL statement by $conn$ to get all the data. Print and return the result of the execution statement.","public List markDocumentErrored ( EntityManager conn , Root < Object > documents , Integer id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( documents ) . where ( cb . equal ( documents . get ( "" id "" ) , id ) ) ; List < Object > res = conn . createQuery ( cq ) . getResultList ( ) ; System . out . println ( res ) ; return res ; }","Generate syntax code: Use the java expression to set up SQL statement: Query the $documents$ table with 'id': $id$, execute SQL statement by $conn$ to get all the data. Print and return the result of the execution statement.","<met> <mod> public </mod> type_identifier markDocumentErrored <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> documents </for> , <for> type_identifier id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( documents ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> documents . get <arg> ( string_literal ) </arg> </met> , id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( res ) </arg> </met> ; </exp> <ret> return res ; </ret> } </blo> </met>"
"Generate origin code: Get the database engine and establish a connection through $BASE$. Execute the SQL statement ( query all the query results of all the information in the Offre table based on $prix_offre$ ) , use for loop to insert the data one by one into a list, close the connection, and return the list.","public List getBd ( DataSource BASE , Object prix_offre ) { JdbcTemplate engine = new JdbcTemplate ( BASE ) ; List query = engine . query ( "" select * from Offre where prix_offre = ? "" , new Object [ ] { prix_offre } , new BeanPropertyRowMapper ( List . class ) ) ; List data = new ArrayList ( ) ; for ( Object i : query ) { data . add ( i ) ; } return data ; }","Generate syntax code: Get the database engine and establish a connection through $BASE$. Execute the SQL statement ( query all the query results of all the information in the Offre table based on $prix_offre$ ) , use for loop to insert the data one by one into a list, close the connection, and return the list.","<met> <mod> public </mod> type_identifier getBd <for> ( <for> type_identifier BASE </for> , <for> type_identifier prix_offre </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( BASE ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { prix_offre } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> data = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : query ) <blo> { <exp> <met> data . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return data ; </ret> } </blo> </met>"
Generate origin code: Set SQL based on the java expression: ( query all columns in $pressure$ table based on $city$ ) . Execute the SQL with $connection$ and get the 0th element of all data and return the obtained result.,"public Object findPressure ( EntityManager connection , Root < Object > pressure , Object city ) { CriteriaBuilder cb = connection . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( pressure ) . where ( cb . equal ( pressure . get ( "" city "" ) , city ) ) ; List < Object > res = connection . createQuery ( cq ) . getResultList ( ) ; return res . get ( 0 ) ; }",Generate syntax code: Set SQL based on the java expression: ( query all columns in $pressure$ table based on $city$ ) . Execute the SQL with $connection$ and get the 0th element of all data and return the obtained result.,"<met> <mod> public </mod> type_identifier findPressure <for> ( <for> type_identifier connection </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> pressure </for> , <for> type_identifier city </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> connection . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( pressure ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> pressure . get <arg> ( string_literal ) </arg> </met> , city ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> res = <met> <met> connection . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return <met> res . get <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Try to set SQL ( query all columns in the fruit table based on $name$ ) , use $conn$ to execute SQL to get all the information, store each item of the query result as list and return. If an Exception occurs, use raise to throw an exception based on the error message.","public List getColumn ( JdbcTemplate connection , Object name ) { try { String query_sql = "" select * from fruit where name = ? "" ; List fruits = connection . query ( query_sql , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; List < Object > results = new ArrayList < Object > ( ) ; for ( Object row : fruits ) { results . add ( new HashMap ( ) { { put ( "" name "" , row ) ; } } ) ; } return results ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Try to set SQL ( query all columns in the fruit table based on $name$ ) , use $conn$ to execute SQL to get all the information, store each item of the query result as list and return. If an Exception occurs, use raise to throw an exception based on the error message.","<met> <mod> public </mod> type_identifier getColumn <for> ( <for> type_identifier connection </for> , <for> type_identifier name </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> query_sql = string_literal </var> ; </loc> <loc> type_identifier <var> fruits = <met> connection . query <arg> ( query_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <obj> new <gen> type_identifier <typ> < type_identifier > </typ> </gen> <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : fruits ) <blo> { <exp> <met> results . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , row ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $conn$ to execute SQL according to the java expression ( get the usage column in the $table$ table according to $user_id$ ) and get the first row of data, use for loop to convert each item of the query result to a dictionary type and return the dictionary content, and finally return None.","public Object getUserByUserId ( EntityManager conn , Root < Object > table , Integer user_id ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( table ) . where ( cb . equal ( table . get ( "" user_id "" ) , user_id ) ) ; List < Object > result = conn . createQuery ( cq ) . getResultList ( ) ; for ( Object user : result ) { return user ; } return null ; }","Generate syntax code: Use $conn$ to execute SQL according to the java expression ( get the usage column in the $table$ table according to $user_id$ ) and get the first row of data, use for loop to convert each item of the query result to a dictionary type and return the dictionary content, and finally return None.","<met> <mod> public </mod> type_identifier getUserByUserId <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier user_id </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , user_id ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> result = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier user : result ) <blo> { <ret> return user ; </ret> } </blo> </enh> <ret> return null_literal ; </ret> } </blo> </met>"
"Generate origin code: Try the following code: set the SQL ( where username is $username$, password is $password$ and por is $port$ in users query ) . Execute the SQL with $conn$ and get the first data. Print each data in the query results using the for loop. If an exception occurs, the 'failed' information is printed.","public void pymysqlConnect ( JdbcTemplate conn , Object username , Object password , Integer port ) { try { String sql = "" select * from users where username = ? and password = ? and port = ? "" ; List res = conn . query ( sql , new Object [ ] { username , password , port } , new BeanPropertyRowMapper ( List . class ) ) ; for ( Object k : res ) { System . out . println ( k ) ; } } catch ( Exception e ) { System . out . println ( "" failed "" ) ; } }","Generate syntax code: Try the following code: set the SQL ( where username is $username$, password is $password$ and por is $port$ in users query ) . Execute the SQL with $conn$ and get the first data. Print each data in the query results using the for loop. If an exception occurs, the 'failed' information is printed.","<met> <mod> public </mod> void_type pymysqlConnect <for> ( <for> type_identifier conn </for> , <for> type_identifier username </for> , <for> type_identifier password </for> , <for> type_identifier port </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> type_identifier <var> res = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { username , password , port } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier k : res ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( k ) </arg> </met> ; </exp> } </blo> </enh> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( string_literal ) </arg> </met> ; </exp> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Try to execute an SQL statement using $conn$ in ORM ( query all the information in the $table$ where criteria is $criteria$ ) to get all the information and return, print the specific exception information if a SQLAlchemyError occurs.","public Object search ( EntityManager conn , Root < Object > table , Object criteria ) { CriteriaBuilder cb = conn . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; try { cq . select ( table ) . where ( cb . equal ( table . get ( "" criteria "" ) , criteria ) ) ; List < Object > results = conn . createQuery ( cq ) . getResultList ( ) ; return results ; } catch ( Exception e ) { System . out . println ( e . getMessage ( ) ) ; return null ; } }","Generate syntax code: Try to execute an SQL statement using $conn$ in ORM ( query all the information in the $table$ where criteria is $criteria$ ) to get all the information and return, print the specific exception information if a SQLAlchemyError occurs.","<met> <mod> public </mod> type_identifier search <for> ( <for> type_identifier conn </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> table </for> , <for> type_identifier criteria </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> conn . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <try> try <blo> { <exp> <met> <met> cq . select <arg> ( table ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> table . get <arg> ( string_literal ) </arg> </met> , criteria ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> results = <met> <met> conn . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( <met> e . getMessage <arg> ( ) </arg> </met> ) </arg> </met> ; </exp> <ret> return null_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Experiment with executing SQL statements over a $conn$ connection ( by querying all columns in the flightsAgain where the id of flight is $flightID$ ) and get all the data, turn each query result into a dict and store it as a list and return. If a ValueError exception occurs, render and return ""error.html"".","public Object book ( Model model , JdbcTemplate conn , Integer flightID ) { try { List flight_data = conn . query ( "" select * from flightsAgain where flightID = ? "" , new Integer [ ] { flightID } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object i : flight_data ) { results . add ( i ) ; } return results ; } catch ( Exception e ) { return "" error.html "" ; } }","Generate syntax code: Experiment with executing SQL statements over a $conn$ connection ( by querying all columns in the flightsAgain where the id of flight is $flightID$ ) and get all the data, turn each query result into a dict and store it as a list and return. If a ValueError exception occurs, render and return ""error.html"".","<met> <mod> public </mod> type_identifier book <for> ( <for> type_identifier model </for> , <for> type_identifier conn </for> , <for> type_identifier flightID </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> flight_data = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { flightID } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : flight_data ) <blo> { <exp> <met> results . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return results ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return string_literal ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Use $host$ to get the database engine and execute SQL ( get the abstrID column in the tblGW table processed by the counting method where abstrName is $name$ ) , get all the data, and finally return the 0th element of the oth row of the query result.","public char getNum ( DataSource host , Object name ) { JdbcTemplate engine = new JdbcTemplate ( host ) ; String sql = "" select count(abstrID) from tblGW where abstrName = ? "" ; List < String > row = engine . query ( sql , new Object [ ] { name } , new BeanPropertyRowMapper ( List . class ) ) ; return row . get ( 0 ) . charAt ( 0 ) ; }","Generate syntax code: Use $host$ to get the database engine and execute SQL ( get the abstrID column in the tblGW table processed by the counting method where abstrName is $name$ ) , get all the data, and finally return the 0th element of the oth row of the query result.","<met> <mod> public </mod> <int> char </int> getNum <for> ( <for> type_identifier host </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( host ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> row = <met> engine . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { name } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return <met> <met> row . get <arg> ( decimal_integer_literal ) </arg> </met> . charAt <arg> ( decimal_integer_literal ) </arg> </met> ; </ret> } </blo> </met>"
"Generate origin code: Execute the SQL ( get the stars column in the movies where title is $title$ ) using $engine$ and get all the data, then print out the query result.","public List titleCall ( JdbcTemplate engine , Object title ) { List resultData = engine . query ( "" select stars from movies where title = ? "" , new Object [ ] { title } , new BeanPropertyRowMapper ( List . class ) ) ; System . out . println ( resultData ) ; return resultData ; }","Generate syntax code: Execute the SQL ( get the stars column in the movies where title is $title$ ) using $engine$ and get all the data, then print out the query result.","<met> <mod> public </mod> type_identifier titleCall <for> ( <for> type_identifier engine </for> , <for> type_identifier title </for> ) </for> <blo> { <loc> type_identifier <var> resultData = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { title } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <exp> <met> <fie> System . out </fie> . println <arg> ( resultData ) </arg> </met> ; </exp> <ret> return resultData ; </ret> } </blo> </met>"
Generate origin code: Try to execute the following code: Use $engine$ to get the database connection; use java expressions to set SQL: query all the information in $mytable$; use the connection to execute SQL and get all the data and return the query results. Return False if an exception occurs.,"public Object testTransaction ( EntityManager engine , Root < Object > mytable ) { try { CriteriaBuilder cb = engine . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( mytable ) ; List < Object > mytable_sql = engine . createQuery ( cq ) . getResultList ( ) ; return mytable_sql ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try to execute the following code: Use $engine$ to get the database connection; use java expressions to set SQL: query all the information in $mytable$; use the connection to execute SQL and get all the data and return the query results. Return False if an exception occurs.,"<met> <mod> public </mod> type_identifier testTransaction <for> ( <for> type_identifier engine </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> mytable </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> cb = <met> engine . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> cq . select <arg> ( mytable ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> mytable_sql = <met> <met> engine . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <ret> return mytable_sql ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database engine through $dbDir$. Use sessionmaker ( ) to create a configured Session class and bind the database engine. Instantiate Session, and then use ORM method to execute the SQL statement: Query all data in $csvtable$ through $currentdate$ and $name$. Use for loop traversal to query the results and prints them. Make sure 'session' is off.","public void currentDayData ( EntityManager dbDir , Root < Object > csvtable , Object currentdate , Object name ) { CriteriaBuilder cb = dbDir . getCriteriaBuilder ( ) ; CriteriaQuery < Object > cq = cb . createQuery ( Object . class ) ; cq . select ( csvtable ) . where ( cb . equal ( csvtable . get ( "" DATE "" ) , currentdate ) ) ; cq . select ( csvtable ) . where ( cb . equal ( csvtable . get ( "" NAME "" ) , name ) ) ; List < Object > count = dbDir . createQuery ( cq ) . getResultList ( ) ; for ( Object i : count ) { System . out . println ( i ) ; } }","Generate syntax code: Get the database engine through $dbDir$. Use sessionmaker ( ) to create a configured Session class and bind the database engine. Instantiate Session, and then use ORM method to execute the SQL statement: Query all data in $csvtable$ through $currentdate$ and $name$. Use for loop traversal to query the results and prints them. Make sure 'session' is off.","<met> <mod> public </mod> void_type currentDayData <for> ( <for> type_identifier dbDir </for> , <for> <gen> type_identifier <typ> < type_identifier > </typ> </gen> csvtable </for> , <for> type_identifier currentdate </for> , <for> type_identifier name </for> ) </for> <blo> { <loc> type_identifier <var> cb = <met> dbDir . getCriteriaBuilder <arg> ( ) </arg> </met> </var> ; </loc> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> cq = <met> cb . createQuery <arg> ( <fie> Object . class </fie> ) </arg> </met> </var> ; </loc> <exp> <met> <met> cq . select <arg> ( csvtable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> csvtable . get <arg> ( string_literal ) </arg> </met> , currentdate ) </arg> </met> ) </arg> </met> ; </exp> <exp> <met> <met> cq . select <arg> ( csvtable ) </arg> </met> . where <arg> ( <met> cb . equal <arg> ( <met> csvtable . get <arg> ( string_literal ) </arg> </met> , name ) </arg> </met> ) </arg> </met> ; </exp> <loc> <gen> type_identifier <typ> < type_identifier > </typ> </gen> <var> count = <met> <met> dbDir . createQuery <arg> ( cq ) </arg> </met> . getResultList <arg> ( ) </arg> </met> </var> ; </loc> <enh> for ( type_identifier i : count ) <blo> { <exp> <met> <fie> System . out </fie> . println <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> } </blo> </met>"
Generate origin code: Execute SQL through $conn$ ( get NAME column in sqlite_master table based on $TYPE$ ) and get all the data. Then use for loop to store each item of the query results as list and finally return the contents of the list.,"public List testSqlaSanitisesDataOnInput ( JdbcTemplate conn , Object TYPE ) { String NAME_sql = "" select NAME from sqlite_master where TYPE = ? "" ; List results = conn . query ( NAME_sql , new Object [ ] { TYPE } , new BeanPropertyRowMapper ( List . class ) ) ; List NAMES = new ArrayList ( ) ; for ( Object i : results ) { NAMES . add ( i ) ; } return NAMES ; }",Generate syntax code: Execute SQL through $conn$ ( get NAME column in sqlite_master table based on $TYPE$ ) and get all the data. Then use for loop to store each item of the query results as list and finally return the contents of the list.,"<met> <mod> public </mod> type_identifier testSqlaSanitisesDataOnInput <for> ( <for> type_identifier conn </for> , <for> type_identifier TYPE </for> ) </for> <blo> { <loc> type_identifier <var> NAME_sql = string_literal </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( NAME_sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { TYPE } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> NAMES = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier i : results ) <blo> { <exp> <met> NAMES . add <arg> ( i ) </arg> </met> ; </exp> } </blo> </enh> <ret> return NAMES ; </ret> } </blo> </met>"
"Generate origin code: Use to $db_connect$ to connect to the database, select all the columns that line_of_service is $line_of_service$ in the employee1 table, get all the data, convert each item of the query result to dict and store it as list. If the length of list is 0, return False; otherwise, return list content.","public Object get ( DataSource db_connect , Object line_of_service ) { JdbcTemplate engine = new JdbcTemplate ( db_connect ) ; List query = engine . query ( "" select * from employee1 where line_of_service = ? "" , new Object [ ] { line_of_service } , new BeanPropertyRowMapper ( List . class ) ) ; List results = new ArrayList ( ) ; for ( Object row : query ) { results . add ( new HashMap ( ) { { put ( "" columns "" , row ) ; } } ) ; } if ( results . size ( ) == 0 ) { return false ; } else { return results ; } }","Generate syntax code: Use to $db_connect$ to connect to the database, select all the columns that line_of_service is $line_of_service$ in the employee1 table, get all the data, convert each item of the query result to dict and store it as list. If the length of list is 0, return False; otherwise, return list content.","<met> <mod> public </mod> type_identifier get <for> ( <for> type_identifier db_connect </for> , <for> type_identifier line_of_service </for> ) </for> <blo> { <loc> type_identifier <var> engine = <obj> new type_identifier <arg> ( db_connect ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> query = <met> engine . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { line_of_service } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <loc> type_identifier <var> results = <obj> new type_identifier <arg> ( ) </arg> </obj> </var> ; </loc> <enh> for ( type_identifier row : query ) <blo> { <exp> <met> results . add <arg> ( <obj> new type_identifier <arg> ( ) </arg> <cla> { <blo> { <exp> <met> put <arg> ( string_literal , row ) </arg> </met> ; </exp> } </blo> } </cla> </obj> ) </arg> </met> ; </exp> } </blo> </enh> <if_> if <par> ( <bin> <met> results . size <arg> ( ) </arg> </met> == decimal_integer_literal </bin> ) </par> <blo> { <ret> return false ; </ret> } </blo> else <blo> { <ret> return results ; </ret> } </blo> </if_> } </blo> </met>"
Generate origin code: Try to execute SQL via $conn$: Query all type_id's in the resources table based on $res_id$ and return the query result. Return False if an exception occurs.,"public Object getRes ( JdbcTemplate conn , Integer id ) { try { List res = conn . query ( "" select type_id from resources where res_id = ? "" , new Integer [ ] { id } , new BeanPropertyRowMapper ( List . class ) ) ; return res ; } catch ( Exception e ) { return false ; } }",Generate syntax code: Try to execute SQL via $conn$: Query all type_id's in the resources table based on $res_id$ and return the query result. Return False if an exception occurs.,"<met> <mod> public </mod> type_identifier getRes <for> ( <for> type_identifier conn </for> , <for> type_identifier id </for> ) </for> <blo> { <try> try <blo> { <loc> type_identifier <var> res = <met> conn . query <arg> ( string_literal , <arr> new type_identifier <dim> [ ] </dim> <arr> { id } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return res ; </ret> } </blo> <cat> catch ( <cat> <cat> type_identifier </cat> e </cat> ) <blo> { <ret> return false ; </ret> } </blo> </cat> </try> } </blo> </met>"
"Generate origin code: Get the database connection from $engine$ , execute the SQL statement by the connection ( query all columns in the players when the player_id is $pid$ ) and return after getting all the data.","public List selectValue ( DataSource engine , Integer pid ) { JdbcTemplate conn = new JdbcTemplate ( engine ) ; String sql = "" select * from players where player_id = ? "" ; List results = conn . query ( sql , new Object [ ] { pid } , new BeanPropertyRowMapper ( List . class ) ) ; return results ; }","Generate syntax code: Get the database connection from $engine$ , execute the SQL statement by the connection ( query all columns in the players when the player_id is $pid$ ) and return after getting all the data.","<met> <mod> public </mod> type_identifier selectValue <for> ( <for> type_identifier engine </for> , <for> type_identifier pid </for> ) </for> <blo> { <loc> type_identifier <var> conn = <obj> new type_identifier <arg> ( engine ) </arg> </obj> </var> ; </loc> <loc> type_identifier <var> sql = string_literal </var> ; </loc> <loc> type_identifier <var> results = <met> conn . query <arg> ( sql , <arr> new type_identifier <dim> [ ] </dim> <arr> { pid } </arr> </arr> , <obj> new type_identifier <arg> ( <fie> List . class </fie> ) </arg> </obj> ) </arg> </met> </var> ; </loc> <ret> return results ; </ret> } </blo> </met>"
