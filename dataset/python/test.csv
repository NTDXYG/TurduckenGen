nl,code,syntax_nl,syntax_code
"Generate origin code: Execute The SQL ( get The user column in The books where isbn is $isbn$ ) with $conn$ and get the first data. If the query result is None, return ""error"": ""The book is not in the database"" possessed by jsonify, otherwise return the query result.","from flask import jsonify
def book_api ( conn , isbn ) :
	 res = conn . execute ( "" select user from books where isbn = : isbn "" , { "" isbn "" : isbn } ) . fetchone ( )
	 if res is None :
	 	 return jsonify ( { "" error "" : "" The book is not in the database "" } )
	 else :
	 	 return res","Generate syntax code: Execute The SQL ( get The user column in The books where isbn is $isbn$ ) with $conn$ and get the first data. If the query result is None, return ""error"": ""The book is not in the database"" possessed by jsonify, otherwise return the query result.","<mod> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def book_api <par> ( conn , isbn ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> res is none </com> : <blo> <ret> return <cal> jsonify <arg> ( <dic> { <pai> STR : STR </pai> } </dic> ) </arg> </cal> </ret> </blo> <els> else : <blo> <ret> return res </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Use $postgres$ to get the database engine and execute the SQL ( get the date_part in the stock_data ) and get all the data, and use the for loop to store the list type with the 'year' for the tenth element of each item in the query result, finally, return the list content that jsonify handles.","from sqlalchemy import create_engine
from flask import jsonify
def getyears ( postgres ) :
	 engine = create_engine ( postgres )
	 data = engine . execute ( "" select date_part from stock_data "" ) . fetchall ( )
	 newdata = [ ]
	 for x in data :
	 	 d = { "" year "" : x [ 0 ] }
	 	 newdata . append ( d )
	 return jsonify ( newdata )","Generate syntax code: Use $postgres$ to get the database engine and execute the SQL ( get the date_part in the stock_data ) and get all the data, and use the for loop to store the list type with the 'year' for the tenth element of each item in the query result, finally, return the list content that jsonify handles.",<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def getyears <par> ( postgres ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( postgres ) </arg> </cal> </ass> </exp> <exp> <ass> data = <cal> <att> <cal> <att> engine . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> newdata = <lis> [ ] </lis> </ass> </exp> <for> for x in data : <blo> <exp> <ass> d = <dic> { <pai> STR : <sub> x [ integer ] </sub> </pai> } </dic> </ass> </exp> <exp> <cal> <att> newdata . append </att> <arg> ( d ) </arg> </cal> </exp> </blo> </for> <ret> return <cal> jsonify <arg> ( newdata ) </arg> </cal> </ret> </blo> </fun> </mod>
Generate origin code: Use $conn$ to execute SQL ( query all the information in the log table based on $information_schema$ ) and return all query results.,"def show_tables ( conn , information_schema ) :
	 query = conn . execute ( "" select * from log where information_schema = : information_schema "" , { "" information_schema "" : information_schema } )
	 return query . fetchall ( )",Generate syntax code: Use $conn$ to execute SQL ( query all the information in the log table based on $information_schema$ ) and return all query results.,"<mod> <fun> def show_tables <par> ( conn , information_schema ) </par> : <blo> <exp> <ass> query = <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : information_schema </pai> } </dic> ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> query . fetchall </att> <arg> ( ) </arg> </cal> </ret> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the dialog table ) and get all the data. Return the query results.,"def dialog_showdb ( conn ) :
	 texts = conn . execute ( "" select * from dialog "" ) . fetchall ( )
	 return texts",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the dialog table ) and get all the data. Return the query results.,<mod> <fun> def dialog_showdb <par> ( conn ) </par> : <blo> <exp> <ass> texts = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return texts </ret> </blo> </fun> </mod>
"Generate origin code: Use $engine$ to connect to the database, execute SQL ( get the accident_name column in the accident_table whose accident_id is $id$ and accident_date is $date$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return it through the dumps method.","import json
def example ( engine , id , date ) :
	 connection = engine . connect ( )
	 sql = "" select accident_name from accident_table where accident_id = : id and accident_date = : date "" 
	 res = connection . execute ( sql , { "" id "" : id , "" date "" : date } ) . fetchall ( )
	 return json . dumps ( [ dict ( r ) for r in res ] )","Generate syntax code: Use $engine$ to connect to the database, execute SQL ( get the accident_name column in the accident_table whose accident_id is $id$ and accident_date is $date$ ) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return it through the dumps method.","<mod> <imp> import <dot> json </dot> </imp> <fun> def example <par> ( engine , id , date ) </par> : <blo> <exp> <ass> connection = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> connection . execute </att> <arg> ( sql , <dic> { <pai> STR : id </pai> , <pai> STR : date </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> json . dumps </att> <arg> ( <lis> [ <cal> dict <arg> ( r ) </arg> </cal> <for> for r in res </for> ] </lis> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Try to use all the columns in the $conn$ ratings where the score is $score$, get all the data, and use a for loop to traverse the query results and print them. If an Exception occurs, return False.","def mysql_trace ( conn , score ) :
	 try :
	 	 kong = conn . execute ( "" select * from ratings where score = : score "" , { "" score "" : score } ) . fetchall ( )
	 	 for item in kong :
	 	 	 print ( item )
	 except Exception :
	 	 return False","Generate syntax code: Try to use all the columns in the $conn$ ratings where the score is $score$, get all the data, and use a for loop to traverse the query results and print them. If an Exception occurs, return False.","<mod> <fun> def mysql_trace <par> ( conn , score ) </par> : <blo> <try> try : <blo> <exp> <ass> kong = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : score </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for item in kong : <blo> <exp> <cal> print <arg> ( item ) </arg> </cal> </exp> </blo> </for> </blo> <exc> except Exception : <blo> <ret> return false </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Use the with statement to get the connection via $db$, execute the SQL ( get the Creator_Email in event_details based on $Ref_Code$ ) , get all the data, and finally return the obtained result.","def cancel ( db , Ref_Code ) :
	 with db . connect ( ) as conn :
	 	 sql_query = "" select Creator_Email from event_details where Ref_Code = : Ref_Code "" 
	 	 creator_email = conn . execute ( sql_query , { "" Ref_Code "" : Ref_Code } ) . fetchall ( )
	 	 return creator_email","Generate syntax code: Use the with statement to get the connection via $db$, execute the SQL ( get the Creator_Email in event_details based on $Ref_Code$ ) , get all the data, and finally return the obtained result.","<mod> <fun> def cancel <par> ( db , Ref_Code ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> db . connect </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> sql_query = STR </ass> </exp> <exp> <ass> creator_email = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql_query , <dic> { <pai> STR : Ref_Code </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return creator_email </ret> </blo> </wit> </blo> </fun> </mod>"
Generate origin code: Use ORM method to query the first piece of data in the $User$ table with name as $name$ through $db$. Set the assertion to determine the length of the returned results is greater than 0 and return the query results.,"def get_value ( db , User , name ) :
	 user = db . query ( User ) . filter_by ( User . name == name ) . first ( )
	 assert len ( user ) > 0
	 return user",Generate syntax code: Use ORM method to query the first piece of data in the $User$ table with name as $name$ through $db$. Set the assertion to determine the length of the returned results is greater than 0 and return the query results.,"<mod> <fun> def get_value <par> ( db , User , name ) </par> : <blo> <exp> <ass> user = <cal> <att> <cal> <att> <cal> <att> db . query </att> <arg> ( User ) </arg> </cal> . filter_by </att> <arg> ( <com> <att> User . name </att> == name </com> ) </arg> </cal> . first </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> <cal> len <arg> ( user ) </arg> </cal> > integer </com> </ass> <ret> return user </ret> </blo> </fun> </mod>"
"Generate origin code: Execute SQL ( get all columns in users where the name of user $username$ ) with $conn$ and get all the data. Then return rendered 'register.html', where the users parameter is the result of the query executing the SQL statement.","from flask import render_template
def select_register ( conn , username ) :
	 register_sql = "" select * from users where username = : username "" 
	 users = conn . execute ( register_sql , { "" username "" : username } ) . fetchall ( )
	 return render_template ( "" register.html "" , users = users )","Generate syntax code: Execute SQL ( get all columns in users where the name of user $username$ ) with $conn$ and get all the data. Then return rendered 'register.html', where the users parameter is the result of the query executing the SQL statement.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def select_register <par> ( conn , username ) </par> : <blo> <exp> <ass> register_sql = STR </ass> </exp> <exp> <ass> users = <cal> <att> <cal> <att> conn . execute </att> <arg> ( register_sql , <dic> { <pai> STR : username </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> users = users </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the sightings table based on $lat$ and $lon$ ) and get all the query results. Use for loop to convert each of the query results into dict, and store them in list, and return this list.","def get_pokemon_spawned_at ( conn , lat , lon ) :
	 query = conn . execute ( "" select * from sightings where lat = : lat and lon = : lon "" , { "" lat "" : lat , "" lon "" : lon } ) . fetchall ( )
	 pokemons = [ dict ( r ) for r in query . fetchall ( ) ]
	 return pokemons","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the sightings table based on $lat$ and $lon$ ) and get all the query results. Use for loop to convert each of the query results into dict, and store them in list, and return this list.","<mod> <fun> def get_pokemon_spawned_at <par> ( conn , lat , lon ) </par> : <blo> <exp> <ass> query = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : lat </pai> , <pai> STR : lon </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> pokemons = <lis> [ <cal> dict <arg> ( r ) </arg> </cal> <for> for r in <cal> <att> query . fetchall </att> <arg> ( ) </arg> </cal> </for> ] </lis> </ass> </exp> <ret> return pokemons </ret> </blo> </fun> </mod>"
"Generate origin code: If the request method is ""POST"", use $connection$ to get a cursor, set sql ( query the id column in the articles table based on $title$ and $body$ ) , execute SQL, get all the query results, close the connection, and return the query results.","from flask import request
def edit_article ( connection , title , body ) :
	 if request . method == "" POST "" :
	 	 cur = connection . cursor ( )
	 	 sql = "" select id from articles where title = : title and body = : body "" 
	 	 render = cur . execute ( sql , { "" title "" : title , "" body "" : body } ) . fetchall ( )
	 	 cur . close ( )
	 	 return render","Generate syntax code: If the request method is ""POST"", use $connection$ to get a cursor, set sql ( query the id column in the articles table based on $title$ and $body$ ) , execute SQL, get all the query results, close the connection, and return the query results.","<mod> <imp> from <dot> flask </dot> import <dot> request </dot> </imp> <fun> def edit_article <par> ( connection , title , body ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <exp> <ass> cur = <cal> <att> connection . cursor </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> render = <cal> <att> <cal> <att> cur . execute </att> <arg> ( sql , <dic> { <pai> STR : title </pai> , <pai> STR : body </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> cur . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return render </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Try to connect the database with $db_connect$, execute the SQL statement: Query all the columns in the ticket table where tn is $user_tn$, convert each item of the query result to dict, store it as list, and use jsonify to return the query result. If an exception occurs, use jsonify to return 'error' ( where the 'error' content is 'fail' ) .","from flask import jsonify
def get_user_tn ( db_connect , user_tn ) :
	 try :
	 	 conn = db_connect . connect ( )
	 	 query = conn . execute ( "" select * from ticket where tn = : user_tn "" , { "" user_tn "" : user_tn } )
	 	 result = [ dict ( i ) for i in query ]
	 	 return jsonify ( result )
	 except :
	 	 return jsonify ( { "" error "" : "" fail "" } )","Generate syntax code: Try to connect the database with $db_connect$, execute the SQL statement: Query all the columns in the ticket table where tn is $user_tn$, convert each item of the query result to dict, store it as list, and use jsonify to return the query result. If an exception occurs, use jsonify to return 'error' ( where the 'error' content is 'fail' ) .","<mod> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def get_user_tn <par> ( db_connect , user_tn ) </par> : <blo> <try> try : <blo> <exp> <ass> conn = <cal> <att> db_connect . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> query = <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : user_tn </pai> } </dic> ) </arg> </cal> </ass> </exp> <exp> <ass> result = <lis> [ <cal> dict <arg> ( i ) </arg> </cal> <for> for i in query </for> ] </lis> </ass> </exp> <ret> return <cal> jsonify <arg> ( result ) </arg> </cal> </ret> </blo> <exc> except : <blo> <ret> return <cal> jsonify <arg> ( <dic> { <pai> STR : STR </pai> } </dic> ) </arg> </cal> </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Use $db$ to connect the database, execute SQL ( query the number of all columns in the query_users table based on $user_id$ ) , set theassertion to determine whether the length of all the data obtained is 0, and close the connection.","def query_page ( db , user_id ) :
	 connection = db . connect ( )
	 result = connection . execute ( "" select count(*) from query_users where user_id = : user_id "" , { "" user_id "" : user_id } )
	 assert len ( result . fetchall ( ) ) != 0
	 connection . close ( )","Generate syntax code: Use $db$ to connect the database, execute SQL ( query the number of all columns in the query_users table based on $user_id$ ) , set theassertion to determine whether the length of all the data obtained is 0, and close the connection.","<mod> <fun> def query_page <par> ( db , user_id ) </par> : <blo> <exp> <ass> connection = <cal> <att> db . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> result = <cal> <att> connection . execute </att> <arg> ( STR , <dic> { <pai> STR : user_id </pai> } </dic> ) </arg> </cal> </ass> </exp> <ass> assert <com> <cal> len <arg> ( <cal> <att> result . fetchall </att> <arg> ( ) </arg> </cal> ) </arg> </cal> != integer </com> </ass> <exp> <cal> <att> connection . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fun> </mod>"
"Generate origin code: Connect to the database according to $engine$ through the with statement. Set the SQL statement and the content is as follows: Query all columns in the movies_mean_count table whose rating_count is greater than $rating$, and execute SQL to get all the data. Use for loop to store each element in the query result into list and return the list content.","def get_most_rated_movies ( engine , rating ) :
	 with engine . connect ( ) as conn :
	 	 query = "" select * from movies_mean_count where rating_count > : rating "" 
	 	 results = conn . execute ( query , { "" rating "" : rating } ) . fetchall ( )
	 	 movie_ids = [ ]
	 	 for result in results :
	 	 	 movie_ids . append ( result )
	 	 return movie_ids","Generate syntax code: Connect to the database according to $engine$ through the with statement. Set the SQL statement and the content is as follows: Query all columns in the movies_mean_count table whose rating_count is greater than $rating$, and execute SQL to get all the data. Use for loop to store each element in the query result into list and return the list content.","<mod> <fun> def get_most_rated_movies <par> ( engine , rating ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : rating </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> movie_ids = <lis> [ ] </lis> </ass> </exp> <for> for result in results : <blo> <exp> <cal> <att> movie_ids . append </att> <arg> ( result ) </arg> </cal> </exp> </blo> </for> <ret> return movie_ids </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the pooling table based on $client$ ) , get all the query results, and set assertions to determine whether the length of the query results is greater than 0.","def test_main_pooling ( conn , client ) :
	 v = conn . execute ( "" select * from pooling where client = : client "" , { "" client "" : client } ) . fetchall ( )
	 assert len ( v ) > 0","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the pooling table based on $client$ ) , get all the query results, and set assertions to determine whether the length of the query results is greater than 0.","<mod> <fun> def test_main_pooling <par> ( conn , client ) </par> : <blo> <exp> <ass> v = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : client </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> <cal> len <arg> ( v ) </arg> </cal> > integer </com> </ass> </blo> </fun> </mod>"
"Generate origin code: Set SQL with the python expression ( query all the information in the $users$ table based on $username$ ) . Use $conn$ to execute SQL and get all query results. If all the results of the query are None, a $UnauthorizedError$ exception is formed. Otherwise, return the query result.","from sqlalchemy . sql import select
def login ( conn , users , username , UnauthorizedError ) :
	 s = select ( [ users ] ) . where ( users . c . username == username )
	 recs_data = conn . execute ( s ) . fetchall ( )
	 if recs_data is None :
	 	 raise UnauthorizedError
	 else :
	 	 return recs_data","Generate syntax code: Set SQL with the python expression ( query all the information in the $users$ table based on $username$ ) . Use $conn$ to execute SQL and get all query results. If all the results of the query are None, a $UnauthorizedError$ exception is formed. Otherwise, return the query result.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def login <par> ( conn , users , username , UnauthorizedError ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <lis> [ users ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> users . c </att> . username </att> == username </com> ) </arg> </cal> </ass> </exp> <exp> <ass> recs_data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> recs_data is none </com> : <blo> <rai> raise UnauthorizedError </rai> </blo> <els> else : <blo> <ret> return recs_data </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Use $eng$ to get the connection, and use the python expression to set up SQL: Query all the information in the $tab$ table based on $code_no$. Use the database connection to execute the SQL, get all the data, and finally return the query results.","from sqlalchemy . sql import select
def modify ( eng , tab , code_no ) :
	 conn = eng . connect ( )
	 sql = select ( tab ) . where ( tab . c . code_no == code_no )
	 r = conn . execute ( sql ) . fetchall ( )
	 return r","Generate syntax code: Use $eng$ to get the connection, and use the python expression to set up SQL: Query all the information in the $tab$ table based on $code_no$. Use the database connection to execute the SQL, get all the data, and finally return the query results.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def modify <par> ( eng , tab , code_no ) </par> : <blo> <exp> <ass> conn = <cal> <att> eng . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = <cal> <att> <cal> select <arg> ( tab ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> tab . c </att> . code_no </att> == code_no </com> ) </arg> </cal> </ass> </exp> <exp> <ass> r = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return r </ret> </blo> </fun> </mod>"
"Generate origin code: Set SQL ( query the rating column in the review table based on $average_score$ and $review_count$ ) , execute SQL based on $conn$ and get all the query results. If no results is queried, return the dictionary converted to json format, where the value of the ""Error"" key is set to ""No book""; otherwise, return the dictionary converted to json format, where the value of the ""title"" key is set to the title field of the query result, the value of the ""author"" key is set to the author field of the query result, and the value of the ""year"" key is set to the pub_year field of the query result.","from flask import jsonify
def api ( conn , average_score , review_count ) :
	 sql = "" select rating from review where average_score = : average_score and review_count = : review_count "" 
	 api_book = conn . execute ( sql , { "" average_score "" : average_score , "" review_count "" : review_count } ) . fetchall ( )
	 if not api_book :
	 	 return jsonify ( { "" Error "" : "" No book "" } )
	 return jsonify ( { "" title "" : api_book . title , "" author "" : api_book . author , "" year "" : api_book . pub_year } )","Generate syntax code: Set SQL ( query the rating column in the review table based on $average_score$ and $review_count$ ) , execute SQL based on $conn$ and get all the query results. If no results is queried, return the dictionary converted to json format, where the value of the ""Error"" key is set to ""No book""; otherwise, return the dictionary converted to json format, where the value of the ""title"" key is set to the title field of the query result, the value of the ""author"" key is set to the author field of the query result, and the value of the ""year"" key is set to the pub_year field of the query result.","<mod> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def api <par> ( conn , average_score , review_count ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> api_book = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : average_score </pai> , <pai> STR : review_count </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <not> not api_book </not> : <blo> <ret> return <cal> jsonify <arg> ( <dic> { <pai> STR : STR </pai> } </dic> ) </arg> </cal> </ret> </blo> </if_> <ret> return <cal> jsonify <arg> ( <dic> { <pai> STR : <att> api_book . title </att> </pai> , <pai> STR : <att> api_book . author </att> </pai> , <pai> STR : <att> api_book . pub_year </att> </pai> } </dic> ) </arg> </cal> </ret> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( query all columns in the class_schedule table ) and get all the data. Return the rendered 'create.html' and pass the query results to the data parameter.,"from flask import render_template
def create ( conn ) :
	 data = conn . execute ( "" select * from class_schedule "" ) . fetchall ( )
	 return render_template ( "" create.html "" , data = data )",Generate syntax code: Use $conn$ to execute SQL ( query all columns in the class_schedule table ) and get all the data. Return the rendered 'create.html' and pass the query results to the data parameter.,"<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def create <par> ( conn ) </par> : <blo> <exp> <ass> data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> data = data </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Through the $conn$ to connect, and use ORM to execute the SQL statement: Query the first piece of data in the $Event$ table where end_date is greater than $time_now$, and return the query results that converted to dict.","def index ( conn , Event , time_now ) :
	 matching_events = conn . query ( Event ) . filter ( Event . end_date > time_now ) . fetchone ( )
	 return dict ( matching_events )","Generate syntax code: Through the $conn$ to connect, and use ORM to execute the SQL statement: Query the first piece of data in the $Event$ table where end_date is greater than $time_now$, and return the query results that converted to dict.","<mod> <fun> def index <par> ( conn , Event , time_now ) </par> : <blo> <exp> <ass> matching_events = <cal> <att> <cal> <att> <cal> <att> conn . query </att> <arg> ( Event ) </arg> </cal> . filter </att> <arg> ( <com> <att> Event . end_date </att> > time_now </com> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> dict <arg> ( matching_events ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Connect to the database engine using $e$, and execute SQL ( query all date columns in the RInd ) using $conn$. Finally, the keys of the result are executed as the key in the dictionary, and the cursors of each item in the result are executed as the corresponding values. Put each item in the dictionary into a list and return it.","def search ( e ) :
	 conn = e . connect ( )
	 query = conn . execute ( "" select date from RInd "" )
	 rs = [ dict ( zip ( tuple ( query . keys ( ) ) , record ) ) for record in query . cursor ]
	 return rs","Generate syntax code: Connect to the database engine using $e$, and execute SQL ( query all date columns in the RInd ) using $conn$. Finally, the keys of the result are executed as the key in the dictionary, and the cursors of each item in the result are executed as the corresponding values. Put each item in the dictionary into a list and return it.","<mod> <fun> def search <par> ( e ) </par> : <blo> <exp> <ass> conn = <cal> <att> e . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> query = <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> </ass> </exp> <exp> <ass> rs = <lis> [ <cal> dict <arg> ( <cal> zip <arg> ( <cal> tuple <arg> ( <cal> <att> query . keys </att> <arg> ( ) </arg> </cal> ) </arg> </cal> , record ) </arg> </cal> ) </arg> </cal> <for> for record in <att> query . cursor </att> </for> ] </lis> </ass> </exp> <ret> return rs </ret> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute the SQL ( get the name column in the Consumables table based on $id$ ) and get all the data. Then use for loop to convert each item of the query result into dictionary type and return the contents of dictionary.,"def get_consumables ( conn , id ) :
	 sql_consumable = "" select name from Consumables where id = : id "" 
	 rs = conn . execute ( sql_consumable , { "" id "" : id } ) . fetchall ( )
	 return [ dict ( row ) for row in rs ]",Generate syntax code: Use $conn$ to execute the SQL ( get the name column in the Consumables table based on $id$ ) and get all the data. Then use for loop to convert each item of the query result into dictionary type and return the contents of dictionary.,"<mod> <fun> def get_consumables <par> ( conn , id ) </par> : <blo> <exp> <ass> sql_consumable = STR </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql_consumable , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ret> </blo> </fun> </mod>"
Generate origin code: Use $engine$ in the with statement to get the database connection. Use the connection to execute SQL ( query all columns in audio_features when youtube_id is $yt_id$ ) and get the first piece of data. Return the query results.,"def select_cluster ( engine , yt_id ) :
	 with engine . connect ( ) as con :
	 	 audio_id = con . execute ( "" select * from audio_features where youtube_id = : yt_id "" , { "" yt_id "" : yt_id } ) . fetchone ( )
	 	 return audio_id",Generate syntax code: Use $engine$ in the with statement to get the database connection. Use the connection to execute SQL ( query all columns in audio_features when youtube_id is $yt_id$ ) and get the first piece of data. Return the query results.,"<mod> <fun> def select_cluster <par> ( engine , yt_id ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> audio_id = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR , <dic> { <pai> STR : yt_id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return audio_id </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Set SQL ( get all the columns in the 'table' table based on $filter$ ) , connect to the database using $engine$ through the with statement, execute the SQL statement to get all the data, and finally return the query result.","def select ( engine , filter ) :
	 query = "" select * from table where filter = : filter "" 
	 with engine . connect ( ) as connection :
	 	 result = connection . execute ( query , { "" filter "" : filter } ) . fetchall ( )
	 	 return result","Generate syntax code: Set SQL ( get all the columns in the 'table' table based on $filter$ ) , connect to the database using $engine$ through the with statement, execute the SQL statement to get all the data, and finally return the query result.","<mod> <fun> def select <par> ( engine , filter ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> connection </as_> </as_> </wit> </wit> : <blo> <exp> <ass> result = <cal> <att> <cal> <att> connection . execute </att> <arg> ( query , <dic> { <pai> STR : filter </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return result </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table based on $fli_id$ ) , get all the query results, return the rendered ""flights.html"" page, and set the flights parameter to the query result.","from flask import render_template
def flights ( conn , fli_id ) :
	 flights = conn . execute ( "" select * from flights where fli_id = : fli_id "" , { "" fli_id "" : fli_id } ) . fetchall ( )
	 return render_template ( "" flights.html "" , flights = flights )","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table based on $fli_id$ ) , get all the query results, return the rendered ""flights.html"" page, and set the flights parameter to the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def flights <par> ( conn , fli_id ) </par> : <blo> <exp> <ass> flights = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : fli_id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> flights = flights </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
Generate origin code: Query the first piece of clock with id as $id$ in the horse table through $session$. Make sure $session$ is closed and return the query results.,"def query_data ( session , id ) :
	 res = session . execute ( "" select clock from horse where id = : id "" , { "" id "" : id } ) . fetchone ( )
	 session . close ( )
	 return res",Generate syntax code: Query the first piece of clock with id as $id$ in the horse table through $session$. Make sure $session$ is closed and return the query results.,"<mod> <fun> def query_data <par> ( session , id ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> session . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> session . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Trough $conn$ to connect, use the Python expression to set the SQL statement to get all the name in $targets$ based on $id$ , execute the SQL and return the fetched data.","from sqlalchemy . sql import select
def get_target_byid ( conn , targets , id ) :
	 s = select ( targets . c . name ) . where ( targets . c . id == id )
	 return conn . execute ( s ) . fetchall ( )","Generate syntax code: Trough $conn$ to connect, use the Python expression to set the SQL statement to get all the name in $targets$ based on $id$ , execute the SQL and return the fetched data.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_target_byid <par> ( conn , targets , id ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <att> <att> targets . c </att> . name </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> targets . c </att> . id </att> == id </com> ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute the SQL ( get the synopsis column in the books table based on $id$ ) , then convert the 0th element of the 0th item of the query result into list, and finally return the list contents","def application ( conn , id ) :
	 query = "" select synopsis from books where id = : id "" 
	 output = conn . execute ( query , { "" id "" : id } )
	 output = list ( output ) [ 0 ] [ 0 ]
	 return output","Generate syntax code: Use $conn$ to execute the SQL ( get the synopsis column in the books table based on $id$ ) , then convert the 0th element of the 0th item of the query result into list, and finally return the list contents","<mod> <fun> def application <par> ( conn , id ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> output = <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> </ass> </exp> <exp> <ass> output = <sub> <sub> <cal> list <arg> ( output ) </arg> </cal> [ integer ] </sub> [ integer ] </sub> </ass> </exp> <ret> return output </ret> </blo> </fun> </mod>"
"Generate origin code: Try to use $MYSQL_DB_URL$ to get the database engine and connect to the database, then execute the SQL based on the Python expression ( get all columns in the $table$ table with the id as $uid$ ) and get all the data. Then close the connection and return the query results. If exception occurs during execution, print the exception.","from sqlalchemy . sql import select
from sqlalchemy import create_engine
def get_source ( MYSQL_DB_URL , uid , table ) :
	 try :
	 	 db = create_engine ( MYSQL_DB_URL )
	 	 con = db . connect ( )
	 	 sql = select ( [ table ] ) . where ( table . c . id == uid )
	 	 res = con . execute ( sql ) . fetchall ( )
	 	 con . close ( )
	 	 return res
	 except Exception as e :
	 	 print ( e )","Generate syntax code: Try to use $MYSQL_DB_URL$ to get the database engine and connect to the database, then execute the SQL based on the Python expression ( get all columns in the $table$ table with the id as $uid$ ) and get all the data. Then close the connection and return the query results. If exception occurs during execution, print the exception.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def get_source <par> ( MYSQL_DB_URL , uid , table ) </par> : <blo> <try> try : <blo> <exp> <ass> db = <cal> create_engine <arg> ( MYSQL_DB_URL ) </arg> </cal> </ass> </exp> <exp> <ass> con = <cal> <att> db . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = <cal> <att> <cal> select <arg> ( <lis> [ table ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> table . c </att> . id </att> == uid </com> ) </arg> </cal> </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> con . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> con . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return res </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( e ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Get database engine by $db_string$, try to execute SQL statement ( get all columns in project based on $id_fornecedor$ ) and get all the data. The result will be given true, otherwise print ""Problem occur!"" and the result will be given false. Finally return the result true or false.","from sqlalchemy import create_engine
def querySale ( db_string , id_fornecedor ) :
	 db = create_engine ( db_string )
	 try :
	 	 db . execute ( "" select * from project where id_fornecedor = : id_fornecedor "" , { "" id_fornecedor "" : id_fornecedor } ) . fetchall ( )
	 	 res = True
	 except :
	 	 print ( "" Problem occur! "" )
	 	 res = False
	 return res","Generate syntax code: Get database engine by $db_string$, try to execute SQL statement ( get all columns in project based on $id_fornecedor$ ) and get all the data. The result will be given true, otherwise print ""Problem occur!"" and the result will be given false. Finally return the result true or false.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def querySale <par> ( db_string , id_fornecedor ) </par> : <blo> <exp> <ass> db = <cal> create_engine <arg> ( db_string ) </arg> </cal> </ass> </exp> <try> try : <blo> <exp> <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : id_fornecedor </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </exp> <exp> <ass> res = true </ass> </exp> </blo> <exc> except : <blo> <exp> <cal> print <arg> ( STR ) </arg> </cal> </exp> <exp> <ass> res = false </ass> </exp> </blo> </exc> </try> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: If the request method is 'POST', use $db$ to execute SQL according to the python expression ( get the username column in the $users$ table whose first_name is $fname$ and password is $pwd$ ) , get the first piece of data, and then return the query result.","from flask import request
def checklogin ( db , users , fname , pwd ) :
	 if request . method == "" POST "" :
	 	 res = db . execute ( users . select ( [ users . username ] ) . where ( users . first_name == fname and users . password == pwd ) ) . fetchone ( )
	 	 return res","Generate syntax code: If the request method is 'POST', use $db$ to execute SQL according to the python expression ( get the username column in the $users$ table whose first_name is $fname$ and password is $pwd$ ) , get the first piece of data, and then return the query result.","<mod> <imp> from <dot> flask </dot> import <dot> request </dot> </imp> <fun> def checklogin <par> ( db , users , fname , pwd ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> db . execute </att> <arg> ( <cal> <att> <cal> <att> users . select </att> <arg> ( <lis> [ <att> users . username </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <boo> <com> <att> users . first_name </att> == fname </com> and <com> <att> users . password </att> == pwd </com> </boo> ) </arg> </cal> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Try to use $conn$ to query all the columns in the manager table where orderid is $orderid$, get all the data, use for loop to store the 0th element of each item in the query result into list and return the list content. Print 'query fail' if there is an exception.","def get_hall_name_from_manager_id ( conn , orderid ) :
	 try :
	 	 row = conn . execute ( "" select * from manager where orderid = : orderid "" , { "" orderid "" : orderid } ) . fetchall ( )
	 	 k = [ ]
	 	 for r in row :
	 	 	 k . append ( r [ 0 ] )
	 	 return k
	 except :
	 	 print ( "" query fail "" )","Generate syntax code: Try to use $conn$ to query all the columns in the manager table where orderid is $orderid$, get all the data, use for loop to store the 0th element of each item in the query result into list and return the list content. Print 'query fail' if there is an exception.","<mod> <fun> def get_hall_name_from_manager_id <par> ( conn , orderid ) </par> : <blo> <try> try : <blo> <exp> <ass> row = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : orderid </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> k = <lis> [ ] </lis> </ass> </exp> <for> for r in row : <blo> <exp> <cal> <att> k . append </att> <arg> ( <sub> r [ integer ] </sub> ) </arg> </cal> </exp> </blo> </for> <ret> return k </ret> </blo> <exc> except : <blo> <exp> <cal> print <arg> ( STR ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Set up SQL ( query the trained_model column in the models table based on $accuracy_score$ ) . Use $dbconn$ to execute the SQL, get the first piece of data, and return the 0th element of the query result.","def get_best_model ( dbconn , accuracy_score ) :
	 	 query_sql = "" select trained_model from models where accuracy_score = : accuracy_score "" 
	 	 results = dbconn . execute ( query_sql , { "" accuracy_score "" : accuracy_score } ) . fetchone ( )
	 	 return results [ 0 ]","Generate syntax code: Set up SQL ( query the trained_model column in the models table based on $accuracy_score$ ) . Use $dbconn$ to execute the SQL, get the first piece of data, and return the 0th element of the query result.","<mod> <fun> def get_best_model <par> ( dbconn , accuracy_score ) </par> : <blo> <exp> <ass> query_sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> dbconn . execute </att> <arg> ( query_sql , <dic> { <pai> STR : accuracy_score </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <sub> results [ integer ] </sub> </ret> </blo> </fun> </mod>"
"Generate origin code: Try using $db$ to execute the SQL ( query the title information in the books table where isbn is $isbn$ ) and get the first data, return the rendered ""book.html"" and pass the query result to the book parameter. Redirect and url_for redirect to 'error' if an exception occurs. Finally make sure $db$ is closed.","from flask import render_template , redirect , url_for
def get_book ( db , isbn ) :
	 try :
	 	 book = db . execute ( "" select title from books where isbn = : isbn "" , { "" isbn "" : isbn } ) . fetchone ( )
	 	 return render_template ( "" book.html "" , book = book )
	 except :
	 	 return redirect ( url_for ( "" error "" ) )
	 finally :
	 	 db . close ( )","Generate syntax code: Try using $db$ to execute the SQL ( query the title information in the books table where isbn is $isbn$ ) and get the first data, return the rendered ""book.html"" and pass the query result to the book parameter. Redirect and url_for redirect to 'error' if an exception occurs. Finally make sure $db$ is closed.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> , <dot> redirect </dot> , <dot> url_for </dot> </imp> <fun> def get_book <par> ( db , isbn ) </par> : <blo> <try> try : <blo> <exp> <ass> book = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> book = book </key> ) </arg> </cal> </ret> </blo> <exc> except : <blo> <ret> return <cal> redirect <arg> ( <cal> url_for <arg> ( STR ) </arg> </cal> ) </arg> </cal> </ret> </blo> </exc> <fin> finally : <blo> <exp> <cal> <att> db . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( query the id in the current_user table based on $created_at$ ) and get the first piece of data. Set the assertion to determine that the query result is not empty list. Return the query results.,"def current_session ( conn , created_at ) :
	 user_id = conn . execute ( "" select id from current_user where created_at = : created_at "" , { "" created_at "" : created_at } ) . fetchone ( )
	 assert user_id != [ ]
	 return user_id",Generate syntax code: Use $conn$ to execute SQL ( query the id in the current_user table based on $created_at$ ) and get the first piece of data. Set the assertion to determine that the query result is not empty list. Return the query results.,"<mod> <fun> def current_session <par> ( conn , created_at ) </par> : <blo> <exp> <ass> user_id = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : created_at </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> user_id != <lis> [ ] </lis> </com> </ass> <ret> return user_id </ret> </blo> </fun> </mod>"
"Generate origin code: Use $db_uri$ to get the database engine and execute SQL ( get the data column in the example table according to $id$ ) , get all the data, and finally return the query result.","from sqlalchemy import create_engine
def search_datas ( db_uri , id ) :
	 engine = create_engine ( db_uri )
	 datas = engine . execute ( "" select data from example where id = : id "" , { "" id "" : id } ) . fetchall ( )
	 return datas","Generate syntax code: Use $db_uri$ to get the database engine and execute SQL ( get the data column in the example table according to $id$ ) , get all the data, and finally return the query result.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def search_datas <par> ( db_uri , id ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( db_uri ) </arg> </cal> </ass> </exp> <exp> <ass> datas = <cal> <att> <cal> <att> engine . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return datas </ret> </blo> </fun> </mod>"
"Generate origin code: Try to use $engine$ to execute the SQL ( get all the information in db_satz where uid is $uid$ and pro is $pro$ ) and get all the data, return the query result, otherwise return None.","def satz_positiv_bewerten ( engine , uid , pro ) :
	 try :
	 	 rs = engine . execute ( "" select * from db_satz where uid = : uid and pro = : pro "" , { "" uid "" : uid , "" pro "" : pro } ) . fetchall ( )
	 	 return rs
	 except :
	 	 return None","Generate syntax code: Try to use $engine$ to execute the SQL ( get all the information in db_satz where uid is $uid$ and pro is $pro$ ) and get all the data, return the query result, otherwise return None.","<mod> <fun> def satz_positiv_bewerten <par> ( engine , uid , pro ) </par> : <blo> <try> try : <blo> <exp> <ass> rs = <cal> <att> <cal> <att> engine . execute </att> <arg> ( STR , <dic> { <pai> STR : uid </pai> , <pai> STR : pro </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return rs </ret> </blo> <exc> except : <blo> <ret> return none </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Connect the database through $engine$ and set the SQL based on the python expression ( query all the columns in the $test_users$ table based on $lastname$ ) . Execute SQL, get all the data and return the query results.","from sqlalchemy . sql import select
def testBulkUpdate ( engine , test_users , lastname ) :
	 conn = engine . connect ( )
	 session = select ( test_users ) . where ( test_users . c . lastname == lastname )
	 results = conn . execute ( session ) . fetchall ( )
	 return results","Generate syntax code: Connect the database through $engine$ and set the SQL based on the python expression ( query all the columns in the $test_users$ table based on $lastname$ ) . Execute SQL, get all the data and return the query results.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def testBulkUpdate <par> ( engine , test_users , lastname ) </par> : <blo> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> session = <cal> <att> <cal> select <arg> ( test_users ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> test_users . c </att> . lastname </att> == lastname </com> ) </arg> </cal> </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( session ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return results </ret> </blo> </fun> </mod>"
"Generate origin code: Create a database engine based on $morphweb_db$ and use it to create session instantiated objects. Use instantiated objects to execute SQL ( query the ip in the usertable based on $email$ ) , get the first piece of data, and print the 0th element of each item of the query result.","from sqlalchemy import create_engine
from sqlalchemy . orm . session import sessionmaker
def user_ip ( morphweb_db , email ) :
	 engine = create_engine ( morphweb_db )
	 DB_Session = sessionmaker ( bind = engine )
	 session = DB_Session ( )
	 ret = session . execute ( "" select ip from usertable where email = : email "" , { "" email "" : email } ) . fetchone ( )
	 for t in ret :
	 	 return t [ 0 ]","Generate syntax code: Create a database engine based on $morphweb_db$ and use it to create session instantiated objects. Use instantiated objects to execute SQL ( query the ip in the usertable based on $email$ ) , get the first piece of data, and print the 0th element of each item of the query result.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <imp> from <dot> sqlalchemy . orm . session </dot> import <dot> sessionmaker </dot> </imp> <fun> def user_ip <par> ( morphweb_db , email ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( morphweb_db ) </arg> </cal> </ass> </exp> <exp> <ass> DB_Session = <cal> sessionmaker <arg> ( <key> bind = engine </key> ) </arg> </cal> </ass> </exp> <exp> <ass> session = <cal> DB_Session <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> ret = <cal> <att> <cal> <att> session . execute </att> <arg> ( STR , <dic> { <pai> STR : email </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for t in ret : <blo> <ret> return <sub> t [ integer ] </sub> </ret> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the users table when username equals $name$ ) and get all the data. If the query result is not empty list, return the rendered 'error.html'. Otherwise, return the rendered ""success.html"" and pass the query result to the unique parameter.","from flask import render_template
def queryeuser ( conn , name ) :
	 unique = conn . execute ( "" select * from users where username = : name "" , { "" name "" : name } ) . fetchall ( )
	 if unique != [ ] :
	 	 return render_template ( "" error.html "" )
	 return render_template ( "" success.html "" , unique = unique )","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the users table when username equals $name$ ) and get all the data. If the query result is not empty list, return the rendered 'error.html'. Otherwise, return the rendered ""success.html"" and pass the query result to the unique parameter.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def queryeuser <par> ( conn , name ) </par> : <blo> <exp> <ass> unique = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> unique != <lis> [ ] </lis> </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </if_> <ret> return <cal> render_template <arg> ( STR , <key> unique = unique </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Try to use $connection$ to execute SQL ( query all the information in the query_users table based on $user_id$ and $user_name$ ) , and print the Exception if it is caught. Set the assertion to determine whether the length of all the obtained data is 0, and close the connection.","def test_raise ( connection , user_id , user_name ) :
	 try :
	 	 result = connection . execute ( "" select * from query_users where user_id = : user_id and user_name = : user_name "" , { "" user_id "" : user_id , "" user_name "" : user_name } )
	 except Exception as e :
	 	 print ( e )
	 assert len ( result . fetchall ( ) ) == 0
	 connection . close ( )","Generate syntax code: Try to use $connection$ to execute SQL ( query all the information in the query_users table based on $user_id$ and $user_name$ ) , and print the Exception if it is caught. Set the assertion to determine whether the length of all the obtained data is 0, and close the connection.","<mod> <fun> def test_raise <par> ( connection , user_id , user_name ) </par> : <blo> <try> try : <blo> <exp> <ass> result = <cal> <att> connection . execute </att> <arg> ( STR , <dic> { <pai> STR : user_id </pai> , <pai> STR : user_name </pai> } </dic> ) </arg> </cal> </ass> </exp> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( e ) </arg> </cal> </exp> </blo> </exc> </try> <ass> assert <com> <cal> len <arg> ( <cal> <att> result . fetchall </att> <arg> ( ) </arg> </cal> ) </arg> </cal> == integer </com> </ass> <exp> <cal> <att> connection . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fun> </mod>"
Generate origin code: Set up the SQL using a Python expression ( query the data column in $z_test$ where id is $id$ ) and execute the SQL using $conn$ to get the first query result and return it.,"from sqlalchemy . sql import select
def query_old_recs ( conn , z_test , id ) :
	 s = select ( z_test . c . data ) . where ( z_test . c . id == id )
	 recs = conn . execute ( s ) . first ( )
	 return recs",Generate syntax code: Set up the SQL using a Python expression ( query the data column in $z_test$ where id is $id$ ) and execute the SQL using $conn$ to get the first query result and return it.,"<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def query_old_recs <par> ( conn , z_test , id ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <att> <att> z_test . c </att> . data </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> z_test . c </att> . id </att> == id </com> ) </arg> </cal> </ass> </exp> <exp> <ass> recs = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . first </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return recs </ret> </blo> </fun> </mod>"
Generate origin code: Execute the SQL statement via $conn$: Query all the id data in the books table based on $user_id$ and $book_id$ and return the query results.,"def check_user_book_authorized ( conn , user_id , book_id ) :
	 result = conn . execute ( "" select id from books where user_id = : user_id and book_id = : book_id "" , { "" user_id "" : user_id , "" book_id "" : book_id } ) . fetchall ( )
	 return result",Generate syntax code: Execute the SQL statement via $conn$: Query all the id data in the books table based on $user_id$ and $book_id$ and return the query results.,"<mod> <fun> def check_user_book_authorized <par> ( conn , user_id , book_id ) </par> : <blo> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : user_id </pai> , <pai> STR : book_id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return result </ret> </blo> </fun> </mod>"
Generate origin code: Execute the SQL based on $conn$ ( get the name column in the user table based on $group_id$ ) and get all the data. Use for loop to print each item of the query results.,"def sql_stm ( conn , group_id ) :
	 stm = "" select name from user where group_id = : group_id "" 
	 result_proxy = conn . execute ( stm , { "" group_id "" : group_id } )
	 rows = result_proxy . fetchall ( )
	 for row in rows :
	 	 print ( row )",Generate syntax code: Execute the SQL based on $conn$ ( get the name column in the user table based on $group_id$ ) and get all the data. Use for loop to print each item of the query results.,"<mod> <fun> def sql_stm <par> ( conn , group_id ) </par> : <blo> <exp> <ass> stm = STR </ass> </exp> <exp> <ass> result_proxy = <cal> <att> conn . execute </att> <arg> ( stm , <dic> { <pai> STR : group_id </pai> } </dic> ) </arg> </cal> </ass> </exp> <exp> <ass> rows = <cal> <att> result_proxy . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for row in rows : <blo> <exp> <cal> print <arg> ( row ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Connect to the database through $testing$. Set up the SQL statement using the Python expression ( get all id in $users$ table based on $name$ ) , execute the SQL statement, make sure the database connection is closed. Convert each item of the query result into dict and store it as list and return it.","from sqlalchemy . sql import select
def get_info ( testing , users , name ) :
	 conn = testing . connect ( )
	 s = select ( users . c . id ) . where ( users . c . name == name )
	 information = conn . execute ( s ) . fetchall ( )
	 conn . close ( )
	 return [ dict ( row ) for row in information ]","Generate syntax code: Connect to the database through $testing$. Set up the SQL statement using the Python expression ( get all id in $users$ table based on $name$ ) , execute the SQL statement, make sure the database connection is closed. Convert each item of the query result into dict and store it as list and return it.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_info <par> ( testing , users , name ) </par> : <blo> <exp> <ass> conn = <cal> <att> testing . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <att> <att> users . c </att> . id </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> users . c </att> . name </att> == name </com> ) </arg> </cal> </ass> </exp> <exp> <ass> information = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in information </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get all the columns in the report where portfolio is $portfolio$ and date is $date$ ) with $conn$, get all the data, and return the results of the query.","def get_portfolio ( conn , portfolio , date ) :
	 qry = "" select * from report where portfolio = : portfolio and date = : date "" 
	 df = conn . execute ( qry , { "" portfolio "" : portfolio , "" date "" : date } ) . fetchall ( )
	 return df","Generate syntax code: Execute the SQL ( get all the columns in the report where portfolio is $portfolio$ and date is $date$ ) with $conn$, get all the data, and return the results of the query.","<mod> <fun> def get_portfolio <par> ( conn , portfolio , date ) </par> : <blo> <exp> <ass> qry = STR </ass> </exp> <exp> <ass> df = <cal> <att> <cal> <att> conn . execute </att> <arg> ( qry , <dic> { <pai> STR : portfolio </pai> , <pai> STR : date </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return df </ret> </blo> </fun> </mod>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement: Get all the columns in the flights table based on $id$ and get all the data. If the query result exists, render and return ""indexair.html"", where the flights parameter is the query result.","from flask import render_template
def index ( conn , id ) :
	 res = conn . execute ( "" select * from flights where id = : id "" , { "" id "" : id } ) . fetchall ( )
	 if res :
	 	 return render_template ( "" indexair.html "" , flights = res )","Generate syntax code: Use the $conn$ connection to execute the SQL statement: Get all the columns in the flights table based on $id$ and get all the data. If the query result exists, render and return ""indexair.html"", where the flights parameter is the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def index <par> ( conn , id ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if res : <blo> <ret> return <cal> render_template <arg> ( STR , <key> flights = res </key> ) </arg> </cal> </ret> </blo> </if_> </blo> </fun> </mod>"
Generate origin code: Set SQL based on the python expression ( query the stringify column in the $table$ table based on $name$ ) . Return all the data obtained by executing SQL through $conn$.,"from sqlalchemy . sql import select
def query ( conn , table , name ) :
	 s = select ( table . c . stringify ) . where ( table . c . name == name )
	 return conn . execute ( s ) . fetchall ( )",Generate syntax code: Set SQL based on the python expression ( query the stringify column in the $table$ table based on $name$ ) . Return all the data obtained by executing SQL through $conn$.,"<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def query <par> ( conn , table , name ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <att> <att> table . c </att> . stringify </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> table . c </att> . name </att> == name </com> ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $leases$ table according to $mac$ ) , get all the queried data, use for loop to traverse all the query results, insert the 0th element of each piece of data into a list, and use for loop to print the list.","def main ( conn , leases , mac ) :
	 results = conn . query ( leases ) . filter ( leases . mac == mac ) . all ( )
	 results = [ t [ 0 ] for t in results ]
	 for ip in results :
	 	 print ( ip )","Generate syntax code: Use the ORM method and $conn$ to execute SQL ( query all the information in the $leases$ table according to $mac$ ) , get all the queried data, use for loop to traverse all the query results, insert the 0th element of each piece of data into a list, and use for loop to print the list.","<mod> <fun> def main <par> ( conn , leases , mac ) </par> : <blo> <exp> <ass> results = <cal> <att> <cal> <att> <cal> <att> conn . query </att> <arg> ( leases ) </arg> </cal> . filter </att> <arg> ( <com> <att> leases . mac </att> == mac </com> ) </arg> </cal> . all </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> results = <lis> [ <sub> t [ integer ] </sub> <for> for t in results </for> ] </lis> </ass> </exp> <for> for ip in results : <blo> <exp> <cal> print <arg> ( ip ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Get the database engine by $url$. Try to set the SQL: Query the task_id data with task_enumber of $enumber$ in the finishedtask table. Execute SQL to get all data and return. If there is an Exception, return the exception information by logging.error ( ) method.","import logging
from sqlalchemy import create_engine
def my_query ( url , enumber ) :
	 engine = create_engine ( url )
	 try :
	 	 stm = "" select task_id from finishedtask where task_enumber = : enumber "" 
	 	 res = engine . execute ( stm , { "" enumber "" : enumber } ) . fetchall ( )
	 	 return res
	 except Exception as e :
	 	 logging . error ( e )","Generate syntax code: Get the database engine by $url$. Try to set the SQL: Query the task_id data with task_enumber of $enumber$ in the finishedtask table. Execute SQL to get all data and return. If there is an Exception, return the exception information by logging.error ( ) method.","<mod> <imp> import <dot> logging </dot> </imp> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def my_query <par> ( url , enumber ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( url ) </arg> </cal> </ass> </exp> <try> try : <blo> <exp> <ass> stm = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> engine . execute </att> <arg> ( stm , <dic> { <pai> STR : enumber </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> <att> logging . error </att> <arg> ( e ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Open and read the file ""books.csv"", loop 'author' in the file, set the SQL ( query the isbn column in the books table based on each author ) , use $conn$ to execute to get all the query results and print.","import csv
def select_isbn ( conn ) :
	 f = open ( "" books.csv "" )
	 reader = csv . reader ( f )
	 for author in reader :
	 	 sql = "" select isbn from books where author = : author "" 
	 	 isbns = conn . execute ( sql , { "" author "" : author } ) . fetchall ( )
	 	 print ( isbns )","Generate syntax code: Open and read the file ""books.csv"", loop 'author' in the file, set the SQL ( query the isbn column in the books table based on each author ) , use $conn$ to execute to get all the query results and print.","<mod> <imp> import <dot> csv </dot> </imp> <fun> def select_isbn <par> ( conn ) </par> : <blo> <exp> <ass> f = <cal> open <arg> ( STR ) </arg> </cal> </ass> </exp> <exp> <ass> reader = <cal> <att> csv . reader </att> <arg> ( f ) </arg> </cal> </ass> </exp> <for> for author in reader : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> isbns = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : author </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( isbns ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Set SQL according to the python expression: ( query all the results of all columns in the $user$ table based on $userID$ ) . Get the database engine through $URI$ to execute SQL, use for loop to traverse each query result, and finally print each result.","from sqlalchemy . sql import select
from sqlalchemy import create_engine
def getEntryFromUserTable ( URI , user , userID ) :
	 engine = create_engine ( URI )
	 connection = engine . connect ( )
	 selectUser = select ( user ) . where ( user . c . userID == userID )
	 for row in connection . execute ( selectUser ) :
	 	 print ( row )","Generate syntax code: Set SQL according to the python expression: ( query all the results of all columns in the $user$ table based on $userID$ ) . Get the database engine through $URI$ to execute SQL, use for loop to traverse each query result, and finally print each result.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def getEntryFromUserTable <par> ( URI , user , userID ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( URI ) </arg> </cal> </ass> </exp> <exp> <ass> connection = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> selectUser = <cal> <att> <cal> select <arg> ( user ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> user . c </att> . userID </att> == userID </com> ) </arg> </cal> </ass> </exp> <for> for row in <cal> <att> connection . execute </att> <arg> ( selectUser ) </arg> </cal> : <blo> <exp> <cal> print <arg> ( row ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Set SQL based on the Python expression: ( query $table$ table for purchase_type column based on $rec_id$ ) . Execute SQL by $conn$ and get all the data, return True if the length of the query result converted to tuple is not equal to 0, otherwise return False.","from sqlalchemy . sql import select
def is_custom_types ( conn , table , rec_id ) :
	 sql = select ( [ table . c . purchase_type ] ) . where ( table . c . rec_id == rec_id )
	 types = conn . execute ( sql ) . fetchall ( )
	 if len ( tuple ( types ) ) != 0 :
	 	 return True
	 else :
	 	 return False","Generate syntax code: Set SQL based on the Python expression: ( query $table$ table for purchase_type column based on $rec_id$ ) . Execute SQL by $conn$ and get all the data, return True if the length of the query result converted to tuple is not equal to 0, otherwise return False.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def is_custom_types <par> ( conn , table , rec_id ) </par> : <blo> <exp> <ass> sql = <cal> <att> <cal> select <arg> ( <lis> [ <att> <att> table . c </att> . purchase_type </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> table . c </att> . rec_id </att> == rec_id </com> ) </arg> </cal> </ass> </exp> <exp> <ass> types = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> <cal> len <arg> ( <cal> tuple <arg> ( types ) </arg> </cal> ) </arg> </cal> != integer </com> : <blo> <ret> return true </ret> </blo> <els> else : <blo> <ret> return false </ret> </blo> </els> </if_> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( get all data in db_table based on $db_id$ ) . Return all the query results after executing the statement.,"def read_from_sql_server ( conn , db_id ) :
	 dbtexts = conn . execute ( "" select * from db_table where db_id = : db_id "" , { "" db_id "" : db_id } )
	 return dbtexts . fetchall ( )",Generate syntax code: Use $conn$ to execute SQL ( get all data in db_table based on $db_id$ ) . Return all the query results after executing the statement.,"<mod> <fun> def read_from_sql_server <par> ( conn , db_id ) </par> : <blo> <exp> <ass> dbtexts = <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : db_id </pai> } </dic> ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> dbtexts . fetchall </att> <arg> ( ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ connection to execute SQL statement : Get all columns in books table based on $isbn$ and $title$, and get all data. If the query result is empty, use jsonify to return ""error"" with the content ""Not Found""; otherwise, return the query result.","from flask import jsonify
def query_books ( conn , isbn , title ) :
	 row = conn . execute ( "" select * from books where isbn = : isbn and title = : title "" , { "" isbn "" : isbn , "" title "" : title } ) . fetchall ( )
	 if row is None :
	 	 return jsonify ( { "" error "" : "" Not Found "" } )
	 else :
	 	 return row","Generate syntax code: Use $conn$ connection to execute SQL statement : Get all columns in books table based on $isbn$ and $title$, and get all data. If the query result is empty, use jsonify to return ""error"" with the content ""Not Found""; otherwise, return the query result.","<mod> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def query_books <par> ( conn , isbn , title ) </par> : <blo> <exp> <ass> row = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn </pai> , <pai> STR : title </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> row is none </com> : <blo> <ret> return <cal> jsonify <arg> ( <dic> { <pai> STR : STR </pai> } </dic> ) </arg> </cal> </ret> </blo> <els> else : <blo> <ret> return row </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Use the with statement to connect the database according to $engine$. Execute the SQL ( according to the itemName column of items in the $manufacturer$ table ) , get all the query results, convert each item of the query results to dict, store them as list, and return.","def get_beers ( engine , manufacturer ) :
	 with engine . connect ( ) as con :
	 	 rs = con . execute ( "" select itemName from items where manufacturer = : manufacturer "" , { "" manufacturer "" : manufacturer } ) . fetchall ( )
	 	 return [ dict ( row ) for row in rs ]","Generate syntax code: Use the with statement to connect the database according to $engine$. Execute the SQL ( according to the itemName column of items in the $manufacturer$ table ) , get all the query results, convert each item of the query results to dict, store them as list, and return.","<mod> <fun> def get_beers <par> ( engine , manufacturer ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> rs = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR , <dic> { <pai> STR : manufacturer </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Set the SQL statement ( query all columns in the flow table based on $userid$ and $sessionid$ ) , use e$conn$ to execute SQL to get all the data, use for loop traversal to query the results, and print the userid attribute value of the query results.","def evaluateUsersWithFewSessions ( conn , userid , sessionid ) :
	 query = "" select * from flow where userid = : userid and sessionid = : sessionid "" 
	 resultFlowPerUser = conn . execute ( query , { "" userid "" : userid , "" sessionid "" : sessionid } ) . fetchall ( )
	 for userFlow in resultFlowPerUser :
	 	 print ( userFlow . userid )","Generate syntax code: Set the SQL statement ( query all columns in the flow table based on $userid$ and $sessionid$ ) , use e$conn$ to execute SQL to get all the data, use for loop traversal to query the results, and print the userid attribute value of the query results.","<mod> <fun> def evaluateUsersWithFewSessions <par> ( conn , userid , sessionid ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> resultFlowPerUser = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : userid </pai> , <pai> STR : sessionid </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for userFlow in resultFlowPerUser : <blo> <exp> <cal> print <arg> ( <att> userFlow . userid </att> ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute the SQL statement ( query all the columns in the members table ) to get all the data, render and return ""index.html"", where the members parameter is the execution result.","from flask import render_template
def index ( conn ) :
	 members = conn . execute ( "" select * from members "" ) . fetchall ( )
	 return render_template ( "" index.html "" , members = members )","Generate syntax code: Use $conn$ to execute the SQL statement ( query all the columns in the members table ) to get all the data, render and return ""index.html"", where the members parameter is the execution result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def index <par> ( conn ) </par> : <blo> <exp> <ass> members = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> members = members </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Set up the SQL ( query all sequence_name in sequences where schemaval is $schemaval$ ) , execute the SQL over the $conn$ connection and get the data. Store the 0th element of each item of the query result as a list and return.","def get_seq_list_from_db ( conn , schemaval ) :
	 sql = "" select sequence_name from sequences where schemaval= "" + schemaval
	 names = conn . execute ( sql )
	 return [ name [ 0 ] for name in names ]","Generate syntax code: Set up the SQL ( query all sequence_name in sequences where schemaval is $schemaval$ ) , execute the SQL over the $conn$ connection and get the data. Store the 0th element of each item of the query result as a list and return.","<mod> <fun> def get_seq_list_from_db <par> ( conn , schemaval ) </par> : <blo> <exp> <ass> sql = <bin> STR + schemaval </bin> </ass> </exp> <exp> <ass> names = <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <sub> name [ integer ] </sub> <for> for name in names </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Set the SQL statement: Query all the columns in the dnsreqs table with $d_id$, use $ses$ to execute SQL to get all the data. For loop iterates through the execution results and print.","def get_dns_http ( ses , d_id ) :
	 sql = "" select * from dnsreqs where d_id = : d_id "" 
	 results = ses . execute ( sql , { "" d_id "" : d_id } ) . fetchall ( )
	 for row in results :
	 	 print ( row )","Generate syntax code: Set the SQL statement: Query all the columns in the dnsreqs table with $d_id$, use $ses$ to execute SQL to get all the data. For loop iterates through the execution results and print.","<mod> <fun> def get_dns_http <par> ( ses , d_id ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> ses . execute </att> <arg> ( sql , <dic> { <pai> STR : d_id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for row in results : <blo> <exp> <cal> print <arg> ( row ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Use format method to set the SQL: Query the category_id from the Categories table based on $category$, then use $conn$ to execute and get all the data, and finally return the data.","def category_id ( conn , category ) :
	 sql = "" select category_id from Categories where category={} "" . format ( category )
	 result = conn . execute ( sql ) . fetchall ( )
	 return result","Generate syntax code: Use format method to set the SQL: Query the category_id from the Categories table based on $category$, then use $conn$ to execute and get all the data, and finally return the data.","<mod> <fun> def category_id <par> ( conn , category ) </par> : <blo> <exp> <ass> sql = <cal> <att> STR . format </att> <arg> ( category ) </arg> </cal> </ass> </exp> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return result </ret> </blo> </fun> </mod>"
"Generate origin code: In the with statement, use $engine$ to get the connection and execute the following code to set the SQL: query the name information in Table D based on $drinkerID$. Execute the SQL using the link and obtain all the data, convert each item in the query result to a dict type and return.","def get_frequents ( engine , drinkerID ) :
	 with engine . connect ( ) as con :
	 	 sql = "" select name from D where drinkerID = : drinkerID "" 
	 	 rs = con . execute ( sql , { "" drinkerID "" , drinkerID } ) . fetchall ( )
	 	 return [ dict ( row ) for row in rs ]","Generate syntax code: In the with statement, use $engine$ to get the connection and execute the following code to set the SQL: query the name information in Table D based on $drinkerID$. Execute the SQL using the link and obtain all the data, convert each item in the query result to a dict type and return.","<mod> <fun> def get_frequents <par> ( engine , drinkerID ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> con . execute </att> <arg> ( sql , <set> { STR , drinkerID } </set> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Get the database engine and establish a connection through $DATABASEURI$. Execute the SQL statement ( query all the columns in the teams table according to $id$ ) , get all the data, take the query result as the value of the parameter rows, and return the rendered ""listteam.html"" page.","from sqlalchemy import create_engine
from flask import render_template
def listteam ( DATABASEURI , id ) :
	 engine = create_engine ( DATABASEURI )
	 conn = engine . connect ( )
	 res = conn . execute ( "" select * from teams where id = : id "" , { "" id "" : id } ) . fetchall ( )
	 return render_template ( "" listteam.html "" , rows = res )","Generate syntax code: Get the database engine and establish a connection through $DATABASEURI$. Execute the SQL statement ( query all the columns in the teams table according to $id$ ) , get all the data, take the query result as the value of the parameter rows, and return the rendered ""listteam.html"" page.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def listteam <par> ( DATABASEURI , id ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( DATABASEURI ) </arg> </cal> </ass> </exp> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> rows = res </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use the $conn$ connection to execute SQL ( query the first destination data in the flights table through $fid$ ) . If the query result is empty, print 'Error: no such flight.' and return. Use for loop to traverse the query result and print it.","def main ( conn , fid ) :
	 fout = conn . execute ( "" select destination from flights where fid = : fid "" , { "" fid "" : fid } ) . fetchone ( )
	 if fout is None :
	 	 print ( "" Error: no such flight. "" )
	 	 return
	 for fout in fout :
	 	 print ( fout )","Generate syntax code: Use the $conn$ connection to execute SQL ( query the first destination data in the flights table through $fid$ ) . If the query result is empty, print 'Error: no such flight.' and return. Use for loop to traverse the query result and print it.","<mod> <fun> def main <par> ( conn , fid ) </par> : <blo> <exp> <ass> fout = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : fid </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> fout is none </com> : <blo> <exp> <cal> print <arg> ( STR ) </arg> </cal> </exp> <ret> return </ret> </blo> </if_> <for> for fout in fout : <blo> <exp> <cal> print <arg> ( fout ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Use the Python expression to set up the SQL statement: Query the statistics values in the $articles_table$ table based on $month$ and $year$, use $connection$ to execute the SQL to get the first piece of data and return the execution result.","from sqlalchemy . sql import select , func , and_
def get_undescribed_article_count ( connection , articles_table , month , year ) :
	 s = select ( [ func . count ( articles_table ) ] ) . where ( and_ ( articles_table . c . month == month , articles_table . c . year == year ) )
	 rp = connection . execute ( s ) . fetchone ( )
	 return rp","Generate syntax code: Use the Python expression to set up the SQL statement: Query the statistics values in the $articles_table$ table based on $month$ and $year$, use $connection$ to execute the SQL to get the first piece of data and return the execution result.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> , <dot> func </dot> , <dot> and_ </dot> </imp> <fun> def get_undescribed_article_count <par> ( connection , articles_table , month , year ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <lis> [ <cal> <att> func . count </att> <arg> ( articles_table ) </arg> </cal> ] </lis> ) </arg> </cal> . where </att> <arg> ( <cal> and_ <arg> ( <com> <att> <att> articles_table . c </att> . month </att> == month </com> , <com> <att> <att> articles_table . c </att> . year </att> == year </com> ) </arg> </cal> ) </arg> </cal> </ass> </exp> <exp> <ass> rp = <cal> <att> <cal> <att> connection . execute </att> <arg> ( s ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return rp </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the flights table according to $name$ ) , get all the query results, set assertions to determine whether the query result length is not equal to 0, and return to the rendered ""index.html"" page, where the parameter flights is set to the query result.","from flask import render_template
def index ( conn , name ) :
	 flights = conn . execute ( "" select * from flights where name = : name "" , { "" name "" : name } ) . fetchall ( )
	 assert flights != [ ]
	 return render_template ( "" index.html "" , flights = flights )","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the flights table according to $name$ ) , get all the query results, set assertions to determine whether the query result length is not equal to 0, and return to the rendered ""index.html"" page, where the parameter flights is set to the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def index <par> ( conn , name ) </par> : <blo> <exp> <ass> flights = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> flights != <lis> [ ] </lis> </com> </ass> <ret> return <cal> render_template <arg> ( STR , <key> flights = flights </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Connect to the database using $conn$, execute SQL statements ( query all number data in the availability_data where available_bikes is $available_bikes$ ) , and use the for loop to traverse the query results and print them.","def avail_to_db ( conn , available_bikes ) :
	 data_points = conn . execute ( "" select number from availability_data where available_bikes = : available_bikes "" , { "" available_bikes "" : available_bikes } ) . fetchall ( )
	 for data in data_points :
	 	 print ( data )","Generate syntax code: Connect to the database using $conn$, execute SQL statements ( query all number data in the availability_data where available_bikes is $available_bikes$ ) , and use the for loop to traverse the query results and print them.","<mod> <fun> def avail_to_db <par> ( conn , available_bikes ) </par> : <blo> <exp> <ass> data_points = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : available_bikes </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for data in data_points : <blo> <exp> <cal> print <arg> ( data ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Use the python expression to set SQL ( query the id in the $contacts$ table when uuid is $contact_uuid$ ) . Use $conn$ to execute SQL and get the first piece of data. If the data obtained is not None, return the query result. Otherwise, None is returned.","from sqlalchemy . sql import select
def get_contact ( conn , contacts , contact_uuid ) :
	 first = select ( contacts . c . id ) . where ( contacts . c . uuid == contact_uuid )
	 contact = conn . execute ( first ) . fetchone ( )
	 if contact is not None :
	 	 return contact
	 else :
	 	 return None","Generate syntax code: Use the python expression to set SQL ( query the id in the $contacts$ table when uuid is $contact_uuid$ ) . Use $conn$ to execute SQL and get the first piece of data. If the data obtained is not None, return the query result. Otherwise, None is returned.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_contact <par> ( conn , contacts , contact_uuid ) </par> : <blo> <exp> <ass> first = <cal> <att> <cal> select <arg> ( <att> <att> contacts . c </att> . id </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> contacts . c </att> . uuid </att> == contact_uuid </com> ) </arg> </cal> </ass> </exp> <exp> <ass> contact = <cal> <att> <cal> <att> conn . execute </att> <arg> ( first ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> contact is not none </com> : <blo> <ret> return contact </ret> </blo> <els> else : <blo> <ret> return none </ret> </blo> </els> </if_> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL based on the Python expression ( get all columns in $SubDomain$ table based on $is_new$ ) and get all the data. Then use for loop to convert each item of query result into list and finally return the contents of list.,"from sqlalchemy . sql import select
def select_mode ( conn , SubDomain , is_new ) :
	 sql = select ( SubDomain ) . where ( SubDomain . c . is_new == is_new )
	 results = conn . execute ( sql ) . fetchall ( )
	 results_list = [ ]
	 for result in results :
	 	 results_list . append ( result )
	 return results_list",Generate syntax code: Use $conn$ to execute SQL based on the Python expression ( get all columns in $SubDomain$ table based on $is_new$ ) and get all the data. Then use for loop to convert each item of query result into list and finally return the contents of list.,"<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def select_mode <par> ( conn , SubDomain , is_new ) </par> : <blo> <exp> <ass> sql = <cal> <att> <cal> select <arg> ( SubDomain ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> SubDomain . c </att> . is_new </att> == is_new </com> ) </arg> </cal> </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> results_list = <lis> [ ] </lis> </ass> </exp> <for> for result in results : <blo> <exp> <cal> <att> results_list . append </att> <arg> ( result ) </arg> </cal> </exp> </blo> </for> <ret> return results_list </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL statement: Get all columns in table based on $key$, execute SQL and get all the data. Store the 0th element of each item of query results as list and return it.","def select_keys ( conn , key ) :
	 result = conn . execute ( "" select * from table where key = : key "" , { "" key "" : key } ) . fetchall ( )
	 result = [ x [ 0 ] for x in result ]
	 return result","Generate syntax code: Use $conn$ to execute SQL statement: Get all columns in table based on $key$, execute SQL and get all the data. Store the 0th element of each item of query results as list and return it.","<mod> <fun> def select_keys <par> ( conn , key ) </par> : <blo> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : key </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> result = <lis> [ <sub> x [ integer ] </sub> <for> for x in result </for> ] </lis> </ass> </exp> <ret> return result </ret> </blo> </fun> </mod>"
"Generate origin code: Use 'with' statement to connect to database based on $engine$. Set SQL based on the Python expression: ( query all columns in $eta$ table based on SPRINT_ID: $id$ ) . Execute SQL statement, get all the data, use for loop to convert each query result to dict, store in list and return.","from sqlalchemy . sql import select
def get_source ( engine , id , eta ) :
	 with engine . connect ( ) as conn :
	 	 sql = select ( [ eta ] ) . where ( eta . c . SPRINT_ID == id )
	 	 etas = conn . execute ( sql ) . fetchall ( )
	 	 return [ dict ( row ) for row in etas ]","Generate syntax code: Use 'with' statement to connect to database based on $engine$. Set SQL based on the Python expression: ( query all columns in $eta$ table based on SPRINT_ID: $id$ ) . Execute SQL statement, get all the data, use for loop to convert each query result to dict, store in list and return.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_source <par> ( engine , id , eta ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> sql = <cal> <att> <cal> select <arg> ( <lis> [ eta ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> eta . c </att> . SPRINT_ID </att> == id </com> ) </arg> </cal> </ass> </exp> <exp> <ass> etas = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in etas </for> ] </lis> </ret> </blo> </wit> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute the SQL ( query the table_namet table for old information based on $uc_name$ ) and get all the data. Use for loop to store the 0th element of each item in the result to list and return.,"def get_unique_constraint ( conn , uc_name ) :
	 ucname = conn . execute ( "" select old from table_namet where name = : uc_name "" , { "" uc_name "" : uc_name } ) . fetchall ( )
	 namet = [ ]
	 for r in ucname :
	 	 namet . append ( r [ 0 ] )
	 return namet",Generate syntax code: Use $conn$ to execute the SQL ( query the table_namet table for old information based on $uc_name$ ) and get all the data. Use for loop to store the 0th element of each item in the result to list and return.,"<mod> <fun> def get_unique_constraint <par> ( conn , uc_name ) </par> : <blo> <exp> <ass> ucname = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : uc_name </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> namet = <lis> [ ] </lis> </ass> </exp> <for> for r in ucname : <blo> <exp> <cal> <att> namet . append </att> <arg> ( <sub> r [ integer ] </sub> ) </arg> </cal> </exp> </blo> </for> <ret> return namet </ret> </blo> </fun> </mod>"
"Generate origin code: Try to execute the following code: Get the connection through $url$ and set the client_encoding parameter to 'utf8'. Execute SQL in ORM ( query all columns in the $Story_table$ table based on $author$ ) and get all the query results. Finally, return the query result. If an exception occurs, print the exception information.","import sqlalchemy
def init_pg ( url , Story_table , author ) :
	 try :
	 	 conn = sqlalchemy . create_engine ( url , client_encoding = "" utf8 "" )
	 	 values = conn . query ( Story_table ) . filter ( Story_table . author == author ) . all ( )
	 	 return values
	 except Exception as ex :
	 	 raise ex","Generate syntax code: Try to execute the following code: Get the connection through $url$ and set the client_encoding parameter to 'utf8'. Execute SQL in ORM ( query all columns in the $Story_table$ table based on $author$ ) and get all the query results. Finally, return the query result. If an exception occurs, print the exception information.","<mod> <imp> import <dot> sqlalchemy </dot> </imp> <fun> def init_pg <par> ( url , Story_table , author ) </par> : <blo> <try> try : <blo> <exp> <ass> conn = <cal> <att> sqlalchemy . create_engine </att> <arg> ( url , <key> client_encoding = STR </key> ) </arg> </cal> </ass> </exp> <exp> <ass> values = <cal> <att> <cal> <att> <cal> <att> conn . query </att> <arg> ( Story_table ) </arg> </cal> . filter </att> <arg> ( <com> <att> Story_table . author </att> == author </com> ) </arg> </cal> . all </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return values </ret> </blo> <exc> except <as_> Exception as <as_> ex </as_> </as_> : <blo> <rai> raise ex </rai> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Use $conn_string$ to get the database engine and execute SQL ( get the target column in the targets table based on $url$, $email$ and $id$ ) , get the first piece of data, and finally return the query result.","from sqlalchemy import create_engine
def get_target ( conn_string , url , email , id ) :
	 engine = create_engine ( conn_string )
	 sql = "" select target from targets where url = : url and email = : email and id = : id "" 
	 target = engine . execute ( sql , { "" url "" : url , "" email "" : email , "" id "" : id } ) . fetchone ( )
	 return target","Generate syntax code: Use $conn_string$ to get the database engine and execute SQL ( get the target column in the targets table based on $url$, $email$ and $id$ ) , get the first piece of data, and finally return the query result.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def get_target <par> ( conn_string , url , email , id ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( conn_string ) </arg> </cal> </ass> </exp> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> target = <cal> <att> <cal> <att> engine . execute </att> <arg> ( sql , <dic> { <pai> STR : url </pai> , <pai> STR : email </pai> , <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return target </ret> </blo> </fun> </mod>"
"Generate origin code: Get the database engine via $connection_string$ with the echo parameter being False, and establish a connection. Set up the SQL statement ( query all the columns in the saltie table based on $value$ ) , get all the data, close the connection, and return the query results.","from sqlalchemy import create_engine
def select_value ( connection_string , value ) :
	 engine = create_engine ( connection_string , echo = False )
	 conn = engine . connect ( )
	 query_sql = "" select * from saltie where value = : value "" 
	 results = conn . execute ( query_sql , { "" value "" : value } ) . fetchall ( )
	 conn . close ( )
	 return results","Generate syntax code: Get the database engine via $connection_string$ with the echo parameter being False, and establish a connection. Set up the SQL statement ( query all the columns in the saltie table based on $value$ ) , get all the data, close the connection, and return the query results.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def select_value <par> ( connection_string , value ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( connection_string , <key> echo = false </key> ) </arg> </cal> </ass> </exp> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> query_sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query_sql , <dic> { <pai> STR : value </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return results </ret> </blo> </fun> </mod>"
"Generate origin code: Use the Python expression to set the SQL statement as follows: Get the hash information in the $files$ table through $path$, execute SQL to get the first piece of data, make sure that $conn$ is closed. If there is no query result, return False, otherwise return the 0th element of the query results.","from sqlalchemy . sql import select
def get ( conn , files , path ) :
	 s = select ( [ files . c . hash ] , files . c . path == path )
	 r = conn . execute ( s ) . fetchone ( )
	 conn . close ( )
	 if not r :
	 	 return False
	 return r [ 0 ]","Generate syntax code: Use the Python expression to set the SQL statement as follows: Get the hash information in the $files$ table through $path$, execute SQL to get the first piece of data, make sure that $conn$ is closed. If there is no query result, return False, otherwise return the 0th element of the query results.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get <par> ( conn , files , path ) </par> : <blo> <exp> <ass> s = <cal> select <arg> ( <lis> [ <att> <att> files . c </att> . hash </att> ] </lis> , <com> <att> <att> files . c </att> . path </att> == path </com> ) </arg> </cal> </ass> </exp> <exp> <ass> r = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <if_> if <not> not r </not> : <blo> <ret> return false </ret> </blo> </if_> <ret> return <sub> r [ integer ] </sub> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $engine$ to connect to the database by the with statement, execute the SQL ( get all columns in drinkers based on $drinkerID$ ) and get all data. Finally return the query result.","def generateDrinkerID ( drinkerID , engine ) :
	 with engine . connect ( ) as con :
	 	 query = "" select * from drinkers where drinkerID = : drinkerID "" 
	 	 rs = con . execute ( query , { "" drinkerID "" : drinkerID } ) . fetchall ( )
	 	 return rs","Generate syntax code: Use $engine$ to connect to the database by the with statement, execute the SQL ( get all columns in drinkers based on $drinkerID$ ) and get all data. Finally return the query result.","<mod> <fun> def generateDrinkerID <par> ( drinkerID , engine ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> con . execute </att> <arg> ( query , <dic> { <pai> STR : drinkerID </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return rs </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get the table_name column in the information_schema where table_schema is $table_schema$ ) with $conn$ and get all the data, then use the for loop to store the list type for the tenth element of each item in the query result and return.","def get_table_list_from_db ( conn , table_schema ) :
	 sql = "" select table_name from information_schema where table_schema = : table_schema "" 
	 res = conn . execute ( sql , { "" table_schema "" : table_schema } ) . fetchall ( )
	 return [ name [ 0 ] for name in res ]","Generate syntax code: Execute the SQL ( get the table_name column in the information_schema where table_schema is $table_schema$ ) with $conn$ and get all the data, then use the for loop to store the list type for the tenth element of each item in the query result and return.","<mod> <fun> def get_table_list_from_db <par> ( conn , table_schema ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : table_schema </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <sub> name [ integer ] </sub> <for> for name in res </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Open the books.csv file and read it, use for loop traversal to iterate over the content, and use $conn$ to execute the SQL statement: Query all the isbn in the books table through 'title' and print the query results.","import csv
def main ( conn ) :
	 f = open ( "" books.csv "" )
	 reader = csv . reader ( f )
	 for title in reader :
	 	 res = conn . execute ( "" select isbn from books where title = : title "" , { "" title "" : title } ) . fetchall ( )
	 	 print ( res )","Generate syntax code: Open the books.csv file and read it, use for loop traversal to iterate over the content, and use $conn$ to execute the SQL statement: Query all the isbn in the books table through 'title' and print the query results.","<mod> <imp> import <dot> csv </dot> </imp> <fun> def main <par> ( conn ) </par> : <blo> <exp> <ass> f = <cal> open <arg> ( STR ) </arg> </cal> </ass> </exp> <exp> <ass> reader = <cal> <att> csv . reader </att> <arg> ( f ) </arg> </cal> </ass> </exp> <for> for title in reader : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : title </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( res ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: If $titulo$ is not None, then execute SQL through $conn$ ( get all columns in the peliculas table based on $title$ ) and get all the data. Then use for loop to store each item of the query results as list and finally return the list.","def get_pelis_by_name ( conn , titulo ) :
	 if titulo is not None :
	 	 sql = "" select * from peliculas where titulo = : titulo "" 
	 	 results = conn . execute ( sql , { "" titulo "" : titulo } ) . fetchall ( )
	 	 pelicula = [ ]
	 	 for row in results :
	 	 	 pelicula . append ( row )
	 	 return pelicula","Generate syntax code: If $titulo$ is not None, then execute SQL through $conn$ ( get all columns in the peliculas table based on $title$ ) and get all the data. Then use for loop to store each item of the query results as list and finally return the list.","<mod> <fun> def get_pelis_by_name <par> ( conn , titulo ) </par> : <blo> <if_> if <com> titulo is not none </com> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : titulo </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> pelicula = <lis> [ ] </lis> </ass> </exp> <for> for row in results : <blo> <exp> <cal> <att> pelicula . append </att> <arg> ( row ) </arg> </cal> </exp> </blo> </for> <ret> return pelicula </ret> </blo> </if_> </blo> </fun> </mod>"
Generate origin code: Get the database engine through $sqlite$. Execute the SQL statement ( query the first piece of name data in the hello table based on $hid$ ) . Return all the query results.,"from sqlalchemy import create_engine
def query_info ( sqlite , hid ) :
	 engine = create_engine ( sqlite )
	 hres = engine . execute ( "" select name from hello where hid = : hid "" , { "" hid "" : hid } ) . fetchone ( )
	 return hres",Generate syntax code: Get the database engine through $sqlite$. Execute the SQL statement ( query the first piece of name data in the hello table based on $hid$ ) . Return all the query results.,"<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def query_info <par> ( sqlite , hid ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( sqlite ) </arg> </cal> </ass> </exp> <exp> <ass> hres = <cal> <att> <cal> <att> engine . execute </att> <arg> ( STR , <dic> { <pai> STR : hid </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return hres </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query all columns in the Substitutes table based on $id_orig$ and $id_sub$ ) , get all the data, and add each item of the query result to the empty list. If the length of list is 0, return None; otherwise, return the query result in list form.","def save_products ( conn , id_orig , id_sub ) :
	 data = conn . execute ( "" select * from Substitutes where id_orig = : id_orig and id_sub = : id_sub "" , { "" id_orig "" : id_orig , "" id_sub "" : id_sub } ) . fetchall ( )
	 response = [ ]
	 for i in data :
	 	 response . append ( i )
	 if len ( response ) == 0 :
	 	 return None
	 return response","Generate syntax code: Use $conn$ to execute SQL ( query all columns in the Substitutes table based on $id_orig$ and $id_sub$ ) , get all the data, and add each item of the query result to the empty list. If the length of list is 0, return None; otherwise, return the query result in list form.","<mod> <fun> def save_products <par> ( conn , id_orig , id_sub ) </par> : <blo> <exp> <ass> data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id_orig </pai> , <pai> STR : id_sub </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> response = <lis> [ ] </lis> </ass> </exp> <for> for i in data : <blo> <exp> <cal> <att> response . append </att> <arg> ( i ) </arg> </cal> </exp> </blo> </for> <if_> if <com> <cal> len <arg> ( response ) </arg> </cal> == integer </com> : <blo> <ret> return none </ret> </blo> </if_> <ret> return response </ret> </blo> </fun> </mod>"
"Generate origin code: Create a cursor object through $conn$, set the SQL statement: Query the id data in the regione table where nome is $nome$, execute the SQL statement to get all the data, make sure that $conn$ is closed, and return the 0th element of the execution result.","def getRegioneId_sql ( conn , nome ) :
	 c = conn . cursor ( )
	 query = "" select id from regione where nome = : nome "" 
	 res = c . execute ( query , { "" nome "" : nome } ) . fetchall ( )
	 conn . close ( )
	 return res [ 0 ]","Generate syntax code: Create a cursor object through $conn$, set the SQL statement: Query the id data in the regione table where nome is $nome$, execute the SQL statement to get all the data, make sure that $conn$ is closed, and return the 0th element of the execution result.","<mod> <fun> def getRegioneId_sql <par> ( conn , nome ) </par> : <blo> <exp> <ass> c = <cal> <att> conn . cursor </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> query = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> c . execute </att> <arg> ( query , <dic> { <pai> STR : nome </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return <sub> res [ integer ] </sub> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query the keyfile in the clients table based on $name$ and $system_uuid$ ) and get all the data. If the query result length is not 0, return the query result.","def download_key ( conn , name , system_uuid ) :
	 longres = conn . execute ( "" select keyfile from clients where name = : name and system_uuid = : system_uuid "" , { "" name "" : name , "" system_uuid "" : system_uuid } ) . fetchall ( )
	 if len ( longres ) == 0 :
	 	 return longres","Generate syntax code: Use $conn$ to execute SQL ( query the keyfile in the clients table based on $name$ and $system_uuid$ ) and get all the data. If the query result length is not 0, return the query result.","<mod> <fun> def download_key <par> ( conn , name , system_uuid ) </par> : <blo> <exp> <ass> longres = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> , <pai> STR : system_uuid </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> <cal> len <arg> ( longres ) </arg> </cal> == integer </com> : <blo> <ret> return longres </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Execute SQL over a $conn$ connection ( query all fileval data in the pdf where the name of file is $Filename$ ) . Open fingerprint.csv using binary write mode ( wb ) . The for loop iterates through the query results, and write the query results to a CSV file on a row basis.","import csv
def export_csv ( conn , Filename ) :
	 res_File = conn . execute ( "" select fileval from pdf where Filename = : Filename "" , { "" Filename "" : Filename } ) . fetchall ( )
	 f = open ( "" fingerprint.csv "" , "" wb "" )
	 wrtr = csv . writer ( f )
	 for row in res_File :
	 	 wrtr . writerow ( row )","Generate syntax code: Execute SQL over a $conn$ connection ( query all fileval data in the pdf where the name of file is $Filename$ ) . Open fingerprint.csv using binary write mode ( wb ) . The for loop iterates through the query results, and write the query results to a CSV file on a row basis.","<mod> <imp> import <dot> csv </dot> </imp> <fun> def export_csv <par> ( conn , Filename ) </par> : <blo> <exp> <ass> res_File = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : Filename </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> f = <cal> open <arg> ( STR , STR ) </arg> </cal> </ass> </exp> <exp> <ass> wrtr = <cal> <att> csv . writer </att> <arg> ( f ) </arg> </cal> </ass> </exp> <for> for row in res_File : <blo> <exp> <cal> <att> wrtr . writerow </att> <arg> ( row ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Use the Python expression to set up the SQL statement: Query the id in the $Department$ table through $name$. Execute SQL through $connection$ and get the first piece of data, print the query result and return.","from sqlalchemy . sql import select
def reading ( connection , Department , name ) :
	 find_it = select ( [ Department . c . id ] ) . where ( Department . c . name == name )
	 rs = connection . execute ( find_it ) . fetchone ( )
	 print ( rs )
	 return rs","Generate syntax code: Use the Python expression to set up the SQL statement: Query the id in the $Department$ table through $name$. Execute SQL through $connection$ and get the first piece of data, print the query result and return.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def reading <par> ( connection , Department , name ) </par> : <blo> <exp> <ass> find_it = <cal> <att> <cal> select <arg> ( <lis> [ <att> <att> Department . c </att> . id </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> Department . c </att> . name </att> == name </com> ) </arg> </cal> </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> connection . execute </att> <arg> ( find_it ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( rs ) </arg> </cal> </exp> <ret> return rs </ret> </blo> </fun> </mod>"
"Generate origin code: If $isbn$ is empty, return the rendered ""not_logged_in.html"" page; otherwise, use $conn$ to execute SQL ( query the reviewer column in the reviews table according to $isbn$ ) , get all the query results, use for loop traversal to get all the query results, and insert each piece of data into a list. Return the rendered ""write_review.html"" page, where the parameter isbn is $isbn$.","from flask import render_template
def write_review ( conn , isbn ) :
	 if isbn == None :
	 	 return render_template ( "" not_logged_in.html "" )
	 reviewers = conn . execute ( "" select reviewer from reviews where isbn = : isbn; "" , { "" isbn "" : isbn } ) . fetchall ( )
	 u_lis = [ ]
	 for user in reviewers :
	 	 u_lis . append ( user )
	 return render_template ( "" write_review.html "" , isbn = isbn )","Generate syntax code: If $isbn$ is empty, return the rendered ""not_logged_in.html"" page; otherwise, use $conn$ to execute SQL ( query the reviewer column in the reviews table according to $isbn$ ) , get all the query results, use for loop traversal to get all the query results, and insert each piece of data into a list. Return the rendered ""write_review.html"" page, where the parameter isbn is $isbn$.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def write_review <par> ( conn , isbn ) </par> : <blo> <if_> if <com> isbn == none </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </if_> <exp> <ass> reviewers = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> u_lis = <lis> [ ] </lis> </ass> </exp> <for> for user in reviewers : <blo> <exp> <cal> <att> u_lis . append </att> <arg> ( user ) </arg> </cal> </exp> </blo> </for> <ret> return <cal> render_template <arg> ( STR , <key> isbn = isbn </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use the $conn$ connection to execute the SQL statement ( query all the columns in the books based on $isbn$ ) and get the first piece of data. If the execution result exists, use jsonify to return the execution result.","from flask import jsonify
def bookapi ( conn , isbn ) :
	 book = conn . execute ( "" select * from books where isbn = : isbn "" , { "" isbn "" : isbn } ) . fetchone ( )
	 if book :
	 	 return jsonify ( book )","Generate syntax code: Use the $conn$ connection to execute the SQL statement ( query all the columns in the books based on $isbn$ ) and get the first piece of data. If the execution result exists, use jsonify to return the execution result.","<mod> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def bookapi <par> ( conn , isbn ) </par> : <blo> <exp> <ass> book = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if book : <blo> <ret> return <cal> jsonify <arg> ( book ) </arg> </cal> </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Execute SQL via $conn$: Get all the job_name in jobzl via $company$, set the assertion to determine that the obtained result is not an empty 'list', print the obtained result and return.","def get_select ( conn , company ) :
	 res = conn . execute ( "" select job_name from jobzl where company = : company "" , { "" company "" : company } ) . fetchall ( )
	 assert res != [ ]
	 print ( res )
	 return res","Generate syntax code: Execute SQL via $conn$: Get all the job_name in jobzl via $company$, set the assertion to determine that the obtained result is not an empty 'list', print the obtained result and return.","<mod> <fun> def get_select <par> ( conn , company ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : company </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> res != <lis> [ ] </lis> </com> </ass> <exp> <cal> print <arg> ( res ) </arg> </cal> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Set the SQL statement based on $author$, get the year data in the books table, execute the SQL statement with the $conn$ connection, and convert the execution result to list. If the length of the list content is 0, render and return ""failure.html""; otherwise, render and return ""found.html"".","from flask import render_template
def searchResult ( conn , author ) :
	 sql = "" select year from books where author = : author "" 
	 results = conn . execute ( sql , { "" author "" : author } )
	 listFound = list ( results )
	 if len ( listFound ) == 0 :
	 	 return render_template ( "" failure.html "" )
	 return render_template ( "" found.html "" )","Generate syntax code: Set the SQL statement based on $author$, get the year data in the books table, execute the SQL statement with the $conn$ connection, and convert the execution result to list. If the length of the list content is 0, render and return ""failure.html""; otherwise, render and return ""found.html"".","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def searchResult <par> ( conn , author ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : author </pai> } </dic> ) </arg> </cal> </ass> </exp> <exp> <ass> listFound = <cal> list <arg> ( results ) </arg> </cal> </ass> </exp> <if_> if <com> <cal> len <arg> ( listFound ) </arg> </cal> == integer </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </if_> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Try to set up SQL ( query order_state column in order table based on $ORDER_ID$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each data into a list and return the list. If an exception is caught, print 'fail to get order_state'.","def select_state ( conn , ORDER_ID ) :
	 try :
	 	 get_state = "" select order_state from order where ORDER_ID = : ORDER_ID "" 
	 	 states = conn . execute ( get_state , { "" ORDER_ID "" : ORDER_ID } ) . fetchall ( )
	 	 return [ state for state in states ]
	 except :
	 	 print ( "" fail to get order_state "" )","Generate syntax code: Try to set up SQL ( query order_state column in order table based on $ORDER_ID$ ) , execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each data into a list and return the list. If an exception is caught, print 'fail to get order_state'.","<mod> <fun> def select_state <par> ( conn , ORDER_ID ) </par> : <blo> <try> try : <blo> <exp> <ass> get_state = STR </ass> </exp> <exp> <ass> states = <cal> <att> <cal> <att> conn . execute </att> <arg> ( get_state , <dic> { <pai> STR : ORDER_ID </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ state <for> for state in states </for> ] </lis> </ret> </blo> <exc> except : <blo> <exp> <cal> print <arg> ( STR ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
Generate origin code: Use the Python expression to query the first 'name' in the $t$ table where the id is $ID$ through the $conn$ connection and return the query result.,"from sqlalchemy . sql import select
def test_lobs_without_convert ( conn , t , ID ) :
	 row = conn . execute ( select ( t . c . name ) . where ( t . c . id == ID ) ) . fetchone ( )
	 return row",Generate syntax code: Use the Python expression to query the first 'name' in the $t$ table where the id is $ID$ through the $conn$ connection and return the query result.,"<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def test_lobs_without_convert <par> ( conn , t , ID ) </par> : <blo> <exp> <ass> row = <cal> <att> <cal> <att> conn . execute </att> <arg> ( <cal> <att> <cal> select <arg> ( <att> <att> t . c </att> . name </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> t . c </att> . id </att> == ID </com> ) </arg> </cal> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return row </ret> </blo> </fun> </mod>"
Generate origin code: Use $e$ to get the connection. Use the connection to execute the SQL ( query the weather_cond information in airport_weather based on $airport$ ) and get all the data. Store the 0th element of each item in the query results in the list and return.,"def get_inf ( e , airport ) :
	 conn = e . connect ( )
	 weat = conn . execute ( "" select weather_cond from airport_weather where airport = : airport "" , { "" airport "" : airport } ) . fetchall ( )
	 return [ item [ 0 ] for item in weat ]",Generate syntax code: Use $e$ to get the connection. Use the connection to execute the SQL ( query the weather_cond information in airport_weather based on $airport$ ) and get all the data. Store the 0th element of each item in the query results in the list and return.,"<mod> <fun> def get_inf <par> ( e , airport ) </par> : <blo> <exp> <ass> conn = <cal> <att> e . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> weat = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : airport </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <sub> item [ integer ] </sub> <for> for item in weat </for> ] </lis> </ret> </blo> </fun> </mod>"
Generate origin code: Set SQL ( query the books table for review information where isbn is $isbn$ ) . Execute the SQL using $connection$ and get all the data. Return the rendered 'profile.html' and pass the query results to the reviews parameter.,"from flask import render_template
def Search_book ( connection , isbn ) :
	 querys = "" select review from books where isbn = : isbn "" 
	 reviews = connection . execute ( querys , { "" isbn "" : isbn } ) . fetchall ( )
	 return render_template ( "" profile.html "" , reviews = reviews )",Generate syntax code: Set SQL ( query the books table for review information where isbn is $isbn$ ) . Execute the SQL using $connection$ and get all the data. Return the rendered 'profile.html' and pass the query results to the reviews parameter.,"<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def Search_book <par> ( connection , isbn ) </par> : <blo> <exp> <ass> querys = STR </ass> </exp> <exp> <ass> reviews = <cal> <att> <cal> <att> connection . execute </att> <arg> ( querys , <dic> { <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> reviews = reviews </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get the time column in the flights where password is $password$ ) with $conn$, get all the data, and finally return the rendered ""flights.html"" with the RES parameter as the result of the query.","from flask import render_template
def flights ( conn , password ) :
	 query = "" select time from flights where password = : password "" 
	 res = conn . execute ( query , { "" password "" : password } ) . fetchall ( )
	 return render_template ( "" flights.html "" , res = res )","Generate syntax code: Execute the SQL ( get the time column in the flights where password is $password$ ) with $conn$, get all the data, and finally return the rendered ""flights.html"" with the RES parameter as the result of the query.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def flights <par> ( conn , password ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : password </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> res = res </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Get the database connection from $testing$ in the with statement, execute the SQL statement ( query all columns in the table1 ) and get all the data. Convert each item in the query result into a tuple and return it as a list.","def search ( testing ) :
	 with testing . connect ( ) as conn :
	 	 results = conn . execute ( "" select * from table1 "" ) . fetchall ( )
	 	 return [ tuple ( row ) for row in results ]","Generate syntax code: Get the database connection from $testing$ in the with statement, execute the SQL statement ( query all columns in the table1 ) and get all the data. Convert each item in the query result into a tuple and return it as a list.",<mod> <fun> def search <par> ( testing ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> testing . connect </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> tuple <arg> ( row ) </arg> </cal> <for> for row in results </for> ] </lis> </ret> </blo> </wit> </blo> </fun> </mod>
"Generate origin code: Try to use the Python expression to set up SQL statement: Get customer_id data in the $parent_plots$ table based on $plotname$, use $conn$ connection to execute SQL statement and get all the data. Return all query results. If exception occurs, return the empty list.","from sqlalchemy . sql import select
def get_plot_customer ( conn , parent_plots , plotname ) :
	 try :
	 	 s = select ( parent_plots . c . customer_id ) . where ( parent_plots . c . plotname == plotname )
	 	 customer_id = conn . execute ( s ) . fetchall ( )
	 	 return customer_id
	 except :
	 	 return [ ]","Generate syntax code: Try to use the Python expression to set up SQL statement: Get customer_id data in the $parent_plots$ table based on $plotname$, use $conn$ connection to execute SQL statement and get all the data. Return all query results. If exception occurs, return the empty list.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_plot_customer <par> ( conn , parent_plots , plotname ) </par> : <blo> <try> try : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <att> <att> parent_plots . c </att> . customer_id </att> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> parent_plots . c </att> . plotname </att> == plotname </com> ) </arg> </cal> </ass> </exp> <exp> <ass> customer_id = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return customer_id </ret> </blo> <exc> except : <blo> <ret> return <lis> [ ] </lis> </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Connect to the database through $db_engine$. Execute the SQL statement ( get all the columns in the customers table based on $username$ and $password$ ) and get the first piece of data to ensure that the database connection is closed. If the fetched data is empty, return None; otherwise, return the data corresponding to firstname and lastname in the query result.","def getCustomer ( db_engine , username , password ) :
	 db_conn = db_engine . connect ( )
	 res = db_conn . execute ( "" select * from customers where username = : username and password = : password "" , { "" username "" : username , "" password "" : password } ) . fetchone ( )
	 db_conn . close ( )
	 if res is None :
	 	 return None
	 else :
	 	 return { "" firstname "" : res [ "" firstname "" ] , "" lastname "" : res [ "" lastname "" ] }","Generate syntax code: Connect to the database through $db_engine$. Execute the SQL statement ( get all the columns in the customers table based on $username$ and $password$ ) and get the first piece of data to ensure that the database connection is closed. If the fetched data is empty, return None; otherwise, return the data corresponding to firstname and lastname in the query result.","<mod> <fun> def getCustomer <par> ( db_engine , username , password ) </par> : <blo> <exp> <ass> db_conn = <cal> <att> db_engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> db_conn . execute </att> <arg> ( STR , <dic> { <pai> STR : username </pai> , <pai> STR : password </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> db_conn . close </att> <arg> ( ) </arg> </cal> </exp> <if_> if <com> res is none </com> : <blo> <ret> return none </ret> </blo> <els> else : <blo> <ret> return <dic> { <pai> STR : <sub> res [ STR ] </sub> </pai> , <pai> STR : <sub> res [ STR ] </sub> </pai> } </dic> </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Set the SQL statement and the content is as follows: Query the duration data in the flights table where id is $id$, use the $conn$ connection to execute SQL, get all the data, convert each item of the query result into dict, store it as list, and return.","def select_duration ( conn , id ) :
	 duration_sql = "" select duration from flights where id = : id "" 
	 durations = conn . execute ( duration_sql , { "" id "" : id } ) . fetchall ( )
	 return [ dict ( duration ) for duration in durations ]","Generate syntax code: Set the SQL statement and the content is as follows: Query the duration data in the flights table where id is $id$, use the $conn$ connection to execute SQL, get all the data, convert each item of the query result into dict, store it as list, and return.","<mod> <fun> def select_duration <par> ( conn , id ) </par> : <blo> <exp> <ass> duration_sql = STR </ass> </exp> <exp> <ass> durations = <cal> <att> <cal> <att> conn . execute </att> <arg> ( duration_sql , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( duration ) </arg> </cal> <for> for duration in durations </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Use the string matching method to set sql ( query the otu_id column in the Samples table according to $date_now$ ) , use $conn$ to execute SQL, use for loop to traverse all query results, store it as list and return.","def sampleJson ( conn , date_now ) :
	 query = "" select otu_id from Samples where date_now=%s "" % date_now
	 queryData = conn . execute ( query )
	 queryList = [ each for each in queryData ]
	 return queryList","Generate syntax code: Use the string matching method to set sql ( query the otu_id column in the Samples table according to $date_now$ ) , use $conn$ to execute SQL, use for loop to traverse all query results, store it as list and return.","<mod> <fun> def sampleJson <par> ( conn , date_now ) </par> : <blo> <exp> <ass> query = <bin> STR % date_now </bin> </ass> </exp> <exp> <ass> queryData = <cal> <att> conn . execute </att> <arg> ( query ) </arg> </cal> </ass> </exp> <exp> <ass> queryList = <lis> [ each <for> for each in queryData </for> ] </lis> </ass> </exp> <ret> return queryList </ret> </blo> </fun> </mod>"
"Generate origin code: If the request is GET, the rendered 'index.html' is returned. If the request method is POST, execute the SQL using $db$ ( querying user information in users where username is $logusername$ and whewre password is $logpassword$ ) and get the first data. Returns the rendered 'main.html', and pass the query result into the user parameter.","from flask import render_template , request
def login ( db , logusername , logpassword ) :
	 if request . method == "" GET "" :
	 	 return render_template ( "" index.html "" )
	 if request . method == "" POST "" :
	 	 user = db . execute ( "" select user from users where username = : username and password = : password "" , { "" username "" : logusername , "" password "" : logpassword } ) . fetchone ( )
	 	 return render_template ( "" main.html "" , user = user )","Generate syntax code: If the request is GET, the rendered 'index.html' is returned. If the request method is POST, execute the SQL using $db$ ( querying user information in users where username is $logusername$ and whewre password is $logpassword$ ) and get the first data. Returns the rendered 'main.html', and pass the query result into the user parameter.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> , <dot> request </dot> </imp> <fun> def login <par> ( db , logusername , logpassword ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </if_> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <exp> <ass> user = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : logusername </pai> , <pai> STR : logpassword </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> user = user </key> ) </arg> </cal> </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Step1: Executes the SQL statement through $db$: Query all the columns in the books table based on $book_id$ and get the first piece of data. Step2: Execute the SQL statement through $db$: Query all the columns in the 'reviews' table based on $book_id$ and get all the data. Render and return ""book.html"", where the book parameter is the query result of step1 and the 'reviews' parameter is the query result of step2.","from flask import render_template
def book ( db , book_id ) :
	 book = db . execute ( "" select * from books where id = : id "" , { "" id "" : book_id } ) . fetchone ( )
	 reviews = db . execute ( "" select * from reviews where book_id = : id "" , { "" id "" : book_id } , ) . fetchall ( )
	 return render_template ( "" book.html "" , book = book , reviews = reviews )","Generate syntax code: Step1: Executes the SQL statement through $db$: Query all the columns in the books table based on $book_id$ and get the first piece of data. Step2: Execute the SQL statement through $db$: Query all the columns in the 'reviews' table based on $book_id$ and get all the data. Render and return ""book.html"", where the book parameter is the query result of step1 and the 'reviews' parameter is the query result of step2.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def book <par> ( db , book_id ) </par> : <blo> <exp> <ass> book = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : book_id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> reviews = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : book_id </pai> } </dic> , ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> book = book </key> , <key> reviews = reviews </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Set the SQL ( query all data in the data_hist with the string $code$ through the format ( ) function format string ) , execute the SQL statement with $conn$ to get all the data, make sure the database connection is closed and return the query results.","def reflesh_profit_peaks_botts ( conn , code ) :
	 sql = "" select count(*) from data_hist where code={} "" . format ( code )
	 infor = conn . execute ( sql ) . fetchall ( )
	 conn . close ( )
	 return infor","Generate syntax code: Set the SQL ( query all data in the data_hist with the string $code$ through the format ( ) function format string ) , execute the SQL statement with $conn$ to get all the data, make sure the database connection is closed and return the query results.","<mod> <fun> def reflesh_profit_peaks_botts <par> ( conn , code ) </par> : <blo> <exp> <ass> sql = <cal> <att> STR . format </att> <arg> ( code ) </arg> </cal> </ass> </exp> <exp> <ass> infor = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return infor </ret> </blo> </fun> </mod>"
Generate origin code: Use $con$ to execute SQL: To query all rating data from the comments table and return the query results.,"def main ( con ) :
	 res = con . execute ( "" select rating from comments "" ) . fetchall ( )
	 return res",Generate syntax code: Use $con$ to execute SQL: To query all rating data from the comments table and return the query results.,<mod> <fun> def main <par> ( con ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> </fun> </mod>
"Generate origin code: Execute SQL with $conn$ ( get all columns in sqlalchemy where word is $word$ ) and get all data, then set the assertion query result not to be of type list, print the query result, and return the query result.","def test_query_with_parameter ( conn , word ) :
	 query = "" select * from sqlalchemy where word = : word "" 
	 result = conn . execute ( query , { "" word "" : word } ) . fetchall ( )
	 assert result != [ ]
	 print ( result )
	 return result","Generate syntax code: Execute SQL with $conn$ ( get all columns in sqlalchemy where word is $word$ ) and get all data, then set the assertion query result not to be of type list, print the query result, and return the query result.","<mod> <fun> def test_query_with_parameter <par> ( conn , word ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : word </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> result != <lis> [ ] </lis> </com> </ass> <exp> <cal> print <arg> ( result ) </arg> </cal> </exp> <ret> return result </ret> </blo> </fun> </mod>"
"Generate origin code: Set up SQL ( query the wallet_id column in the transaction_records table according to $id$ ) , use $conn$ to execute the SQL to query the first row of data, and return empty if no data is queried; otherwise, return the queried data.","def get_wallet_by_tx ( conn , id ) :
	 find_tx_sql_str = "" select wallet_id from transaction_records where id = %s "" % ( id )
	 data_query = conn . execute ( find_tx_sql_str , { "" id "" : id } ) . fetchone ( )
	 if not data_query :
	 	 return
	 return data_query","Generate syntax code: Set up SQL ( query the wallet_id column in the transaction_records table according to $id$ ) , use $conn$ to execute the SQL to query the first row of data, and return empty if no data is queried; otherwise, return the queried data.","<mod> <fun> def get_wallet_by_tx <par> ( conn , id ) </par> : <blo> <exp> <ass> find_tx_sql_str = <bin> STR % <par> ( id ) </par> </bin> </ass> </exp> <exp> <ass> data_query = <cal> <att> <cal> <att> conn . execute </att> <arg> ( find_tx_sql_str , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <not> not data_query </not> : <blo> <ret> return </ret> </blo> </if_> <ret> return data_query </ret> </blo> </fun> </mod>"
"Generate origin code: Query the first 'name' in passengers table where flight_id is $flight_id$ through $conn$ , set assertion to determine that the length of the query result is not zero and return the query result.","def flight ( conn , flight_id ) :
	 passenger = conn . execute ( "" select name from passengers where flight_id = : flight_id "" , { "" flight_id "" : flight_id } ) . fetchone ( )
	 assert len ( passenger ) != 0
	 return passenger","Generate syntax code: Query the first 'name' in passengers table where flight_id is $flight_id$ through $conn$ , set assertion to determine that the length of the query result is not zero and return the query result.","<mod> <fun> def flight <par> ( conn , flight_id ) </par> : <blo> <exp> <ass> passenger = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : flight_id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> <cal> len <arg> ( passenger ) </arg> </cal> != integer </com> </ass> <ret> return passenger </ret> </blo> </fun> </mod>"
"Generate origin code: Set SQL ( query the origin in the flights table based on $id$ ) , use $conn$ to execute SQL and get all the query results. If the length of the query result is 0, print ""False"", otherwise print the query result.","def select_value ( conn , id ) :
	 sql = "" select origin from flights where id = : id "" 
	 origins = conn . execute ( sql , { "" id "" : id } ) . fetchall ( )
	 if len ( origins ) == 0 :
	 	 print ( "" False "" )
	 return origins","Generate syntax code: Set SQL ( query the origin in the flights table based on $id$ ) , use $conn$ to execute SQL and get all the query results. If the length of the query result is 0, print ""False"", otherwise print the query result.","<mod> <fun> def select_value <par> ( conn , id ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> origins = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> <cal> len <arg> ( origins ) </arg> </cal> == integer </com> : <blo> <exp> <cal> print <arg> ( STR ) </arg> </cal> </exp> </blo> </if_> <ret> return origins </ret> </blo> </fun> </mod>"
"Generate origin code: Use $db$ to execute SQL ( get all the columns in the books table where book_name is $name$ and isbn is $id$ ) , get all the data, and finally return the rendered ""index.html"", where the books parameter is the query result.","from flask import render_template
def get_books ( db , name , id ) :
	 bs = db . execute ( "" select * from books where book_name = : name and isbn = : id "" , { "" name "" : name , "" id "" : id } ) . fetchall ( )
	 return render_template ( "" index.html "" , books = bs )","Generate syntax code: Use $db$ to execute SQL ( get all the columns in the books table where book_name is $name$ and isbn is $id$ ) , get all the data, and finally return the rendered ""index.html"", where the books parameter is the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def get_books <par> ( db , name , id ) </par> : <blo> <exp> <ass> bs = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> , <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> books = bs </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Execute SQL via $conn$: Query the first id in the user table based on $login$. If the query result exists, return it.","def okUser ( conn , login ) :
	 my_user = conn . execute ( "" select id from user where login = : login) "" , { "" login "" : login } ) . fetchone ( )
	 if my_user :
	 	 return my_user","Generate syntax code: Execute SQL via $conn$: Query the first id in the user table based on $login$. If the query result exists, return it.","<mod> <fun> def okUser <par> ( conn , login ) </par> : <blo> <exp> <ass> my_user = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : login </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if my_user : <blo> <ret> return my_user </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Try to use $conn$ to execute SQL ( get all the columns in the db table according to values for $val$ ) and get the first row of data, return the query result. If an exception occurs during execution, print the exception and return False.","def get_commendation_view ( conn , val ) :
	 try :
	 	 result = conn . execute ( "" select * from db where values = : val "" , { "" val "" : val } ) . fetchone ( )
	 	 return result
	 except Exception as ex :
	 	 print ( ex )
	 	 return False","Generate syntax code: Try to use $conn$ to execute SQL ( get all the columns in the db table according to values for $val$ ) and get the first row of data, return the query result. If an exception occurs during execution, print the exception and return False.","<mod> <fun> def get_commendation_view <par> ( conn , val ) </par> : <blo> <try> try : <blo> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : val </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return result </ret> </blo> <exc> except <as_> Exception as <as_> ex </as_> </as_> : <blo> <exp> <cal> print <arg> ( ex ) </arg> </cal> </exp> <ret> return false </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL according to the python expression ( query all columns in the $ProfilesData$ table where FK_groups is $gid$ ) and get the first piece of data. If the query result is empty, return None; otherwise, return the query result.","def getProfileImagingServer ( conn , ProfilesData , gid ) :
	 pdata = conn . query ( ProfilesData ) . filter ( ProfilesData . c . FK_groups == gid ) . first ( )
	 if pdata == None :
	 	 return None
	 return pdata","Generate syntax code: Use $conn$ to execute SQL according to the python expression ( query all columns in the $ProfilesData$ table where FK_groups is $gid$ ) and get the first piece of data. If the query result is empty, return None; otherwise, return the query result.","<mod> <fun> def getProfileImagingServer <par> ( conn , ProfilesData , gid ) </par> : <blo> <exp> <ass> pdata = <cal> <att> <cal> <att> <cal> <att> conn . query </att> <arg> ( ProfilesData ) </arg> </cal> . filter </att> <arg> ( <com> <att> <att> ProfilesData . c </att> . FK_groups </att> == gid </com> ) </arg> </cal> . first </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> pdata == none </com> : <blo> <ret> return none </ret> </blo> </if_> <ret> return pdata </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( get the description column in the Images table where imageID is $imageId$ ) , get all the data, and finally return the query result.","def find_Description ( conn , imageId ) :
	 desc = conn . execute ( "" select description from Images where imageID = : imageId "" , { "" imageId "" : imageId } ) . fetchall ( )
	 return desc","Generate syntax code: Use $conn$ to execute SQL ( get the description column in the Images table where imageID is $imageId$ ) , get all the data, and finally return the query result.","<mod> <fun> def find_Description <par> ( conn , imageId ) </par> : <blo> <exp> <ass> desc = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : imageId </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return desc </ret> </blo> </fun> </mod>"
"Generate origin code: Use $tussl_test$ to get the database engine and connect to the database, then execute SQL ( get column 'a' in the basic table with d as $time$ ) and get all the data, and finally set the assertion that the length of the query result is not 0","import sqlalchemy
def test_basic_execute ( tussl_test , time ) :
	 engine = sqlalchemy . create_engine ( tussl_test )
	 connection = engine . connect ( )
	 data_sql = "" select a from basic where d = : time "" 
	 results = connection . execute ( data_sql , { "" time "" : time } ) . fetchall ( )
	 assert len ( results ) != 0","Generate syntax code: Use $tussl_test$ to get the database engine and connect to the database, then execute SQL ( get column 'a' in the basic table with d as $time$ ) and get all the data, and finally set the assertion that the length of the query result is not 0","<mod> <imp> import <dot> sqlalchemy </dot> </imp> <fun> def test_basic_execute <par> ( tussl_test , time ) </par> : <blo> <exp> <ass> engine = <cal> <att> sqlalchemy . create_engine </att> <arg> ( tussl_test ) </arg> </cal> </ass> </exp> <exp> <ass> connection = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> data_sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> connection . execute </att> <arg> ( data_sql , <dic> { <pai> STR : time </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> <cal> len <arg> ( results ) </arg> </cal> != integer </com> </ass> </blo> </fun> </mod>"
"Generate origin code: Use $db$ to execute SQL ( get the year column in the books table based on $isbn$, $title$ and $author$ ) . If the number of rows of the query result is 0, return the rendered ""error.html"", then obtain the first piece of data of the query result, and finally return the rendered ""results.html"", where the year parameter is the first data of the query result.","from flask import render_template
def search_year ( db , isbn , title , author ) :
	 query = "" select year from books where isbn = : isbn and title = : title and author = : author "" 
	 rows = db . execute ( query , { "" isbn "" : isbn , "" title "" : title , "" author "" : author } )
	 if rows . rowcount == 0 :
	 	 return render_template ( "" error.html "" )
	 year = rows . fetchone ( )
	 return render_template ( "" results.html "" , year = year )","Generate syntax code: Use $db$ to execute SQL ( get the year column in the books table based on $isbn$, $title$ and $author$ ) . If the number of rows of the query result is 0, return the rendered ""error.html"", then obtain the first piece of data of the query result, and finally return the rendered ""results.html"", where the year parameter is the first data of the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def search_year <par> ( db , isbn , title , author ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> rows = <cal> <att> db . execute </att> <arg> ( query , <dic> { <pai> STR : isbn </pai> , <pai> STR : title </pai> , <pai> STR : author </pai> } </dic> ) </arg> </cal> </ass> </exp> <if_> if <com> <att> rows . rowcount </att> == integer </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </if_> <exp> <ass> year = <cal> <att> rows . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> year = year </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL statement with $con$: Query the largest duration in the flights table, get all the data, and return the obtained data.","def main ( con ) :
	 m_duration = con . execute ( "" select max(duration) from flights "" ) . fetchall ( )
	 return m_duration","Generate syntax code: Execute the SQL statement with $con$: Query the largest duration in the flights table, get all the data, and return the obtained data.",<mod> <fun> def main <par> ( con ) </par> : <blo> <exp> <ass> m_duration = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return m_duration </ret> </blo> </fun> </mod>
"Generate origin code: Use $conn$ to query all names in users where id is $id$. Render and return 'success.html', where the sender parameter is the name attribute of the query result.","from flask import render_template
def transactions ( conn , id ) :
	 trans = conn . execute ( "" select name from users where id = : id "" , { "" id "" : id } ) . fetchall ( )
	 return render_template ( "" success.html "" , sender = trans . name )","Generate syntax code: Use $conn$ to query all names in users where id is $id$. Render and return 'success.html', where the sender parameter is the name attribute of the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def transactions <par> ( conn , id ) </par> : <blo> <exp> <ass> trans = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> sender = <att> trans . name </att> </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $db$ to execute SQL based on the python expression ( get the origin column in the $flights$ table where destination is $dest$ and duration is $dur$ ) and get all the data. Finally, use for loop to convert each item of the query result to a list type and return.","def get_origin ( db , flights , dest , dur ) :
	 query = flights . select ( [ flights . c . origin ] ) . where ( flights . c . destination == dest and flights . c . duration == dur )
	 origins = db . execute ( query ) . fetchall ( )
	 return [ o for o in origins ]","Generate syntax code: Use $db$ to execute SQL based on the python expression ( get the origin column in the $flights$ table where destination is $dest$ and duration is $dur$ ) and get all the data. Finally, use for loop to convert each item of the query result to a list type and return.","<mod> <fun> def get_origin <par> ( db , flights , dest , dur ) </par> : <blo> <exp> <ass> query = <cal> <att> <cal> <att> flights . select </att> <arg> ( <lis> [ <att> <att> flights . c </att> . origin </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <boo> <com> <att> <att> flights . c </att> . destination </att> == dest </com> and <com> <att> <att> flights . c </att> . duration </att> == dur </com> </boo> ) </arg> </cal> </ass> </exp> <exp> <ass> origins = <cal> <att> <cal> <att> db . execute </att> <arg> ( query ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ o <for> for o in origins </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Try to use $connection$ to use the Python expression to set SQL: To get the categoryID data in $categories_table$ according to $name$, execute SQL to get the first piece of data and return. If Exception occurs, print the exception message and return.","from sqlalchemy . sql import select
def get_category_by_name ( connection , categories_table , name ) :
	 try :
	 	 s = select ( [ categories_table . c . categoryID ] ) . where ( categories_table . c . name == name )
	 	 result = connection . execute ( s ) . fetchone ( )
	 	 return result
	 except Exception as e :
	 	 print ( e )
	 	 return","Generate syntax code: Try to use $connection$ to use the Python expression to set SQL: To get the categoryID data in $categories_table$ according to $name$, execute SQL to get the first piece of data and return. If Exception occurs, print the exception message and return.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_category_by_name <par> ( connection , categories_table , name ) </par> : <blo> <try> try : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( <lis> [ <att> <att> categories_table . c </att> . categoryID </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> categories_table . c </att> . name </att> == name </com> ) </arg> </cal> </ass> </exp> <exp> <ass> result = <cal> <att> <cal> <att> connection . execute </att> <arg> ( s ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return result </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( e ) </arg> </cal> </exp> <ret> return </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Use $dbcur$ to execute SQL ( query the number of all columns in the information_schema table based on $table_name$ ) and return False, if the 0th element of the first row of data obtained is not equal to 1; otherwise, return the 0th element of the first row of data.","def checkTable ( dbcur , table_name ) :
	 res = dbcur . execute ( "" select COUNT(*) from information_schema where table_name = : table_name "" , { "" table_name "" : table_name } )
	 if not res . fetchone ( ) [ 0 ] == 1 :
	 	 return False
	 else :
	 	 return res . fetchone ( ) [ 0 ]","Generate syntax code: Use $dbcur$ to execute SQL ( query the number of all columns in the information_schema table based on $table_name$ ) and return False, if the 0th element of the first row of data obtained is not equal to 1; otherwise, return the 0th element of the first row of data.","<mod> <fun> def checkTable <par> ( dbcur , table_name ) </par> : <blo> <exp> <ass> res = <cal> <att> dbcur . execute </att> <arg> ( STR , <dic> { <pai> STR : table_name </pai> } </dic> ) </arg> </cal> </ass> </exp> <if_> if <not> not <com> <sub> <cal> <att> res . fetchone </att> <arg> ( ) </arg> </cal> [ integer ] </sub> == integer </com> </not> : <blo> <ret> return false </ret> </blo> <els> else : <blo> <ret> return <sub> <cal> <att> res . fetchone </att> <arg> ( ) </arg> </cal> [ integer ] </sub> </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Get the database engine using $test$, execute the SQL ( find all columns of $statuses$ ) through the database engine, get all the data, and print all the data using the for loop.","from sqlalchemy . sql import select
from sqlalchemy import create_engine
def select_run ( test , statuses ) :
	 engine = create_engine ( test )
	 status = engine . execute ( select ( [ statuses ] ) ) . fetchall ( )
	 for row in status :
	 	 print ( row )","Generate syntax code: Get the database engine using $test$, execute the SQL ( find all columns of $statuses$ ) through the database engine, get all the data, and print all the data using the for loop.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def select_run <par> ( test , statuses ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( test ) </arg> </cal> </ass> </exp> <exp> <ass> status = <cal> <att> <cal> <att> engine . execute </att> <arg> ( <cal> select <arg> ( <lis> [ statuses ] </lis> ) </arg> </cal> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for row in status : <blo> <exp> <cal> print <arg> ( row ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Set the SQL statement: Query all columns in the stocks_hist table with 'date' of $date$, and execute SQL to get all the data via $conn_hist$. If the obtained data is not empty, return.","def get_sotcks_hist ( conn_hist , date ) :
	 rawsql = "" select * from stocks_hist where date = : date "" 
	 res = conn_hist . execute ( rawsql , date = date ) . fetchall ( )
	 if res :
	 	 return res","Generate syntax code: Set the SQL statement: Query all columns in the stocks_hist table with 'date' of $date$, and execute SQL to get all the data via $conn_hist$. If the obtained data is not empty, return.","<mod> <fun> def get_sotcks_hist <par> ( conn_hist , date ) </par> : <blo> <exp> <ass> rawsql = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn_hist . execute </att> <arg> ( rawsql , <key> date = date </key> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if res : <blo> <ret> return res </ret> </blo> </if_> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( query the first row of data in the osm column of the scripts table based on $functions$ ) and return the 0th element of the data.,"def osmaxx_functions ( conn , functions ) :
	 res = conn . execute ( "" select osm from scripts where functions = : functions "" , { "" functions "" : functions } ) . fetchone ( )
	 return res [ 0 ]",Generate syntax code: Use $conn$ to execute SQL ( query the first row of data in the osm column of the scripts table based on $functions$ ) and return the 0th element of the data.,"<mod> <fun> def osmaxx_functions <par> ( conn , functions ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : functions </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <sub> res [ integer ] </sub> </ret> </blo> </fun> </mod>"
"Generate origin code: Execute SQL statement through $conn$: Query statistical values of all columns in the apbd table based on $tahun$, $kode$ and $ref_kode$. Get the first piece of data and return the query results.","def data_found ( conn , tahun , kode , ref_kode ) :
	 data = conn . execute ( "" select COUNT(*) from apbd where tahun = : tahun and kode = : kode and ref_kode = : ref_kode "" , { "" tahun "" : tahun , "" kode "" : kode , "" ref_kode "" : ref_kode } ) . fetchone ( )
	 return data","Generate syntax code: Execute SQL statement through $conn$: Query statistical values of all columns in the apbd table based on $tahun$, $kode$ and $ref_kode$. Get the first piece of data and return the query results.","<mod> <fun> def data_found <par> ( conn , tahun , kode , ref_kode ) </par> : <blo> <exp> <ass> data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : tahun </pai> , <pai> STR : kode </pai> , <pai> STR : ref_kode </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return data </ret> </blo> </fun> </mod>"
"Generate origin code: Get the database engine and establish a connection through $postgresql$. Execute the SQL statement ( query the message column in the articles table according to $title$ ) , get all the data, close the connection. If the execution result is greater than 0, return the rendered ""articles.html"" page, where the parameter articles is the query result.","from flask import render_template
from sqlalchemy import create_engine
def articles ( postgresql , title ) :
	 eng = create_engine ( postgresql )
	 con = eng . connect ( )
	 result = con . execute ( "" select message from articles where title = : title "" , { "" title "" : title } ) . fetchall ( )
	 con . close ( )
	 if result > 0 :
	 	 return render_template ( "" articles.html "" , articles = result )","Generate syntax code: Get the database engine and establish a connection through $postgresql$. Execute the SQL statement ( query the message column in the articles table according to $title$ ) , get all the data, close the connection. If the execution result is greater than 0, return the rendered ""articles.html"" page, where the parameter articles is the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def articles <par> ( postgresql , title ) </par> : <blo> <exp> <ass> eng = <cal> create_engine <arg> ( postgresql ) </arg> </cal> </ass> </exp> <exp> <ass> con = <cal> <att> eng . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> result = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR , <dic> { <pai> STR : title </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> con . close </att> <arg> ( ) </arg> </cal> </exp> <if_> if <com> result > integer </com> : <blo> <ret> return <cal> render_template <arg> ( STR , <key> articles = result </key> ) </arg> </cal> </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Set up SQL ( query all the information in the usersdata table based on $startDate$ ) , execute SQL with $conn$ and get all the query results. Use for loop to convert each query result to dict, and store it in list and return.","def select_value ( conn , startDate ) :
	 query_sql = "" select * from usersdata where startDate = : startDate "" 
	 data = conn . execute ( query_sql , { "" startDate "" : startDate } ) . fetchall ( )
	 return [ dict ( d ) for d in data ]","Generate syntax code: Set up SQL ( query all the information in the usersdata table based on $startDate$ ) , execute SQL with $conn$ and get all the query results. Use for loop to convert each query result to dict, and store it in list and return.","<mod> <fun> def select_value <par> ( conn , startDate ) </par> : <blo> <exp> <ass> query_sql = STR </ass> </exp> <exp> <ass> data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query_sql , <dic> { <pai> STR : startDate </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( d ) </arg> </cal> <for> for d in data </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get all the columns in the books where p1_index is $p1_index$ ) with $conn$ and get all the data, then return the rendered ""p1_index.html"" with the books parameter as the result of the query.","from flask import render_template
def books ( conn , p1_index ) :
	 query = "" select * from books where p1_index = : p1_index "" 
	 res = conn . execute ( query , { "" p1_index "" : p1_index } ) . fetchall ( )
	 return render_template ( "" p1_index.html "" , books = res )","Generate syntax code: Execute the SQL ( get all the columns in the books where p1_index is $p1_index$ ) with $conn$ and get all the data, then return the rendered ""p1_index.html"" with the books parameter as the result of the query.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def books <par> ( conn , p1_index ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : p1_index </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> books = res </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
Generate origin code: Execute SQL through $connection$ ( get the gid column in the pg_prepared_xacts table ) and get all the data. Then print the query results. Use for loop to store the 0th element of each item of the query results as list and finally return the list.,"def do_recover_twophase ( connection ) :
	 resultset = connection . execute ( "" select gid from pg_prepared_xacts "" ) . fetchall ( )
	 print ( resultset )
	 return [ row [ 0 ] for row in resultset ]",Generate syntax code: Execute SQL through $connection$ ( get the gid column in the pg_prepared_xacts table ) and get all the data. Then print the query results. Use for loop to store the 0th element of each item of the query results as list and finally return the list.,<mod> <fun> def do_recover_twophase <par> ( connection ) </par> : <blo> <exp> <ass> resultset = <cal> <att> <cal> <att> connection . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( resultset ) </arg> </cal> </exp> <ret> return <lis> [ <sub> row [ integer ] </sub> <for> for row in resultset </for> ] </lis> </ret> </blo> </fun> </mod>
"Generate origin code: Execute SQL via $conn$ connection ( query all columns in books with isbn of $isbn_code$ ) to get the first piece of data, and return 0 if the data is empty; otherwise, returm the execution result of the dictionary type.","def api ( conn , isbn_code ) :
	 data = conn . execute ( "" select * from books isbn = : isbn "" , { "" isbn "" : isbn_code } ) . fetchone ( )
	 if data == None :
	 	 return 0
	 else :
	 	 return dict ( data )","Generate syntax code: Execute SQL via $conn$ connection ( query all columns in books with isbn of $isbn_code$ ) to get the first piece of data, and return 0 if the data is empty; otherwise, returm the execution result of the dictionary type.","<mod> <fun> def api <par> ( conn , isbn_code ) </par> : <blo> <exp> <ass> data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn_code </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> data == none </com> : <blo> <ret> return integer </ret> </blo> <els> else : <blo> <ret> return <cal> dict <arg> ( data ) </arg> </cal> </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: In ORM, try to use $session$ to query the first piece of data in the $Comment$ table that the id is $c_id$ and return the query result. If an exception occurs, use 'raise' to throw the exception. Finally, make sure that $session$ is turned off.","def process_comment ( Comment , session , c_id ) :
	 try :
	 	 matching_comment = session . query ( Comment ) . filter_by ( Comment . id == c_id , ) . first ( )
	 	 return matching_comment
	 except :
	 	 raise
	 finally :
	 	 session . close ( )","Generate syntax code: In ORM, try to use $session$ to query the first piece of data in the $Comment$ table that the id is $c_id$ and return the query result. If an exception occurs, use 'raise' to throw the exception. Finally, make sure that $session$ is turned off.","<mod> <fun> def process_comment <par> ( Comment , session , c_id ) </par> : <blo> <try> try : <blo> <exp> <ass> matching_comment = <cal> <att> <cal> <att> <cal> <att> session . query </att> <arg> ( Comment ) </arg> </cal> . filter_by </att> <arg> ( <com> <att> Comment . id </att> == c_id </com> , ) </arg> </cal> . first </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return matching_comment </ret> </blo> <exc> except : <blo> <rai> raise </rai> </blo> </exc> <fin> finally : <blo> <exp> <cal> <att> session . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
Generate origin code: Set up an SQL statement: Query the LastUpdated data in the boxes table by $boxID$ and execute SQL to query all data via $conn$. For loop iterates through the query results and prints the 0th element of the query results.,"def getLastUpdatedDate ( boxID , conn ) :
	 sql = "" select LastUpdated from boxes where boxID = : boxID "" 
	 result = conn . execute ( sql , { "" boxID "" : boxID } ) . fetchall ( )
	 for row in result :
	 	 print ( row [ 0 ] )",Generate syntax code: Set up an SQL statement: Query the LastUpdated data in the boxes table by $boxID$ and execute SQL to query all data via $conn$. For loop iterates through the query results and prints the 0th element of the query results.,"<mod> <fun> def getLastUpdatedDate <par> ( boxID , conn ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : boxID </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for row in result : <blo> <exp> <cal> print <arg> ( <sub> row [ integer ] </sub> ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>"
"Generate origin code: Try to set up SQL ( get all columns in vw_muertes_estado based on $data_year$ ) and get all the data by $conn$ execution. Then store the query result as DataFrame format. After that convert the query result to dictionary type with 'records' as orient parameter. Finally use jsonify to process the dictionary content and return. If there is an exception in the execution, print the exception string and finally make sure that $conn$ is closed.","import pandas as pd
from flask import jsonify
def tell_data ( conn , data_year ) :
	 try :
	 	 sql_select_Query = "" select * from vw_muertes_estado where data_year = : data_year "" 
	 	 res = conn . execute ( sql_select_Query , { "" data_year "" : data_year } ) . fetchall ( )
	 	 result_df = pd . DataFrame ( res )
	 	 df = result_df . to_dict ( orient = "" records "" )
	 	 return jsonify ( df )
	 except Exception as e :
	 	 print ( str ( e ) )
	 finally :
	 	 conn . close ( )","Generate syntax code: Try to set up SQL ( get all columns in vw_muertes_estado based on $data_year$ ) and get all the data by $conn$ execution. Then store the query result as DataFrame format. After that convert the query result to dictionary type with 'records' as orient parameter. Finally use jsonify to process the dictionary content and return. If there is an exception in the execution, print the exception string and finally make sure that $conn$ is closed.","<mod> <imp> import <ali> <dot> pandas </dot> as pd </ali> </imp> <imp> from <dot> flask </dot> import <dot> jsonify </dot> </imp> <fun> def tell_data <par> ( conn , data_year ) </par> : <blo> <try> try : <blo> <exp> <ass> sql_select_Query = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql_select_Query , <dic> { <pai> STR : data_year </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> result_df = <cal> <att> pd . DataFrame </att> <arg> ( res ) </arg> </cal> </ass> </exp> <exp> <ass> df = <cal> <att> result_df . to_dict </att> <arg> ( <key> orient = STR </key> ) </arg> </cal> </ass> </exp> <ret> return <cal> jsonify <arg> ( df ) </arg> </cal> </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( <cal> str <arg> ( e ) </arg> </cal> ) </arg> </cal> </exp> </blo> </exc> <fin> finally : <blo> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
"Generate origin code: If $schema$ is empty, throw and execute an Exception, whose parameter is ""fail""; otherwise, obtain the database engine through $connection_string$. Use the with statement to establish a connection. Use the format string matching method to set the sql statement ( query all columns in the 'pg_tables' table based on the condition that schemaname is $schema$ ) , execute the SQL statement, get all the data, and return the query results.","import sqlalchemy
def get_page ( connection_string , schema ) :
	 if schema == "" "" :
	 	 raise Exception ( "" fail "" )
	 engine = sqlalchemy . create_engine ( connection_string )
	 with engine . connect ( ) as conn :
	 	 sqlString = "" select * from pg_tables where schemaname = : {} "" . format ( schema )
	 	 ret = conn . execute ( sqlString ) . fetchall ( )
	 	 return ret","Generate syntax code: If $schema$ is empty, throw and execute an Exception, whose parameter is ""fail""; otherwise, obtain the database engine through $connection_string$. Use the with statement to establish a connection. Use the format string matching method to set the sql statement ( query all columns in the 'pg_tables' table based on the condition that schemaname is $schema$ ) , execute the SQL statement, get all the data, and return the query results.","<mod> <imp> import <dot> sqlalchemy </dot> </imp> <fun> def get_page <par> ( connection_string , schema ) </par> : <blo> <if_> if <com> schema == STR </com> : <blo> <rai> raise <cal> Exception <arg> ( STR ) </arg> </cal> </rai> </blo> </if_> <exp> <ass> engine = <cal> <att> sqlalchemy . create_engine </att> <arg> ( connection_string ) </arg> </cal> </ass> </exp> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> sqlString = <cal> <att> STR . format </att> <arg> ( schema ) </arg> </cal> </ass> </exp> <exp> <ass> ret = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sqlString ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return ret </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Try to use $conn$ to execute SQL ( query sponsor in user based on $plan$ ) and get all the data and return the query results. Finally, make sure the connection is closed.","def basic_fixture ( conn , plan ) :
	 try :
	 	 sponsor = conn . execute ( "" select sponsor from user where plan = : plan "" , { "" plan "" : plan } ) . fetchall ( )
	 	 return sponsor
	 finally :
	 	 conn . close ( )","Generate syntax code: Try to use $conn$ to execute SQL ( query sponsor in user based on $plan$ ) and get all the data and return the query results. Finally, make sure the connection is closed.","<mod> <fun> def basic_fixture <par> ( conn , plan ) </par> : <blo> <try> try : <blo> <exp> <ass> sponsor = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : plan </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return sponsor </ret> </blo> <fin> finally : <blo> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
"Generate origin code: Creating a database engine using $oracle$. Start a connection with the with statement, and use the connection to execute the SQL ( querying the team_name_abbr in the team based on $name$ ) and get the first data. Print element 0 in the query result.","from sqlalchemy import create_engine
def test9 ( oracle , name ) :
	 engine = create_engine ( oracle )
	 with engine . begin ( ) as conn :
	 	 res = conn . execute ( "" select team_name_abbr from team where name = : name "" , { "" name "" : name } ) . fetchone ( )
	 print ( res [ 0 ] )","Generate syntax code: Creating a database engine using $oracle$. Start a connection with the with statement, and use the connection to execute the SQL ( querying the team_name_abbr in the team based on $name$ ) and get the first data. Print element 0 in the query result.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def test9 <par> ( oracle , name ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( oracle ) </arg> </cal> </ass> </exp> <wit> with <wit> <wit> <as_> <cal> <att> engine . begin </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> </blo> </wit> <exp> <cal> print <arg> ( <sub> res [ integer ] </sub> ) </arg> </cal> </exp> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL using $db$ ( get the book column in the tableh where linkValue is $link$ ) and get all the data, return the query results if the length of the query results is not 0.","def initiateLinkSearch ( db , link ) :
	 s = db . execute ( "" select book from tableh where linkValue = : link "" , { "" link "" : link } )
	 links = s . fetchall ( )
	 if ( len ( links ) != 0 ) :
	 	 return links","Generate syntax code: Execute the SQL using $db$ ( get the book column in the tableh where linkValue is $link$ ) and get all the data, return the query results if the length of the query results is not 0.","<mod> <fun> def initiateLinkSearch <par> ( db , link ) </par> : <blo> <exp> <ass> s = <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : link </pai> } </dic> ) </arg> </cal> </ass> </exp> <exp> <ass> links = <cal> <att> s . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <par> ( <com> <cal> len <arg> ( links ) </arg> </cal> != integer </com> ) </par> : <blo> <ret> return links </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Set SQL ( query the lastname column in the User table based on $firstname$ ) , use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the query results are empty, and return the query results.","def testBulk ( conn , firstname ) :
	 sql = "" select lastname from User where firstname = : firstname "" 
	 results = conn . execute ( sql , { "" firstname "" : firstname } ) . fetchall ( )
	 assert results != [ ]
	 return results","Generate syntax code: Set SQL ( query the lastname column in the User table based on $firstname$ ) , use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the query results are empty, and return the query results.","<mod> <fun> def testBulk <par> ( conn , firstname ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : firstname </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ass> assert <com> results != <lis> [ ] </lis> </com> </ass> <ret> return results </ret> </blo> </fun> </mod>"
"Generate origin code: Set the SQL statement: Query all the columns in the data table according to $date$, use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result.","def get_code_by_date ( conn , date ) :
	 sql_data = "" select * from data where date = : date "" 
	 records = conn . execute ( sql_data , { "" date "" : date } ) . fetchall ( )
	 return records [ 0 ]","Generate syntax code: Set the SQL statement: Query all the columns in the data table according to $date$, use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result.","<mod> <fun> def get_code_by_date <par> ( conn , date ) </par> : <blo> <exp> <ass> sql_data = STR </ass> </exp> <exp> <ass> records = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql_data , <dic> { <pai> STR : date </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <sub> records [ integer ] </sub> </ret> </blo> </fun> </mod>"
"Generate origin code: If use $conn$ to execute SQL ( get all the columns in users based on $username$ ) and the result of the number of rows is 0, return rendered ""message_layout.html"" and pass ""Not Registered"" into the message parameter. Otherwise return rendered ""message_layout.html"", and pass ""Succesfuly Logged In!"" into the message parameter.","from flask import render_template
def login ( username , conn ) :
	 if conn . execute ( "" select * from users where username = : username "" , { "" username "" : username } ) . rowcount == 0 :
	 	 return render_template ( "" message_layout.html "" , message = "" Not Registered! "" )
	 else :
	 	 return render_template ( "" message_layout.html "" , message = "" Succesfuly Logged In! "" )","Generate syntax code: If use $conn$ to execute SQL ( get all the columns in users based on $username$ ) and the result of the number of rows is 0, return rendered ""message_layout.html"" and pass ""Not Registered"" into the message parameter. Otherwise return rendered ""message_layout.html"", and pass ""Succesfuly Logged In!"" into the message parameter.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def login <par> ( username , conn ) </par> : <blo> <if_> if <com> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : username </pai> } </dic> ) </arg> </cal> . rowcount </att> == integer </com> : <blo> <ret> return <cal> render_template <arg> ( STR , <key> message = STR </key> ) </arg> </cal> </ret> </blo> <els> else : <blo> <ret> return <cal> render_template <arg> ( STR , <key> message = STR </key> ) </arg> </cal> </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Set the SQL with the following content: Get the salary data in the jobs table based on $company$, execute the SQL to get all the data via $conn$, and return all the obtained data.","def process_item ( conn , company ) :
	 sql = "" select salary from jobs where company = : company "" 
	 data = conn . execute ( sql , { "" company "" : company } ) . fetchall ( )
	 return data","Generate syntax code: Set the SQL with the following content: Get the salary data in the jobs table based on $company$, execute the SQL to get all the data via $conn$, and return all the obtained data.","<mod> <fun> def process_item <par> ( conn , company ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : company </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return data </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get all the columns in the test_frame3_legacy where id is $id$ ) with $conn$, get all the data, then close the $conn$ connection, and return the query results.","def test_sql_open_close ( conn , id ) :
	 sql = "" select * from test_frame3_legacy where id = : id "" 
	 res = conn . execute ( sql , { "" id "" : id } ) . fetchall ( )
	 conn . close ( )
	 return res","Generate syntax code: Execute the SQL ( get all the columns in the test_frame3_legacy where id is $id$ ) with $conn$, get all the data, then close the $conn$ connection, and return the query results.","<mod> <fun> def test_sql_open_close <par> ( conn , id ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Create a database engine and establish a connection via $db_name$. Execute SQL: Query the user information in the db_name table based on $password$, get the first piece of information, and return the obtained information.","from sqlalchemy import create_engine
def getitems ( db_name , password ) :
	 engine = create_engine ( db_name )
	 connection = engine . connect ( )
	 items = connection . execute ( "" select user from db_name where password = : password "" , { "" password "" : password } ) . fetchone ( )
	 return items","Generate syntax code: Create a database engine and establish a connection via $db_name$. Execute SQL: Query the user information in the db_name table based on $password$, get the first piece of information, and return the obtained information.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def getitems <par> ( db_name , password ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( db_name ) </arg> </cal> </ass> </exp> <exp> <ass> connection = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> items = <cal> <att> <cal> <att> connection . execute </att> <arg> ( STR , <dic> { <pai> STR : password </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return items </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL statement ( query all columns in the favorites table based on $name$ and $city$ ) through $conn$, get all the data and convert each item into dict and store it as list and return it. If there is an exception, then print ""Error"".","def query_favorites ( conn , name , city ) :
	 try :
	 	 query = conn . execute ( "" select * from favorites where name = : name and city = : city "" , { "" name "" : name , "" city "" : city } ) . fetchall ( )
	 	 return [ dict ( row ) for row in query ]
	 except :
	 	 print ( "" Error "" )","Generate syntax code: Execute the SQL statement ( query all columns in the favorites table based on $name$ and $city$ ) through $conn$, get all the data and convert each item into dict and store it as list and return it. If there is an exception, then print ""Error"".","<mod> <fun> def query_favorites <par> ( conn , name , city ) </par> : <blo> <try> try : <blo> <exp> <ass> query = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> , <pai> STR : city </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in query </for> ] </lis> </ret> </blo> <exc> except : <blo> <exp> <cal> print <arg> ( STR ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Connect to the database through $engine$. Execute SQL: Query the maximum 'price' in the crypto table and get the first piece of data. Convert each item of the query result to dict, store as list and return.","def stations ( engine ) :
	 conn = engine . connect ( )
	 results = conn . execute ( "" select max(price) from crypto "" ) . fetchone ( )
	 items = [ dict ( r ) for r in results ]
	 return items","Generate syntax code: Connect to the database through $engine$. Execute SQL: Query the maximum 'price' in the crypto table and get the first piece of data. Convert each item of the query result to dict, store as list and return.",<mod> <fun> def stations <par> ( engine ) </par> : <blo> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> items = <lis> [ <cal> dict <arg> ( r ) </arg> </cal> <for> for r in results </for> ] </lis> </ass> </exp> <ret> return items </ret> </blo> </fun> </mod>
"Generate origin code: Set SQL based on the python expression ( query all columns in the $Line$ table based on $line_cd$ ) . Execute SQL through $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","from sqlalchemy . sql import select
def join_data ( conn , Line , line_cd ) :
	 s = select ( Line ) . where ( Line . c . line_cd == line_cd )
	 moe = conn . execute ( s ) . fetchall ( )
	 known_line_cd = [ ]
	 for i in moe :
	 	 known_line_cd . append ( i )
	 return known_line_cd","Generate syntax code: Set SQL based on the python expression ( query all columns in the $Line$ table based on $line_cd$ ) . Execute SQL through $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def join_data <par> ( conn , Line , line_cd ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( Line ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> Line . c </att> . line_cd </att> == line_cd </com> ) </arg> </cal> </ass> </exp> <exp> <ass> moe = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> known_line_cd = <lis> [ ] </lis> </ass> </exp> <for> for i in moe : <blo> <exp> <cal> <att> known_line_cd . append </att> <arg> ( i ) </arg> </cal> </exp> </blo> </for> <ret> return known_line_cd </ret> </blo> </fun> </mod>"
"Generate origin code: Set up SQL ( get all columns in 'drinkers' based on $rawdata$ ) , try to execute with $conn$ and get all the data. Return the query result, and if an exception occurs during execution, return False.","def write_local_db ( conn , rawdata ) :
	 query = "" select * from drinkers where rawdata = : rawdata "" 
	 try :
	 	 rs = conn . execute ( query , { "" rawdata "" : rawdata } ) . fetchall ( )
	 	 return rs
	 except Exception as e :
	 	 return False","Generate syntax code: Set up SQL ( get all columns in 'drinkers' based on $rawdata$ ) , try to execute with $conn$ and get all the data. Return the query result, and if an exception occurs during execution, return False.","<mod> <fun> def write_local_db <par> ( conn , rawdata ) </par> : <blo> <exp> <ass> query = STR </ass> </exp> <try> try : <blo> <exp> <ass> rs = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : rawdata </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return rs </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <ret> return false </ret> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Step 1: Use $db$ to execute SQL ( query all columns in userss based on $id$ ) and get the first piece of data. Setp 2: Use $db$ to execute SQL ( query all columns in userss ) and get all the data. Pass the query result of step 1 to the user parameter, and the query result of step 2 to the users parameter, return and render the ""profile.html"" page.","from flask import render_template
def profile ( db , id ) :
	 user = db . execute ( "" select * from userss where id = : id "" , { "" id "" : id } ) . fetchone ( )
	 users = db . execute ( "" select * from userss; "" ) . fetchall ( )
	 return render_template ( "" profile.html "" , user = user , users = users )","Generate syntax code: Step 1: Use $db$ to execute SQL ( query all columns in userss based on $id$ ) and get the first piece of data. Setp 2: Use $db$ to execute SQL ( query all columns in userss ) and get all the data. Pass the query result of step 1 to the user parameter, and the query result of step 2 to the users parameter, return and render the ""profile.html"" page.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def profile <par> ( db , id ) </par> : <blo> <exp> <ass> user = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> users = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> user = user </key> , <key> users = users </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Get the database engine by $DB_DOMAIN$ with 'echo' parameter as False and establish a connection. Set SQL statement ( query all columns in test0 table based on $value$ ) , execute sql, get all the data, and return the query result.","import sqlalchemy
def test0_db ( DB_DOMAIN , value ) :
	 create_db_engine = sqlalchemy . create_engine ( DB_DOMAIN , echo = False )
	 conn = create_db_engine . connect ( )
	 sql = "" select * from test0 where value = : value "" 
	 results = conn . execute ( sql , { "" value "" : value } ) . fetchall ( )
	 return results","Generate syntax code: Get the database engine by $DB_DOMAIN$ with 'echo' parameter as False and establish a connection. Set SQL statement ( query all columns in test0 table based on $value$ ) , execute sql, get all the data, and return the query result.","<mod> <imp> import <dot> sqlalchemy </dot> </imp> <fun> def test0_db <par> ( DB_DOMAIN , value ) </par> : <blo> <exp> <ass> create_db_engine = <cal> <att> sqlalchemy . create_engine </att> <arg> ( DB_DOMAIN , <key> echo = false </key> ) </arg> </cal> </ass> </exp> <exp> <ass> conn = <cal> <att> create_db_engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : value </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return results </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get the type column in the table where engine is $engine$ ) using $db$, get all the data, and return the query results.","def test_to_sql ( db , engine ) :
	 rows = db . execute ( "" select type from table where engine = : engine "" , { "" engine "" : engine } ) . fetchall ( )
	 return rows","Generate syntax code: Execute the SQL ( get the type column in the table where engine is $engine$ ) using $db$, get all the data, and return the query results.","<mod> <fun> def test_to_sql <par> ( db , engine ) </par> : <blo> <exp> <ass> rows = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : engine </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return rows </ret> </blo> </fun> </mod>"
"Generate origin code: Set up SQL ( query all the information in the flights table based on $id$ ) , use $conn$ to execute SQL and get the first piece of data. If the query result is empty, return the rendered ""error.html"" page with 'message' as ""No such flight."" Otherwise, return the rendered ""flight.html"", and the flight parameter is the query result.","from flask import render_template
def flight ( conn , id ) :
	 flight_sql = "" select * from flights where id = : id "" 
	 flight = conn . execute ( flight_sql , { "" id "" : id } ) . fetchone ( )
	 if flight is None :
	 	 return render_template ( "" error.html "" , message = "" No such flight. "" )
	 else :
	 	 return render_template ( "" flight.html "" , flight = flight )","Generate syntax code: Set up SQL ( query all the information in the flights table based on $id$ ) , use $conn$ to execute SQL and get the first piece of data. If the query result is empty, return the rendered ""error.html"" page with 'message' as ""No such flight."" Otherwise, return the rendered ""flight.html"", and the flight parameter is the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def flight <par> ( conn , id ) </par> : <blo> <exp> <ass> flight_sql = STR </ass> </exp> <exp> <ass> flight = <cal> <att> <cal> <att> conn . execute </att> <arg> ( flight_sql , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <if_> if <com> flight is none </com> : <blo> <ret> return <cal> render_template <arg> ( STR , <key> message = STR </key> ) </arg> </cal> </ret> </blo> <els> else : <blo> <ret> return <cal> render_template <arg> ( STR , <key> flight = flight </key> ) </arg> </cal> </ret> </blo> </els> </if_> </blo> </fun> </mod>"
Generate origin code: Use the with statement to connect to the database according to $engine$. Execute the SQL statement ( query all customer_name and customer_des information in the customer table ) and return the query result.,"def query_caching ( engine ) :
	 with engine . begin ( ) as conn :
	 	 res = conn . execute ( "" select customer_name, customer_des from customer "" ) . fetchall ( )
	 	 return res",Generate syntax code: Use the with statement to connect to the database according to $engine$. Execute the SQL statement ( query all customer_name and customer_des information in the customer table ) and return the query result.,<mod> <fun> def query_caching <par> ( engine ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . begin </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> </wit> </blo> </fun> </mod>
"Generate origin code: Try to use $conn$ to execute SQL ( get the ID and DNI columns in the users where id is $dni$ ) and get the first data, then return the query results and finally make sure the $conn$ connection is closed.","def users ( conn , dni ) :
	 try :
	 	 cur = conn . execute ( "" select id, dni from users where id = : dni "" , { "" dni "" : dni } ) . fetchone ( )
	 	 return cur
	 finally :
	 	 conn . close ( )","Generate syntax code: Try to use $conn$ to execute SQL ( get the ID and DNI columns in the users where id is $dni$ ) and get the first data, then return the query results and finally make sure the $conn$ connection is closed.","<mod> <fun> def users <par> ( conn , dni ) </par> : <blo> <try> try : <blo> <exp> <ass> cur = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : dni </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return cur </ret> </blo> <fin> finally : <blo> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL with $conn$ ( get the id column in the name where staff_position.id is $id$ and name.id is $id $ ) and get the first data, then return the query results.","def where_clause_fn ( conn , id ) :
	 stmt = "" select id from name where staff_position.id = : id, name.id = : id)) "" 
	 res = conn . execute ( stmt , { "" id "" : id } ) . fetchone ( )
	 return res","Generate syntax code: Execute the SQL with $conn$ ( get the id column in the name where staff_position.id is $id$ and name.id is $id $ ) and get the first data, then return the query results.","<mod> <fun> def where_clause_fn <par> ( conn , id ) </par> : <blo> <exp> <ass> stmt = STR </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( stmt , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Try to use the Python expression to execute the SQL statement through the $conn$ connection: Query all the contents of the $ServiceV4$ table where id is $pk_id$ and return the query results. If there is an Exception, use 'raise' to throw an exception based on the error message.","def update_service_rows_by_ids ( conn , ServiceV4 , pk_id ) :
	 try :
	 	 model_obj = conn . query ( ServiceV4 ) . filter ( ServiceV4 . id == pk_id ) . fetchall ( )
	 	 return model_obj
	 except Exception as e :
	 	 raise e","Generate syntax code: Try to use the Python expression to execute the SQL statement through the $conn$ connection: Query all the contents of the $ServiceV4$ table where id is $pk_id$ and return the query results. If there is an Exception, use 'raise' to throw an exception based on the error message.","<mod> <fun> def update_service_rows_by_ids <par> ( conn , ServiceV4 , pk_id ) </par> : <blo> <try> try : <blo> <exp> <ass> model_obj = <cal> <att> <cal> <att> <cal> <att> conn . query </att> <arg> ( ServiceV4 ) </arg> </cal> . filter </att> <arg> ( <com> <att> ServiceV4 . id </att> == pk_id </com> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return model_obj </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <rai> raise e </rai> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Use 'with' statement to connect to the database based on $engine$. Set up SQL ( query all columns in the MasterSells table based on Price $max_price$ ) , execute SQL and get all the query results. Use for loop to convert each query result to dict, and store in list. Use for loop to convert the 'Price' field in the query result to float format. Finally, return the list.","def filter_beers ( engine , max_price ) :
	 with engine . connect ( ) as con :
	 	 query = "" select * from MasterSells where Price = : max_price "" 
	 	 rs = con . execute ( query , { "" max_price "" : max_price } ) . fetchall ( )
	 	 results = [ dict ( row ) for row in rs ]
	 	 for r in results :
	 	 	 r [ "" Price "" ] = float ( r [ "" Price "" ] )
	 	 return results","Generate syntax code: Use 'with' statement to connect to the database based on $engine$. Set up SQL ( query all columns in the MasterSells table based on Price $max_price$ ) , execute SQL and get all the query results. Use for loop to convert each query result to dict, and store in list. Use for loop to convert the 'Price' field in the query result to float format. Finally, return the list.","<mod> <fun> def filter_beers <par> ( engine , max_price ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> query = STR </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> con . execute </att> <arg> ( query , <dic> { <pai> STR : max_price </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> results = <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ass> </exp> <for> for r in results : <blo> <exp> <ass> <sub> r [ STR ] </sub> = <cal> float <arg> ( <sub> r [ STR ] </sub> ) </arg> </cal> </ass> </exp> </blo> </for> <ret> return results </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( get the 'the_class' column in the context table according to $id$ ) and get the first piece of data. If the query result is true, return the query result; otherwise, return None.","def get_class ( conn , id ) :
	 row = conn . execute ( "" select the_class from context where id = : id "" , { "" id "" : id } ) . fetchone ( )
	 return row if row else None","Generate syntax code: Use $conn$ to execute SQL ( get the 'the_class' column in the context table according to $id$ ) and get the first piece of data. If the query result is true, return the query result; otherwise, return None.","<mod> <fun> def get_class <par> ( conn , id ) </par> : <blo> <exp> <ass> row = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <con> row if row else none </con> </ret> </blo> </fun> </mod>"
"Generate origin code: If the request module sends request as post, use $conn$ to create cursor object, execute SQL statement by cursor: Query the first piece of owner data in the houses table based on $id$. Close the cursor, render and return ""house.html"", where the owner parameter is the query result; otherwise use redirect to return the 'homepage' spliced by url_for.","from flask import render_template , request , redirect , url_for
def house ( conn , id ) :
	 if request . method == "" POST "" :
	 	 cursor = conn . cursor ( )
	 	 rs = cursor . execute ( "" select owner from houses where id = : id "" , { "" id "" : id } ) . fetchone ( )
	 	 cursor . close ( )
	 	 return render_template ( "" house.html "" , owner = rs )
	 else :
	 	 return redirect ( url_for ( "" homepage "" ) )","Generate syntax code: If the request module sends request as post, use $conn$ to create cursor object, execute SQL statement by cursor: Query the first piece of owner data in the houses table based on $id$. Close the cursor, render and return ""house.html"", where the owner parameter is the query result; otherwise use redirect to return the 'homepage' spliced by url_for.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> , <dot> request </dot> , <dot> redirect </dot> , <dot> url_for </dot> </imp> <fun> def house <par> ( conn , id ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <exp> <ass> cursor = <cal> <att> conn . cursor </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> cursor . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> cursor . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return <cal> render_template <arg> ( STR , <key> owner = rs </key> ) </arg> </cal> </ret> </blo> <els> else : <blo> <ret> return <cal> redirect <arg> ( <cal> url_for <arg> ( STR ) </arg> </cal> ) </arg> </cal> </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute the SQL statement ( query all the columns in the flights table based on $id$ ) , get all the data, render and return ""index.html"", where the flights parameter is the query result.","from flask import render_template
def index ( conn , id ) :
	 info = conn . execute ( "" select * from flights where id = : id "" , { "" id "" : id } ) . fetchall ( )
	 return render_template ( "" index.html "" , flights = info )","Generate syntax code: Use $conn$ to execute the SQL statement ( query all the columns in the flights table based on $id$ ) , get all the data, render and return ""index.html"", where the flights parameter is the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def index <par> ( conn , id ) </par> : <blo> <exp> <ass> info = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> flights = info </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
Generate origin code: Establish database engine based on $db_address$ and set echo parameter to False. Get a connection based on engine. Execute SQL ( query all columns in winlotto table based on $win_id$ ) and get query results. Close the link and return the query results.,"from sqlalchemy import create_engine
def winlotto_sel ( db_address , win_id ) :
	 engine = create_engine ( db_address , echo = False )
	 connector = engine . connect ( )
	 winlotto = connector . execute ( "" select * from winlotto where win_id = : win_id "" , { "" win_id "" : win_id } ) . fetchall ( )
	 connector . close ( )
	 return winlotto",Generate syntax code: Establish database engine based on $db_address$ and set echo parameter to False. Get a connection based on engine. Execute SQL ( query all columns in winlotto table based on $win_id$ ) and get query results. Close the link and return the query results.,"<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def winlotto_sel <par> ( db_address , win_id ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( db_address , <key> echo = false </key> ) </arg> </cal> </ass> </exp> <exp> <ass> connector = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> winlotto = <cal> <att> <cal> <att> connector . execute </att> <arg> ( STR , <dic> { <pai> STR : win_id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> connector . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return winlotto </ret> </blo> </fun> </mod>"
Generate origin code: Connect to the database with $db$. Execute the SQL statement ( query the inf in the users where based on $id_tu$ ) and return all query results.,"def test_flush ( db , id_tu ) :
	 c = db . connect ( )
	 flush = c . execute ( "" select inf from users where id_tu = : id_tu "" , { "" id_tu "" : id_tu } ) . fetchall ( )
	 return flush",Generate syntax code: Connect to the database with $db$. Execute the SQL statement ( query the inf in the users where based on $id_tu$ ) and return all query results.,"<mod> <fun> def test_flush <par> ( db , id_tu ) </par> : <blo> <exp> <ass> c = <cal> <att> db . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> flush = <cal> <att> <cal> <att> c . execute </att> <arg> ( STR , <dic> { <pai> STR : id_tu </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return flush </ret> </blo> </fun> </mod>"
"Generate origin code: Use $testing$ to establish a connection, execute SQL ( query all columns in the deadlock_users table based on $user_id$ ) , get all the query results, close the connection, and return the query results.","def test_rollback_deadlock ( testing , user_id ) :
	 conn1 = testing . connect ( )
	 res = conn1 . execute ( "" select * from deadlock_users where user_id = : user_id "" , { "" user_id "" : user_id } ) . fetchall ( )
	 conn1 . close ( )
	 return res","Generate syntax code: Use $testing$ to establish a connection, execute SQL ( query all columns in the deadlock_users table based on $user_id$ ) , get all the query results, close the connection, and return the query results.","<mod> <fun> def test_rollback_deadlock <par> ( testing , user_id ) </par> : <blo> <exp> <ass> conn1 = <cal> <att> testing . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn1 . execute </att> <arg> ( STR , <dic> { <pai> STR : user_id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn1 . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to query all the columns in the flights table, get all the data, render and return ""index.html"", where the flight parameter is the query result.","from flask import render_template
def index ( conn ) :
	 flights = conn . execute ( "" select * from flights "" ) . fetchall ( )
	 return render_template ( "" index.html "" , flights = flights )","Generate syntax code: Use $conn$ to query all the columns in the flights table, get all the data, render and return ""index.html"", where the flight parameter is the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def index <par> ( conn ) </par> : <blo> <exp> <ass> flights = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> flights = flights </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
Generate origin code: Execute the SQL statement ( get all the data in $Contact$ where id is $id$ ) using ORM over the $conn$ connection to print all the query results.,"def get_contacty_by_id ( conn , Contact , id ) :
	 values = conn . query ( Contact ) . filter ( Contact . id == id ) . all ( )
	 print ( values )",Generate syntax code: Execute the SQL statement ( get all the data in $Contact$ where id is $id$ ) using ORM over the $conn$ connection to print all the query results.,"<mod> <fun> def get_contacty_by_id <par> ( conn , Contact , id ) </par> : <blo> <exp> <ass> values = <cal> <att> <cal> <att> <cal> <att> conn . query </att> <arg> ( Contact ) </arg> </cal> . filter </att> <arg> ( <com> <att> Contact . id </att> == id </com> ) </arg> </cal> . all </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( values ) </arg> </cal> </exp> </blo> </fun> </mod>"
"Generate origin code: Use Python expression to set up SQL statement ( get p in $table$ table based on $q$ ) , execute SQL by $conn$ to get all the data and return.","from sqlalchemy . sql import select
def test_append_correlation ( conn , table , q ) :
	 inner = select ( [ table . c . p ] ) . where ( table . c . q == q )
	 res = conn . execute ( inner ) . fetchall ( )
	 return res","Generate syntax code: Use Python expression to set up SQL statement ( get p in $table$ table based on $q$ ) , execute SQL by $conn$ to get all the data and return.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def test_append_correlation <par> ( conn , table , q ) </par> : <blo> <exp> <ass> inner = <cal> <att> <cal> select <arg> ( <lis> [ <att> <att> table . c </att> . p </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> table . c </att> . q </att> == q </com> ) </arg> </cal> </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( inner ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Use the with statement to connect the database according to $engine$. Execute the SQL statement ( get the statistics of all the columns in the Bills table based on $type$ ) , get all the data, convert each item of the query result to dict, store it as list and return.","def get_data ( engine , type ) :
	 with engine . connect ( ) as con :
	 	 rs = con . execute ( "" select COUNT(*) from Bills where type = : type "" , { "" type "" : type } ) . fetchall ( )
	 	 results = [ dict ( row ) for row in rs ]
	 	 return results","Generate syntax code: Use the with statement to connect the database according to $engine$. Execute the SQL statement ( get the statistics of all the columns in the Bills table based on $type$ ) , get all the data, convert each item of the query result to dict, store it as list and return.","<mod> <fun> def get_data <par> ( engine , type ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> rs = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR , <dic> { <pai> STR : type </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> results = <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ass> </exp> <ret> return results </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Try to set the SQL statement with the Python expression ( query the cookie_id in the $cookies$ table through $quantity$ ) , use the $conn$ connection to execute SQL, get all the data, and return the obtained data. If there is an Exception, print exception message.","from sqlalchemy . sql import select
def ship_it ( conn , cookies , quantity ) :
	 try :
	 	 sql = select ( [ cookies . c . cookie_id ] ) . where ( cookies . c . quantity == quantity )
	 	 cookies_to_ship = conn . execute ( sql ) . fetchall ( )
	 	 return cookies_to_ship
	 except Exception as e :
	 	 print ( e )","Generate syntax code: Try to set the SQL statement with the Python expression ( query the cookie_id in the $cookies$ table through $quantity$ ) , use the $conn$ connection to execute SQL, get all the data, and return the obtained data. If there is an Exception, print exception message.","<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def ship_it <par> ( conn , cookies , quantity ) </par> : <blo> <try> try : <blo> <exp> <ass> sql = <cal> <att> <cal> select <arg> ( <lis> [ <att> <att> cookies . c </att> . cookie_id </att> ] </lis> ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> cookies . c </att> . quantity </att> == quantity </com> ) </arg> </cal> </ass> </exp> <exp> <ass> cookies_to_ship = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return cookies_to_ship </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( e ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( get the name column in the Campground ) to get all the data and print each item in the query result using the for loop.,"def search_name ( conn ) :
	 cities = conn . execute ( "" select name from Campground "" ) . fetchall ( )
	 for c in cities :
	 	 print ( c )",Generate syntax code: Use $conn$ to execute SQL ( get the name column in the Campground ) to get all the data and print each item in the query result using the for loop.,<mod> <fun> def search_name <par> ( conn ) </par> : <blo> <exp> <ass> cities = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for c in cities : <blo> <exp> <cal> print <arg> ( c ) </arg> </cal> </exp> </blo> </for> </blo> </fun> </mod>
"Generate origin code: Open the $input_file$ file with the with statement, read the file, execute the 'next' command, traverse the title in the file and connect the database according to $db$. Execute SQL ( query all columns in the books table according to title ) , get all the query results and print them.","import csv
def read_csv ( db , input_file ) :
	 with open ( input_file ) as file :
	 	 reader = csv . reader ( file )
	 	 next ( reader )
	 	 for title in reader :
	 	 	 res = db . execute ( "" select * from books where title = : title "" , { "" title "" : title } ) . fetchall ( )
	 	 	 print ( res )","Generate syntax code: Open the $input_file$ file with the with statement, read the file, execute the 'next' command, traverse the title in the file and connect the database according to $db$. Execute SQL ( query all columns in the books table according to title ) , get all the query results and print them.","<mod> <imp> import <dot> csv </dot> </imp> <fun> def read_csv <par> ( db , input_file ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> open <arg> ( input_file ) </arg> </cal> as <as_> file </as_> </as_> </wit> </wit> : <blo> <exp> <ass> reader = <cal> <att> csv . reader </att> <arg> ( file ) </arg> </cal> </ass> </exp> <exp> <cal> next <arg> ( reader ) </arg> </cal> </exp> <for> for title in reader : <blo> <exp> <ass> res = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : title </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( res ) </arg> </cal> </exp> </blo> </for> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute the SQL statement ( query all id data in the flights table ) , use for loop traversal to query the results and print, set assertions to determine that the length of the returned result is greater than 0.","def main ( conn ) :
	 flights = conn . execute ( "" select id from flights "" ) . fetchall ( )
	 for flight in flights :
	 	 print ( flight )
	 assert len ( flights ) > 0","Generate syntax code: Use $conn$ to execute the SQL statement ( query all id data in the flights table ) , use for loop traversal to query the results and print, set assertions to determine that the length of the returned result is greater than 0.",<mod> <fun> def main <par> ( conn ) </par> : <blo> <exp> <ass> flights = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for flight in flights : <blo> <exp> <cal> print <arg> ( flight ) </arg> </cal> </exp> </blo> </for> <ass> assert <com> <cal> len <arg> ( flights ) </arg> </cal> > integer </com> </ass> </blo> </fun> </mod>
Generate origin code: Try to use $conn$ to execute SQL ( query all ids in the localtable where the id of parent is $parent_id$ ) and return all results. Finally make sure $conn$ is off.,"def test_reflect_alt_owner_synonyms ( conn , parent_id ) :
	 try :
	 	 texts = conn . execute ( "" select id from localtable where parent_id = : parent_id "" , { "" parent_id "" : parent_id } ) . fetchall ( )
	 	 return texts
	 finally :
	 	 conn . close ( )",Generate syntax code: Try to use $conn$ to execute SQL ( query all ids in the localtable where the id of parent is $parent_id$ ) and return all results. Finally make sure $conn$ is off.,"<mod> <fun> def test_reflect_alt_owner_synonyms <par> ( conn , parent_id ) </par> : <blo> <try> try : <blo> <exp> <ass> texts = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : parent_id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return texts </ret> </blo> <fin> finally : <blo> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
"Generate origin code: Print $intcol$, execute SQL with $conn$ ( get the numericcol column in t1 where intcol is $intcol$ ) , get all the data and return.","def test_numerics ( conn , intcol ) :
	 print ( intcol )
	 sql = "" select numericcol from t1 where intcol = : intcol "" 
	 results = conn . execute ( sql , { "" intcol "" : intcol } ) . fetchall ( )
	 return results","Generate syntax code: Print $intcol$, execute SQL with $conn$ ( get the numericcol column in t1 where intcol is $intcol$ ) , get all the data and return.","<mod> <fun> def test_numerics <par> ( conn , intcol ) </par> : <blo> <exp> <cal> print <arg> ( intcol ) </arg> </cal> </exp> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : intcol </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return results </ret> </blo> </fun> </mod>"
Generate origin code: Set SQL: query the id information in the item_info table where name is $keywords$. Execute the SQL using $session$ and get all the data. Close $session$ and return each item in the query result as dict.,"def get_keywords ( session , keywords ) :
	 sql = "" select id from item_info where name = : keywords "" 
	 ret = session . execute ( sql , { "" keywords "" : keywords } ) . fetchall ( )
	 session . close ( )
	 return [ dict ( i ) for i in ret ]",Generate syntax code: Set SQL: query the id information in the item_info table where name is $keywords$. Execute the SQL using $session$ and get all the data. Close $session$ and return each item in the query result as dict.,"<mod> <fun> def get_keywords <par> ( session , keywords ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> ret = <cal> <att> <cal> <att> session . execute </att> <arg> ( sql , <dic> { <pai> STR : keywords </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> session . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return <lis> [ <cal> dict <arg> ( i ) </arg> </cal> <for> for i in ret </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Use $connect_str$ to get the database engine, where the echo parameter is False. Use sessionmaker ( ) to create a configured Session class and bind the database engine. Instantiate Session, then set SQL statement: Query names data in tables through $schema$, execute SQL to get all the data. Convert each item of the query results into dict and store it as list and return it.","from sqlalchemy import create_engine
from sqlalchemy . orm . session import sessionmaker
def get_all_table_names ( connect_str , schema ) :
	 engine = create_engine ( connect_str , echo = False )
	 session = sessionmaker ( bind = engine )
	 ss = session ( )
	 query = "" select names from tables where schema = : schema "" 
	 rs = ss . execute ( query , { "" schema "" : schema } ) . fetchall ( )
	 return [ dict ( row ) for row in rs ]","Generate syntax code: Use $connect_str$ to get the database engine, where the echo parameter is False. Use sessionmaker ( ) to create a configured Session class and bind the database engine. Instantiate Session, then set SQL statement: Query names data in tables through $schema$, execute SQL to get all the data. Convert each item of the query results into dict and store it as list and return it.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <imp> from <dot> sqlalchemy . orm . session </dot> import <dot> sessionmaker </dot> </imp> <fun> def get_all_table_names <par> ( connect_str , schema ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( connect_str , <key> echo = false </key> ) </arg> </cal> </ass> </exp> <exp> <ass> session = <cal> sessionmaker <arg> ( <key> bind = engine </key> ) </arg> </cal> </ass> </exp> <exp> <ass> ss = <cal> session <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> query = STR </ass> </exp> <exp> <ass> rs = <cal> <att> <cal> <att> ss . execute </att> <arg> ( query , <dic> { <pai> STR : schema </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ret> </blo> </fun> </mod>"
"Generate origin code: Create the database engine from $proxy$ and set the echo parameter to False. Create a connection using the engine. Set the SQL ( queries for the hostname in the Table where IP is $ip$, id is $id$, and location is $location$ ) . Try Out SQL with $conn$ and get the first data and return the query results. If an exception occurs, the information for the specific exception is printed.","from sqlalchemy import create_engine
def main ( proxy , ip , id , location ) :
	 engine = create_engine ( proxy , echo = False )
	 conn = engine . connect ( )
	 sql = "" select hostname from Table where ip = : ip and id = : id and location = : location "" 
	 try :
	 	 result = conn . execute ( sql , { "" ip "" : ip , "" id "" : id , "" location "" : location } ) . fetchone ( )
	 	 return result
	 except Exception as e :
	 	 print ( e )","Generate syntax code: Create the database engine from $proxy$ and set the echo parameter to False. Create a connection using the engine. Set the SQL ( queries for the hostname in the Table where IP is $ip$, id is $id$, and location is $location$ ) . Try Out SQL with $conn$ and get the first data and return the query results. If an exception occurs, the information for the specific exception is printed.","<mod> <imp> from <dot> sqlalchemy </dot> import <dot> create_engine </dot> </imp> <fun> def main <par> ( proxy , ip , id , location ) </par> : <blo> <exp> <ass> engine = <cal> create_engine <arg> ( proxy , <key> echo = false </key> ) </arg> </cal> </ass> </exp> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = STR </ass> </exp> <try> try : <blo> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : ip </pai> , <pai> STR : id </pai> , <pai> STR : location </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return result </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( e ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
"Generate origin code: Open the""books.csv"" and use reader to process the file. For each item of data in the file, execute the SQL using $db$ ( query the year in the books table where isbn is the data in the file ) and store the first query result in the list. Finally, return the whole list.","import csv
def get_year ( db ) :
	 f = open ( "" books.csv "" )
	 reader = csv . reader ( f )
	 res_list = [ ]
	 for isbn in reader :
	 	 res = db . execute ( "" select year from books where isbn = : isbn "" , { "" isbn "" : isbn } ) . fetchone ( )
	 	 res_list . append ( res )
	 return res_list","Generate syntax code: Open the""books.csv"" and use reader to process the file. For each item of data in the file, execute the SQL using $db$ ( query the year in the books table where isbn is the data in the file ) and store the first query result in the list. Finally, return the whole list.","<mod> <imp> import <dot> csv </dot> </imp> <fun> def get_year <par> ( db ) </par> : <blo> <exp> <ass> f = <cal> open <arg> ( STR ) </arg> </cal> </ass> </exp> <exp> <ass> reader = <cal> <att> csv . reader </att> <arg> ( f ) </arg> </cal> </ass> </exp> <exp> <ass> res_list = <lis> [ ] </lis> </ass> </exp> <for> for isbn in reader : <blo> <exp> <ass> res = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> res_list . append </att> <arg> ( res ) </arg> </cal> </exp> </blo> </for> <ret> return res_list </ret> </blo> </fun> </mod>"
"Generate origin code: Connect to the database via $engine$, try to execute the SQL ( get all the columns in the database based on $name$ ) , get all the data and then return the query result.If an exception occurs during the execution, print the exception print and finally make sure the connection is closed.","def initialize ( engine , name ) :
	 conn = engine . connect ( )
	 try :
	 	 res = conn . execute ( "" select * from database where name = : name "" , { "" name "" : name } ) . fetchall ( )
	 	 return res
	 except Exception as ex :
	 	 print ( ex )
	 finally :
	 	 conn . close ( )","Generate syntax code: Connect to the database via $engine$, try to execute the SQL ( get all the columns in the database based on $name$ ) , get all the data and then return the query result.If an exception occurs during the execution, print the exception print and finally make sure the connection is closed.","<mod> <fun> def initialize <par> ( engine , name ) </par> : <blo> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <try> try : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> <exc> except <as_> Exception as <as_> ex </as_> </as_> : <blo> <exp> <cal> print <arg> ( ex ) </arg> </cal> </exp> </blo> </exc> <fin> finally : <blo> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to query all the fname in the tuser table whose pwd is $pwd$, print the query result, and return the query result if the length of the query result is greater than 0.","def query ( conn , pwd ) :
	 res = conn . execute ( "" select fname from tuser where pwd:pwd "" , { "" pwd "" : pwd } ) . fetchall ( )
	 print ( res )
	 if len ( res ) > 0 :
	 	 return res","Generate syntax code: Use $conn$ to query all the fname in the tuser table whose pwd is $pwd$, print the query result, and return the query result if the length of the query result is greater than 0.","<mod> <fun> def query <par> ( conn , pwd ) </par> : <blo> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : pwd </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( res ) </arg> </cal> </exp> <if_> if <com> <cal> len <arg> ( res ) </arg> </cal> > integer </com> : <blo> <ret> return res </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: If the request module sends the request in a POST method, try to use the $conn$ connection to execute the SQL statement ( get the first user_name in the Reviews table based on $user$ and $isbn$ ) , render and return ""bookinfo.html"", where the review parameter is the obtained data. If an exception occurs, return False.","from flask import render_template , request
def book_info ( conn , user , isbn ) :
	 if request . method == "" POST "" :
	 	 try :
	 	 	 review = conn . execute ( "" select user_name from Reviews where user_name = : user and isbn = : isbn "" , { "" user "" : user , "" isbn "" : isbn } ) . fetchone ( )
	 	 	 return render_template ( "" bookinfo.html "" , review = review )
	 	 except :
	 	 	 return False","Generate syntax code: If the request module sends the request in a POST method, try to use the $conn$ connection to execute the SQL statement ( get the first user_name in the Reviews table based on $user$ and $isbn$ ) , render and return ""bookinfo.html"", where the review parameter is the obtained data. If an exception occurs, return False.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> , <dot> request </dot> </imp> <fun> def book_info <par> ( conn , user , isbn ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <try> try : <blo> <exp> <ass> review = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : user </pai> , <pai> STR : isbn </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> review = review </key> ) </arg> </cal> </ret> </blo> <exc> except : <blo> <ret> return false </ret> </blo> </exc> </try> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Use $conn$ to execute SQL ( query the nlast column in the stock_fund_holdings table based on $code$ and $date$ ) , get all the data, and use $conn$ to submit it. And output the query results.","def fetch_fund_holdings ( conn , code , date ) :
	 cur = conn . execute ( "" select nlast from stock_fund_holdings where code = : code and date = : date "" , { "" code "" : code , "" date "" : date } ) . fetchall ( )
	 conn . commit ( )
	 print ( cur )","Generate syntax code: Use $conn$ to execute SQL ( query the nlast column in the stock_fund_holdings table based on $code$ and $date$ ) , get all the data, and use $conn$ to submit it. And output the query results.","<mod> <fun> def fetch_fund_holdings <par> ( conn , code , date ) </par> : <blo> <exp> <ass> cur = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : code </pai> , <pai> STR : date </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . commit </att> <arg> ( ) </arg> </cal> </exp> <exp> <cal> print <arg> ( cur ) </arg> </cal> </exp> </blo> </fun> </mod>"
"Generate origin code: According to the python expression, execute SQL with $conn$ ( Get the data for the count limit of $count$ in the $table$ ) and get all the data, then print the query results and return the query results.","def databaseOutput ( conn , table , count ) :
	 tableOutput = conn . execute ( table . select ( ) . limit ( count ) ) . fetchall ( )
	 print ( tableOutput )
	 return tableOutput","Generate syntax code: According to the python expression, execute SQL with $conn$ ( Get the data for the count limit of $count$ in the $table$ ) and get all the data, then print the query results and return the query results.","<mod> <fun> def databaseOutput <par> ( conn , table , count ) </par> : <blo> <exp> <ass> tableOutput = <cal> <att> <cal> <att> conn . execute </att> <arg> ( <cal> <att> <cal> <att> table . select </att> <arg> ( ) </arg> </cal> . limit </att> <arg> ( count ) </arg> </cal> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( tableOutput ) </arg> </cal> </exp> <ret> return tableOutput </ret> </blo> </fun> </mod>"
"Generate origin code: Set SQL ( query the status column in 'orders' table based on the $customerid$ which is converted to a string ) , use $conn$ to execute the SQL and get all the query results, and return the results of the execution statement.","def setOrderStatusPaid ( conn , customerid ) :
	 query = "" select status from orders where customerid = "" + str ( customerid )
	 status = conn . execute ( query , { "" customerid "" : customerid } ) . fetchall ( )
	 return status","Generate syntax code: Set SQL ( query the status column in 'orders' table based on the $customerid$ which is converted to a string ) , use $conn$ to execute the SQL and get all the query results, and return the results of the execution statement.","<mod> <fun> def setOrderStatusPaid <par> ( conn , customerid ) </par> : <blo> <exp> <ass> query = <bin> STR + <cal> str <arg> ( customerid ) </arg> </cal> </bin> </ass> </exp> <exp> <ass> status = <cal> <att> <cal> <att> conn . execute </att> <arg> ( query , <dic> { <pai> STR : customerid </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return status </ret> </blo> </fun> </mod>"
"Generate origin code: Execute the SQL ( get the customerid column in the customers table processed by the count method where the name of user is $username$ ) with $conn$, get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","def getNumberUsersWithUsername ( conn , username ) :
	 db_result = conn . execute ( "" select count(customerid) from customers where username = : username "" , { "" username "" : username } ) . fetchall ( )
	 res = [ item for item in db_result ]
	 return res","Generate syntax code: Execute the SQL ( get the customerid column in the customers table processed by the count method where the name of user is $username$ ) with $conn$, get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content.","<mod> <fun> def getNumberUsersWithUsername <par> ( conn , username ) </par> : <blo> <exp> <ass> db_result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : username </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> res = <lis> [ item <for> for item in db_result </for> ] </lis> </ass> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Use $engine$ to connect the database and execute SQL ( get the UID column in the USER_LIST table whose LID is $lid$ ) , get all the data, close the connection, and finally return the query result.","def get_userid ( engine , lid ) :
	 conn = engine . connect ( )
	 uids = conn . execute ( "" select UID from USER_LIST where LID=lid "" , { "" lid "" : lid } ) . fetchall ( )
	 conn . close ( )
	 return uids","Generate syntax code: Use $engine$ to connect the database and execute SQL ( get the UID column in the USER_LIST table whose LID is $lid$ ) , get all the data, close the connection, and finally return the query result.","<mod> <fun> def get_userid <par> ( engine , lid ) </par> : <blo> <exp> <ass> conn = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> uids = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : lid </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> conn . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return uids </ret> </blo> </fun> </mod>"
"Generate origin code: Set the SQL ( query all autoload in $devices$ where metadata is $metadata$ ) , execute the SQL using the $connection$ and fetch the data.","def openDB ( connection , metadata ) :
	 sql = "" select autoload from devices where metadata= "" + metadata
	 inforauto = connection . execute ( sql ) . fetchall ( )
	 return inforauto","Generate syntax code: Set the SQL ( query all autoload in $devices$ where metadata is $metadata$ ) , execute the SQL using the $connection$ and fetch the data.","<mod> <fun> def openDB <par> ( connection , metadata ) </par> : <blo> <exp> <ass> sql = <bin> STR + metadata </bin> </ass> </exp> <exp> <ass> inforauto = <cal> <att> <cal> <att> connection . execute </att> <arg> ( sql ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return inforauto </ret> </blo> </fun> </mod>"
"Generate origin code: If the request module sends the request as GET, render and return ""register.html"". Otherwise execute the SQL ( query all columns in users where the state of login is $login_state$ ) over the $conn$ connection and get the first data, return the obtained data.","from flask import render_template , request
def register ( conn , login_state ) :
	 if request . method == "" GET "" :
	 	 return render_template ( "" register.html "" )
	 else :
	 	 information = conn . execute ( "" select * from users where login_state = : login_state "" , { "" login_state "" : login_state } ) . fetchone ( )
	 	 return information","Generate syntax code: If the request module sends the request as GET, render and return ""register.html"". Otherwise execute the SQL ( query all columns in users where the state of login is $login_state$ ) over the $conn$ connection and get the first data, return the obtained data.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> , <dot> request </dot> </imp> <fun> def register <par> ( conn , login_state ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> <els> else : <blo> <exp> <ass> information = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : login_state </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return information </ret> </blo> </els> </if_> </blo> </fun> </mod>"
"Generate origin code: Execute SQL with $db$ ( query all columns in the usuarios table according to $id_user$ ) , get the first row of data, return the rendered ""main.html"", and set the parameter name to the 0th element of the query result.","from flask import render_template
def login ( db , id_user ) :
	 user = db . execute ( "" select * from usuarios where id_user = : id_user "" , { "" id_user "" : id_user } ) . fetchone ( )
	 user_name = user [ 0 ]
	 return render_template ( "" main.html "" , name = user_name )","Generate syntax code: Execute SQL with $db$ ( query all columns in the usuarios table according to $id_user$ ) , get the first row of data, return the rendered ""main.html"", and set the parameter name to the 0th element of the query result.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def login <par> ( db , id_user ) </par> : <blo> <exp> <ass> user = <cal> <att> <cal> <att> db . execute </att> <arg> ( STR , <dic> { <pai> STR : id_user </pai> } </dic> ) </arg> </cal> . fetchone </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> user_name = <sub> user [ integer ] </sub> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> name = user_name </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Try to execute the SQL statement using the $conn$ connection: query all the columns in the photos where time_oj is $time_oj$ and get all the data. Store the 0th element of each item of the query result as a list and return it. If an Exception occurs during execution, the Exception information is printed.","def empty_query ( conn , time_oj ) :
	 try :
	 	 infor = conn . execute ( "" select * from photos where time_oj = : time_oj "" , { "" time_oj "" : time_oj } ) . fetchall ( )
	 	 return [ item [ 0 ] for item in infor ]
	 except Exception as e :
	 	 print ( e )","Generate syntax code: Try to execute the SQL statement using the $conn$ connection: query all the columns in the photos where time_oj is $time_oj$ and get all the data. Store the 0th element of each item of the query result as a list and return it. If an Exception occurs during execution, the Exception information is printed.","<mod> <fun> def empty_query <par> ( conn , time_oj ) </par> : <blo> <try> try : <blo> <exp> <ass> infor = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : time_oj </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <sub> item [ integer ] </sub> <for> for item in infor </for> ] </lis> </ret> </blo> <exc> except <as_> Exception as <as_> e </as_> </as_> : <blo> <exp> <cal> print <arg> ( e ) </arg> </cal> </exp> </blo> </exc> </try> </blo> </fun> </mod>"
Generate origin code: Use $testing$ to get the database connection. Use the connection to execute SQL ( query all columns in the query_users table ) and get all the data. Close the connection and return the query results.,"def test_close2 ( testing ) :
	 connection = testing . connect ( )
	 users_value = connection . execute ( "" select * from query_users "" ) . fetchall ( )
	 connection . close ( )
	 return users_value",Generate syntax code: Use $testing$ to get the database connection. Use the connection to execute SQL ( query all columns in the query_users table ) and get all the data. Close the connection and return the query results.,<mod> <fun> def test_close2 <par> ( testing ) </par> : <blo> <exp> <ass> connection = <cal> <att> testing . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> users_value = <cal> <att> <cal> <att> connection . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> <att> connection . close </att> <arg> ( ) </arg> </cal> </exp> <ret> return users_value </ret> </blo> </fun> </mod>
Generate origin code: Use the python expression to set up SQL ( query all the information in the $queue_table$ table based on $insertion_time$ ) . Returns all the data of the query executed with $conn$.,"from sqlalchemy . sql import select
def get_from_insertion ( conn , queue_table , insertion_time ) :
	 s = select ( queue_table ) . where ( queue_table . c . insertion_time == insertion_time )
	 return conn . execute ( s ) . fetchall ( )",Generate syntax code: Use the python expression to set up SQL ( query all the information in the $queue_table$ table based on $insertion_time$ ) . Returns all the data of the query executed with $conn$.,"<mod> <imp> from <dot> sqlalchemy . sql </dot> import <dot> select </dot> </imp> <fun> def get_from_insertion <par> ( conn , queue_table , insertion_time ) </par> : <blo> <exp> <ass> s = <cal> <att> <cal> select <arg> ( queue_table ) </arg> </cal> . where </att> <arg> ( <com> <att> <att> queue_table . c </att> . insertion_time </att> == insertion_time </com> ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use the with statement to connect the database according to $engine$. Execute SQL ( query the drinker column in the Transactions table according to $transactionID$ ) , get all the query results, convert each item of the query result to dict, store it as list, and return.","def query_page ( engine , transactionID ) :
	 with engine . connect ( ) as con :
	 	 rs = con . execute ( "" select drinker from Transactions where transactionID = : transactionID "" , { "" transactionID "" : transactionID } ) . fetchall ( )
	 	 results = [ dict ( row ) for row in rs ]
	 	 return results","Generate syntax code: Use the with statement to connect the database according to $engine$. Execute SQL ( query the drinker column in the Transactions table according to $transactionID$ ) , get all the query results, convert each item of the query result to dict, store it as list, and return.","<mod> <fun> def query_page <par> ( engine , transactionID ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> con </as_> </as_> </wit> </wit> : <blo> <exp> <ass> rs = <cal> <att> <cal> <att> con . execute </att> <arg> ( STR , <dic> { <pai> STR : transactionID </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> results = <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in rs </for> ] </lis> </ass> </exp> <ret> return results </ret> </blo> </wit> </blo> </fun> </mod>"
"Generate origin code: Execute SQL through $conn$ ( query all columns in secrets table based on $id$ ) and get all data. Use for loop iterate the query results, convert the 0th element of each item in the query results to a string and store it in list. Return all the query results.","def test ( conn , id ) :
	 results = conn . execute ( "" select * from secrets where id = : id "" , { "" id "" : id } ) . fetchall ( )
	 secret_list = [ ]
	 for row in results :
	 	 secret_list . append ( str ( row [ 0 ] ) )
	 return results","Generate syntax code: Execute SQL through $conn$ ( query all columns in secrets table based on $id$ ) and get all data. Use for loop iterate the query results, convert the 0th element of each item in the query results to a string and store it in list. Return all the query results.","<mod> <fun> def test <par> ( conn , id ) </par> : <blo> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> secret_list = <lis> [ ] </lis> </ass> </exp> <for> for row in results : <blo> <exp> <cal> <att> secret_list . append </att> <arg> ( <cal> str <arg> ( <sub> row [ integer ] </sub> ) </arg> </cal> ) </arg> </cal> </exp> </blo> </for> <ret> return results </ret> </blo> </fun> </mod>"
"Generate origin code: Execute SQL with $conn$ ( query the isbn and author columns in the books table according to $title$ ) and return the rendered ""error.html"" page if the rowcount field of the execution result is 0. Get all the results of the execution statement and return the rendered ""results.html"" page, where the parameter books is the obtained data.","from flask import render_template
def search ( conn , title ) :
	 rows = conn . execute ( "" select isbn, author from books where title = : title "" , { "" title "" : title } )
	 if rows . rowcount == 0 :
	 	 return render_template ( "" error.html "" )
	 books = rows . fetchall ( )
	 return render_template ( "" results.html "" , books = books )","Generate syntax code: Execute SQL with $conn$ ( query the isbn and author columns in the books table according to $title$ ) and return the rendered ""error.html"" page if the rowcount field of the execution result is 0. Get all the results of the execution statement and return the rendered ""results.html"" page, where the parameter books is the obtained data.","<mod> <imp> from <dot> flask </dot> import <dot> render_template </dot> </imp> <fun> def search <par> ( conn , title ) </par> : <blo> <exp> <ass> rows = <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : title </pai> } </dic> ) </arg> </cal> </ass> </exp> <if_> if <com> <att> rows . rowcount </att> == integer </com> : <blo> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </if_> <exp> <ass> books = <cal> <att> rows . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> books = books </key> ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Connect the database with $engine$ and set the SQL statement: Query all columns in the tablename table based on $value$. Try to execute the SQL statement, get all the data, and convert each item of the query result into dict and store it into list. If an Exception occurs, use raise to throw an exception based on the error message. Finally, close the database connection and release the resources consumed by the connection. Return the list content.","def select_value ( engine , value ) :
	 connection = engine . connect ( )
	 sql = "" select * from tablename where value = : value "" 
	 try :
	 	 result = connection . execute ( sql , { "" value "" : value } ) . fetchall ( )
	 	 rows = [ dict ( row ) for row in result ]
	 except Exception as error :
	 	 raise error
	 finally :
	 	 connection . close ( )
	 	 engine . dispose ( )
	 return rows","Generate syntax code: Connect the database with $engine$ and set the SQL statement: Query all columns in the tablename table based on $value$. Try to execute the SQL statement, get all the data, and convert each item of the query result into dict and store it into list. If an Exception occurs, use raise to throw an exception based on the error message. Finally, close the database connection and release the resources consumed by the connection. Return the list content.","<mod> <fun> def select_value <par> ( engine , value ) </par> : <blo> <exp> <ass> connection = <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> sql = STR </ass> </exp> <try> try : <blo> <exp> <ass> result = <cal> <att> <cal> <att> connection . execute </att> <arg> ( sql , <dic> { <pai> STR : value </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <ass> rows = <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in result </for> ] </lis> </ass> </exp> </blo> <exc> except <as_> Exception as <as_> error </as_> </as_> : <blo> <rai> raise error </rai> </blo> </exc> <fin> finally : <blo> <exp> <cal> <att> connection . close </att> <arg> ( ) </arg> </cal> </exp> <exp> <cal> <att> engine . dispose </att> <arg> ( ) </arg> </cal> </exp> </blo> </fin> </try> <ret> return rows </ret> </blo> </fun> </mod>"
Generate origin code: Use $conn$ to execute SQL ( query the number of all columns in the collisions table ) and get all the query results. Use for loop to convert each query result into a string and connect it with 'join'. Return the obtained concatenate string.,"def viewdb ( conn ) :
	 rows = conn . execute ( "" select count(*) from collisions "" ) . fetchall ( )
	 return "" "" . join ( str ( row ) for row in rows )",Generate syntax code: Use $conn$ to execute SQL ( query the number of all columns in the collisions table ) and get all the query results. Use for loop to convert each query result into a string and connect it with 'join'. Return the obtained concatenate string.,<mod> <fun> def viewdb <par> ( conn ) </par> : <blo> <exp> <ass> rows = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> STR . join </att> <gen> ( <cal> str <arg> ( row ) </arg> </cal> <for> for row in rows </for> ) </gen> </cal> </ret> </blo> </fun> </mod>
Generate origin code: Execute the SQL statement ( query all columns in the stock where id is $id$ ) using $conn$ and get all the data. Use the for loop to print the 0th element of each item in the query result.,"def select_stock ( conn , id ) :
	 sql = "" select * from stock where id = : id "" 
	 results = conn . execute ( sql , { "" id "" : id } ) . fetchall ( )
	 for x in results :
	 	 print ( x [ 0 ] )
	 return results",Generate syntax code: Execute the SQL statement ( query all columns in the stock where id is $id$ ) using $conn$ and get all the data. Use the for loop to print the 0th element of each item in the query result.,"<mod> <fun> def select_stock <par> ( conn , id ) </par> : <blo> <exp> <ass> sql = STR </ass> </exp> <exp> <ass> results = <cal> <att> <cal> <att> conn . execute </att> <arg> ( sql , <dic> { <pai> STR : id </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <for> for x in results : <blo> <exp> <cal> print <arg> ( <sub> x [ integer ] </sub> ) </arg> </cal> </exp> </blo> </for> <ret> return results </ret> </blo> </fun> </mod>"
"Generate origin code: Get information through search_string in request. If the data is obtained, use $conn$ to execute SQL: To get all the title data in the books_table based on $author$. Print the query results and return.","from flask import request
def search ( conn , author ) :
	 search_string = request . form . get ( "" search_string "" )
	 if search_string :
	 	 books = conn . execute ( "" select title from books_table where author = : author "" , { "" author "" : author } ) . fetchall ( )
	 	 print ( books )
	 	 return books","Generate syntax code: Get information through search_string in request. If the data is obtained, use $conn$ to execute SQL: To get all the title data in the books_table based on $author$. Print the query results and return.","<mod> <imp> from <dot> flask </dot> import <dot> request </dot> </imp> <fun> def search <par> ( conn , author ) </par> : <blo> <exp> <ass> search_string = <cal> <att> <att> request . form </att> . get </att> <arg> ( STR ) </arg> </cal> </ass> </exp> <if_> if search_string : <blo> <exp> <ass> books = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : author </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <exp> <cal> print <arg> ( books ) </arg> </cal> </exp> <ret> return books </ret> </blo> </if_> </blo> </fun> </mod>"
"Generate origin code: Set the SQL to query all user_id in $ic_user_session$ where session_hash is $session_hash$ ) , execute the SQL with $conn$ and return the acquired data.","def query_page ( conn , session_hash ) :
	 s = "" select user_id from ic_user_session where session_hash= "" + session_hash
	 res = conn . execute ( s ) . fetchall ( )
	 return res","Generate syntax code: Set the SQL to query all user_id in $ic_user_session$ where session_hash is $session_hash$ ) , execute the SQL with $conn$ and return the acquired data.","<mod> <fun> def query_page <par> ( conn , session_hash ) </par> : <blo> <exp> <ass> s = <bin> STR + session_hash </bin> </ass> </exp> <exp> <ass> res = <cal> <att> <cal> <att> conn . execute </att> <arg> ( s ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return res </ret> </blo> </fun> </mod>"
"Generate origin code: Use the $conn$ connection to execute SQL ( query all columns in the pay_newitem table through $barcode$ ) and get all the data, use """" to connect the query results and return.","def message_processor ( conn , barcode ) :
	 result = conn . execute ( "" select * from pay_newitem where barcode = : barcode "" , { "" barcode "" : barcode } ) . fetchall ( )
	 return "" "" . join ( result )","Generate syntax code: Use the $conn$ connection to execute SQL ( query all columns in the pay_newitem table through $barcode$ ) and get all the data, use """" to connect the query results and return.","<mod> <fun> def message_processor <par> ( conn , barcode ) </par> : <blo> <exp> <ass> result = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : barcode </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> <att> STR . join </att> <arg> ( result ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: If the request method of quest is POST, use $conn$ to execute SQL ( query all columns in the register_users table when id equals $newID$ ) and get all the data, return to the rendered ""register.html"" page, and pass the query result to the users parameter. Otherwise, return the rendered ""register.html"".","from flask import request , render_template
def register ( conn , newID ) :
	 if request . method == "" POST "" :
	 	 user = conn . execute ( "" select * from register_users where id = : id "" , { "" id "" : newID } ) . fetchall ( )
	 	 return render_template ( "" register.html "" , users = user )
	 return render_template ( "" register.html "" )","Generate syntax code: If the request method of quest is POST, use $conn$ to execute SQL ( query all columns in the register_users table when id equals $newID$ ) and get all the data, return to the rendered ""register.html"" page, and pass the query result to the users parameter. Otherwise, return the rendered ""register.html"".","<mod> <imp> from <dot> flask </dot> import <dot> request </dot> , <dot> render_template </dot> </imp> <fun> def register <par> ( conn , newID ) </par> : <blo> <if_> if <com> <att> request . method </att> == STR </com> : <blo> <exp> <ass> user = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : newID </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <cal> render_template <arg> ( STR , <key> users = user </key> ) </arg> </cal> </ret> </blo> </if_> <ret> return <cal> render_template <arg> ( STR ) </arg> </cal> </ret> </blo> </fun> </mod>"
"Generate origin code: Use the with statement to connect to the database with where engine is $engine$. Execute the SQL statement ( query for all the columns in the Drinkers where name is $name$ and city is $city$ ) to get all the data, convert each query result item to dict, store it as a list, and return.","def get_drinkers ( engine , name , city ) :
	 with engine . connect ( ) as conn :
	 	 Drink_data = conn . execute ( "" select * from Drinkers where name = : name and city = : city "" , { "" name "" : name , "" city "" : city } ) . fetchall ( )
	 	 return [ dict ( row ) for row in Drink_data ]","Generate syntax code: Use the with statement to connect to the database with where engine is $engine$. Execute the SQL statement ( query for all the columns in the Drinkers where name is $name$ and city is $city$ ) to get all the data, convert each query result item to dict, store it as a list, and return.","<mod> <fun> def get_drinkers <par> ( engine , name , city ) </par> : <blo> <wit> with <wit> <wit> <as_> <cal> <att> engine . connect </att> <arg> ( ) </arg> </cal> as <as_> conn </as_> </as_> </wit> </wit> : <blo> <exp> <ass> Drink_data = <cal> <att> <cal> <att> conn . execute </att> <arg> ( STR , <dic> { <pai> STR : name </pai> , <pai> STR : city </pai> } </dic> ) </arg> </cal> . fetchall </att> <arg> ( ) </arg> </cal> </ass> </exp> <ret> return <lis> [ <cal> dict <arg> ( row ) </arg> </cal> <for> for row in Drink_data </for> ] </lis> </ret> </blo> </wit> </blo> </fun> </mod>"
